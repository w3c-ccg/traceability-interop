{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c6e8f905-2500-425f-8bbe-81fd6a5a9f45",
        "name": "Clear Cache",
        "item": [
          {
            "id": "dc9d91a1-8bf0-4849-a9fb-46fa1878207e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8cb89ac2-bc6d-4373-911d-12dadf6d3fcc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f164a2a6-3c2b-43a6-a49c-1dd669ce0e73"
                }
              }
            ]
          },
          {
            "id": "09389757-43c0-4e37-8e58-80a4bf918238",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0d540362-c343-413c-b16a-0a94f601651b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bde86008-2e51-44cf-9020-4d6323319bac"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "946de7dd-c2eb-463a-a4d0-2b91ddbf930d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d48f97f1-4cc8-4509-8182-af93ea3e64bd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c26c9eea-8286-4bdd-b00b-92a22a993347",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "979fc983-470e-427e-b77c-523568ae61a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3cd35239-2fc8-4182-9fc3-707d0f50b1b6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e666b270-2f23-4696-8bb6-c8e172f34bb8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "197d776b-d094-4351-b843-a23f804f7b74"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c8b201fb-e098-45bc-92b3-2f241cfd993a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "16b08b9b-6ad6-45d8-b53a-7a43572f8082"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e13d74fc-4a5c-4ada-86b6-540a24ba279d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d0fdc8d6-6b20-4ad6-ac10-7826f807e4cc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "58a3ea54-7c68-497e-8e87-391c5f7caffc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b9e2818-144e-44c0-81b8-e8e2e9d9dfc3"
            }
          }
        ]
      },
      {
        "id": "be70f859-b604-4646-b887-d2ce53161f2c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ac0f7852-2c73-4dde-b53e-0930a96468f6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "91a91da6-79a6-4c52-aabe-27dee45b7979",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3caf1c3c-c593-44e6-bb65-3631096a7506",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89eda317-df98-4147-a110-91b216de2567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "808f5c12-31a5-414e-9f93-f68cfeed1e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a54b14d-eafb-4905-ae09-5692bc005e49",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4add7b-2b5a-4776-b129-e474d24922a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e458481-59ed-46a6-8bed-900cdce341ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d76f16f-0b25-4b9b-ae58-389b78d5c0fa",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f0d51c5-5e44-48f1-9b44-7d220acebf67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b85ef426-d04e-4a73-a76f-266f31b09ff0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "52234f33-ded1-40a2-bd0d-717db4a87c50",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b901548f-a878-465c-8f3f-152382e4102c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ecc69a-ad6f-48c8-bacd-9cf37671e233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6ddcecd-ad68-4f8a-a057-2b77188e2066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a2ab13-9e1d-43e4-ba5a-72fd60c36e00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b52e4d1-e621-4863-864d-c73c3069b8c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a8e721-4c29-4d09-8d46-d6ba8321d8cc",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca5ab26-eda7-4da4-891d-608f65c1ae83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f52fa141-2841-49a5-bf62-228a6602e092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9924e47-1f20-44de-9880-e1430ab95a18",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "9907b01c-94cc-4d7e-804d-19a279584469"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7d27d5ca-f6d6-4539-8a66-b09bbfd1ecfd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b82afdeb-a5f6-4870-8a5b-5a2e06459cd9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "135be399-0f93-400d-8bdf-c0fe2734daae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "88e16085-fc6f-43cb-a182-f9fbb91d840f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6bee4f07-7f3e-483b-8291-234d056cf96d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "6295583a-9253-4339-9d61-c53a2968037c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bbe09931-47d8-4452-835e-fbe5f334e9ef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8f9e2024-e2fe-49d6-9d75-034b29808d55"
            }
          }
        ]
      },
      {
        "id": "bc5489b5-b06b-4822-bd24-ff696f619ab9",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "80eeb74f-1f6b-4868-8211-d427e5238d60",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a615ba4f-4d7a-489e-a1bb-80f5da27f07b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6cf9e9a2-0ef4-49b5-8fe6-8b106d22af68",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5407ec2-76f7-4128-894e-d8f88bac4129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d62eeebb-62d8-4634-98bf-e5b46e1f4351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84d1d0c2-3a4a-46d1-9bfe-5abf6312c766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f11f638-215a-4741-8b5c-f5f43cbc5b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d76a7e0-8ff0-4e24-a1fa-985ac87f1ac4",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "128d024b-5118-4a79-9e4a-9dc1db7f8f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e4210b2-7436-4c70-b543-f862c8b9dc18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6423e3c4-4013-45a1-b1f3-9aa5ebf23146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c253661-e991-4d5d-b303-fba04d416d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9de6999-17dc-4b59-b794-f989e645d2a8",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd59a34b-e7c4-4db8-96ea-e8b5bc71989e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7288b2f-5c8f-47e3-aaba-08915b8a17bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf17a682-4632-4a6d-b2d3-9b65cf3dd76f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f80c40bd-095f-4615-8070-b28407382dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd56731-66e1-46a5-b554-a9f21d94e1bc",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "588f5ed9-b07e-4956-98cf-f2d426f4b3a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14f64eac-0c78-4efa-b2a1-2fb4dbbdb7cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b09e85e-bbff-4746-bd53-4375804fe530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a103a24b-4f41-4d9d-82cb-1d96fcf8e95f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc4daa7-0251-434a-bb8b-1e777928ab35",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c8bbc0c-95b9-4aa2-9512-e2aa1aed494c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d1fd5ce-91bf-41c3-946e-497cd6c576b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca65a4bc-7d07-4d60-ba75-ae3ec55002b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fb70f48-6c8e-4dba-9463-22a32cc838cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f57888-e3fb-47e3-8b8a-b698e9b663c9",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b514f64-1a9f-4e37-b9ee-ee9d03205cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63439ceb-3eeb-48d5-85a0-aaa928b12f14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faab584a-1c5f-4f51-931e-12640e314703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "725fd01d-da92-4d99-9f0f-72c11f21fc77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ebdd748-1fea-4d5a-997a-a26dbc9ba613",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0d0a2b-cc22-4db7-9833-4ef98a8af43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8e4b1cc-2e41-4633-9eef-c39405933464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d47dd50c-3e82-43c7-9936-f490b228a2ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88364ecb-ef82-4fcc-8be6-0469fe65d5f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d337883-4cb8-494f-99fc-3b70344bb32e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df9611f-9d13-4f42-926c-f44f23c0dd69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d142922-ddeb-45de-b8e9-fda06062755f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f356b7-4d72-4f98-9f0d-bcf7c26bf38c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c767b5ff-99cd-4f96-903c-35e8fe9abaa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca53a74-ea02-4c3d-ab35-45240c9381ec",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80805f0f-5bf0-4b15-b457-5aff6611ecba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17226c8c-3bfc-45db-a79e-85cd027db43d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6bb796e-dc9f-4935-8313-aa2932ca0496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a1efa6a-24ee-4c68-96c6-e9001aab4b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dce66cf8-3901-48ff-8c4e-0049aa029f1f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ebbe64a-88da-4a2c-abdb-a1e85cb1b2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e963910-34d1-4f45-b1e4-fd70355c199c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa15586-35ea-4db5-960f-c2dc099a2e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e034d87-2d45-45c8-a053-12b4eb7c92cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114d4549-dd8b-49a0-a7e5-755452a34630",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87febcbd-d652-4e98-88a4-6bbbb5a71123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cdebd99-aba6-4e3e-af9a-3b9abfb60bd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8db8d8c2-d014-4935-8217-678ffd68856e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b5224ee-6b7a-4ec4-b554-a73fc1934ab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ef0a49-044f-4a70-8aa2-07ee48543dc3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "742de720-b889-44d4-a3d3-75a632ddd0c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e34ccad7-db7e-4ac3-9022-b011f612683f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bafb11c-ed17-4a28-8e00-9543b39aa4b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2113827f-281a-4398-a96f-5187fe6ab03e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d119c5-6859-43af-9d9b-5759ee4049c6",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c9b54a-2173-4e86-9566-ab52109b85e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3629f1b-2b63-4e93-b292-6c02d034c6a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "112c9df3-4584-422e-abde-73370c1012bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d17e528-2039-4539-92aa-058f1606c393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ef85d2-1f2d-45cf-9347-124c362add09",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61beb5f-c78e-4898-aeac-f217dc0ae09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd339efb-4b88-4810-9025-627101b9256a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54083b12-3fe3-4723-9b01-0927adbc19a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "805c9ce7-f3cd-4756-b4f4-e75f60d4034f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ada4963-b07f-4e13-9f4f-450d6b1e97a4",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0216d58-2910-4905-a2de-e5847926d151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f1adc7f-fa01-4c47-a97c-b6c716b1f6cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49756796-1b89-4076-8b0a-fa8908cc994a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3200465-ca19-4571-ac54-abb9f7baeb4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70779a3f-dfd8-4939-b028-25a73e0cce11",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1ffe22-c157-4994-b47b-a0c870e2f5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0adb8a3-cdfe-4504-99d3-7b942ac7b002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c39c896-d6e1-4850-b145-9027f83c9f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b5f852a-88ae-4152-86ce-542a6aa18419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83dfcca-5f78-4e85-be12-009bc3f7e531",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9b997d-1be4-4a4e-af91-c7dbe76b954b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef8e3fb7-3ce4-4ed1-9104-46d780a44083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98254c8d-cbd7-4923-9898-5a10507f404c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ebb2c3f-5e0a-4ec1-ac94-8ca2f19e85b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a22722c-0217-4def-9771-c692eacdf077",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25041748-adcf-4ba5-be61-f3da7622dc26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "878b5cf2-0bbd-4e5b-a879-417e66dc7dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d9bc5e5-68dd-42da-8d88-5b1bb1d3d7a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b43c801-4a17-4a93-8f5c-d9b85aa45f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0a83aa9-f0e0-4e33-9bd6-c174f26fb2cb",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25c769c-2253-41a9-9c0f-ef2a3636bd35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f42ad8b-e200-44e9-a52c-1535f5cdabc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfeff0a0-df40-4f61-8ce2-f17af4e7c4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ce5b683-c410-4b60-8e38-986b0ae80c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4110042-8ab5-4786-b748-3b252aca9359",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10411632-a6a3-420b-87c8-788d801a58ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93d681a7-c189-456c-b31b-0b0bfb645ec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4df100c-faa1-4a76-b639-32b77ce49a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "43b5f1dd-f722-41ae-9514-fd4b4d61e619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9911476d-b5a4-4773-b0d3-9a93aecde854",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5866eaf-2a93-4a78-a791-93ef35ded1f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7af02c2-1c79-41c3-a117-111a783b903d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a1a91d0-4263-444b-99ee-49c2ade3bb96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cde9beca-fa4a-4662-be0c-da71880a5671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba532da9-8d9b-449f-8f8f-0472d371378a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "941e7101-c57c-4782-9556-af52daee0df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7375a7a1-6eb2-4628-9865-ae3d688497d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58d383a-b8d8-425d-9051-74cd2791ac32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af3384af-650b-4e25-9b8e-bb4894e64ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7119aeef-9d35-4161-9645-42ddf5510ba9",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d77684d-664e-42d5-b043-ef5907ae8e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d8dc093-7456-4bb8-a18e-b9ef661b877c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d04294-cf9e-40a6-949b-4e8cc0934454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d078a1f6-0694-4e14-8487-35e461e71cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51110f7-81ca-46f5-b947-284c8d205dec",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d43aa55-1e61-4f11-af89-386c61a4fd07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f6255b6-64de-4bc7-b325-cd502c629a4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d30a2ce-406c-457f-bbc7-69f52f30589d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "883245ac-387b-471c-8585-b9981bc536f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3f3cf4-0b94-480d-b4a2-f847070521a2",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "167fc370-acec-4a34-8fdf-7f18ff2faada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "421c23de-ee1f-4780-a9dc-01186d83e54e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e43ffd-b500-458f-8932-516ad4de463a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dacd654a-77cd-4a98-a55b-5891ac51efa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d84dbdd3-eeb0-469a-9f71-37de39d5cf62",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d02200-801b-4d71-a25b-b80d1459e459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb14281-5a71-4d3f-b989-0110006d143c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aca42dc-2e11-4377-9290-94a53b3c416b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "17104ac0-7742-4c0d-9450-424c85e7d1bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4659a5ca-5384-481d-b326-8a123ab2c462",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "577c5d92-76ab-403c-835e-96fef4b05375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b96acafc-a8be-4c12-85b0-b246f04ecc34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f51b45-352d-4946-8c8a-ad0260ec8d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9780f320-6a64-4574-9bda-00483b98ca1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "631e75ef-b90e-4cf8-a6b6-49be9ac3110a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b53dbfb-54dc-49aa-a2c8-a328c7344552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45e64aee-e8af-44ea-8184-2978578c4765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ca5770-eabc-4ef6-8c93-7576b57fdc4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "435a8490-965b-477f-9215-c9c8f270841c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e2092d-ce5d-4747-8eae-e7e073624971",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2034ed10-7a89-4f3b-aac6-f984748976f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f03bacd-a24c-4dba-a0c8-9a9afc799da0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "870734ef-16e9-4b9f-b507-d6bf56f51d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "87fada95-0eb1-468f-81e4-c42d9eb56f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c04e8fc4-1b31-4390-94be-849f0f43fa60",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96fb9a5-1cd9-4cb8-b940-75069793e2a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee6da902-0d9e-4948-a1bc-ebab8b0e6b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd41eb5-b96f-4e49-add4-dcc4603c22fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "341716c5-9c9b-495b-9eeb-9e29f1e9a689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d10145-4bd0-4874-89d7-12163e13e6ff",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d5ffcc-dcca-4063-bb29-9e6b946cbc0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c37452c-5fab-4aea-ada2-bdcc39b00c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2235d2-ca97-441e-adcf-d59da9c9f3b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc02686e-d817-4d78-a556-b85040d2d229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "036c25d0-9b37-4b76-a7bb-3a2946e05ab4",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d11b59-5349-492b-8523-537ca4a3835e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e29740e5-564d-41b6-80ec-86659203e4ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6755db49-2ccb-44f6-8201-310ace169070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b8f98d7-49ce-46b6-a4af-65f3072d0b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "328c23ba-82fa-47c5-bcc5-5a1d6edb5618",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52572709-21a3-48a8-8a4d-bf17a9b33ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "734a29b7-2129-4b7a-9992-ea07eeb237e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3138492d-a6e9-48fe-9580-d0a6cc49d26e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdaaa704-b364-4290-8c5f-f78d477adf39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8086115f-bb7e-42ef-9cca-8851383dd12b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d484c1ea-45ce-4dba-ae0d-5578398b19d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "802dd113-da62-41f1-b8bd-c5770080b485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d7cbcb-38fb-45cb-a99a-27871894ac53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d89773f6-cc7b-49d5-9bdb-37b74064cc7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00b6354-8dca-44be-8285-72620576434f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d443d99-59d6-46cd-9ea1-a00b18699381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32bd016d-961e-4038-a077-01af40888f01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c1fa5a-4636-495d-bd7f-42bb703d8b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f111cd83-e1c3-4428-aa40-fb285a38de18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c91aa8-9dd1-40ea-bb08-cb677ad889d2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67f5b114-0f5e-4a50-967c-44cdfb9cfc8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1bfe52af-c37b-4314-838c-dfa6ab18b567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07be036c-6539-4316-9ea1-853d92196076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5480e766-1ee4-4575-bac3-04a7eeb76194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a58b4482-97bd-4022-9657-7d31c29929c5",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda5213d-cabf-4ba8-927d-d5864202c752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b926522a-6f79-424c-a819-dec587565186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f5e921-c14e-423c-8315-2c6dc1b35530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd13cd1f-175a-499f-b06f-3e7cbfbe7169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6993162-0184-4e06-a4fd-28d94c13d1dc",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7520fe2f-4820-4eea-b48e-ead72aabcd04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df391f45-6426-4a53-ae56-f171b2bec0a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5b1cdf-c2b5-4cc4-bcb8-048a31fab2a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbfcd8f5-1147-4978-88d4-e307ecd5178f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d564497-f352-4ca9-82a6-2955d7cec873",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb31e483-854a-44e3-a686-747a99346d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0adca249-97a9-4c88-a749-1383424ed459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb10754-3a0a-4605-817d-aafb055f28fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6ea5342-51d8-46e4-83fa-380e7591378a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8abe7524-65d8-46de-a9dc-4395df85d94a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f4cd61-eaf7-4fee-94c5-53ca7931fe24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "926d8f83-92ca-494c-a46f-2e21d05e35f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb012ca6-11a7-4fa3-bad7-1467af20d176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6260cee6-9871-4762-a1c0-ec86cfbb9ba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01f8dde-f640-443d-bc65-0eba56933902",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c774244-5efb-4dbf-bb81-2bf5e177f41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "808bae37-2b12-403d-bc85-89f9edd05d86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82128a09-85a2-43dd-9bc5-9a123a936f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a48f0d0-d9d5-4dd0-bf15-e865fcc5cd81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e90a0447-bf0a-4b36-b267-3f1dc833dec1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fddd49e-aceb-41b8-83f0-4d0e33787519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33e2d20e-e124-4051-981d-9d23e5adda88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad75404b-5053-4d90-a5aa-32c09f6c8748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "807fdd5d-ef76-4167-9171-f451f5d837ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b2bce3-e04d-4bf4-8123-5a63671a9f2b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ddb59a2-0e24-451f-a644-991bfd9b3b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53aa7fa2-8ef6-499f-a3f8-2b170c6635c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ad4fa6-27a3-4376-b2dc-abb52a78edb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "182bc9ba-5025-4af4-8797-76a04432809e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35be38a3-3625-4262-b4e9-ec6b7755c0c7",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d86089bd-ff25-44e0-bb0a-b29ef71ddcd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3f81623-4e9d-4fde-8a5b-2bb9992223b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "512f92c6-c29a-4e78-b914-7ed329343e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "566aeb01-4bf0-4a1e-97c7-d68845245217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3cc7c2-120e-472d-b74f-06c35d5068f1",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "616d305c-309e-4edb-a70e-67239293705c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bc7d202-6931-42e8-aab5-14a6372055cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a1b716-eaa9-4695-b2ef-01028e970acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "824363ce-e1dd-420a-8f83-2100ff91860d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46921085-98c9-441f-817f-b7baa056afbe",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fcf1fb3-898f-4793-a531-b9de3ea46452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7f3e046-3ad3-4a63-8126-1bf63e1abb0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9454e34d-4cec-4618-89a8-9499af006d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "94f9d9a5-d411-44f2-bff6-8606b5ed99ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea6e77b-19f0-4d63-98f8-cbd4d109584c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9936e58a-c9d2-4e12-bd5c-b808a3d2a3a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21ce1fd2-5bf9-4ee3-8a30-335873158aac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e54b3a-3967-4aea-ad95-d437db9c512d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e1e6770-440a-4733-ab2f-1a8d273cec16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad3cc04-fab1-4773-9878-29ee54cbf20d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b83b2a8-0960-484b-af5a-08c2b536be31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f20e1fc-74bd-4469-becb-59bfe7dc3c1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d72bc16-c077-4ada-a838-66fac34f46dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9b96810-119c-4910-b6d2-b39d06c205b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21226784-b267-46c6-b794-ad7a4d739be2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f499e7aa-e8a0-4e08-801f-bc0bab072515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94c1cebb-3612-4c13-9a07-940deb759b3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0241b6-83dd-4ec4-80d2-643fdc7c505b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4e4b95a-f93b-4b2a-8ead-43ad584ccc29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb89417-9372-4c70-9d39-3661358ac176",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b19b910-ec69-439d-891d-c366777d5bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75f48d63-abf1-42ae-b880-8feaff0398ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce6951f-adbc-48df-8d85-cb87eb44d67a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2e516b44-c53b-47cb-8d8e-8cd1291dc26e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "635013df-05ae-4624-a569-2ba48c2443f1",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "910bfbdf-3c3a-4b3c-822a-0271e0ea1a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dad3814e-9dd2-4f92-b19c-fedf41e86267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80df6bd-1676-450e-be4b-c6e2f29278d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fcc7dfa-2bdb-4066-ab20-54e75520450c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb3a7c3-3b26-431e-8846-6d2aecc5e6a3",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0233ecaa-0dd4-48fe-9676-f53c46bb7e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51812a21-18c8-4f16-9180-b3f861ee4f12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73debb02-ee38-47bc-af16-e989cfac4ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3da9ec4a-8bc1-416d-a7e8-ff0901a9db56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4968a98-a792-4d52-99a7-7b9474e8c807",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab5b07c-7819-4304-b205-b7f7f498a058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a992315-17f1-4c0f-aade-a89c6b886aa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce6a3e8d-74e4-496d-8da5-085c31bc46b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f718bd8a-5c96-45d2-891b-1ca651e990ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c47ed8-e7a0-4ae3-a956-f3968fabbae1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3055b5a-12e3-4548-bff1-9ef53046e2ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df20335e-9069-4dcc-ad95-dbcac27b0097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b161e2d-62a0-4a8a-82f5-37cc4e1ce181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb5c1665-e142-4b50-901e-9769777b5c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb64f1b-b0ba-4f30-a60e-419f511778c2",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67b1fa9c-80f1-4712-a890-6ef0cfb759c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61880fce-d65c-464d-80fe-df0cb94f59f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9caec5f8-7c4d-44cc-928c-d53fa602c2ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "71ffb685-0cbb-4299-9bdd-948705d15cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7c4603-7082-4370-be55-88ebb34494f3",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90336cd7-5654-4e84-8812-9d0950069d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feaec9ea-185f-4b38-a661-3c7d48e6295c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761e513d-b44b-41c5-ad87-dfa038cc34e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "58f9d27a-1e76-4339-8c99-75ac507ed8a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e3add53-3852-4b6d-9c5d-7fa40143c916",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d79a9b-8a7f-46cf-b78f-8ebca352c8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31d58387-a9a5-4782-b1a3-8af86852913a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3775112-eb76-4e98-973e-c2aa0de98a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6620686b-05ef-44ce-840a-3797b8b4ed89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17fd28e8-dbe5-4fdd-a9fc-c78e186934a6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d418879b-1361-488a-8157-167901300dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78f8eae3-a4a9-4258-bc47-951e72f14a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a229dab3-d3ae-4ba5-adf3-15a63bf9f4fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f721e22-dd18-494e-b321-f84558135e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b930f0-eb66-4960-b44d-3845a3689e50",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a11b246-f293-4db1-9677-9163994ac048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97e7d468-2252-4eb0-b51e-cdd08dc51413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279240bf-e9ef-4f77-8d05-6f4fa67dca8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d085f4a9-e71d-4ac5-a899-a4f679f237c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "586c931a-a10e-49d6-b3bd-d04dd3dcb049",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d3acfcf-00bf-4961-a8bd-776e1f1192bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41614c24-5cb1-430f-a713-43f2b44a4569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a873ec5-eb97-4d1e-ab59-c4141ad31ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8eabc2b-05e1-4f70-8904-a14e7a1d0693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c10e7b56-0b23-40cf-912c-a607f1669a3c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94cbc7a-af72-443e-a2c1-cc98a21cd017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64aac0cd-5385-4d91-a994-9309484c39be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61d6ff5-129a-43f4-9d65-035e8a1cd4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c58043f2-2f73-4966-b83b-4bc1ca6d85d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a7d75f-c5cb-4ab7-9f53-29077a4a2665",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d8f454-b413-43ca-963c-d4dbafa49fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "791e38fc-1b13-4bb2-b7cb-58ff25f98a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6803dcc4-a489-401f-8a6c-31cc69650736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f644d30-6b41-4a27-af8d-33b88c57da06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da02f5e-8658-4b9b-8326-f45bd5fac93b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b021a7c-f0b8-4d9a-bae5-afdf8c6c3ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6ec7223-0412-4d88-b2e0-d769ad21c50a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b93b00bb-164b-49fa-9b74-acf88e114e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a89438e-e9b9-44d8-9e8f-fd2a54b983dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d14c6d-37b3-4300-8c6f-516daace49b3",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "218edfc9-3ecb-4322-b971-635983b78efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea7af5a-24b4-449b-ab90-aeb627a70141"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3c706a-dea6-4bc2-99a3-df9e00b80b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "10f3b749-c30b-494a-83e1-ddc4b140ea25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a26f96-ee82-4b0f-9af8-45bd309a993e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "938ede54-25d6-4f79-9ca1-08a8cf792465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f558ce06-7662-4ed1-b12f-5ee9aee58c04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54488e0e-01d0-40d0-b9e5-26980b390346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "00a1644c-c5a4-4c2a-b437-2df416bcf964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0eeb015-c0f6-4e5b-8a61-e926996eb7c3",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08df5b6b-a692-4779-909a-97e18e693c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "695bb080-e3c6-4b61-808a-a22e5d57d52b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da483b9-0cfd-4a70-9751-17dd0658d859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "502518f2-4ffe-474c-8bae-7e7d2ae75357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "829acd27-a463-4f36-9f45-d81deeb72e9d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b569f0c8-f6fc-4e1e-9d31-eac17580560c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95273471-d464-4e3e-9a21-3fb651ec143d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13bb0d98-1194-4511-a335-f9a36ae40f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ee63a33a-7f8d-434b-bbe4-83894b9c8ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3144dd-9f0b-4cb4-9ecd-f5154299a92a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cfc4591-6b23-491e-9249-e1c1a09ac678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3fae4c9-3ba0-4060-85af-29cae1a3f013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68ef6ff-dd1d-4d82-82ed-69def32b8efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "46816456-78ca-488d-a521-a068d8917193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aefef3a1-bf48-499f-bd80-c6661f7f5e61",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7116f0-38a0-41de-b301-b12933f0d834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7158326-385c-4a57-91ac-0aba189daab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c2365f-d201-4c05-b724-d2296ece593b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e33b6bdc-4400-4818-b8a2-b7c4d69d2a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "873df0b5-c57b-443a-b78d-20531bb6e07e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "136f70f5-dfe2-4541-b4d4-1d9175d0f11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c45c2478-8e57-49a0-a98f-87376840783f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f623f9-a6e1-45a5-80f3-15b3e923125f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2648cb1-b4ea-4970-950c-d51d54199a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a8ed79-3e34-4df9-ac28-b8dbefb129ab",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "249c6852-be47-4113-a2c6-82d158d8baab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c039e12-22c4-4705-a4b0-9fb2152f36fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e6b16c-9e9f-4017-bb13-7eb7d9f4da1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd1762d9-b37d-4582-bc46-3b8869c33af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb89b141-aba9-4601-85af-93f056857c49",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9d6136-edf9-4821-b370-75d2c097c4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a97a596f-66d5-44f6-9f0d-56e68e16189f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c52dfe6-2c38-4c35-95aa-305a4e219617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "90f3aa92-1458-4048-912d-0abbf2713436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c7eca1-9d0d-4ed4-8391-2ae3b36b3b92",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d32336-8bc2-4518-9f7e-27e1e0a2e26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc2288c8-01c0-462f-be7e-6d9a80baabf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa0e876-13a3-45aa-bbbc-934abf278bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c89d4595-817d-41cc-bc8d-03f632edc1c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6258777f-a422-4236-976d-373912595118",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04564f61-f601-4c00-9d49-51b22c1fc02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "054be8f5-e4f5-4752-97cd-47fc4e6c4bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b720879a-4a3f-4b7b-9ebf-ddd144152982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aa4a64c6-d78d-413a-9ecf-7fa5723a5e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c86f6a6-95fe-48f8-9a85-ae397dbcedd1",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd31a79b-87e2-4428-9435-b828bca25a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "165df1ec-8362-42a9-9510-7f57b1b63f58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "391ecd3e-764a-4b8f-8199-07afae90a0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dc27f2a-3de7-40ef-9851-b2da0cae99f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a87139b-5a8e-4063-8f75-76797fcdb6d1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "799ed767-216e-4185-a194-82772ebd8efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f81d8670-e55d-4147-a23c-4ae7f5bbeb47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c072b7be-349d-428a-b679-fdfc97e01c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "977ae828-e475-4532-a73f-88dc1bea0dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b5da8d-b9d7-44fb-aded-20c4a69e418b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d2d379-032c-4a37-b39f-0ae27e0d279d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66177838-9f7c-40b5-b585-cc53f9650d96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc58b44-4314-4345-bbc1-ddcfb538aa79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "159045cd-de4d-4de4-aa16-a3f469320b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10045833-91c7-4ff4-9a29-281b6dd5a57a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d4a779-8ab7-47e7-9799-64e14203f7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b3d4505-e817-47ca-b8ec-8686aa8a4aad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75e74cb-7383-4023-942b-beca39070262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc67875a-c06d-40fc-9807-ce3809b069f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcab0cf-cd4a-4302-9151-438210d559c2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36325d73-ea75-4203-b4d6-70959a798713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f934cd9-eae7-43ad-ae54-fa2dc1a370db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ee5725-59b9-41d4-9bcb-082f5285c078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5235dcb2-57a0-4294-98f0-aef9a4e3aa5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b40e3c44-ec25-4f7e-a49e-22ecb3eb7d1f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44aecb6-29c1-4ad9-801e-fbcc986de9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5c22e93-3c7c-4036-8f8f-d92cbb1253a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf44fcc-6747-4df2-b6f2-c18bbddc2548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0a5edc89-73a4-4b0a-910d-937d60a3afcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e70894d-61a7-43f5-b165-fccb80a9a9b8",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ce1774-87c3-4d2b-8525-f6e679ae1b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2293a205-835e-4dcd-9293-4ef3e8f49a6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59d2459-2e31-407a-8373-b939ebed3e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "565155d5-b5b6-4f21-8406-42bc48af79b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eebdf19-9ab7-4bbb-9f8f-c3a11cf14acb",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb72ebb-8a37-414d-b127-180dafd24f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bed32377-c1ff-4024-9811-9da3a711560b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16236bed-c6c2-4abe-b02e-8e493387782c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ecdbd6a-b4d5-48c3-a2d3-12d4bdcd3246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcf5af2d-1182-4d2a-9023-6fa45a12d34f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd63d64-2de1-42da-abb2-3a49511a1c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92a3a683-165b-41a8-a5ad-d2f74032b8d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da438aca-e9e5-41f3-87e8-a8161048b38f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9335ff6-634c-4aed-a741-f2d2aa7c476f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4760542-2e1c-4199-afd5-469eb61796a2",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec913502-ba69-4f09-8dd0-e657a8d72473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7931e2a6-0539-4a24-8032-84c1ccf0bf47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56805ad8-bd60-45f8-ba0f-b4f45e388093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b309eab9-6cf3-4eab-a04b-48e716b75dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a557efed-7b11-4569-bad2-95f6ffcad204",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9c1e47-247f-457b-b115-573381bf15e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dca703c-07d7-47f3-b6fd-901b6c447169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5b1fd9-2a2c-4ad8-af38-1993e4b982c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f2504da6-048d-489f-8a96-f8a4c108f79c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4abd251-1276-4afa-a8f8-0d6bf66617c1",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea55fe7-5a7c-4318-b9f9-e91f4c9ee765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8a9d858-9be6-4558-825e-b5f92e49ad14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d011af4b-e704-4faa-9943-dd76589c2f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c346111-50ce-4849-8287-ee0099dfb90e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc4ef166-3f83-4f6b-b75d-091ca9a1de48",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e017032-a2d4-475f-af97-1090194a45c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7963c04-f666-44d4-a1fb-5a445633c15d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40eccc50-46af-47db-9f62-1738b94416f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6438079-23b2-42b5-88ef-e3d2682da205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f3b4236-4792-44aa-a849-4ff95d2256d9",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94461b34-28a2-46d5-893b-7c2a649a8aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdabaada-d330-43af-af4c-19f2f644f005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3baa7da5-bd04-4c9b-a706-90ec5c5ec0d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b743483-5684-4bf3-af31-a93fd8259746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a422588e-be17-487a-93db-508fd0872bf7",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e639d6-d1db-4a6f-a0c6-f9794050613c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30c8a066-3bf2-48a7-9383-2dd1977001e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "098ed1d9-84a4-412a-85af-9b655ae0abd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9135272-8592-41d3-9716-2789a97e82c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a29dbb8a-a78d-431b-bd2a-31041daafed6",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bcc5de7-da13-484d-9fd7-d010efd2782b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03947aff-c8ef-487d-a2ff-414d48315054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b81e5bf-3f99-4498-9c5f-5cfc58f00feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "929ecbe2-2e13-4017-be35-7900570f0fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2670c2c6-e76f-4d70-aae7-b61eefeb629a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19882b89-f5dd-4203-8b82-28afd4eff1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3be0ac9b-e520-48b0-866f-dbb966567172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd068fa-4074-4ed7-8fc3-9a8207f5f961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec47d4ed-1a50-47f9-a6bb-9859eb8bd290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59e5788-4e03-4a85-92c9-dcde45a7d87e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "355a8f2e-e772-4115-8a7c-4a98560cb450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e2c46129-c87e-4bab-84ec-a6dbe4d3c71b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7567a557-83cb-4304-92f2-3dea6d9a3471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc8d8709-f734-490f-8ad5-42407aed52f3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8935364e-eb74-4408-bfce-8db8874c47ff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aef6f6ba-ead3-478d-bbc0-5496b7f2ae6a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbf00071-8241-474a-8eec-36f7a3a9d4f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60dd8dd4-f9a1-4444-a5dc-1b0d39713e30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc3b9d3-7af2-470d-aa8b-48b0e5e7e054",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "120d60e3-4491-44ca-881d-db83609ed18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab19e7e0-6d71-4713-bf6c-bea3d5493d07",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b307388-ba59-4925-b5d4-c925ccccd7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "57c5fb67-1817-4c33-8f56-a46a39b7efc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c644390-cdba-4f94-b92f-a9bfab4d5f8d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1d9f8a7-ba68-4f13-84b5-e415574ba379"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "711ffd3b-79a7-4e1f-80f0-4e6f12d41945",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f598dfe6-9316-405d-baad-d24be28db4d8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "de7c20aa-0732-4b17-8704-e99ddd27f39d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a68921a-cbd0-4848-ad16-e169fd40682d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a046cdd1-f98c-4693-a462-32928b0e3e2d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "812b6e8d-75b6-49b8-b29e-90c3b5e26883"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "00484633-1d68-4681-b12a-c82592945150",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f5328de0-fe61-4eca-8cae-96771fc713bc"
                }
              }
            ]
          },
          {
            "id": "151c66c1-80c4-4570-89ed-58a0782da51c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7906016f-3f04-44e0-89ed-021b86227d9a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "111cd33d-5536-4d1e-a4da-c1ab862b173c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "139b0bae-efaa-4c0d-9aba-0c956451e76f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f25c4f7-23f1-4771-907b-673549bc14c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "84192f35-ed26-4764-aed0-8e5497334c46"
                    }
                  }
                ]
              },
              {
                "id": "41212d7c-0c4b-4afb-b137-5afbbb0cebfb",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6586044d-56aa-41c0-9a3f-ad5783f2e055",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bba8b97a-244e-4ff9-995c-9de995ca6e70"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e746635a-297e-4e0d-b6a0-5d6f9cf07925",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7e1e8c51-264f-4300-9a59-eeffc34eef40"
                    }
                  }
                ]
              },
              {
                "id": "245ff8a5-cdee-4375-b5bc-8c283b4a45cc",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40b1fdc7-3f48-4ddd-93a1-526df8a7c9f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "729decca-8f52-4ca5-b91d-15370f72854c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f4ae62b-d5ae-463b-88bf-45d066296357",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e808f004-db41-45ea-9041-d3faf5521f5e"
                    }
                  }
                ]
              },
              {
                "id": "9adf61e3-6661-466b-99eb-ec61cc1d9a04",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "237cf3f0-3cec-417f-8fa5-a6774ef39f32",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c9cbe27c-2cd9-4413-9e1e-dbdab8d12a2f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b2d6321-7268-45d5-8cab-4b2fc13301dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "50fb982e-aadb-4f92-8b1a-f214b16e9b6f"
                    }
                  }
                ]
              },
              {
                "id": "46bedb3d-2097-42a8-a43b-c6bc30b0b0e9",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1bbf3d25-ba41-4ce0-9c9c-0369b78ee616",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "242d1227-113e-43db-a3cd-25db1d1fa6e8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3652fc68-3035-4801-9325-7d512b7efc8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ab35f46d-6bb2-4d65-b6a8-59468b038732"
                    }
                  }
                ]
              },
              {
                "id": "e0f98755-7d67-4ab6-b930-b59fb8637675",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ffc180f-57c7-4e8e-b5e7-622c56c4dcb0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cdf98cf4-6d04-4c64-a082-b24509d2b112"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ec13a1b-c1ae-4589-b2f5-cab009dc637b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8c567063-d129-42dd-b7f9-479691489ea2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "814e4f68-dc47-4a88-945d-ab5c502529c6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0d6b72c2-add4-44fd-a54f-25daec04474e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5d217aaa-5e69-46b5-89cc-987cbb43acab",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5012e6d6-bc7d-4847-9123-d4a1f35141c7"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bad10aba-0f52-4833-9a06-b0238344d0bb",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "dc675824-2d2d-4cff-bd31-665ca7a628d6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e6bd0b87-f609-447c-9f07-29c82edc5387",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a6a431d1-f9c9-4331-8c79-3a76201c8ad4"
            }
          }
        ]
      },
      {
        "id": "568c1603-ee11-46b5-ad74-7d762b89fbd6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "99fe6d4c-3882-4b66-bd14-74a105b73ab9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0060f576-8754-4ec0-8494-e9d3a76ef05b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9ef80215-c6d7-4bda-a393-060867d7d45b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cbb0851-fbe1-4b10-a7f3-6a07084f5488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "874c9e7d-1097-4e53-bb5a-21a9c2908d50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5252ddcb-ead8-4a78-a128-1559722972ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ac76e10-eb1e-4244-816e-6451d383eb35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa13da8-841c-4b1d-a065-10759e747fd7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db4e548e-fd05-4765-ade4-05b5c9d6be12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5471b72a-e5d2-4f2e-83ca-1b0ecddc6aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42a0c6fd-992e-4378-855d-51b216b7f80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c407ec70-bc89-49c6-a165-f73c9f9d8543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc59047c-2f44-4c5c-b742-93b111528ab8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5559fc45-1115-4e3e-9cb8-36b8049d7308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b0f888b-08d1-4a98-a8f4-3d67a70e8673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1babeffb-2b1b-46ab-b339-eb2b24750683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4654126b-d995-413c-a222-121531c26d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a747648d-c3db-4fa7-8e3d-ddff4ad3eba5",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "674e32f0-ecc7-4904-8289-29ea0f5b1e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3568838f-9a6f-4c05-961b-d094d7ef7bc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676405a0-f055-4aa8-9b8f-8b13b8770c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5ecdb53-743e-4d40-840a-7cd8f8198a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a543d8e7-42db-4e3b-b3f5-be836e9ef6ed",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f061a70e-d310-4e2d-baaf-3e9f4a5141c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e58894cf-842c-42cb-953c-78bcf857df89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d139a62c-1e86-49fb-81a8-7f565124a16e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "41661d06-30e2-4ff7-a0e3-c22285936bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b68568f-60fc-489a-8591-6d0de6443841",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "062e344b-c9e5-4115-852f-2ac0e9baaa8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b92c5ae-f11e-46d1-88d6-0bf02146031c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f3c681a-16f4-44bd-981a-d4f803ddec73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd2441ce-38ac-41e1-8270-05ec4d0d8c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a3bf32-223e-41c9-809f-ace5658d8c9e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cbbf9d2-a807-442d-8e52-6396731440bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b29be8c-2a62-4c6a-8efc-4d41d64c1d59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0053ab9d-42ec-4fd8-9617-480170b8b618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c220d242-3349-4fd0-842e-67719bf3dd1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6389364d-9a67-425a-a1e3-f7c2181814b2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ae2c34-36d6-4bac-bc59-d643ef4c1c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9011ee29-7e89-430d-ba8d-f899fe38478d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa11bb5-f305-4356-8384-c809f90ef720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cec7c2a2-7daf-4fbf-bd9a-f11b1d7ccd83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b536b6ec-bfff-4f34-8409-a96ad876ac50",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68b2494c-a935-4070-808f-169a0673c21f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01b3b31c-7396-4df7-8bc9-5c32534461ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b2a2e2-c134-41e8-82a1-288089b7ffa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c87ea2eb-aa71-43a9-993e-ad8bfe3adf68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a8a870e-284f-4c47-b8d5-d075bcef0ba4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a92dcbc-dfcb-486e-b800-905678af3ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ef58c43-30b6-43d3-bd0a-d087ae83a4e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c967353b-dbed-41b0-a0da-2f8a1f3f807f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c04d927-3385-49ff-8f61-a5b9ab979ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3af4b9-3545-4165-9683-bf44da3498bb",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ada987-fbea-4e60-ae31-27949dbaeb62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53ed3a00-7a24-46ea-9138-471bc655f579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf24bbb-e76a-4b2c-95ba-2bda1bd85e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "58fddb36-974f-40ca-a4bc-2c68cdb33eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc3b792-1b71-4fed-801b-253c85816a8a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "595211e8-ca89-4d7d-a2e1-b8863bf01801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6462e583-c7ce-4b23-aaf2-38eeae7b3e7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3755914b-bbee-4f31-a72f-20fc16a1474c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0639c5ba-65d7-445f-8f75-f6f6369f16b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2c560e-9b0c-43ff-8541-7cf77e6ecdc6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f17d20a2-98e9-445c-9757-8bd9fe449caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ab151d6-6aae-41b2-adfa-52e64a542632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23479760-585c-4703-888c-4b4bd6958c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b6d0d20-4d76-44df-a6b4-1c6b4f67453c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca92411-810d-4cf3-82a2-1cb0b3a07d09",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0fc283c-42cb-4e5a-9d90-910d6b786cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adcb48d6-e32f-4e94-9332-cc0007e62825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aff47f7-21c7-4eb9-bdf0-12e16dcfd7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa0724f2-e96a-4107-87fa-9228f479861e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e240a10-a7f8-43d8-9ac7-477624d48cd6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a6cc3e-b1a9-47f5-b30f-e70cc1e36b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bded8e05-ae50-4f4f-a703-33ed01941857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7db5089-9afc-447b-bc81-358853f1730f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6da059fe-3c33-4014-a8be-48492b0cb679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d874d6b9-8d5e-41f1-81a6-2c4f2066b7e6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f27b764b-a104-44dd-922d-bbd2d72a3307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cf3b735-5fda-4209-9588-6540b9e35d46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1658c3f9-822d-41b7-b8ac-97aa586bc407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a840f66-6def-418c-8120-428367f6bbd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68f70f9-74f0-4500-b98f-c63ecd346504",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56bf5488-7faa-4610-9496-2864f552372a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32f9c0fd-c264-4492-acc8-9c9e910e5633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41cedf9-a598-455c-818e-e2f96d6f5553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6804a2c7-862f-402e-b3d0-8d2b8b33375a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69a5915-d07f-42d7-ba8a-1aa1e998ed0f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f89f98f-4b3a-4503-b2b3-6841b322d172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6561f323-0868-4f07-94d7-3196ad4a5d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c151ea88-7f14-4bb4-83dc-e490835f07e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf74c524-fe6b-4b8a-b20e-f0de2a9288cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77dd6b7-24be-4886-9ef7-60ec6d6e43ed",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d91bd0d-9199-42e5-a6b9-2639f04e2dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "993f56fd-6b97-4826-9ce5-55d72b42f8fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8935fb04-3433-46cb-9445-5b44fd9df156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d3d5697-26f7-4c0b-a9b0-423e561799a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd56540f-d5c7-442c-b738-a5a9bf3ae2cf",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a381b9d-f88a-48f2-bd26-42728af3d1da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c538e94-e85d-48c9-8987-69d87f4f2d84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c52a14-9aeb-403c-b66e-604359a7df20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18e075d5-72f6-478e-be94-8c29707ce4e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42de8b7d-7f69-4e01-86cf-cbc20ef61bef",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b937425-810c-468a-8ea6-ae7a42c1136b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "667e63c6-9857-49f5-9f4e-5b01e51cfa1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d2142d-0fca-41fd-9614-322201c5743d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f7acb30-a22e-4923-8175-8ae84bf15156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "557cfac5-dbda-4c98-b66b-bce1e7b77d4b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7a3258-f78a-4fa8-b5d0-fc7ef4d339ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4fa45bb-914f-44f2-b119-653adae5bae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b8e458-8185-4e84-9553-e672d804a770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be8347d5-655e-4406-97d7-a5d72c557a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2597115f-ec6c-434f-8232-768f38b4df16",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39edc8d8-c50a-4227-8840-700828eed736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98803e6e-4a5d-4e51-99b7-ee7d6d6d4f67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec07ae5-9023-4681-8ef3-c7e64ac61c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91cb6a99-a359-4d3f-82c1-6dcdac32875b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10786db7-ffc2-4aec-82e6-e26f3f10a7d2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af13ecaf-e910-47bf-af8a-1c8cb8f40e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "020a2c69-0f55-4806-a800-bd5601f197b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde1c3d5-ad2b-4425-9a04-5732c7dcf450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6943a782-f4da-450b-a88a-17fa427651a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4313af78-fa84-47cf-b656-6a84f436835b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b270ad69-9204-4aae-98b9-5aab0a499688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd2a60ac-4295-437b-bc96-8be756a726e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba00102-d23a-41b4-a95a-95bfbb29d9ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eed7a093-3642-4f90-84bb-f13aed84dfd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cded8b7-12ac-4058-9e2c-93cc0820e566",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f36556d-b358-4452-9bcf-c4d01a101192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ac89049-402f-4b8b-9b6d-01c055d909f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0846b9d1-ef1d-4825-9cc3-398e4dc3d7b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a572626c-4ab4-4b6e-b5a6-6d2e90947a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e331f84-1275-4ca9-bf25-b325782a34dc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e60b5f5-ecbb-4032-a621-e9f83859bd37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb3d8b0f-23e5-4e24-a128-d6a0c48a7f03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "791e7823-046f-4d08-a9d8-8d10e4fb0608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "440d8b73-285c-4c4b-848f-f3aa447f9485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434533ff-2f43-43c7-a271-53d2c3c52c69",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85aac8b9-915a-4da7-936d-7d603b745e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aef60c5-4c48-4029-b831-9e4493a13998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bc04dc9-27a4-4f77-a01a-b758fd402932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "427d3554-da61-4fcf-9a2f-22c977bd4032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589dfede-fe0d-421a-a5dd-ac5283ebb63d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2a258d-4bff-4945-b8d3-6a2443baffdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24356b0d-42b0-437d-9b13-3e8667aaf112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0bfae8-fe70-4bd2-b685-76ce5835c27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce33c899-408c-4081-a38b-edbb9bc9b41c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dea83f9-fd92-4399-b5af-7fd04feeda7d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aca193e-8c83-4054-a07a-60c0b68c4993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3faa1e26-e963-423f-8fad-46801f2ca57f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e155f162-7fc8-49fd-ba23-262d69f3eb37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17df2d4e-b723-4393-831a-b661e05cba9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec553822-cead-4e13-be36-7c0af23a271a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a792bf-4723-4da5-9bbf-a521cba3d4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86990966-40c5-4db8-930e-7b54b41ee516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68bcd74a-a8e7-4249-ae0a-a773236e9291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0c02d0f-86d5-4083-a505-7ffefbb81acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e7539a6-99a4-472f-8005-61db78540f52",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1da869-6a79-4251-9aa6-208b4c911428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72328fad-77c4-412b-9089-542807fa0d8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9e16fd-67ef-4c46-9968-6d28f2ddf681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "808ae664-0108-4c1b-8d9d-7ba8b63fe200"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "26badbfe-d099-457d-9a61-361839d42a20",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6f2fa0b0-a1d9-476d-aea7-3c7cd470954b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49abb00f-5c43-4d2d-9020-24e0518b6635",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5b035aba-344a-4f3f-a8e0-a1939dd75f4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a279b2fc-c458-46ed-87a6-840215f7b7e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "244d1809-8b01-40c3-b15e-a61f5e84fea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f16ac6-56ba-4338-b587-151131ffdc74",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ec8730-9484-4c06-8475-83be0ddaaf63",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "80c82601-00ce-4680-b04a-f31480d93565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "145fd701-4fff-4470-94d4-c89acceb880d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "021c8bb0-848d-40c9-a2c5-227c127480ee"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f0092445-b43b-4c7c-ae1b-126eef350d9f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f47061d-7efe-4734-a516-b8d9428462af"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a6480104-9f92-4fb5-b718-e258d7029cc8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9bfa470b-bde2-42d0-8c48-a5c061163a4c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "617ff90a-e87c-461b-8e58-57a5a15ddf01",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "26dabc01-f1f7-44f7-960c-46c0f2ae5742"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5a112490-ec6c-450f-8736-d4875fea48f0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5ab49044-34b9-4659-ab32-eb5e802528a8"
            }
          }
        ]
      },
      {
        "id": "6d28ab0d-5a25-412d-904a-5cca0f399ba4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "772615ba-facb-40fa-8897-51b5236f5292",
            "name": "Negative Testing",
            "item": [
              {
                "id": "24762068-679d-4640-bdf4-0590181dc0bf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9b36ef91-5f53-41ad-ac7a-974732d67636",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf477fd-fd0d-4469-8449-f3b493745e44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7113bd2a-41c6-490d-bb4d-6ad9c463673d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e58d69f-c3b6-444c-8041-f377a12c88cb",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97af386d-f8f9-41b2-af22-3293e3c92708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1148767-78ac-4c92-abfe-8556b3d98d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3788eba-b572-4ab2-9582-610c5d19eddd",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57373ad3-e57a-4c74-9afe-b9303d184211",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fadab361-e0bb-47eb-9552-841b1f719089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5df3865-c449-4b09-a1ca-ebf61903bfb9",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5685f3-6f1c-4b95-b121-ae5e9eb2a7e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35237cd6-ec83-4b64-880f-93cd94dc1bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e582f443-e7d6-4b2b-82b7-1124ed4495bb",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50970c2-adc0-49c2-b041-16257de46364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "454c5e89-639d-466e-babc-872ac5bb3482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10ee91c-56a1-474f-ad54-dce90b55e695",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b64068-0d4e-4499-8d71-d331591d003d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c1d751e-fb99-49bc-ac01-76c36f6e120d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1efc93f8-6f09-438f-ba5d-ab8ed75fd81c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33a890d-28f7-4bfd-8e4e-af61810d354e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44865726-119a-4cf2-b321-47365aeaaece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f8e0df2-e4d2-4c0a-ba19-67487225021a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "938a4bb9-8a90-490d-91c1-ff728696d487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fca9bf3-22b1-46a7-b84b-1c010ef3cb93",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da795fc8-8f55-45fd-9315-a36312129469",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5a3718f-6d6c-4b8c-a6a2-193ac8411032"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bbdacab-fd05-420d-90af-9758cdcb7b0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20b76d2f-ba5d-4389-b35d-e31eae2495af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f46c47-f6df-4e1d-870f-e212f8264eb6",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "351ec2df-4853-45bb-b728-aea887ace40e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89bca8f6-36ba-4d80-8bef-da767cebc194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8535c656-5357-4a0b-8fde-0a4538a84791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35402a0a-1ad0-4d55-a7ec-763b26bf8c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "102ca51b-0802-4f3a-b8ea-2fe660134cb2",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6cb278-c1f2-4a23-86d2-f108b746dbc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98b85de8-411b-454d-9db0-7d16c6e9df3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c3713d-3b49-47b6-8d43-d5612fc02240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d4b50e7-8bdf-49b8-93b4-02db74563a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f6a382-ae23-470b-9749-785013a688d9",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d04881-f278-41f5-a684-165ffe1c2deb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "778a02a0-aafa-43da-abb2-7887fe8d1867"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76fb099-7d5a-48d7-88af-7878f52cef05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c98c3b45-db2c-431f-a743-f1ec436ae62e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160449a7-f1ac-4177-8747-5732b8c34b6c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e60c9fa0-f546-4d87-96d2-dd07cfa5a968",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72b83cbd-2511-460b-891a-19e3bd9b416f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46f6b2b-d385-44fa-9d55-7565c698f15e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f7ff93d-7b82-4558-ba2f-7fff9764bb04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5c847a-891f-4326-97f9-36177ecda10c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f67044a-a96c-418a-af14-9ca1cbe85aa2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "758cb7cd-eb96-4b76-b704-65cdc4d27498"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "005365de-15c4-43e4-884d-5ea14e4617e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd4a9dd9-231e-4625-bcf8-020a7884a750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb3752e-f563-4ac8-aea3-f41529b072ef",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498c55eb-596d-4a20-8faa-df2515ea1f40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9d18e08-884a-4947-a6d7-c650b35558c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14cfb968-5687-4166-8805-454f0e9d29bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96e1f49c-f803-4040-88e7-02055be23dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c65f400-45b4-4cad-b564-5f247273b0db",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01922fac-fdce-40e8-8830-d8ff2dd9ddef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd40d968-a6d9-4b48-9362-c85756b1fbe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a552d024-e78e-4674-bd74-6c989d599bec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53435d7f-171f-4f95-9fe9-cdd6756ccfcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca860e3b-62a5-4a2b-9994-38355e69d569",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d82116-0856-4aa0-bf20-01aeff17659f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01554a32-9008-4e93-8cdf-9e19737639e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d13b3640-1cdc-4d09-82b7-0c2cac16c64b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e1d7289-8a90-4ba4-b6bc-3b3c233389a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ef5d5f-5166-4828-9aee-aa4a66b233be",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62915634-2842-4795-b674-35ed64fe0505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75b23344-6b91-480a-b66b-9bfd4e131f5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "268f8d5f-6a14-4a29-8f85-a2db99de40e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "145b4823-d0d8-4877-b71c-1e27d741cf2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6d6044-6a21-45f4-bb99-49a1723ef599",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a2a238-e19f-47c4-a30d-be30f9047e48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc8c0de-7d93-4cc3-8b14-7c31e395dbbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec08e8bd-6f37-4744-8c77-7767985296c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d7cccc7-3149-4237-8002-09d8f3fca778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "421eec34-efaf-44b2-9b5b-39ffd17b8a55",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5cf8af-0543-4d7d-9c75-3aff435455ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef2e4c3-cc82-4d7b-8414-76463241b9b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bedb293-4822-4e8f-889e-66f920f98c6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2e1c4d9-65d7-4ba7-bbca-8bae88404cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b1d0b17-9e8a-454b-beb5-ea3ba4d9fca3",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13d9a03-3b63-4e83-bf53-8a042d76424e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21c35cc0-623c-440b-933a-59e080da57d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f7cb51-7b0f-4d1a-9185-8baa96f02af2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcc67abc-f501-4647-a44e-c0b5cea3da0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee3930c-a967-4d00-8a5f-e76a7ac2bbbf",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e738c7fd-18f5-4530-ba40-325cdc6e09ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9422bebf-7a3a-453f-b8a2-c468545ba4a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a58f45e-98d5-4fc0-9b38-75bf788d14dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeb75bf5-c746-4e3b-8448-65225d793b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97862fdc-b60f-4e5d-8e4d-c73fbce60ae2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32810ac9-f832-4674-9eac-187b38ed19e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7630d3fd-4a5d-4277-831d-a417515e75f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "248b9c29-acb6-414b-aaa0-084fb19123df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "904557bd-ea94-4c0d-a749-6011238e3b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "509c295a-3b09-4ae6-8247-6a6cce0d0f4a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc784b6-d560-4b46-9261-e5080a23cb66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae01f53c-242b-423a-904a-42c8012b64c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc025a2a-983d-4927-a99b-ddbcdd176887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc1f772e-1ddf-4bb6-8a53-226cb7bd1c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "667d3661-19ac-42f7-987a-78f165ca9dc9",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1051399-2c44-43a3-b0ac-b36ad3cc6d41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d80652b0-b7c9-48f3-8f75-020b2ec56624"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b3b2c6-2a01-4fbb-8c45-447f79a31ba7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c955a299-d7c6-46a3-8842-28668e6e550a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e324a2-5126-462a-9219-1a305f35882e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a9ac6a-5b8c-4ff3-a647-746a09d5f947",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff770796-3274-4d36-8042-4d1a21f035ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "682ecb80-1376-4c35-b1ea-68e2ac6e2adc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bbf736a-2960-4817-b1ff-e1b2735954d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def259ed-a9f7-435a-bd7b-5b349d158d2a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45eccafa-939c-4eca-8311-647202a2268a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4799595a-50ee-41db-a362-e1f67e055412"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e83e7a-8965-40eb-8b30-e572e700133e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "415e6716-6b90-4a18-b8cc-86819ebd08b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c82e400-392f-4dfa-adfd-7a9ce9e8078f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "033c246c-a299-4b07-9a61-87d0fd8250df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "156e23d9-8dda-4b5d-8030-5e1b01d3281b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c322e84-eee5-46e8-a573-131b11a2ef64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "667734b7-d8b7-4f36-92e6-1b9301dea2b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9608b37a-25cb-4267-ba4f-89bbfa186d59",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44e4eeb-e3e5-411f-a0c4-76e767e661b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5459774c-3e97-4aba-a6fe-5ab881c84577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "005f3822-2f20-4aae-b4ad-4b7921811e8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "143b546c-d12b-4524-bd70-97039310b0ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f00ec587-c6b6-4752-99b8-24cc12da1866",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6465f3-911a-4beb-92fc-89eb079f6656",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1e3f31b-7f54-42e3-b305-939aa8378c32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c86695b7-0358-4fe5-a629-5c26f79e7b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ba3df83-8b14-4128-bf73-8dd3a382c66d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5a9bfe-ca24-4814-a2f0-526b17324fbd",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526c15b1-f4cf-477c-83f1-ab7bce33b69a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e43834ad-ab09-4155-8e0f-0c5949efa1f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4c02f9-946d-4cad-af82-93eb5a51ecb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60ef43eb-9e63-406e-91e7-83e9a6a5588b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31239b1-0589-4367-bcdb-8b19ce64507c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a328534c-0cc7-4722-903e-754c38346944",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e8ce35f-ceb4-4703-8059-667613406bdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4160c3c-81e8-4724-abbb-ab876f28c6e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0569356-8b80-47ea-b98c-646f045b8dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41d5146-592a-4eb0-9fa1-dabddf3abd1d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c962fecb-7f56-4558-85c2-9f71f2781eaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6b7b14a-f63f-4ab0-970b-b6fc5795ab93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06309d4b-edd9-4c2d-b67b-1d397d2a6f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76971091-0721-4cb3-9ae2-6f00837d0680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfaa3ca5-70fc-4d04-9262-a70da6560430",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a99e1ac-b75f-45ce-a893-b49bfa94abb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b23ad13-9624-4d86-a051-fe5d9fc85878"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "535d5676-87c5-4c20-b8e4-07272201d438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9282f8c8-acb6-459f-99ca-e24c5a8a19ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b6a18a-7b18-4f3a-9d1a-ee7b1e5ed215",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "276659da-86fc-41d1-9b33-fb5a3d70967d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d553caf0-649f-463d-b4d0-6bb99782579b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41a4df5-1f58-411e-8dbb-c955166b0175",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f88cd184-234f-4081-84d5-d37fc3ed7416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2179264a-2be6-477b-93f2-2bbb64f18343",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f833ea28-eedc-43c2-b53f-1f7023386552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac64a924-0655-45d3-a4b5-1ccd53527439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "371c0ed2-d328-4a80-b37b-8baa36e5e086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44930a5f-0439-40df-a31d-744be0315c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75188d6b-4035-43f8-83da-0f88990c99a5",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc3c761-c694-4649-b94b-f36588dbaf8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d2ed2d7-af07-4a74-b469-c1434c633702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "296e9c5d-effa-4c7f-84ea-61c832708a45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8fe91be-bbf5-4b7b-94ac-346b891cc1de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8040cfdc-a860-4811-b686-1c1891eff782",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3081a43-87da-4b3e-b6fb-392b5f367d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e4a4311-a271-4ee8-959e-fd5ff1ee0766"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9938a3-926c-48ac-ab82-53caafdf208f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a6ac500-9533-453d-9daa-8cffa08adcfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf8bb9de-2ca8-4f91-bb91-f7ce1582686e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7fe135-4c5b-4115-b75f-031580ae14b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26cbffdb-1588-42e1-b01a-8da01738ef4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8caa082d-b5f6-4ef0-92cc-780821f551fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f44e442f-a536-40c3-88ea-9766594c3fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186a6386-fe20-4ff3-91a6-7d26e91e8a61",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a33c028-a339-472f-97ab-334ad7ffb4cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb9c09ba-bc09-4ab1-aaf4-8f91d6cd8c3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa93e9e9-8647-4e87-8ddf-cb0f4088b815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70dac3df-04b6-42e8-93e4-2146c0682a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50490196-6ea9-45b3-88de-3d652203aa7a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c1a4328-0607-4027-873c-fba4c6e42198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "343db5d9-c087-4e1e-915d-fbc9c89fa808"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b76bbab-18f1-43bf-bafa-83d86f208016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffd27137-6ab4-4712-9ba9-eee4560dd153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97298afe-ba2e-4c5b-9020-45dbc37e2164",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19ec622-410b-4280-9694-eb9f8a0e9fcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a25871-394d-48f0-8c2f-ed00e48008d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f3db8b-1848-4e8f-ae58-2ec871d7bac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2070a45-a2a0-4973-b0dc-cd5309714fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca63ebd1-8c23-47b9-8efd-23915d8e55d4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a8d7e6-0420-4256-a986-16d84a170ecf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a45c8fe-2dd0-4db4-9861-027f40c88379"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9193cad-7cc3-44a3-ba4a-111882e85d1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5026a69-2e41-49ba-9ef8-847839d621a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9de87ee-2ea4-498c-b2ef-4c05cd1cbb0f",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c9044a-823b-4b25-ad91-49b799b9b9bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c1330ce-5ca5-441a-8581-fccc0e639c03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bed87b0-1eb2-495d-a032-3fae439ebd03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab2adf5-9039-454e-a844-966db0a4480d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767767f8-633a-4f15-9ff3-5b96d60adbdc",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4ed376-b1e5-4ae7-bbd0-7aa83b4ba899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29954d7f-c550-4cc3-9f8b-e0717dbc3d95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "489a4255-2e86-4cbb-b212-a5b0fd61468a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5966b17a-0c9b-4a63-ab17-9d11996e3f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c89701-2338-494f-9acf-8a57bf9c98a9",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf22ef1-228c-4add-ab7c-cbd2ded26fc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "475e9b5c-6f93-456c-a356-4d24068492dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0e5b27-464b-47a0-9f50-bdf5d30b2faa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b179a541-2cae-400c-a172-ff9e32b9202c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9562e0a-aa4e-4101-8bc8-3b486e88652a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c31d6ee4-470e-4a21-8268-fb5b5381e36c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91bbb02b-0b44-43da-a82c-10a90afc9315"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a39758-1485-4c1a-af3c-93ca2f074173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "227ec8ae-5898-4288-ad8b-5a03d4004f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11cf2ec-b2c9-49eb-a790-d653859522b7",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7a9278-030e-43e7-bbe9-2b925c369386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4771b5c6-d3f1-403d-9851-fbba70b17ced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baeaae3d-f375-4161-8ffb-6b7eedf9f2d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0292049a-d04d-4d58-8a54-83407abee509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "431357f7-cc1e-4596-a15d-905051a602ce",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f60716-a57b-41c7-92ad-d76ea9a66391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2291b2c-5773-406e-ab97-706c754e7ca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a2bdf9-80ec-4579-866e-fa35d3398a2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9fd4ad9-c82a-4ad0-85b7-fd70a05df7fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc554f0b-9c10-4873-996d-db5b01a8b4fa",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7928c0d3-0556-4252-9fcf-45a1b809f11c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90725fd6-9b23-4cdd-a426-39c8828495ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77d2b2d-afe6-4077-a649-a202c0fee4f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e0e1e21-2933-499f-9bfd-ce8983c0a729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c1dbd4-3543-4a8d-bd33-7ba92ce054b9",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768ba511-bc5c-4493-b73f-419f117ff840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c22b3232-269c-4917-89f3-96f7bef86c69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a0a260d-0cd8-453a-aeac-5d50cff41b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c38e52e5-8e47-43ec-b63d-ad7410657586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b9d992d-99bd-4490-bb72-f2ec47660aa4",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa643c7-0016-4997-9d78-7804423fb966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7280eb27-1872-481e-857b-6a144009dcc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9398a42-1320-47d7-9b05-0999ab8c9b2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58d4e857-00e1-48b1-92fe-5f5624fa8528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d964ee71-a8f3-44a8-bba3-4da833b3a94c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94e6420-acdc-4077-8278-ca10a85e2c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7251067-5942-4e63-b2d3-13361ad404f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c35dd30-8a16-4c95-a135-59acdadafdcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc4a4fa7-fca6-4aa2-b4ea-98a6d668255a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e12c306-2dc5-4178-9e56-4d745c2db883",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3603ea-e46f-4d4f-8c4e-261b8056cbb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c9af357-f45b-4a22-b125-b8441216230b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0989eb-e2e8-40f4-84d9-b22ac71e95f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ae35676-e8ee-45f7-89f2-a71f3f78372e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b07913-7365-4ca4-a536-2bd97b761073",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e429282f-8488-4dfe-9c15-bc80cd2b1858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47f8c5ac-01cc-44c0-95b3-19d0a609849f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c029134-1ecc-4525-ae97-b7e17eadcc3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b70df464-abee-4906-b506-81d7d1bec0ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ad0190-7408-4fb7-b6fc-3a78d2f7053a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7d0887-e7ad-46cb-8d69-2f7edce20545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d73b184-c555-4b16-a7a1-43b0add80725"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13102d6e-5f44-4c0b-be56-1a00ce2c3a9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c0ba861-1b2f-4123-873f-e9ba84da3056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f60a56e-02bf-4c13-bae1-89b4abdb4acd",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f23191-3d4c-4110-ac05-ffcae67ebf2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7443db17-5cb1-4852-ac1a-196c4702ea5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c03fc23b-de6b-4f05-9f62-de6207e0b4f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c523491c-cc97-4980-9a81-02be940188d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af23a627-93fd-4415-893c-9bc4d3b25783",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f69c94b5-0340-441e-808b-983b1ccb0a8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "517556d2-ca44-4d0a-92e4-b13d18669da4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3288837b-4188-423a-8c3a-f6c04825d192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "367b254c-d560-4634-860b-6d54e3eade43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c57229-f42b-47a4-83bb-97d396ea53cc",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fceaaa4d-8361-40a8-8779-e988c48fb9ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "880828eb-0c1c-4cfe-91d2-1a2948d02e54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db95c251-273d-402a-9d68-1dac53334fec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a66d3ef8-4095-4013-ab4d-74651e814c1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "503ee4a1-5559-4420-9445-30a2e1c7255f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a27904-58cc-48b8-aa09-3fb2196ae7c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3726c463-1804-49ce-a790-d6c6d9415eac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7507cdd3-20db-45a6-9905-d8ce7c7a0282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0868547f-7ebc-4059-af11-6377d0645eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68938e0-9c32-4c97-bdc2-538fe39f741e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56629914-47be-45b9-b660-88daf2ad6545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f1a477c-3da4-4167-a293-6f3c8273eaaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbdde5fc-2948-46d8-9d0f-b9a06b133842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc0394bf-299d-4282-8d5c-9b46a0fcd70f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d8435a-5ed0-482e-99c3-8e2a0ec5251d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b1e5ffa-ffb1-41ef-92e0-6978c3dbad38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7903646-66f2-4a64-99c9-091a5d7a3d01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b635cb-dd39-4902-9c78-4c017c9361ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6e387c9-a316-4636-893b-31c6bb4d7384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0829402a-1f88-4557-8d6c-56239d0efaf0",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6277ee19-a0ad-4c5d-aed4-bcce32a2cd26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61f4f25c-86bc-42f8-abd5-d49f0408656d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba23ed4b-a675-48ed-b832-2955695b889b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd2c04d5-a0d7-4f14-af0b-4db24a4ccfbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c342b20a-7474-4405-aeca-8c9ff4acd57f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1754aa55-85eb-4850-bbbe-530a52402805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34c1f677-ef77-4f6d-8cc9-36077c670760"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcdbeb79-bc84-4ed6-a38f-b51b2abd2eae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5d3b968-417b-4c2f-b509-c6a0e817fc62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73cfa0e6-2cce-4a5c-8b4d-79ea7b27bc3a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f770d449-6cee-46b5-9bc3-bd6ee0aceb13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bbdea9b-133c-4cb9-a8d4-9925f8cb03d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a72044-f2a6-4c72-a7f8-e6c7e4741e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c9c258c-ba57-4b8e-bfac-602b373a33e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaf37b34-0290-45be-a18b-cc171ae8598b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec2e9c3-b536-4300-83bd-e712c819957a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "571d7628-de8b-401b-aa9b-66b38e77fb55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f9a6f9-d42d-4b3d-88d0-0c584c6182aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39e2b03e-e4d2-4ef7-ad62-1b70497a0b0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184f9dc0-469d-4095-aa22-c21b225d364a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e869ef22-3e44-4cd3-9e73-75bdffa0b681",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9260f2e8-3f76-4242-aacf-dc5fe9aee4f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b9bd90-f847-479d-b2eb-39692b6cef7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5fecc2d-2d7d-41c7-81b3-01234d2adbf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c47a89-130a-411c-8935-f4d1d1d4f721",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a9cc54-fa2a-41c2-8694-c75441699487",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "619b5938-84be-47a9-835d-f9af53d57fc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a4fdd47-0b83-4158-81a3-1f16bf8cbc48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "115f255f-58bf-4674-be83-dba5ed7a5dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "321a58f4-50e9-43ef-b0bc-0cdf18feb000",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36caf8aa-e431-48be-9270-f7257b28647f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bae7d2c2-07a8-4c3c-9bf6-fd5fac9a36d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae7a5ca-3b4e-47ad-873d-63a63fd6674b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e6f67ba-abb5-4789-b983-517eabad1dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12cf058c-8224-4cc1-ac02-4e871160a864",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30228785-d704-42c2-90ba-44128ffbfc56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80f08ee3-41da-4a00-9bfa-478635050c7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f561b2-313a-4816-bd6a-81924e6ec549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9e32b20-bdf4-47c7-a9fa-1851900702b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02a20753-05c0-4191-8e44-3f5f7fdf7a73",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4783514-3076-418d-a5a4-778d0cf31a54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47c6d086-a544-4ceb-ac95-d80077274764"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f70c70-57be-47d0-87f9-6c4d32c075f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b54992ec-798a-4312-a0cf-b3b207c75c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c803af5-be3b-4a67-9315-f4700c58694c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9f27c7-5e11-4606-9074-1e5f152301c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "989b10ad-569d-4fe6-9eab-21d98223d66a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a5831e-35d1-48c7-acb7-0416ad95d2f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78632362-296f-4695-9330-8af5c8f53f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07104075-a4fd-4d46-98f5-ac2aa7969bf8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e64e5a66-7302-4ef0-be76-9a5769d3cf1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9166a17-a54d-4851-8603-4f426fcf2576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e29620-9449-42c2-a9cd-662f3b22b00e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e2f4700-5000-42f9-ac1d-4936bed31923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4225a2f6-d530-4007-81b3-510727732fce",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dcd6000-d620-4287-83bd-79e29a84a646",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "972898fd-1a9f-4329-b35a-466ea2b83967"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1219380-21c6-4e1d-a798-5054847907e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a306198-9ae7-4236-b397-c2331fd36080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81027e0d-e6a3-4457-bb78-a6da08924bb4",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bc19341-e78e-4cac-ad66-6d562c584eae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02067e86-73b4-4ebf-8bdb-9f9de1a488c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5255838c-c3a7-4d3e-a8d9-a94b49871543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e4877a5-2234-44fb-8b4b-b6ae7bf2ea18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2daf654b-ad21-4507-be28-6e52e963efc1",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47501c5-dac0-493a-b6c8-c39ac0dec76f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "731410a6-1bfb-45eb-9c00-ee29984c0ce2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eceb4940-f618-4125-9a95-939d45e40fc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "812f3988-0dd7-4baa-afbf-d5131caf004f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a0a88f9-02cc-41f8-9e26-f779f5bc1d48",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be577573-406e-4c81-ac76-0d72117e4566",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0867d1d3-59f4-4233-8954-73bd3f8f2af3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4ea086-b430-4c35-bb5b-b363d095005c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "114e9a4a-44a5-4470-8b97-ce1112301bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bfbdcbf-6bd2-4b3a-82de-9bde4fc92275",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549565b6-14ef-4f8f-b96c-890bf978e3db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24225077-ae14-4fb7-ad8f-2524535dda01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf69dc66-9556-44ae-be9c-d7669e6cbe1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ede6dfa-0207-4178-8a59-68efe4d4437c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10973893-e1c6-4e16-9de9-ca285c7608bb",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2ff3da-3837-446a-a0ca-8b5ee6485ef1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f85dde92-82e3-4ae9-b4a3-9e63ff23ea76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c01497-642e-42ce-9d94-b3e3e91dd792",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "743b0a2b-3ab0-436b-9399-122e43ed72d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b446224b-81a9-4c53-900a-ba25c6bb9ad7",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2b5873-eacd-4e8b-b663-16d12f44885c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "234c271a-9b69-4a11-9ba0-bfbdfa4a15ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bcbfe14-9971-4c07-9c90-d65c480c5493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f746188-d03a-496e-83e3-85104f2564e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7843ebe9-a61e-41af-b105-2808356c3ad0",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe64335-5868-44cd-b539-a9442b31c41e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e87c37a-6277-4a56-94f3-c79f63f5a5a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c15e7e3-4b99-4a18-8f7b-48456f2964f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68a4d3db-74fb-4027-8fe6-ae1643eb6eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7badb4a4-7694-42e9-bbcf-8613e7330813",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd80f88-9fc1-45ae-b2a3-7c330774aa11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2725cc4d-2eca-491e-aba4-4590bcc3ec90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74200506-3b74-4bff-aed0-40b782374333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9716d023-2628-452b-af0f-58e3c72e3fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7784412a-ebef-4c5c-bfaa-513a28a206a4",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d360cb-4e87-4c9b-bac9-dd169178b8c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ee5317f-8c4b-48dc-994c-5c235b3a2ff0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f866c981-f12a-4759-8892-29dcba7c0b9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a5cdc22-85a4-4a9c-bee3-05342d4b98d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a2c48f5-4ebc-4b67-b230-44ce942d60ce",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c868b59-4d99-4f44-8aa1-07db0b9dfd9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2ef91ac-dcd4-4553-9451-b5cdaee4ff52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c86be0-c59f-4ca6-8a32-ce587a27f821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7a4cdb1-35a3-49e7-bcc5-e50a3ebb848d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da1a6c1-e2ee-4d48-af4d-64ff7227d344",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "649e0c3f-0e03-4c24-bf7f-8ceba59ada7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05b53e7d-b058-4000-83ad-8c857080b320"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "115361c7-ff89-41f8-8fbf-e75046d8231d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "694e19f1-bd2f-45af-99fe-ebf89f51c7f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dbc0140-0224-4b95-957c-d6db80b382c3",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65ea491-c3ac-464f-9a18-9fcb4dd937e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8c05806-648e-4c3c-9e50-1560aeefabcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57430f6b-a951-4f5b-b190-c4985b55c148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10f07267-1440-4f2e-9c99-c3601b914263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a766e3-0260-4d1e-b178-38f397b91180",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f7c646-83da-4ec0-9971-cb9ad5fa213c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "375f6f04-2e54-4e33-9fb0-8d7f4e1421b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ae89da-1dcb-42e6-bc2e-f08faf3a5b89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ee26b0a-dceb-444d-b79f-a6114bdc755c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2369b56e-939f-420e-a241-1f1172f2a746",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87c1a9a-9386-430b-88af-c9fb8f7516ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fc73a20-b905-4b4c-8127-03dad6341601"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60e9410-5513-4a78-8770-2cb1cfce7278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0f26b39-362d-4d89-9b0b-d718bd042efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94842855-9fa9-44eb-bc71-6190c69d8857",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e60ef9e-acfb-4180-aaed-e35343489d7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01a6486d-5d01-4306-b0a2-1823c4f4729c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e98cc45-b8f7-4faa-9043-1fa4fa111da5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "271ff347-f6b4-4fb9-a26d-ac26c68d13f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c737f94d-a913-4628-91dd-f1b8a6043c13",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e46c1e1-56ef-40ac-843b-ea59a42e4f3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e97a9fca-df27-4288-96a4-a9b7a94384f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97efbf36-d96f-42b1-9364-0434e47f2799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7267a38e-6901-411f-bba0-a36b4526ddec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07223f2c-f05f-4050-b596-28bfc0195c64",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab02a72-4037-4e3b-9d77-2e1c5a7796fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ec6eaa7-16ed-4ae8-9548-f3a5213644f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c70baa65-241b-40dc-931b-1c64cf4d1507",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92db1523-4641-45d4-8acc-8412c1511914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad27fc5-9490-4c8c-80fc-953e2197ce3e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9addb64a-1ce7-4e6b-b838-7256d048ed4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1404e27c-0ac7-4d43-9dc9-c6b77cc42991"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff91b63-33f9-4119-bd1a-58ed0b239c7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "652c532e-c3f0-4ae0-8931-f1acf3892799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02c68c3-3d15-4d4e-89b3-37fea1cbf2fe",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c8ec7f-5c32-4985-aa38-c95ebbe668ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d277590-4f0a-468e-ab6f-717caf5ce5b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1056ecba-da2c-4294-b036-d87e374b1483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23602cca-105c-4b89-8c6d-d4617e1e2c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64fc7b96-a7ba-44a5-9943-745692399ccd",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f928df37-a440-4884-8c1b-6ea743ec5de5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68ec6e36-78fc-44c1-af66-a18ef0f9bd19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f79fb169-ce90-409d-923d-4dc07f4e6b1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8431a27-daa3-4df8-b3e4-d311933ec635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d540207a-b4f8-48c8-abeb-5f9950f0766c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc18740-14cd-4a89-8368-a1f7bb90cb33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c36c0a3c-02a6-43b2-87ac-0d149986a9c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e7a4cb6-1cff-4043-b052-bd8e9cee8ef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a33a22f-9f09-47b2-809e-0c7e8fc4b057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91fc38af-3df7-4f59-be42-c51dc96fa293",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc265c0-927e-4a91-8aa0-ba4b77e4b44d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "782510a6-a2c6-489d-9bad-7e86e1858e82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "634d6948-244b-45a6-a53b-1da1d1e9f83a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8262dd28-e22e-476c-8326-dabe4b44da97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506a682c-d7cd-4806-b0f0-14c37f76e0c1",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2486cbad-9ced-4d25-a91c-8009cc58bb3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "974d88d2-ac20-4519-a621-29a330fe3cdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "786f10a0-242b-40cc-bdec-1fcc51383f26",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a25caea8-1a60-450f-a5b2-f2167368b136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254190ca-d1fb-48f3-b71d-32ea40cb60a1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b23537b-f077-4d66-b464-222650a0574a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "692c7b1d-87c4-4217-8cc8-d74cfc3a6711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6c5341-baa2-44e6-869a-198a1bf8b8c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97afcc74-fd2f-453c-a316-340016bac2c3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ea76934-f386-431f-9319-f4dbe1856ca4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "886c4dc3-51d1-4c09-a273-ade2bae954f6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb42a677-06e2-4591-8a2a-8d9fe7101b0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7868900f-8eff-4d22-bcb4-d3ea1072a780"
                    }
                  }
                ]
              },
              {
                "id": "e9b26164-a3e6-4138-bf59-173348800cda",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9cdac986-e5f6-4fc3-bfb7-f12a6dcf888c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f4b69e-6440-44bd-b604-9d81b9b2e5f2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c0f56aec-71a9-4020-bd98-9238aa82369d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e314f793-887c-4361-b7b0-408e910cfa7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0d986de-d5ab-4bf0-8b5e-c6120e094d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b730ce-bb69-4fc6-b23f-93bb4df491a9",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c9f656-13e6-42e0-ad1e-835e039cd7a2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b47e79c0-d5f5-43d8-a28b-7831609e3730"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a9abb45-f16b-4583-bd95-7a79cd90a215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75da5fd0-3f83-45c4-81c3-d9a0e121add4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2a511b5-06fe-4bd6-babc-79ebffcde779",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1db584f3-8174-4ba3-a9bc-baf3237405bb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "056ee933-9b6b-4019-b608-1ceb3f009f4f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53d0abd0-73a2-4c2e-92cb-de5158671daf"
                    }
                  }
                ]
              },
              {
                "id": "2dabe6f1-992d-49d4-b9d5-1a159f7c821a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "79f5bd31-e869-45b3-8add-e7bb700972b2",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a81d07-700b-4407-9161-8c190d41bce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "09f66449-dc23-4f73-b2f1-79bd6c50086a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aec3db5-caf7-4865-b0dc-eb961981477c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea7237d-00b1-4626-82aa-3e5248bf2c00"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "126e0fe2-530a-4199-a95b-9b27ea8dc33f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "102ec3fe-04dd-46c3-8ce7-835aba175cb5",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2dd685d7-ceeb-42b6-80af-7b7b7f5b24df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "964307d2-0678-4ce1-a785-c2d02a7dfe19"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49a0adff-29eb-44cd-a75a-b991fa634220",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df461ebf-8d9f-414c-844f-7167eb202b12"
                    }
                  }
                ]
              },
              {
                "id": "8aacea21-5d5f-44ac-9406-8881e09367bc",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0b4db3c-06af-4c3f-bd54-6f69978b465a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bb472fbf-d4a2-4a1b-88e8-39f8fcec3c29"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ced3f50-0d6d-4e5e-abe0-fe77598f399b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d77d5d4-e059-4803-8090-0a8e331eac32"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9eb6282-5d1a-4a5c-9044-09b4f9e7e3aa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "71861460-3bb1-4e5f-aa14-029b09bcb5cb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2eba2d93-08be-4ca1-9dcf-171b7d32ec56",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "88bb3f06-fcb4-4d5e-8889-5fc5f4f6c088"
            }
          }
        ]
      },
      {
        "id": "fb647100-0ed0-408c-9d14-168959d79e35",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4b6466ab-7bb6-4403-a13a-286ee8c6ed22",
            "name": "Negative Testing",
            "item": [
              {
                "id": "19cb30ce-de6a-4ff8-acc3-4823d84614c7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9658754d-a3a3-469f-a81d-d4f3278ebf40",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba9e0f13-7308-4fc4-9e9f-9e1c01262844",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "67a0a92b-c64a-4d27-9af5-cb98dd081ee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f7b395-9f70-446c-a13d-9d62a9119e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08179e40-8111-4426-a846-605f9cdf5f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7c5b15-b216-457b-ac85-87a0bf4abaab",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ba87f5e-af93-4ca6-a7ce-f08f4cb0e5db",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "78a42018-b971-4839-ad6e-3f4016b9953c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "120fbc45-6c20-49e0-befc-9f8a6ed2fb3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7bc8d1c5-391e-477d-a5fc-3d8243386f50"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "955b56f8-dd1c-42a1-81b6-6f4ec11f2037",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9809ea7-7d83-4992-b385-42f4a4b4c318"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b666222e-96ca-4ad1-8332-04a7d253241c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c63d9ecd-a861-4e84-8799-df003a4883e2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ff3563e1-f705-4f70-be05-1b511482fbd7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0ace1c6b-ef0f-4299-a8f5-9462f6563655"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ce827a0-7a39-4f16-92eb-6305970f2ce9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aad7fe47-fea3-4a94-9de1-aa27dc009fea"
            }
          }
        ]
      },
      {
        "id": "67b9f0cd-280f-4606-9df9-c3e4d75eb6c7",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d97a8199-b642-4867-8b06-4311ec7903ca",
            "name": "Negative Testing",
            "item": [
              {
                "id": "85588060-57ad-42b6-92a9-3c6e2a10cdd8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0f4ab9bf-2e9b-4c49-820c-7e237095cdcb",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c1e260-ab1b-454a-a698-749a5c0e9cd5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a22e58c8-d99b-4e8e-b48d-1f9353fd6f3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77fcb993-fdbf-46b3-b0ff-bfe3a4b2b055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78530f5f-c93e-40f4-8cee-1b5bab2165b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b2cd0bf-640a-4a00-a34a-d4c92ca04174",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f5d51e-dafb-4486-ac6b-37544815afd9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "27342b9a-13d0-43aa-8324-f58d259ac705"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad26342c-0160-4fbf-ab38-bc4b046f4d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae743b94-b5be-498d-b22f-ed2ec3d2533d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3f4a7ce-c420-4281-b9c8-2aea34c1eb77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7b4d5dd-a558-4a8a-b77c-947ce569135d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "75262797-a0f3-4ad9-a59c-32e89e50b04b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e45fc42-3037-4ae2-8e8c-93f3816ed13b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e5f2d0fd-66ec-4edb-91b2-0095aeab6619",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3a200b62-a98a-459d-bed8-65b094e3ad96"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84ba51a5-3022-4129-89e9-e46768a3680c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c1ad0346-7282-4fb3-8ea9-0b243b39533f"
            }
          }
        ]
      },
      {
        "id": "6e3ed20c-cfc7-4a86-b7fe-20e3ce8eb6c7",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0a8cbf98-ba44-4f1f-809f-d249850baa95",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9038d3c5-735a-41b8-9899-6f7a72544964",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "caec7a15-ac6b-49ad-9639-969f87d2eb00",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d49c4ea-9523-4897-bf71-906cc6e138d5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a63a3d17-07fc-4eb8-b9e6-74b4f8028e87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c38a50-3a06-4f98-af24-5491b9dcdd5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ce01568-36d5-4b2b-8b90-d986e900f9ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49477bbc-de68-432f-ab86-90d222257982",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659e62aa-4e42-436b-b54e-eb3e632f4ee3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6e788ae2-4971-4eac-9e12-52f8315511af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fbddf72-f696-49f6-be33-d9d0dd62cbde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3f17e55-327c-4755-a351-9cff1069229c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "440ca3bb-2479-4165-8035-471ca3f285b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba7de110-98f6-4783-b475-e136e91b3bc4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eff47dd9-9b9a-46ae-be90-20f760db852d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d880dff3-8c7c-42fd-b322-5e38e321f625"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "408d1345-8bf8-4ec3-af1d-8771c08b2674",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5388596e-3445-4622-99d2-4403973660bd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8d05bb79-a330-46d5-90c0-dc1fd9d9664a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a5117b66-7f43-4ad9-adf7-4152123a724d"
            }
          }
        ]
      },
      {
        "id": "5d1bdcfd-b082-4603-9aab-9a72f6b4c70a",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "644743c1-aa90-4d88-bf7e-b1d98dbcc38e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7703da54-4ca9-4cfa-a5f5-e0790293a3ba",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c869fbf6-da08-426b-9810-565a8cd06792",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fb500f25-9633-428f-8681-3939f9c02c10",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6e832460-99b9-44d1-8c9e-98bbcae6d482",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 276.38076923076915,
      "responseMin": 7,
      "responseMax": 7833,
      "responseSd": 900.9552607859437,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1682815196906,
      "completed": 1682815279646
    },
    "executions": [
      {
        "id": "dc9d91a1-8bf0-4849-a9fb-46fa1878207e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a5d05592-9406-4305-91d3-426094e5ad71",
          "httpRequestId": "70cc5a5c-fa6e-47dd-a9a0-5696b4cd672d"
        },
        "item": {
          "id": "dc9d91a1-8bf0-4849-a9fb-46fa1878207e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "76790ff9-6fb6-44e1-83f0-f64f62ed4cba",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 0
        }
      },
      {
        "id": "09389757-43c0-4e37-8e58-80a4bf918238",
        "cursor": {
          "ref": "c4d3c26b-e50c-4c1b-b754-f4680eb66930",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "19d9dbdf-9150-455f-8bd4-e9049a3dd81b"
        },
        "item": {
          "id": "09389757-43c0-4e37-8e58-80a4bf918238",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5aee39d1-55d8-4073-9b5e-b2731715a053",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "c26c9eea-8286-4bdd-b00b-92a22a993347",
        "cursor": {
          "ref": "24f01bc2-f20e-48b2-b8ca-b4f8794c94fd",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "270d8dbe-6488-419a-bf8c-7094c0caa203"
        },
        "item": {
          "id": "c26c9eea-8286-4bdd-b00b-92a22a993347",
          "name": "did_json"
        },
        "response": {
          "id": "229efd7f-dc29-417a-80e4-f88da44458b3",
          "status": "OK",
          "code": 200,
          "responseTime": 399,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3caf1c3c-c593-44e6-bb65-3631096a7506",
        "cursor": {
          "ref": "c9777598-f3b5-45f0-9f42-ade0a3f3f986",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3042b3d3-3cfe-413d-9ed3-cf4ff90d8183"
        },
        "item": {
          "id": "3caf1c3c-c593-44e6-bb65-3631096a7506",
          "name": "did:invalid"
        },
        "response": {
          "id": "bfc40eba-4100-4c12-98d5-b5b6f698e5cf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 4723,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "3caf1c3c-c593-44e6-bb65-3631096a7506",
        "cursor": {
          "ref": "c9777598-f3b5-45f0-9f42-ade0a3f3f986",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3042b3d3-3cfe-413d-9ed3-cf4ff90d8183"
        },
        "item": {
          "id": "3caf1c3c-c593-44e6-bb65-3631096a7506",
          "name": "did:invalid"
        },
        "response": {
          "id": "bfc40eba-4100-4c12-98d5-b5b6f698e5cf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 4723,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "7a54b14d-eafb-4905-ae09-5692bc005e49",
        "cursor": {
          "ref": "ded4a17b-7f4e-45fc-90b3-d8a74d0db205",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "eac9b245-4c5e-48d7-8be6-116c9f0b5695"
        },
        "item": {
          "id": "7a54b14d-eafb-4905-ae09-5692bc005e49",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f6885e4e-c93d-4b57-9e49-49c5d8386588",
          "status": "Not Found",
          "code": 404,
          "responseTime": 34,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d76f16f-0b25-4b9b-ae58-389b78d5c0fa",
        "cursor": {
          "ref": "813f4a4e-49cf-44f0-a085-3d78b2dc4823",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a45d26b8-b182-46b7-bde8-c2c0d26bcf75"
        },
        "item": {
          "id": "3d76f16f-0b25-4b9b-ae58-389b78d5c0fa",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "17bcefb1-4160-4b68-aabd-bcb93214c05d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b901548f-a878-465c-8f3f-152382e4102c",
        "cursor": {
          "ref": "adf68218-6156-4964-a95d-99af3009a1f2",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "194d2566-2c5c-4961-9e11-0869907c055c"
        },
        "item": {
          "id": "b901548f-a878-465c-8f3f-152382e4102c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "fbdeb8d6-1df7-4e71-923a-ee098b9a17ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "57a8e721-4c29-4d09-8d46-d6ba8321d8cc",
        "cursor": {
          "ref": "5bd13475-addf-49f2-a20f-830e7c032a1c",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "09850ffb-bbd8-4d6b-89c4-7d02a87aefcc"
        },
        "item": {
          "id": "57a8e721-4c29-4d09-8d46-d6ba8321d8cc",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f60121bf-5529-48ea-85b2-3718df888093",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "57a8e721-4c29-4d09-8d46-d6ba8321d8cc",
        "cursor": {
          "ref": "5bd13475-addf-49f2-a20f-830e7c032a1c",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "09850ffb-bbd8-4d6b-89c4-7d02a87aefcc"
        },
        "item": {
          "id": "57a8e721-4c29-4d09-8d46-d6ba8321d8cc",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f60121bf-5529-48ea-85b2-3718df888093",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "b82afdeb-a5f6-4870-8a5b-5a2e06459cd9",
        "cursor": {
          "ref": "ad6737ef-669b-424b-8887-4227d0813ba1",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b369196f-7645-4356-b986-8ba79d597b23"
        },
        "item": {
          "id": "b82afdeb-a5f6-4870-8a5b-5a2e06459cd9",
          "name": "identifiers"
        },
        "response": {
          "id": "ded110da-259b-4e00-88f1-ed06ac9a009b",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf9e9a2-0ef4-49b5-8fe6-8b106d22af68",
        "cursor": {
          "ref": "bf3d62bc-7817-4b68-8e86-259192742ecc",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "26f07f72-88b3-434c-af3a-060feafd1f13"
        },
        "item": {
          "id": "6cf9e9a2-0ef4-49b5-8fe6-8b106d22af68",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e4575246-e0dc-41d6-90e5-fe4879c9b772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf9e9a2-0ef4-49b5-8fe6-8b106d22af68",
        "cursor": {
          "ref": "bf3d62bc-7817-4b68-8e86-259192742ecc",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "26f07f72-88b3-434c-af3a-060feafd1f13"
        },
        "item": {
          "id": "6cf9e9a2-0ef4-49b5-8fe6-8b106d22af68",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e4575246-e0dc-41d6-90e5-fe4879c9b772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d76a7e0-8ff0-4e24-a1fa-985ac87f1ac4",
        "cursor": {
          "ref": "709acfe9-99fb-43df-9a60-563eb7f50150",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "86bb1302-34ef-4cb9-92bd-ebaf2e5751ba"
        },
        "item": {
          "id": "4d76a7e0-8ff0-4e24-a1fa-985ac87f1ac4",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1b991cce-d81a-4101-9a47-3af7e2501f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9de6999-17dc-4b59-b794-f989e645d2a8",
        "cursor": {
          "ref": "b0a5670f-79f9-42bd-82c1-79d42c448800",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "141110ae-7b03-4ed3-8135-624956c9a75b"
        },
        "item": {
          "id": "d9de6999-17dc-4b59-b794-f989e645d2a8",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a85fbb3f-7618-4a2d-b6ca-42e86c3ea1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd56731-66e1-46a5-b554-a9f21d94e1bc",
        "cursor": {
          "ref": "b100c1a0-bd3b-4365-812a-cad107c00e74",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "69aa8149-e769-4b86-a010-548669339edb"
        },
        "item": {
          "id": "2bd56731-66e1-46a5-b554-a9f21d94e1bc",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "83fcb639-5ef3-4e2a-9080-2bf547e314f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc4daa7-0251-434a-bb8b-1e777928ab35",
        "cursor": {
          "ref": "88d089b4-aae0-40d6-a869-94d9a24552f2",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "15a5eca0-3c2b-4f23-a8d5-436b2f3fc254"
        },
        "item": {
          "id": "1fc4daa7-0251-434a-bb8b-1e777928ab35",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ab2bb5ac-c07a-4332-89b9-95a0ee28f22c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f57888-e3fb-47e3-8b8a-b698e9b663c9",
        "cursor": {
          "ref": "21024283-520a-4d60-ae43-59c7cba1fe69",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2f187d6f-44da-418d-a287-bec9a536be8e"
        },
        "item": {
          "id": "c3f57888-e3fb-47e3-8b8a-b698e9b663c9",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5a336c13-5f5b-4fb4-ad42-71a402f8b0a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ebdd748-1fea-4d5a-997a-a26dbc9ba613",
        "cursor": {
          "ref": "3994612d-8dfb-4233-be7d-9cd9d13a9627",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f745fd20-ea25-4655-aa8d-19dfbda72811"
        },
        "item": {
          "id": "7ebdd748-1fea-4d5a-997a-a26dbc9ba613",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "47e59ef7-6c2e-485a-9bc5-13dae6a0f1cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d337883-4cb8-494f-99fc-3b70344bb32e",
        "cursor": {
          "ref": "3ed64e66-966b-4efb-9e87-b3abed703201",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a19842fe-3ecc-4219-a4b6-cf8a4a02bf19"
        },
        "item": {
          "id": "9d337883-4cb8-494f-99fc-3b70344bb32e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8c6539e5-7371-4916-8c28-bc0b86e0e701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca53a74-ea02-4c3d-ab35-45240c9381ec",
        "cursor": {
          "ref": "60710721-2951-447d-b605-f31d49dd8853",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c8a79160-6d1d-47d3-b9f1-32d81b6be055"
        },
        "item": {
          "id": "9ca53a74-ea02-4c3d-ab35-45240c9381ec",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e45dad26-80af-4315-bc54-fae2e14ddd2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dce66cf8-3901-48ff-8c4e-0049aa029f1f",
        "cursor": {
          "ref": "660d3713-cdcf-474a-9050-bff9fa7278cb",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "951c9f65-ab14-4ead-8e9d-579aac2f09df"
        },
        "item": {
          "id": "dce66cf8-3901-48ff-8c4e-0049aa029f1f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0e1f8079-2ef6-4878-8b88-8f3aafd33294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "114d4549-dd8b-49a0-a7e5-755452a34630",
        "cursor": {
          "ref": "383713cd-4816-4a4f-9e82-54c4ac8b6ef8",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3880f6af-7c79-40ca-9062-d558294cff22"
        },
        "item": {
          "id": "114d4549-dd8b-49a0-a7e5-755452a34630",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "470e7345-5a6d-4482-94dd-6065c9b98322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ef0a49-044f-4a70-8aa2-07ee48543dc3",
        "cursor": {
          "ref": "26516e50-929b-4124-ad24-515999ff8af2",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "fe5e9068-5c07-4b51-b9a4-f953df3e6f69"
        },
        "item": {
          "id": "44ef0a49-044f-4a70-8aa2-07ee48543dc3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "13def568-8e1f-41c0-b435-7063556bc8b7",
          "status": "Created",
          "code": 201,
          "responseTime": 1271,
          "responseSize": 980
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "f0d119c5-6859-43af-9d9b-5759ee4049c6",
        "cursor": {
          "ref": "98a3b2a6-236e-4fac-95c2-51d2f8642d62",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7dc14899-3b2a-4712-90ee-f9dd892884bc"
        },
        "item": {
          "id": "f0d119c5-6859-43af-9d9b-5759ee4049c6",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8673433c-81f7-4598-885c-9b9aed022af3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ef85d2-1f2d-45cf-9347-124c362add09",
        "cursor": {
          "ref": "87ba889f-cf5f-4fe7-ba59-3b04aa8904ca",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8b3e9734-c775-4eac-a666-c224c7870487"
        },
        "item": {
          "id": "d8ef85d2-1f2d-45cf-9347-124c362add09",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "46902e15-1093-4473-bd9c-98cd0164de2f",
          "status": "Created",
          "code": 201,
          "responseTime": 6461,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "1ada4963-b07f-4e13-9f4f-450d6b1e97a4",
        "cursor": {
          "ref": "d8ebf235-e959-400c-851d-f08468d40f49",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "bf79072d-5aa5-4578-aba5-d473fe2d76f3"
        },
        "item": {
          "id": "1ada4963-b07f-4e13-9f4f-450d6b1e97a4",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e091b39c-3246-4796-b3be-d5ef01bb42b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70779a3f-dfd8-4939-b028-25a73e0cce11",
        "cursor": {
          "ref": "abd7451d-b691-450a-8194-753539cfb067",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ccb85db2-b11d-4ef3-a807-5e9eea46fb6a"
        },
        "item": {
          "id": "70779a3f-dfd8-4939-b028-25a73e0cce11",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "60d50510-9003-4014-967a-c77511dda7ea",
          "status": "Created",
          "code": 201,
          "responseTime": 3028,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "d83dfcca-5f78-4e85-be12-009bc3f7e531",
        "cursor": {
          "ref": "3e873a51-2160-41a9-bca5-b051d17804a5",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "48d08360-5690-448d-831e-afd22f0ccebc"
        },
        "item": {
          "id": "d83dfcca-5f78-4e85-be12-009bc3f7e531",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7c1db883-cc49-4e4f-b50b-65fb0857bddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a22722c-0217-4def-9771-c692eacdf077",
        "cursor": {
          "ref": "5973297d-679a-47b7-b71e-aece71d24e46",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "37b4d25e-7eac-4c8e-a17c-e544fa5fe252"
        },
        "item": {
          "id": "9a22722c-0217-4def-9771-c692eacdf077",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "77919515-f2bf-468f-bd5f-8bc36a3757d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0a83aa9-f0e0-4e33-9bd6-c174f26fb2cb",
        "cursor": {
          "ref": "0b2cecc7-f7b8-49f7-88cc-3c34660e6c56",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0e958f60-684f-4015-9739-a8fad85f4b39"
        },
        "item": {
          "id": "e0a83aa9-f0e0-4e33-9bd6-c174f26fb2cb",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "269bb632-1533-4d7a-b223-8a5020e4d3b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4110042-8ab5-4786-b748-3b252aca9359",
        "cursor": {
          "ref": "4454c4dd-a718-401c-b163-8a550abe2509",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8ddaab39-9be1-40c8-9332-0f72a8fd3582"
        },
        "item": {
          "id": "b4110042-8ab5-4786-b748-3b252aca9359",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1ce89674-3e2a-4322-bd01-cd363d04ccee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9911476d-b5a4-4773-b0d3-9a93aecde854",
        "cursor": {
          "ref": "0fa2a737-d2ab-49ba-9275-7b60ec200022",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "0bd328e5-6cac-45b8-86b4-a00c9e53f07f"
        },
        "item": {
          "id": "9911476d-b5a4-4773-b0d3-9a93aecde854",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f589b23c-aa09-4068-b8af-170eb5e5c5a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba532da9-8d9b-449f-8f8f-0472d371378a",
        "cursor": {
          "ref": "717f8d4c-75fd-4555-a3ba-0ed1d8cb12c3",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a6856bea-d0c9-44f3-b963-9988a5743988"
        },
        "item": {
          "id": "ba532da9-8d9b-449f-8f8f-0472d371378a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "512393e8-c31a-4af7-8c3e-7a726f728e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7119aeef-9d35-4161-9645-42ddf5510ba9",
        "cursor": {
          "ref": "45b8fe8f-ebe9-4fd2-af29-d98287989a9f",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a9fd50e7-1e92-4492-9dce-983f32dc3d69"
        },
        "item": {
          "id": "7119aeef-9d35-4161-9645-42ddf5510ba9",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "6f17a952-da2f-46db-9046-e9f8b3510fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d51110f7-81ca-46f5-b947-284c8d205dec",
        "cursor": {
          "ref": "3872b15a-4662-42de-ae55-3d383f7f35a3",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ce227cc5-08b3-4148-a64e-8745743834c9"
        },
        "item": {
          "id": "d51110f7-81ca-46f5-b947-284c8d205dec",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0eebc880-c638-44b4-b2df-798d17e2b354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3f3cf4-0b94-480d-b4a2-f847070521a2",
        "cursor": {
          "ref": "236af942-05ef-464e-9a70-3ab99499e3b3",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "71d7a50b-464d-479d-9739-b81eadc3ea69"
        },
        "item": {
          "id": "ef3f3cf4-0b94-480d-b4a2-f847070521a2",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "428dbfa0-9751-4022-9615-4608be91121c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d84dbdd3-eeb0-469a-9f71-37de39d5cf62",
        "cursor": {
          "ref": "8fcb3c75-9839-44c3-9225-0da83efc8d6f",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4bc6afbf-16f3-4d43-89d8-dfc6cb48dc62"
        },
        "item": {
          "id": "d84dbdd3-eeb0-469a-9f71-37de39d5cf62",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "99198cb8-0847-4c5d-a04e-e0a3767cf402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4659a5ca-5384-481d-b326-8a123ab2c462",
        "cursor": {
          "ref": "9347ac43-2020-4612-a6c2-19ce48816d38",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "98e9631b-3fa0-4d46-ba6f-d52a6fd305b4"
        },
        "item": {
          "id": "4659a5ca-5384-481d-b326-8a123ab2c462",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d30e91d7-6bfb-4cb7-8803-2906187336d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "631e75ef-b90e-4cf8-a6b6-49be9ac3110a",
        "cursor": {
          "ref": "48fce210-6655-40ed-bee7-6cf4e1d452aa",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b902bada-9531-47d0-8b74-4ea68f81e9af"
        },
        "item": {
          "id": "631e75ef-b90e-4cf8-a6b6-49be9ac3110a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "da0f5b88-b237-4e44-bd12-cfa80fca4e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e2092d-ce5d-4747-8eae-e7e073624971",
        "cursor": {
          "ref": "f8c43db7-0093-4c52-9415-6a5169618f9f",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7ae0402b-8565-4248-8219-0fedcdc50f43"
        },
        "item": {
          "id": "30e2092d-ce5d-4747-8eae-e7e073624971",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "185e96b9-dcaa-485c-88b3-0904690780b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c04e8fc4-1b31-4390-94be-849f0f43fa60",
        "cursor": {
          "ref": "aa3a4d80-c91b-4fc5-9f80-55645b7a906d",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "21be87b7-e07b-4f12-b5af-1aae1e2fd400"
        },
        "item": {
          "id": "c04e8fc4-1b31-4390-94be-849f0f43fa60",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a5286a7f-8983-472e-8de9-a06dd84fff9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2d10145-4bd0-4874-89d7-12163e13e6ff",
        "cursor": {
          "ref": "3930c67e-0848-4f8a-87a3-f6154085c123",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "126a78b3-9f1d-46f9-a180-41db81399f78"
        },
        "item": {
          "id": "f2d10145-4bd0-4874-89d7-12163e13e6ff",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0aa4b97b-2167-403e-b5c2-9dd873881173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "036c25d0-9b37-4b76-a7bb-3a2946e05ab4",
        "cursor": {
          "ref": "8cb21eff-f79f-4940-854f-846bc7534271",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "011e9da4-2aaa-436c-94a4-c0f6cdc1a9a4"
        },
        "item": {
          "id": "036c25d0-9b37-4b76-a7bb-3a2946e05ab4",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d259b8b7-6ac7-4e15-968e-02ae96e397cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328c23ba-82fa-47c5-bcc5-5a1d6edb5618",
        "cursor": {
          "ref": "7ff46a57-b603-42f5-940c-c46b68660a06",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "36da6259-8652-4a42-ae85-41c0756ff8ff"
        },
        "item": {
          "id": "328c23ba-82fa-47c5-bcc5-5a1d6edb5618",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "3f031bb0-98a5-480d-afd9-7a810799922d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8086115f-bb7e-42ef-9cca-8851383dd12b",
        "cursor": {
          "ref": "3642ccfc-1e2b-499c-85e0-be2682ce17f6",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6f1abdad-0e3e-483a-bd1f-eb66cff72edc"
        },
        "item": {
          "id": "8086115f-bb7e-42ef-9cca-8851383dd12b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9583e953-a5ca-43c8-9609-22097ab4f71b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b00b6354-8dca-44be-8285-72620576434f",
        "cursor": {
          "ref": "b6d34568-7693-4c99-b88b-9c824bcf42db",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5492a0be-27c9-490c-a49b-3a6c79f53022"
        },
        "item": {
          "id": "b00b6354-8dca-44be-8285-72620576434f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "678bf932-2968-4bd6-8b19-efac0990900c",
          "status": "Created",
          "code": 201,
          "responseTime": 2938,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "53c91aa8-9dd1-40ea-bb08-cb677ad889d2",
        "cursor": {
          "ref": "a10805ca-ed87-4197-8347-26ad111d0433",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c9b3be12-9ee6-44c6-87ab-d19837e8c3a6"
        },
        "item": {
          "id": "53c91aa8-9dd1-40ea-bb08-cb677ad889d2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "142cfd89-c4d8-4d81-a7c3-a00bb6489318",
          "status": "Created",
          "code": 201,
          "responseTime": 2639,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a58b4482-97bd-4022-9657-7d31c29929c5",
        "cursor": {
          "ref": "671205e2-63fd-43db-a3be-537a09a3b209",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "95d7cbf7-973f-4547-9aa5-c90430d3be2b"
        },
        "item": {
          "id": "a58b4482-97bd-4022-9657-7d31c29929c5",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9266314d-90da-4f75-a7c6-338546a16891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6993162-0184-4e06-a4fd-28d94c13d1dc",
        "cursor": {
          "ref": "ac60f21f-9bd6-4707-b363-ca0b5386ce43",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "63ef8cc9-f1ba-43c8-80bf-4c2152c20bb7"
        },
        "item": {
          "id": "b6993162-0184-4e06-a4fd-28d94c13d1dc",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c861b41f-9de6-463b-b421-8962125f8bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d564497-f352-4ca9-82a6-2955d7cec873",
        "cursor": {
          "ref": "2c86ce17-df5f-4b12-a35a-74641009e399",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c12e3f05-c6a0-48bd-9141-64c8bea49961"
        },
        "item": {
          "id": "6d564497-f352-4ca9-82a6-2955d7cec873",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9e89deeb-965f-4986-a76f-9cfb1c67015f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8abe7524-65d8-46de-a9dc-4395df85d94a",
        "cursor": {
          "ref": "708255cd-dcf3-4d2f-a3e5-525b1c93921b",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "69ae33f9-daf5-49d9-bbed-0c1e56cb4d8f"
        },
        "item": {
          "id": "8abe7524-65d8-46de-a9dc-4395df85d94a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b2bbd9a5-4ad4-45d4-a530-e6f0b5a7ca56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01f8dde-f640-443d-bc65-0eba56933902",
        "cursor": {
          "ref": "f5c4325a-488d-4954-a5bf-db6deda82b8d",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a2e65c82-07ad-45c2-b568-5910867fd046"
        },
        "item": {
          "id": "b01f8dde-f640-443d-bc65-0eba56933902",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "73122709-640d-41ed-8d27-b43a3cb30758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e90a0447-bf0a-4b36-b267-3f1dc833dec1",
        "cursor": {
          "ref": "16b1b059-505b-4c92-8ff9-2fdfe2bf87df",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "46e5c2d3-e353-4441-9321-9e1eb6895cbf"
        },
        "item": {
          "id": "e90a0447-bf0a-4b36-b267-3f1dc833dec1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3f6243c6-a737-441f-b18a-3d8d09f7de5d",
          "status": "Created",
          "code": 201,
          "responseTime": 2938,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "57b2bce3-e04d-4bf4-8123-5a63671a9f2b",
        "cursor": {
          "ref": "bb977c8b-dde5-4dea-ae36-7aafb3951f17",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8cdfcb11-3b73-45f8-8b84-35a0caef2214"
        },
        "item": {
          "id": "57b2bce3-e04d-4bf4-8123-5a63671a9f2b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "aa9fa0c3-23c6-4ed5-9910-6c24d7d534e6",
          "status": "Created",
          "code": 201,
          "responseTime": 3575,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "35be38a3-3625-4262-b4e9-ec6b7755c0c7",
        "cursor": {
          "ref": "7225ded2-2ed0-4b39-b6a1-678c43055225",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a09a89a0-00e2-4c42-9728-421cc9b6ed9a"
        },
        "item": {
          "id": "35be38a3-3625-4262-b4e9-ec6b7755c0c7",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "71b97763-ea12-4f91-9ff2-9800edb5c09b",
          "status": "Created",
          "code": 201,
          "responseTime": 2474,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "ab3cc7c2-120e-472d-b74f-06c35d5068f1",
        "cursor": {
          "ref": "06ef3019-04b8-4263-9002-719e898200df",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6e9d61c6-0e77-4965-b308-6fd25bef0a6d"
        },
        "item": {
          "id": "ab3cc7c2-120e-472d-b74f-06c35d5068f1",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6a0101ff-839e-4103-ac2a-6d963e18f701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46921085-98c9-441f-817f-b7baa056afbe",
        "cursor": {
          "ref": "90325a57-fe40-4245-b09a-21dcc72426cb",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2d368eb7-6f96-4af8-ac88-dc128fab2c8a"
        },
        "item": {
          "id": "46921085-98c9-441f-817f-b7baa056afbe",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ddde155e-d2b7-4d78-96ea-752810a82e76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea6e77b-19f0-4d63-98f8-cbd4d109584c",
        "cursor": {
          "ref": "791169f3-751f-478b-bc10-b94cc5a21fec",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "002f7f30-d926-4b46-be20-0748fa067da1"
        },
        "item": {
          "id": "2ea6e77b-19f0-4d63-98f8-cbd4d109584c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "b5a8e608-a1f0-4f76-8f3e-42ced1cfa62a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad3cc04-fab1-4773-9878-29ee54cbf20d",
        "cursor": {
          "ref": "6720208a-7950-4e75-b4ce-4e1a2cd99a80",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7936682d-73b1-4136-8bd5-33979cc18c17"
        },
        "item": {
          "id": "7ad3cc04-fab1-4773-9878-29ee54cbf20d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "41d49496-8dcd-40fe-a8b8-0823058addc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21226784-b267-46c6-b794-ad7a4d739be2",
        "cursor": {
          "ref": "4fe66e0b-2f45-4e01-966f-11b942e3c343",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "32fc9183-1d99-42e7-978e-0f345126fa4d"
        },
        "item": {
          "id": "21226784-b267-46c6-b794-ad7a4d739be2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "2d38750d-2e8b-4356-85f9-5bfc6c125f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb89417-9372-4c70-9d39-3661358ac176",
        "cursor": {
          "ref": "cfd83a01-5e38-4c1e-94f1-7262ec705ef7",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "eba0b962-2892-4488-b92b-de0ad25d53cc"
        },
        "item": {
          "id": "bdb89417-9372-4c70-9d39-3661358ac176",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "77c80ea4-4362-4c03-ac6c-c1df58200575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "635013df-05ae-4624-a569-2ba48c2443f1",
        "cursor": {
          "ref": "05380720-a59e-41b0-bd96-3b15c7d6a381",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f2c9a5b8-e1ce-49ce-a5f7-f0389d7b5496"
        },
        "item": {
          "id": "635013df-05ae-4624-a569-2ba48c2443f1",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "99c91a5b-6f14-4e42-a1ad-8141401e6975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb3a7c3-3b26-431e-8846-6d2aecc5e6a3",
        "cursor": {
          "ref": "47e5304a-c63a-40bd-b913-7af1aafa69d4",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "fd89eb47-7128-490b-a182-c3284245beff"
        },
        "item": {
          "id": "efb3a7c3-3b26-431e-8846-6d2aecc5e6a3",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "eb3c297b-fc13-41c1-ba6d-fa02bebf41d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4968a98-a792-4d52-99a7-7b9474e8c807",
        "cursor": {
          "ref": "af8ef52b-64b9-4781-8c65-919582a96a7e",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "17059cda-bf7e-4401-bf07-e6c1f69521af"
        },
        "item": {
          "id": "d4968a98-a792-4d52-99a7-7b9474e8c807",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d88b8fca-2eab-4e28-afbd-ca4bc9c85a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c47ed8-e7a0-4ae3-a956-f3968fabbae1",
        "cursor": {
          "ref": "1d92a680-0984-4500-9bc9-39ee715ceba1",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3f6d0a34-4b84-4326-8c65-2f0405472e3b"
        },
        "item": {
          "id": "93c47ed8-e7a0-4ae3-a956-f3968fabbae1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f4c37d37-0872-4907-8363-271b3a31ecd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb64f1b-b0ba-4f30-a60e-419f511778c2",
        "cursor": {
          "ref": "0a2297a3-ce43-4aa3-a6e6-e769f4233b60",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "7e428dff-07d3-4d10-9bb2-c902ed2f0006"
        },
        "item": {
          "id": "bdb64f1b-b0ba-4f30-a60e-419f511778c2",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d8f619b5-02e4-4179-9162-0ac6bf4c3945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c7c4603-7082-4370-be55-88ebb34494f3",
        "cursor": {
          "ref": "8b95b43a-610f-4852-84c9-a98972a93b09",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4908c352-5c25-4f4e-bb02-06af6f6fc468"
        },
        "item": {
          "id": "8c7c4603-7082-4370-be55-88ebb34494f3",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "876cb3ff-ab11-4c17-bc6f-8a0516414089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e3add53-3852-4b6d-9c5d-7fa40143c916",
        "cursor": {
          "ref": "24e75e83-f9d0-4de3-a467-7377bdbd1c4a",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "78aaa0c0-e990-47b7-9959-1760d984aa0c"
        },
        "item": {
          "id": "9e3add53-3852-4b6d-9c5d-7fa40143c916",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "afaebd8e-2aee-4626-9a92-375eb0103c7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17fd28e8-dbe5-4fdd-a9fc-c78e186934a6",
        "cursor": {
          "ref": "abe3a2e7-f79c-4434-aac5-0ccf1fe53183",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "143d7894-023e-48a2-a975-a84c7c6c66a9"
        },
        "item": {
          "id": "17fd28e8-dbe5-4fdd-a9fc-c78e186934a6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "10383ba8-479c-48a4-9444-b61347079a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b930f0-eb66-4960-b44d-3845a3689e50",
        "cursor": {
          "ref": "28f0cb8d-d181-49bb-b734-b6dc588f6614",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1da98d4e-08cf-444d-8fdd-bb8d4e1dfd34"
        },
        "item": {
          "id": "b4b930f0-eb66-4960-b44d-3845a3689e50",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ea1abd27-2c22-41b0-8a69-cc2257d63339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "586c931a-a10e-49d6-b3bd-d04dd3dcb049",
        "cursor": {
          "ref": "e5af36fb-8885-4fcf-a5fa-3e3fd0c8cfb3",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c2048cd9-9c42-44de-a17d-6bb51e8cc08e"
        },
        "item": {
          "id": "586c931a-a10e-49d6-b3bd-d04dd3dcb049",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "fc0d1566-888d-429e-b14b-fef711d77f46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c10e7b56-0b23-40cf-912c-a607f1669a3c",
        "cursor": {
          "ref": "b0f02cc9-dd7f-4ec9-bd6e-7197252b1200",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d742adcb-5155-46bb-9877-d83b24b90cdf"
        },
        "item": {
          "id": "c10e7b56-0b23-40cf-912c-a607f1669a3c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "82c70079-9a38-4a01-b6d7-e26d13aeb2e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67a7d75f-c5cb-4ab7-9f53-29077a4a2665",
        "cursor": {
          "ref": "5a377636-a1cd-44b6-8980-8a6f41a35bff",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a5cccd9a-23f2-4da4-9dd7-e2c04c1496cd"
        },
        "item": {
          "id": "67a7d75f-c5cb-4ab7-9f53-29077a4a2665",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "fe6e0bba-9fbb-4d42-bcbc-b716635f46f2",
          "status": "Created",
          "code": 201,
          "responseTime": 1980,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "9da02f5e-8658-4b9b-8326-f45bd5fac93b",
        "cursor": {
          "ref": "41d0511f-07bb-4604-bfd2-3f0ec7c72b20",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3a266caa-5abe-4cbb-9fa4-a1ed2493a6e1"
        },
        "item": {
          "id": "9da02f5e-8658-4b9b-8326-f45bd5fac93b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "165c151e-90a8-461b-99f1-c73d9b0c16c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d14c6d-37b3-4300-8c6f-516daace49b3",
        "cursor": {
          "ref": "4d634e77-f3c3-4eb9-a49c-6655f3ae8c7e",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "83529ec6-7e09-4f14-b378-d73ec8a8b9d0"
        },
        "item": {
          "id": "83d14c6d-37b3-4300-8c6f-516daace49b3",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f962e4ca-e6e1-429b-866e-1d5db98e208a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a26f96-ee82-4b0f-9af8-45bd309a993e",
        "cursor": {
          "ref": "9f482fe6-6cfe-41e5-82ea-7718feb6189f",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5dcdcb89-6dad-4c86-acc5-e9e470b85b9c"
        },
        "item": {
          "id": "e3a26f96-ee82-4b0f-9af8-45bd309a993e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "81810aa2-b796-45c9-a082-9fc7d0009762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0eeb015-c0f6-4e5b-8a61-e926996eb7c3",
        "cursor": {
          "ref": "728c5632-4e9e-41c0-b9db-547d54686db6",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c92b89d9-7db3-42bf-a59a-8ec9ecffdffe"
        },
        "item": {
          "id": "b0eeb015-c0f6-4e5b-8a61-e926996eb7c3",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "057bb9c2-3e30-4149-9567-86d86750159d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "829acd27-a463-4f36-9f45-d81deeb72e9d",
        "cursor": {
          "ref": "c2169059-9ea0-427a-84dc-9db88fd27746",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e8d9bd0b-9c16-4459-b924-d92794c05db0"
        },
        "item": {
          "id": "829acd27-a463-4f36-9f45-d81deeb72e9d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "87050fe5-15ec-4fb1-9ee9-0e0ffa9b1501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3144dd-9f0b-4cb4-9ecd-f5154299a92a",
        "cursor": {
          "ref": "b1cf0c31-9503-4140-ac9c-ba732d419f72",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "60f85fac-ad03-4345-8fd9-b1bafc8d40c3"
        },
        "item": {
          "id": "bd3144dd-9f0b-4cb4-9ecd-f5154299a92a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6482408e-bdab-4c7f-b4f4-46b5f2d8f077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aefef3a1-bf48-499f-bd80-c6661f7f5e61",
        "cursor": {
          "ref": "5eecde2d-1ed6-4059-846b-14407059986e",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "64ae9fd6-1012-495a-92ae-75933d631744"
        },
        "item": {
          "id": "aefef3a1-bf48-499f-bd80-c6661f7f5e61",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "dbd909b4-d2c1-43c7-b26e-caa4c5123524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "873df0b5-c57b-443a-b78d-20531bb6e07e",
        "cursor": {
          "ref": "479dc6c9-7029-4ab0-b865-6bddde14e2ff",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "553e96b3-6a54-46a5-9742-1208c129ba2b"
        },
        "item": {
          "id": "873df0b5-c57b-443a-b78d-20531bb6e07e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d7e46862-6e87-41b3-bdb3-95ae12ec36be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a8ed79-3e34-4df9-ac28-b8dbefb129ab",
        "cursor": {
          "ref": "afad4978-ada7-467f-9294-ed05147c3f55",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "0a87a059-6e1c-48d0-ba19-6df13147f0f0"
        },
        "item": {
          "id": "24a8ed79-3e34-4df9-ac28-b8dbefb129ab",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6dcb1fbf-c390-4ce9-8048-09ec2916f572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb89b141-aba9-4601-85af-93f056857c49",
        "cursor": {
          "ref": "11907149-2aa4-4695-83ee-b788a38a4168",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6b65af3b-503a-4d61-9851-3757cceef6cd"
        },
        "item": {
          "id": "fb89b141-aba9-4601-85af-93f056857c49",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "65a1d216-e384-46ea-a448-52e45a898455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c7eca1-9d0d-4ed4-8391-2ae3b36b3b92",
        "cursor": {
          "ref": "a0191981-658e-410e-9dd1-e108ea2b31c5",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6bce455d-b749-4b56-b503-0b9618867672"
        },
        "item": {
          "id": "e1c7eca1-9d0d-4ed4-8391-2ae3b36b3b92",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9ae5ffaf-6cdf-4405-8545-365e16008b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6258777f-a422-4236-976d-373912595118",
        "cursor": {
          "ref": "0cb496b4-bad0-4536-96bd-98bc7679e854",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8caa69f2-cdca-4eab-8ae0-99e95aae9357"
        },
        "item": {
          "id": "6258777f-a422-4236-976d-373912595118",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f02ad90a-c490-4c0f-b27d-187bbda91a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c86f6a6-95fe-48f8-9a85-ae397dbcedd1",
        "cursor": {
          "ref": "fbb301e9-75ac-4f4a-9f38-fa782f59c7e1",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "997cd5e3-2117-4155-9e1e-2bfa126456e4"
        },
        "item": {
          "id": "1c86f6a6-95fe-48f8-9a85-ae397dbcedd1",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e0a24510-3ad3-4bb1-a876-d3f2324407f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a87139b-5a8e-4063-8f75-76797fcdb6d1",
        "cursor": {
          "ref": "dcae9fd8-ef48-45b5-aeee-289c5b961d01",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "49639c56-293e-4d02-aa87-211f7b85c628"
        },
        "item": {
          "id": "0a87139b-5a8e-4063-8f75-76797fcdb6d1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4c13b95e-922a-4768-aa68-bafa1e9ba457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b5da8d-b9d7-44fb-aded-20c4a69e418b",
        "cursor": {
          "ref": "64162fc2-dfc4-4d5d-840e-51986e1a4702",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "4510a946-74e2-4dc6-bbc1-88ecd65cd908"
        },
        "item": {
          "id": "63b5da8d-b9d7-44fb-aded-20c4a69e418b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "609d0122-64e4-45ab-8342-c44cb3237bd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10045833-91c7-4ff4-9a29-281b6dd5a57a",
        "cursor": {
          "ref": "3f2506fb-5d9b-40a1-b987-6e4ce7037534",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "fdd27f8d-15e6-46de-b1dd-d57083202f0f"
        },
        "item": {
          "id": "10045833-91c7-4ff4-9a29-281b6dd5a57a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "63d5e2ba-09ef-438d-8ac2-b5b75f48bde7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbcab0cf-cd4a-4302-9151-438210d559c2",
        "cursor": {
          "ref": "6bcccd3b-dc96-40b1-8ebb-0d3daa032c5b",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "98206ef0-29c4-4026-af48-519a23535bde"
        },
        "item": {
          "id": "dbcab0cf-cd4a-4302-9151-438210d559c2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ecb3c0d0-70e0-45d0-b184-663ce6da6f00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40e3c44-ec25-4f7e-a49e-22ecb3eb7d1f",
        "cursor": {
          "ref": "ef5c5425-55d3-4910-ac1e-d313319aca99",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "edd11875-a8e3-47f0-84f8-f9ea7c5aff77"
        },
        "item": {
          "id": "b40e3c44-ec25-4f7e-a49e-22ecb3eb7d1f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9d459d52-5239-4673-90d4-4c48478297b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e70894d-61a7-43f5-b165-fccb80a9a9b8",
        "cursor": {
          "ref": "ceafe5c3-2fb0-46aa-857d-e5f01238660f",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7b91afb3-e6f6-491b-bc00-e1b3dd58e512"
        },
        "item": {
          "id": "4e70894d-61a7-43f5-b165-fccb80a9a9b8",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4595f398-ecf5-4b4a-a0df-4c233013b94d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eebdf19-9ab7-4bbb-9f8f-c3a11cf14acb",
        "cursor": {
          "ref": "6139d8f0-4585-418a-af01-bd26f3264ae5",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "4cfb79b5-0ca3-499c-89f6-dea715ece078"
        },
        "item": {
          "id": "2eebdf19-9ab7-4bbb-9f8f-c3a11cf14acb",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "32e443b9-10c7-450c-aaa2-82dc219ed518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcf5af2d-1182-4d2a-9023-6fa45a12d34f",
        "cursor": {
          "ref": "ceaa383f-b20b-4511-ab01-2591fb8209c6",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ae0fe918-5fb5-494b-98b7-df2fdf938735"
        },
        "item": {
          "id": "fcf5af2d-1182-4d2a-9023-6fa45a12d34f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "305fbb04-7827-4aa9-a0d3-8759101eb537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4760542-2e1c-4199-afd5-469eb61796a2",
        "cursor": {
          "ref": "77d62020-a04c-4108-9f84-a4522c1f1b5f",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b1ea64cc-5382-400f-a02a-67590af50ccf"
        },
        "item": {
          "id": "c4760542-2e1c-4199-afd5-469eb61796a2",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "8224aaa8-589f-4851-8d1c-1b83bc9e3ee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a557efed-7b11-4569-bad2-95f6ffcad204",
        "cursor": {
          "ref": "a6863e0e-84f2-410b-80d8-881d5a4e625d",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c0b3860c-eed9-43a9-9ab7-9643b62f2129"
        },
        "item": {
          "id": "a557efed-7b11-4569-bad2-95f6ffcad204",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5c1cb70a-29cf-47a7-8c9f-cf37f3f9464e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4abd251-1276-4afa-a8f8-0d6bf66617c1",
        "cursor": {
          "ref": "3c520d98-8514-4912-a5ac-1a7b70739187",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d6811008-07c4-43cd-bd09-caaa585c9a79"
        },
        "item": {
          "id": "c4abd251-1276-4afa-a8f8-0d6bf66617c1",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d993a63e-dcd7-4d49-80bd-b6508af52854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc4ef166-3f83-4f6b-b75d-091ca9a1de48",
        "cursor": {
          "ref": "90769629-37b6-46b7-b3d5-66b1086684d0",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "9ed3e20f-9a0b-4f68-b6ba-2253a6842e7f"
        },
        "item": {
          "id": "fc4ef166-3f83-4f6b-b75d-091ca9a1de48",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2280f7d5-3f5c-472f-aa9e-b777ac409ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f3b4236-4792-44aa-a849-4ff95d2256d9",
        "cursor": {
          "ref": "73d96832-590c-496f-965d-78b4aac32b38",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "bebca1da-2ee1-4ee6-a3fc-4b7bb70c2a35"
        },
        "item": {
          "id": "4f3b4236-4792-44aa-a849-4ff95d2256d9",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4674ccaa-1f0c-442a-83b2-69ad83ec611b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a422588e-be17-487a-93db-508fd0872bf7",
        "cursor": {
          "ref": "0cbcb1dc-9f2f-4c52-8746-b3d55b006c78",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f8d3c562-c866-4562-a723-932a19d2a454"
        },
        "item": {
          "id": "a422588e-be17-487a-93db-508fd0872bf7",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3bb0db1a-0d53-4eb0-99f8-5bbad1563eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a29dbb8a-a78d-431b-bd2a-31041daafed6",
        "cursor": {
          "ref": "66f7ef36-2e65-49c7-9326-1efdbe77c6c0",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "238a62d0-4f26-41db-a8b6-82de9b47d23a"
        },
        "item": {
          "id": "a29dbb8a-a78d-431b-bd2a-31041daafed6",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0f195ccf-37cb-4093-97ee-551f16d9465c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2670c2c6-e76f-4d70-aae7-b61eefeb629a",
        "cursor": {
          "ref": "3d355359-1868-4cfb-9072-aa44f4471eef",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b5bc383c-24a7-4459-8269-0f68ebf6688b"
        },
        "item": {
          "id": "2670c2c6-e76f-4d70-aae7-b61eefeb629a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b038b1e6-d0e1-49f4-bb10-2dadba5a08fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59e5788-4e03-4a85-92c9-dcde45a7d87e",
        "cursor": {
          "ref": "690d7d73-5074-424f-9c9a-3ae99a393f07",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "853a2d1d-6f96-4107-bff8-cbc157660b03"
        },
        "item": {
          "id": "a59e5788-4e03-4a85-92c9-dcde45a7d87e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "856156db-22f6-4f70-b80c-1169edbaeb6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef6f6ba-ead3-478d-bbc0-5496b7f2ae6a",
        "cursor": {
          "ref": "53506025-14cf-4c3c-b2ce-beb7b1d39fec",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7d4a4153-f803-4691-8355-c88e9a9344c7"
        },
        "item": {
          "id": "aef6f6ba-ead3-478d-bbc0-5496b7f2ae6a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0f0339a2-3975-4279-a184-8ff61d5d6dbf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "ab19e7e0-6d71-4713-bf6c-bea3d5493d07",
        "cursor": {
          "ref": "065a2576-72cc-4f91-831b-0e1c32578263",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5daa5479-5d51-47b5-8753-2f9ac35e7942"
        },
        "item": {
          "id": "ab19e7e0-6d71-4713-bf6c-bea3d5493d07",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "782727a5-9be3-4ccb-871d-80154e08ab93",
          "status": "Created",
          "code": 201,
          "responseTime": 1881,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "7906016f-3f04-44e0-89ed-021b86227d9a",
        "cursor": {
          "ref": "3271b6ee-1a9e-4a9f-a37a-3f7eeb828978",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2e462469-cfe5-4f60-8c92-00d020ec98ee"
        },
        "item": {
          "id": "7906016f-3f04-44e0-89ed-021b86227d9a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b74606d1-63c0-43c2-9c86-eeaf225b490d",
          "status": "Created",
          "code": 201,
          "responseTime": 2350,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "41212d7c-0c4b-4afb-b137-5afbbb0cebfb",
        "cursor": {
          "ref": "874b2672-5596-4a88-b2ca-efcd7999f72b",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "22e78d94-2dfd-4f3e-95e4-68cf022e4305"
        },
        "item": {
          "id": "41212d7c-0c4b-4afb-b137-5afbbb0cebfb",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b0ff7986-9110-4485-8593-f9f5e486741c",
          "status": "Created",
          "code": 201,
          "responseTime": 2158,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "245ff8a5-cdee-4375-b5bc-8c283b4a45cc",
        "cursor": {
          "ref": "8391f581-f75b-4b7c-a862-9917249a2eb2",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "58ef15b4-e60f-438c-a5f1-aa25284dda77"
        },
        "item": {
          "id": "245ff8a5-cdee-4375-b5bc-8c283b4a45cc",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "009be9be-5a0d-4175-8d98-e8ab82e36d1d",
          "status": "Created",
          "code": 201,
          "responseTime": 2572,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9adf61e3-6661-466b-99eb-ec61cc1d9a04",
        "cursor": {
          "ref": "cb5e7126-df43-4416-9166-4b9adaa9201c",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8e7c2440-9ba2-4450-abcb-790c4de14d49"
        },
        "item": {
          "id": "9adf61e3-6661-466b-99eb-ec61cc1d9a04",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "bffbfe2c-b88d-496f-9116-70e2664efbeb",
          "status": "Created",
          "code": 201,
          "responseTime": 2577,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "46bedb3d-2097-42a8-a43b-c6bc30b0b0e9",
        "cursor": {
          "ref": "ef62a8a9-5a20-44b2-996b-f2717677874e",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8088ec9b-2dbb-42ce-bce4-9160ac32392b"
        },
        "item": {
          "id": "46bedb3d-2097-42a8-a43b-c6bc30b0b0e9",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a65d9263-1a40-4176-bb93-0a6459f1493d",
          "status": "Created",
          "code": 201,
          "responseTime": 2337,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-30T00:40:58Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-30T00:40:58Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "e0f98755-7d67-4ab6-b930-b59fb8637675",
        "cursor": {
          "ref": "795f96d1-35cd-41ba-bfe3-12148bdf4d0d",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b7488acf-5532-4c92-8c09-cfd4a9e4454a"
        },
        "item": {
          "id": "e0f98755-7d67-4ab6-b930-b59fb8637675",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "bc3f2af9-b63e-4622-b001-6bdfa3b9fa93",
          "status": "Created",
          "code": 201,
          "responseTime": 2581,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef80215-c6d7-4bda-a393-060867d7d45b",
        "cursor": {
          "ref": "bf662a7f-4d68-4e4a-a29f-47d8059e14da",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e2cfc502-638d-4481-a8b2-d435f62454e3"
        },
        "item": {
          "id": "9ef80215-c6d7-4bda-a393-060867d7d45b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "482c2a7f-eb89-4c41-8982-50e25d9bb18b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef80215-c6d7-4bda-a393-060867d7d45b",
        "cursor": {
          "ref": "bf662a7f-4d68-4e4a-a29f-47d8059e14da",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e2cfc502-638d-4481-a8b2-d435f62454e3"
        },
        "item": {
          "id": "9ef80215-c6d7-4bda-a393-060867d7d45b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "482c2a7f-eb89-4c41-8982-50e25d9bb18b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa13da8-841c-4b1d-a065-10759e747fd7",
        "cursor": {
          "ref": "10fa6ad0-ba90-4416-8e91-ce996840fd49",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9c49d372-f3aa-4b0c-bfd5-6a1939643722"
        },
        "item": {
          "id": "efa13da8-841c-4b1d-a065-10759e747fd7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "dd9c3f7c-0a19-473e-82c4-daa5d3658eb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc59047c-2f44-4c5c-b742-93b111528ab8",
        "cursor": {
          "ref": "05f8c0d4-71d2-4a6d-9eb1-7be86491337f",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a564fd2e-7641-4199-b683-ce8d5f3d01a6"
        },
        "item": {
          "id": "fc59047c-2f44-4c5c-b742-93b111528ab8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "33b68df9-4061-4da6-8df0-e8eaf820bbb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a747648d-c3db-4fa7-8e3d-ddff4ad3eba5",
        "cursor": {
          "ref": "5ecc1d13-94e4-4557-8a61-192df2a3fdc5",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7237be32-635c-461f-82d8-f2675d033c9e"
        },
        "item": {
          "id": "a747648d-c3db-4fa7-8e3d-ddff4ad3eba5",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1875a000-d3a9-4c4e-9010-309dc869cc95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a543d8e7-42db-4e3b-b3f5-be836e9ef6ed",
        "cursor": {
          "ref": "849428ef-c585-4cc3-b390-970e42509980",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d1e91fbe-d933-4769-a409-37bc9d405a16"
        },
        "item": {
          "id": "a543d8e7-42db-4e3b-b3f5-be836e9ef6ed",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "74ca7960-9ee4-4151-add4-40269e60474f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b68568f-60fc-489a-8591-6d0de6443841",
        "cursor": {
          "ref": "7c042239-921d-48d7-a502-e59388fc25f1",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d44b163d-93d0-472a-94c3-daeb3eccde42"
        },
        "item": {
          "id": "9b68568f-60fc-489a-8591-6d0de6443841",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8c8a9bca-6b17-49e6-868b-e232af906549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a3bf32-223e-41c9-809f-ace5658d8c9e",
        "cursor": {
          "ref": "0d2de07d-b16e-457d-83e3-88e25c450fd5",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f34c0be6-a05d-4619-8fc1-c19985312a0f"
        },
        "item": {
          "id": "a6a3bf32-223e-41c9-809f-ace5658d8c9e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8a379957-a66b-457e-9aa2-14876b7b019f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6389364d-9a67-425a-a1e3-f7c2181814b2",
        "cursor": {
          "ref": "e561d93c-0138-4ff8-b545-4187897d7657",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "007998a4-deab-4681-83c3-c1b78db87cd3"
        },
        "item": {
          "id": "6389364d-9a67-425a-a1e3-f7c2181814b2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d442d8a4-e3ac-4761-bc5d-571e2f4d4e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b536b6ec-bfff-4f34-8409-a96ad876ac50",
        "cursor": {
          "ref": "2d3a13e6-9a81-40ee-a72d-79f1c747e761",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f54cc0aa-6790-4719-ae99-7b15ea08fae9"
        },
        "item": {
          "id": "b536b6ec-bfff-4f34-8409-a96ad876ac50",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f8213d8d-8474-4e96-aa7c-c0ddd2d0e5ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a8a870e-284f-4c47-b8d5-d075bcef0ba4",
        "cursor": {
          "ref": "2fc17f09-95d2-48e6-a469-04bb914824f2",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "dc6395b8-990c-4e2f-a5ee-6308c30efe5a"
        },
        "item": {
          "id": "3a8a870e-284f-4c47-b8d5-d075bcef0ba4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0c0c66be-2da6-4528-9248-e0c0a0df4212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3af4b9-3545-4165-9683-bf44da3498bb",
        "cursor": {
          "ref": "3a3530f2-1536-49d2-a298-6ff9c41e950b",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "52df6634-ee76-4ffc-8c1f-3cc661a35d45"
        },
        "item": {
          "id": "2d3af4b9-3545-4165-9683-bf44da3498bb",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "07692a2f-0bca-4920-8310-aa47e05150c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc3b792-1b71-4fed-801b-253c85816a8a",
        "cursor": {
          "ref": "2451ee17-3cfd-4c86-8938-0df7494ff618",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8db89090-a889-48be-95dd-1afe03a6214a"
        },
        "item": {
          "id": "bcc3b792-1b71-4fed-801b-253c85816a8a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "96f7a10d-c177-47ec-8e08-141491a358d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e2c560e-9b0c-43ff-8541-7cf77e6ecdc6",
        "cursor": {
          "ref": "54180fb7-8c72-43df-b1f4-b02b09db443f",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "10385403-0136-45cd-a8fb-b637f84e295a"
        },
        "item": {
          "id": "6e2c560e-9b0c-43ff-8541-7cf77e6ecdc6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2fcfd9b3-0df8-4d56-a343-7604cac41418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca92411-810d-4cf3-82a2-1cb0b3a07d09",
        "cursor": {
          "ref": "1b635e72-cc12-4756-a34d-2c1a303d39ec",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e2d5308f-e883-40cb-ab55-f43951ac9875"
        },
        "item": {
          "id": "aca92411-810d-4cf3-82a2-1cb0b3a07d09",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f7d3693b-97e9-4924-8e89-d3acc16d7796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e240a10-a7f8-43d8-9ac7-477624d48cd6",
        "cursor": {
          "ref": "f94a9155-3090-4d84-8d49-39bff9813152",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "09f62a85-21b1-4eb8-8704-e9d1c927400b"
        },
        "item": {
          "id": "1e240a10-a7f8-43d8-9ac7-477624d48cd6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ca5a67e6-43e6-4a43-903c-7fa8a1e5a66e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d874d6b9-8d5e-41f1-81a6-2c4f2066b7e6",
        "cursor": {
          "ref": "152e9736-ac7e-4016-9371-25da447d2ba7",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "985a713b-5c68-4b8f-b4b1-9ee5c779c13b"
        },
        "item": {
          "id": "d874d6b9-8d5e-41f1-81a6-2c4f2066b7e6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8b8aaef9-e0d9-4fe3-ac62-f79162a730c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68f70f9-74f0-4500-b98f-c63ecd346504",
        "cursor": {
          "ref": "a529cc3a-5a77-4be6-a587-b7d78908a769",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "021733bd-ad8d-488e-9ec5-d07a226fe29a"
        },
        "item": {
          "id": "e68f70f9-74f0-4500-b98f-c63ecd346504",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "492cf707-4a01-4930-847b-98610e91042e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69a5915-d07f-42d7-ba8a-1aa1e998ed0f",
        "cursor": {
          "ref": "0fa8d574-5b22-4165-82b7-dbabdcb5bae2",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "de15ca78-69ea-4b4f-bd5b-3bbe1bb16e9f"
        },
        "item": {
          "id": "e69a5915-d07f-42d7-ba8a-1aa1e998ed0f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8ea46c82-b9af-4b3c-b794-b9a80045b543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b77dd6b7-24be-4886-9ef7-60ec6d6e43ed",
        "cursor": {
          "ref": "955f9134-7b5a-42ea-aba6-6f42196d2796",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "603fa68d-b23b-4657-9de5-6551cc5bcd3e"
        },
        "item": {
          "id": "b77dd6b7-24be-4886-9ef7-60ec6d6e43ed",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b012fa6e-ae9e-47bd-ad51-848d6a2a558d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd56540f-d5c7-442c-b738-a5a9bf3ae2cf",
        "cursor": {
          "ref": "0d02818a-a7b5-4b5a-87d1-1dd6dd9ca946",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d679bdfc-8c04-433d-9cc6-a1229a245b33"
        },
        "item": {
          "id": "bd56540f-d5c7-442c-b738-a5a9bf3ae2cf",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "dfa6ed02-a971-49d8-b56b-070105968993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42de8b7d-7f69-4e01-86cf-cbc20ef61bef",
        "cursor": {
          "ref": "deab161a-124c-4df5-9239-deaac3aec9a3",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "40477813-ced3-4959-bd3b-7bc686a63930"
        },
        "item": {
          "id": "42de8b7d-7f69-4e01-86cf-cbc20ef61bef",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "dee6278d-38d2-4d15-883c-64366d78a5c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "557cfac5-dbda-4c98-b66b-bce1e7b77d4b",
        "cursor": {
          "ref": "8e4cd445-cb09-44ef-a6a5-b663e2697bca",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f76bea06-da22-41df-96c5-2630ae35f7f7"
        },
        "item": {
          "id": "557cfac5-dbda-4c98-b66b-bce1e7b77d4b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2943587b-2b1b-4b8c-b427-9267cc71f1c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2597115f-ec6c-434f-8232-768f38b4df16",
        "cursor": {
          "ref": "4edbceac-5a19-4d40-8f8d-f320b1737c26",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "acf897b9-d5d3-4ae5-9b69-6b2b0d7885d4"
        },
        "item": {
          "id": "2597115f-ec6c-434f-8232-768f38b4df16",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "99cdab4c-b0c1-480a-a9d4-06dbb2be0df0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10786db7-ffc2-4aec-82e6-e26f3f10a7d2",
        "cursor": {
          "ref": "f7c0f685-e6a0-4cad-a4dc-8e1f0150b9ac",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5d6caa4e-ee2b-486f-a856-65343f4ecef1"
        },
        "item": {
          "id": "10786db7-ffc2-4aec-82e6-e26f3f10a7d2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a0b8cf68-f2af-4015-9c0c-44e9b66574e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4313af78-fa84-47cf-b656-6a84f436835b",
        "cursor": {
          "ref": "6a58d9ff-5615-484b-bca1-e4afe55fc4e3",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "66cb4f14-9564-4ad1-9603-6365f229f3ca"
        },
        "item": {
          "id": "4313af78-fa84-47cf-b656-6a84f436835b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2f9d2757-0aa3-415d-99de-8433f295fb64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cded8b7-12ac-4058-9e2c-93cc0820e566",
        "cursor": {
          "ref": "9f35fc54-312e-45e7-8995-44b63048e686",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "319912f9-9814-4ad2-93c4-7328aee43eee"
        },
        "item": {
          "id": "9cded8b7-12ac-4058-9e2c-93cc0820e566",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a7d9623a-7057-4d2a-bff5-c8f7e86e0e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e331f84-1275-4ca9-bf25-b325782a34dc",
        "cursor": {
          "ref": "ce796f35-2d2c-4167-9f20-3e21c79a68b6",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a2113ed5-e5c8-4cec-90dc-4c86d507d647"
        },
        "item": {
          "id": "9e331f84-1275-4ca9-bf25-b325782a34dc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3936c467-a720-44bf-b439-8eb1d0aa6a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "434533ff-2f43-43c7-a271-53d2c3c52c69",
        "cursor": {
          "ref": "5b7e18c9-c766-436c-88b4-3c7b3fae28e3",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e9e4df6f-0d38-493e-b0a4-94a08f409bd2"
        },
        "item": {
          "id": "434533ff-2f43-43c7-a271-53d2c3c52c69",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "cd00cf9d-11bb-42c8-9002-cabf8712f42a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "589dfede-fe0d-421a-a5dd-ac5283ebb63d",
        "cursor": {
          "ref": "f2830f88-2fc9-448e-a68f-91200a6131ae",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f944f41f-c807-4f54-ace1-db3ce00e4475"
        },
        "item": {
          "id": "589dfede-fe0d-421a-a5dd-ac5283ebb63d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "bef8d877-2262-41ac-9ac0-b72056ba44d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dea83f9-fd92-4399-b5af-7fd04feeda7d",
        "cursor": {
          "ref": "6f57eee7-7623-45a4-baac-4da5570cf506",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a0bcba72-18ab-4dee-be4b-b2e80c620dbc"
        },
        "item": {
          "id": "3dea83f9-fd92-4399-b5af-7fd04feeda7d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2033c0b5-e886-448c-9c7e-d4eeadf6c2e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec553822-cead-4e13-be36-7c0af23a271a",
        "cursor": {
          "ref": "8f2ffd1d-ff9c-43c7-9996-d73eac91ff0f",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5bea1a31-1428-46cd-bdb0-d8290eb0c77f"
        },
        "item": {
          "id": "ec553822-cead-4e13-be36-7c0af23a271a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7a277141-0e7d-4c99-983c-53f515c9afc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e7539a6-99a4-472f-8005-61db78540f52",
        "cursor": {
          "ref": "b7ecc22b-d109-4508-a6f9-76a4c3d5942c",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6e9cab95-46f7-43e4-8b13-14df0aa3152d"
        },
        "item": {
          "id": "2e7539a6-99a4-472f-8005-61db78540f52",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "11cddc6b-0b99-4455-a342-5fe2bfc5b954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f2fa0b0-a1d9-476d-aea7-3c7cd470954b",
        "cursor": {
          "ref": "6c8dce3a-c4a8-4720-8994-51b59ab79baa",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "88cc03cc-29ab-497c-9007-f6fe2fb495bf"
        },
        "item": {
          "id": "6f2fa0b0-a1d9-476d-aea7-3c7cd470954b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "962e1eaa-2dcf-4df3-a440-07cd52fc775d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "f9f16ac6-56ba-4338-b587-151131ffdc74",
        "cursor": {
          "ref": "6fca55a4-679e-44e7-827d-6d3cc9b0362d",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "8567319c-40f4-4527-993e-74c629b899cd"
        },
        "item": {
          "id": "f9f16ac6-56ba-4338-b587-151131ffdc74",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "57ecace0-6cec-4345-828b-94a2c24bca50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "9b36ef91-5f53-41ad-ac7a-974732d67636",
        "cursor": {
          "ref": "d89ba123-b787-4889-9d27-019f68559e12",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5b895a7d-5b8e-4835-badb-5701954f4991"
        },
        "item": {
          "id": "9b36ef91-5f53-41ad-ac7a-974732d67636",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3a4c9cd4-ba24-4ec2-aa3f-f5395154aa8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b36ef91-5f53-41ad-ac7a-974732d67636",
        "cursor": {
          "ref": "d89ba123-b787-4889-9d27-019f68559e12",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5b895a7d-5b8e-4835-badb-5701954f4991"
        },
        "item": {
          "id": "9b36ef91-5f53-41ad-ac7a-974732d67636",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3a4c9cd4-ba24-4ec2-aa3f-f5395154aa8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e58d69f-c3b6-444c-8041-f377a12c88cb",
        "cursor": {
          "ref": "797c3f3c-7f07-41f3-8259-178135d0ac65",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "da3b5fa8-7d82-4541-bff2-0fffc59d54d9"
        },
        "item": {
          "id": "0e58d69f-c3b6-444c-8041-f377a12c88cb",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e9e197c6-ccfa-4800-966e-a1255994acd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3788eba-b572-4ab2-9582-610c5d19eddd",
        "cursor": {
          "ref": "4f535d2b-1c47-4178-9533-8a47128a48f7",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "0a8cb6d2-a127-4bcf-9bf1-b3ae19aaba06"
        },
        "item": {
          "id": "e3788eba-b572-4ab2-9582-610c5d19eddd",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "499cdbaf-20fa-4c7e-b245-ca82301b1b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5df3865-c449-4b09-a1ca-ebf61903bfb9",
        "cursor": {
          "ref": "9382fe17-4359-4fe1-b9c1-73a680380d05",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1859a45d-64de-41cf-a9df-0af3d71a755d"
        },
        "item": {
          "id": "b5df3865-c449-4b09-a1ca-ebf61903bfb9",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c7074fdf-dbc4-47c4-8558-018949cf854e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e582f443-e7d6-4b2b-82b7-1124ed4495bb",
        "cursor": {
          "ref": "f5c45a75-4037-4feb-9f95-f5fe6863ce4e",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "bc770d05-cb0b-4eec-adf8-c37b15d6661b"
        },
        "item": {
          "id": "e582f443-e7d6-4b2b-82b7-1124ed4495bb",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b55b7910-f7d7-437f-884b-a049c3644ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10ee91c-56a1-474f-ad54-dce90b55e695",
        "cursor": {
          "ref": "0a42bad8-fd01-4e28-bc0a-157c0365b02c",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6b3f0bee-b833-4fdc-8ad4-20cbfcc01425"
        },
        "item": {
          "id": "e10ee91c-56a1-474f-ad54-dce90b55e695",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "245bf786-0dc7-4a23-a5a2-2640bb297093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1efc93f8-6f09-438f-ba5d-ab8ed75fd81c",
        "cursor": {
          "ref": "1249ac54-8a4a-4d29-8acc-d097cc4037a7",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e2e3e6b1-ca10-483f-b7a9-a31b63e67fc4"
        },
        "item": {
          "id": "1efc93f8-6f09-438f-ba5d-ab8ed75fd81c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e7eec892-dba3-4fc7-8896-a3d352924ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fca9bf3-22b1-46a7-b84b-1c010ef3cb93",
        "cursor": {
          "ref": "dea39007-d8ba-4185-b058-a43b3e476758",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e5308e6b-4ecf-4f89-8add-00867942c8a9"
        },
        "item": {
          "id": "6fca9bf3-22b1-46a7-b84b-1c010ef3cb93",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "354d03b1-1051-4305-baf2-3da81f90fd0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f46c47-f6df-4e1d-870f-e212f8264eb6",
        "cursor": {
          "ref": "e95b50fa-5cf5-400f-a121-84ff30b9fe77",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1a204124-902d-4d3a-8e12-d625bf8534b7"
        },
        "item": {
          "id": "72f46c47-f6df-4e1d-870f-e212f8264eb6",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "dc0e6b5a-b041-4e76-b95e-b1c2ef97a0c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "102ca51b-0802-4f3a-b8ea-2fe660134cb2",
        "cursor": {
          "ref": "86749319-aeed-4a6d-a372-1c4683e6c6b2",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "792e1568-36f4-424b-b900-e5054935244d"
        },
        "item": {
          "id": "102ca51b-0802-4f3a-b8ea-2fe660134cb2",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "07699885-9cdc-4487-9ed9-f365e29abe0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f6a382-ae23-470b-9749-785013a688d9",
        "cursor": {
          "ref": "7744cdf9-87a8-4daf-a1fd-9be4b5492dd7",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "48237421-e679-45b9-8c43-e3c02befd9e9"
        },
        "item": {
          "id": "67f6a382-ae23-470b-9749-785013a688d9",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b7579664-1659-4aef-afff-8a5452c37fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160449a7-f1ac-4177-8747-5732b8c34b6c",
        "cursor": {
          "ref": "1091ddc1-2885-4fc9-9f60-2cddeae058d8",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "e7bceb5b-d329-47f0-8384-87062c3a87c1"
        },
        "item": {
          "id": "160449a7-f1ac-4177-8747-5732b8c34b6c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "36dc6b0e-8a1c-42ab-99d4-4fa8b6e0f8f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f5c847a-891f-4326-97f9-36177ecda10c",
        "cursor": {
          "ref": "6064e62e-3c99-408b-a223-f35de83d514e",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b2a9e245-c60f-4246-8366-7b5de6023b10"
        },
        "item": {
          "id": "6f5c847a-891f-4326-97f9-36177ecda10c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7e0e9696-067c-4293-87f5-30c9106ea1a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb3752e-f563-4ac8-aea3-f41529b072ef",
        "cursor": {
          "ref": "131f53bb-c6b8-4892-9c20-133f0588d3a2",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "fc52f47f-4c4f-4039-bce1-96d9824e5bd8"
        },
        "item": {
          "id": "0eb3752e-f563-4ac8-aea3-f41529b072ef",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b6af240d-837f-4a36-b157-31d619337806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c65f400-45b4-4cad-b564-5f247273b0db",
        "cursor": {
          "ref": "36e41a5e-e470-4bce-b379-f0845b17373c",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "feffbbce-4539-48fe-914c-ed128ec73e48"
        },
        "item": {
          "id": "2c65f400-45b4-4cad-b564-5f247273b0db",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5a1c50c1-41c9-4c50-bd97-164698b95b24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca860e3b-62a5-4a2b-9994-38355e69d569",
        "cursor": {
          "ref": "7d95b82e-566c-46fb-b8b7-f91a089a48fc",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ae211447-48ea-435a-8e0b-46d334f32e92"
        },
        "item": {
          "id": "ca860e3b-62a5-4a2b-9994-38355e69d569",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "42ec5eb5-919a-4bf3-bd12-528a5687f7c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ef5d5f-5166-4828-9aee-aa4a66b233be",
        "cursor": {
          "ref": "128a8607-9bcc-4229-a57c-bdac52be26b2",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a1eb9cf6-a944-4d68-a497-c26aeb469dad"
        },
        "item": {
          "id": "53ef5d5f-5166-4828-9aee-aa4a66b233be",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cca199da-d5e2-49c6-afac-92908e70f933",
          "status": "OK",
          "code": 200,
          "responseTime": 199,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "ce6d6044-6a21-45f4-bb99-49a1723ef599",
        "cursor": {
          "ref": "6b10f12f-91cb-401e-adec-cebe0febd86e",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f3ede35d-8123-4a3c-9d06-1cfa7189e689"
        },
        "item": {
          "id": "ce6d6044-6a21-45f4-bb99-49a1723ef599",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d7885182-0d09-4e20-be7c-8a55de1eb0ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "421eec34-efaf-44b2-9b5b-39ffd17b8a55",
        "cursor": {
          "ref": "8fc1be3a-9bf7-4e4d-90f6-d9051469e7e1",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "010a3b9e-6560-4244-a69a-49aa595e9edc"
        },
        "item": {
          "id": "421eec34-efaf-44b2-9b5b-39ffd17b8a55",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7a244c69-9dfa-44f5-aef8-9bd6a6b88334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b1d0b17-9e8a-454b-beb5-ea3ba4d9fca3",
        "cursor": {
          "ref": "1ca72ba8-f8d1-41cf-9208-56cd1685176f",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "9135430f-9ffe-4206-8f9b-fbf2a0dab12d"
        },
        "item": {
          "id": "8b1d0b17-9e8a-454b-beb5-ea3ba4d9fca3",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "62da5411-8ee2-46d5-8b19-714a3aaa681d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee3930c-a967-4d00-8a5f-e76a7ac2bbbf",
        "cursor": {
          "ref": "09b35d28-ce76-4352-955d-77278b886eea",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "79efe8f6-e92a-4676-8d02-cad19ca16f12"
        },
        "item": {
          "id": "6ee3930c-a967-4d00-8a5f-e76a7ac2bbbf",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "61ff16da-ac61-4f0b-b8dd-bffbab9bcb90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97862fdc-b60f-4e5d-8e4d-c73fbce60ae2",
        "cursor": {
          "ref": "cb6d5640-52f3-4d3d-8030-338b0abfdfaf",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a3e2955e-ac6d-4f81-8c7d-37cccedde4d5"
        },
        "item": {
          "id": "97862fdc-b60f-4e5d-8e4d-c73fbce60ae2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "891dfe27-031d-4746-8787-a2f8ab489b2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "509c295a-3b09-4ae6-8247-6a6cce0d0f4a",
        "cursor": {
          "ref": "90e782c1-45a1-4561-8410-d686702c1564",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c42cfc34-811b-4340-97ae-92cedbdbd58c"
        },
        "item": {
          "id": "509c295a-3b09-4ae6-8247-6a6cce0d0f4a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "374e9574-49f7-4189-b75d-87440e3a1929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "667d3661-19ac-42f7-987a-78f165ca9dc9",
        "cursor": {
          "ref": "dc0a5d5d-2b86-4e78-8e6e-3204c42b4255",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "8da27c8b-59a8-4e4f-b5cb-ced91750cc11"
        },
        "item": {
          "id": "667d3661-19ac-42f7-987a-78f165ca9dc9",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9a8d12c2-37e0-4bc6-815a-f3562df06ec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e324a2-5126-462a-9219-1a305f35882e",
        "cursor": {
          "ref": "2e6d173a-5b93-437c-9c25-2d001a0eefc0",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0eed613a-969e-418f-90ad-06fdd3419b8d"
        },
        "item": {
          "id": "c5e324a2-5126-462a-9219-1a305f35882e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "0109b047-d44c-447a-b4e9-47923ab2044d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def259ed-a9f7-435a-bd7b-5b349d158d2a",
        "cursor": {
          "ref": "fddc82bd-f5a9-4812-a005-abc46dc0db77",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4aca1494-7a15-4aea-941c-e8ee4e220d35"
        },
        "item": {
          "id": "def259ed-a9f7-435a-bd7b-5b349d158d2a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e42b9d40-adde-4729-b488-ef6ccea87d5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c82e400-392f-4dfa-adfd-7a9ce9e8078f",
        "cursor": {
          "ref": "75ff966c-7813-4c19-a0b1-fec44ba2ad15",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4e1d8663-f6d8-4a79-856a-3f8c84ac5a50"
        },
        "item": {
          "id": "4c82e400-392f-4dfa-adfd-7a9ce9e8078f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d84a1df9-2d9a-4ce1-9275-fc4993b1f76e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9608b37a-25cb-4267-ba4f-89bbfa186d59",
        "cursor": {
          "ref": "d5397056-179f-4c10-9b13-927a31d6d6b4",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "00c36a99-aca0-464e-ad3f-39d38b3854eb"
        },
        "item": {
          "id": "9608b37a-25cb-4267-ba4f-89bbfa186d59",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "458b6084-b1e7-43a3-939e-1311f35980ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f00ec587-c6b6-4752-99b8-24cc12da1866",
        "cursor": {
          "ref": "335460fd-be8e-4aea-a237-be64371e9cfb",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a5f62cfe-b61e-49eb-b6f7-687261625380"
        },
        "item": {
          "id": "f00ec587-c6b6-4752-99b8-24cc12da1866",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1decafaf-182b-43ec-bdeb-c3735cc0833e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5a9bfe-ca24-4814-a2f0-526b17324fbd",
        "cursor": {
          "ref": "099a81f7-292d-414f-9b03-ffd5987ebb11",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "904203d9-eb8b-4afe-8dfd-57c9c2d32786"
        },
        "item": {
          "id": "bc5a9bfe-ca24-4814-a2f0-526b17324fbd",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2e964072-0323-427f-81e5-745c647b5f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f31239b1-0589-4367-bcdb-8b19ce64507c",
        "cursor": {
          "ref": "8226fb67-366e-4fb2-b8c1-de62bf3bbdb1",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "60f5dddb-77d1-4cce-86a8-22bb4097b599"
        },
        "item": {
          "id": "f31239b1-0589-4367-bcdb-8b19ce64507c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "839a859e-9c87-44f1-a879-8d84a6b72ad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41d5146-592a-4eb0-9fa1-dabddf3abd1d",
        "cursor": {
          "ref": "fde9ed54-a9be-4595-825a-30a46352b42a",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e3eeaf7b-40ea-46fb-ac99-995345a6e8eb"
        },
        "item": {
          "id": "b41d5146-592a-4eb0-9fa1-dabddf3abd1d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "66ac384c-ded1-42b1-91b4-a8070616aa7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfaa3ca5-70fc-4d04-9262-a70da6560430",
        "cursor": {
          "ref": "dd59c2a5-ade2-46b6-b023-6992bef64ca3",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ccc8e844-7aac-4956-8a0d-781b09aadd8e"
        },
        "item": {
          "id": "cfaa3ca5-70fc-4d04-9262-a70da6560430",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "de15cc0b-ef97-4ade-9cde-89989bd3a219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b6a18a-7b18-4f3a-9d1a-ee7b1e5ed215",
        "cursor": {
          "ref": "b8ab9988-0066-4eba-855d-ec87799f396e",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "60abf647-4b04-4437-9e16-84df2af3e234"
        },
        "item": {
          "id": "45b6a18a-7b18-4f3a-9d1a-ee7b1e5ed215",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "909aec03-33be-4035-aac3-70bdc0ce086a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2179264a-2be6-477b-93f2-2bbb64f18343",
        "cursor": {
          "ref": "e84ce10b-e25d-4f17-a82a-cc9f49a1e86c",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4ba98147-1109-49fb-940d-96ecad6eb478"
        },
        "item": {
          "id": "2179264a-2be6-477b-93f2-2bbb64f18343",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "415dca7f-7b43-4633-bd49-53193c284677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75188d6b-4035-43f8-83da-0f88990c99a5",
        "cursor": {
          "ref": "7d9f5b95-dee2-465b-bfe4-95d9fb1370ee",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0ef04043-014d-4a26-8aca-12bdadf9814a"
        },
        "item": {
          "id": "75188d6b-4035-43f8-83da-0f88990c99a5",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "07b185a4-e42a-4975-88ae-215462cf3929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8040cfdc-a860-4811-b686-1c1891eff782",
        "cursor": {
          "ref": "f0285012-dd38-4a7e-87d3-83ada55386c1",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0f8be60c-aad4-4db9-bd4f-2382cafa1434"
        },
        "item": {
          "id": "8040cfdc-a860-4811-b686-1c1891eff782",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f3bb17f7-0112-4d3f-9c6e-b634363d289f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf8bb9de-2ca8-4f91-bb91-f7ce1582686e",
        "cursor": {
          "ref": "b1467990-9fda-4120-b61a-b78606dd4972",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3b32c1bd-ff3b-4c64-baab-4ece74f7e9fd"
        },
        "item": {
          "id": "cf8bb9de-2ca8-4f91-bb91-f7ce1582686e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e15b93bd-8e89-48a5-83b7-f9e67cbb42df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "186a6386-fe20-4ff3-91a6-7d26e91e8a61",
        "cursor": {
          "ref": "d857d55c-6c8c-43d6-a0ca-3da7ea54e790",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "bdafb06f-4397-403a-a743-1dccb9dbb1a5"
        },
        "item": {
          "id": "186a6386-fe20-4ff3-91a6-7d26e91e8a61",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b22c5e64-3529-4639-bc36-44af41a037f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50490196-6ea9-45b3-88de-3d652203aa7a",
        "cursor": {
          "ref": "38e2a3ee-3fd8-4c85-95c4-007daf9284f8",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b07411b7-7dcb-4d82-9a4a-328d468a5c94"
        },
        "item": {
          "id": "50490196-6ea9-45b3-88de-3d652203aa7a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "edc62303-1a6d-419e-9ee6-f7765acdb9a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97298afe-ba2e-4c5b-9020-45dbc37e2164",
        "cursor": {
          "ref": "eb598c63-b476-48bc-98ec-15300c86ded9",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c53570e5-78eb-43b5-a9ab-9e7b9f11eece"
        },
        "item": {
          "id": "97298afe-ba2e-4c5b-9020-45dbc37e2164",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "008eb506-4888-4824-9c3c-21f5fb96b8fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca63ebd1-8c23-47b9-8efd-23915d8e55d4",
        "cursor": {
          "ref": "978b22d9-9250-4284-bc4a-e85c8506b3b7",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6091bcef-e7ac-4257-9c8e-0651e1f9e0f8"
        },
        "item": {
          "id": "ca63ebd1-8c23-47b9-8efd-23915d8e55d4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "bd8b4cc3-8af9-4714-bac2-fc943741af2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9de87ee-2ea4-498c-b2ef-4c05cd1cbb0f",
        "cursor": {
          "ref": "d2b0f930-35b2-478c-97bc-d638fb34a8a8",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "25d2039f-f314-496d-9734-9dc179fbe1d7"
        },
        "item": {
          "id": "d9de87ee-2ea4-498c-b2ef-4c05cd1cbb0f",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b8277ea2-954b-4ffc-8497-e64832af6157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "767767f8-633a-4f15-9ff3-5b96d60adbdc",
        "cursor": {
          "ref": "e571a14b-e9c6-4b11-b2f2-78711a4048ae",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ca48de7e-423a-4abd-b2ff-a2426f12c96b"
        },
        "item": {
          "id": "767767f8-633a-4f15-9ff3-5b96d60adbdc",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "7e80f693-9916-4eea-88aa-97f759795378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c89701-2338-494f-9acf-8a57bf9c98a9",
        "cursor": {
          "ref": "c7eb7f62-0606-45f2-9b3f-1baac14417ec",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c23394ef-3718-48c7-8bb9-a542471e876e"
        },
        "item": {
          "id": "46c89701-2338-494f-9acf-8a57bf9c98a9",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "23e33d5b-0e36-40aa-8c3a-1102cd31c164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9562e0a-aa4e-4101-8bc8-3b486e88652a",
        "cursor": {
          "ref": "b543ed68-97fb-4c88-9c7e-29b3b95fad14",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "be717556-e741-4049-8810-49dcc0226707"
        },
        "item": {
          "id": "c9562e0a-aa4e-4101-8bc8-3b486e88652a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e9de71c6-c6c6-48e8-b82e-a49009d4e8f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11cf2ec-b2c9-49eb-a790-d653859522b7",
        "cursor": {
          "ref": "8d5a1200-d181-4c4d-9aba-dd06a8eeb08c",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c04be738-e665-45a1-bc07-dc28cd497b25"
        },
        "item": {
          "id": "c11cf2ec-b2c9-49eb-a790-d653859522b7",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "0d4530e4-1b68-4450-8932-eef7e3f6502a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "431357f7-cc1e-4596-a15d-905051a602ce",
        "cursor": {
          "ref": "2cecd0c4-da52-469b-9466-14757c71b9bc",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "81b34ddc-34c4-4a12-af81-dc8764b43557"
        },
        "item": {
          "id": "431357f7-cc1e-4596-a15d-905051a602ce",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3a714d93-2f22-4a2d-bc1d-a88c1856c337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc554f0b-9c10-4873-996d-db5b01a8b4fa",
        "cursor": {
          "ref": "db4c267c-6369-47dd-8683-d259ddf3d1a1",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a254b5d0-2ac5-4908-bcdf-9c624d5343b0"
        },
        "item": {
          "id": "fc554f0b-9c10-4873-996d-db5b01a8b4fa",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8a59115a-4e7e-4fb9-918a-5a8c7848fd27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c1dbd4-3543-4a8d-bd33-7ba92ce054b9",
        "cursor": {
          "ref": "91d9730f-5637-47f8-ba53-5a8c289206a4",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2fc66f7f-d121-40b6-97f4-9c5ab364b070"
        },
        "item": {
          "id": "54c1dbd4-3543-4a8d-bd33-7ba92ce054b9",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f0279b40-925a-490a-8e81-0655448e87a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b9d992d-99bd-4490-bb72-f2ec47660aa4",
        "cursor": {
          "ref": "41eeccc8-e300-4367-9adf-0c46bb10508c",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8b02f587-e7be-40c8-931e-4d9b7d0b3403"
        },
        "item": {
          "id": "5b9d992d-99bd-4490-bb72-f2ec47660aa4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c0e77500-4556-4b62-8806-dea2cb945758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d964ee71-a8f3-44a8-bba3-4da833b3a94c",
        "cursor": {
          "ref": "93e06a66-6abd-4194-aa14-aae451aee143",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8c9c0377-fc31-4bda-9997-305f3c26e7cb"
        },
        "item": {
          "id": "d964ee71-a8f3-44a8-bba3-4da833b3a94c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "13dc0abe-2ad3-4a8c-b173-bf9cd3e137ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e12c306-2dc5-4178-9e56-4d745c2db883",
        "cursor": {
          "ref": "fc10d5a0-93ec-4117-9b41-b86e24f3f044",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "fb48ec8a-44ec-4f8b-a5ba-6aa3a2e0544d"
        },
        "item": {
          "id": "3e12c306-2dc5-4178-9e56-4d745c2db883",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7e3984e1-e692-4db3-8d67-2571cddcc61f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b07913-7365-4ca4-a536-2bd97b761073",
        "cursor": {
          "ref": "78e0f998-91f6-44e6-8298-241cf31e2c0a",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "20ebfdec-99df-4276-862b-4cce77054be9"
        },
        "item": {
          "id": "55b07913-7365-4ca4-a536-2bd97b761073",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c3fb8e8e-59d4-46d7-a31f-3448793305c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08ad0190-7408-4fb7-b6fc-3a78d2f7053a",
        "cursor": {
          "ref": "04fb10f9-fd81-4b56-a5f2-ca0adfbae37e",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c7e6c2b8-37ad-45de-8f2b-3d057443db90"
        },
        "item": {
          "id": "08ad0190-7408-4fb7-b6fc-3a78d2f7053a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "33dc8575-22ef-4fba-8d8e-a1f5337d24af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f60a56e-02bf-4c13-bae1-89b4abdb4acd",
        "cursor": {
          "ref": "f51a3691-cce8-455d-9840-220405673f86",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8556714c-2ab1-4c97-9e3c-29ae19544268"
        },
        "item": {
          "id": "1f60a56e-02bf-4c13-bae1-89b4abdb4acd",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3c13f267-9105-4510-bb22-e5a26250bfc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af23a627-93fd-4415-893c-9bc4d3b25783",
        "cursor": {
          "ref": "ecd85478-9e03-409a-a3cf-cc4c92ba4efe",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "44895281-8fba-4b33-8b68-d9e5e2aa1705"
        },
        "item": {
          "id": "af23a627-93fd-4415-893c-9bc4d3b25783",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "cb32af19-6cc4-411d-8ba3-190c9c2f3bfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c57229-f42b-47a4-83bb-97d396ea53cc",
        "cursor": {
          "ref": "67f6fba5-79e7-4b6c-821e-3bb54bd3ea37",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2b49df46-6cb7-45d8-beaa-278a016ccd95"
        },
        "item": {
          "id": "10c57229-f42b-47a4-83bb-97d396ea53cc",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "158ac4df-0cf0-455c-9116-35128ade360b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "503ee4a1-5559-4420-9445-30a2e1c7255f",
        "cursor": {
          "ref": "44812381-f704-46e6-9344-344e2d85be3a",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "df2c6122-ff4d-4ceb-8bd2-948071daaf74"
        },
        "item": {
          "id": "503ee4a1-5559-4420-9445-30a2e1c7255f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6bd220a8-eb5a-4474-8f72-94c5dc278baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a68938e0-9c32-4c97-bdc2-538fe39f741e",
        "cursor": {
          "ref": "f1223b7e-6422-41f8-9420-20d3567867ca",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "52f19d80-5bc1-47a8-9595-ba4adcc43bda"
        },
        "item": {
          "id": "a68938e0-9c32-4c97-bdc2-538fe39f741e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e82a65b4-e8e5-459e-9dc1-1fb0015f584f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d8435a-5ed0-482e-99c3-8e2a0ec5251d",
        "cursor": {
          "ref": "de8fe3b5-8369-44fe-ad7f-84e1415c39c1",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a6893908-6f49-47a4-8da3-16fb3405e0bb"
        },
        "item": {
          "id": "81d8435a-5ed0-482e-99c3-8e2a0ec5251d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d94b32fb-5b44-4b24-9fc3-d19d7b432847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0829402a-1f88-4557-8d6c-56239d0efaf0",
        "cursor": {
          "ref": "adbf9e37-4592-4874-8d13-81e7e569f8ab",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "dedc2420-6319-438a-8cd9-72cb9c2d7fe5"
        },
        "item": {
          "id": "0829402a-1f88-4557-8d6c-56239d0efaf0",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "385245ec-b64e-4e61-9b10-e54708869f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c342b20a-7474-4405-aeca-8c9ff4acd57f",
        "cursor": {
          "ref": "bc14b0ee-52c2-4514-86b6-45da4fc1df0e",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b4f5eb10-ea2e-456e-b2d3-80f398473c8b"
        },
        "item": {
          "id": "c342b20a-7474-4405-aeca-8c9ff4acd57f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "098bfb7e-6fbe-4c38-9156-36a420186c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73cfa0e6-2cce-4a5c-8b4d-79ea7b27bc3a",
        "cursor": {
          "ref": "4aef37bd-432d-4ec9-a3c5-b292025ee48b",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ddfdf6fc-6bf9-4b06-9aa1-27f7b141bd37"
        },
        "item": {
          "id": "73cfa0e6-2cce-4a5c-8b4d-79ea7b27bc3a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5b959722-031c-4950-b599-0a56f9ad4785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaf37b34-0290-45be-a18b-cc171ae8598b",
        "cursor": {
          "ref": "4d47c7f9-ebe6-4e4e-8866-c6ec5e20d620",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "61c51f19-4b0e-46c6-824a-99ce36aa9c19"
        },
        "item": {
          "id": "aaf37b34-0290-45be-a18b-cc171ae8598b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e44ca2a2-dc6f-4c6d-b953-f1b8b1c67289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "184f9dc0-469d-4095-aa22-c21b225d364a",
        "cursor": {
          "ref": "49587c18-b0be-4713-813c-cd44fbe44c1a",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d082bf9c-c711-4541-a163-8028b2a34915"
        },
        "item": {
          "id": "184f9dc0-469d-4095-aa22-c21b225d364a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d5c7839f-4f01-41ad-bcfc-9bb93d5473fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c47a89-130a-411c-8935-f4d1d1d4f721",
        "cursor": {
          "ref": "ae001aa2-1872-4b7a-b234-7337daa00298",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "82d5e5e4-05eb-4c10-b0e9-d4ca64b89e42"
        },
        "item": {
          "id": "46c47a89-130a-411c-8935-f4d1d1d4f721",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "2d837b3d-850b-4ee7-b002-94cc65acc6c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "321a58f4-50e9-43ef-b0bc-0cdf18feb000",
        "cursor": {
          "ref": "1824641c-fe80-45ab-b0df-e264fc5fe903",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6aad56a9-3d4d-4bdb-85bc-d8c92b4caa2d"
        },
        "item": {
          "id": "321a58f4-50e9-43ef-b0bc-0cdf18feb000",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "54dc3e2a-20a9-4a9d-a17a-bfadfb027f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12cf058c-8224-4cc1-ac02-4e871160a864",
        "cursor": {
          "ref": "51cce22e-782f-45df-8f33-cefc3c000946",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7c55dbbf-ff92-44fc-814e-6e69d5393a0f"
        },
        "item": {
          "id": "12cf058c-8224-4cc1-ac02-4e871160a864",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "48080fef-36b5-4554-96ec-d974d1cca325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a20753-05c0-4191-8e44-3f5f7fdf7a73",
        "cursor": {
          "ref": "9e6dc8b6-117b-4815-a3c9-3093cdc7cc7b",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "bad64ace-ecd2-4222-bd97-d4714bf74c11"
        },
        "item": {
          "id": "02a20753-05c0-4191-8e44-3f5f7fdf7a73",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "55784a1c-d85b-4826-a4c9-a3b2dc77bf4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c803af5-be3b-4a67-9315-f4700c58694c",
        "cursor": {
          "ref": "0254c648-3ac4-42f5-9072-af8fcea6fc7f",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6fc82ab0-b014-46de-8ef6-da75dd91557b"
        },
        "item": {
          "id": "6c803af5-be3b-4a67-9315-f4700c58694c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "76b42536-b629-433d-b9dd-49e61444d273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07104075-a4fd-4d46-98f5-ac2aa7969bf8",
        "cursor": {
          "ref": "7082f01a-9ca5-487f-b060-2445126f4404",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f0ad6938-e13e-4edd-a76f-d6b70d3f7f6b"
        },
        "item": {
          "id": "07104075-a4fd-4d46-98f5-ac2aa7969bf8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "83052d26-717f-4b3f-b616-26b01793349d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4225a2f6-d530-4007-81b3-510727732fce",
        "cursor": {
          "ref": "9f69b3da-4eae-478b-9cd4-6534af253f1b",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "159843fd-8fce-40b8-97c5-b5343a7c90a6"
        },
        "item": {
          "id": "4225a2f6-d530-4007-81b3-510727732fce",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8296abb0-13e2-415d-ba51-ba9cb72cb040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81027e0d-e6a3-4457-bb78-a6da08924bb4",
        "cursor": {
          "ref": "5654ffc0-94f0-4c14-920a-c43b1396e7e6",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "26a5f75d-0d5d-46e3-8ed3-1931f63912da"
        },
        "item": {
          "id": "81027e0d-e6a3-4457-bb78-a6da08924bb4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "da0f580b-3d66-49a2-9579-56269b6ea61e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2daf654b-ad21-4507-be28-6e52e963efc1",
        "cursor": {
          "ref": "01e3fd6b-44fd-41f6-92ba-6220e1439a67",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6cb04f51-ab76-4df6-aa4a-169e25934196"
        },
        "item": {
          "id": "2daf654b-ad21-4507-be28-6e52e963efc1",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3d020817-91e2-4c4f-99f3-e51ece876543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a0a88f9-02cc-41f8-9e26-f779f5bc1d48",
        "cursor": {
          "ref": "0370807b-6059-4847-89e9-6bf03cb5c0f6",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e4a75746-9a02-4ac4-98ef-4046524822d8"
        },
        "item": {
          "id": "3a0a88f9-02cc-41f8-9e26-f779f5bc1d48",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e8e58ea0-b28b-438d-b89c-bca0cbac8bfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bfbdcbf-6bd2-4b3a-82de-9bde4fc92275",
        "cursor": {
          "ref": "ed6ab704-4369-4d0e-a2f4-d5d2044bb826",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d8acaaf8-deb3-48bb-88c5-59127ab4a223"
        },
        "item": {
          "id": "2bfbdcbf-6bd2-4b3a-82de-9bde4fc92275",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "50b53428-ae1c-4b98-8f7c-3730e6439bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10973893-e1c6-4e16-9de9-ca285c7608bb",
        "cursor": {
          "ref": "738149a4-af04-4957-9d91-d6a31a569389",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7f8443d9-b351-4b85-8035-8ede2d362008"
        },
        "item": {
          "id": "10973893-e1c6-4e16-9de9-ca285c7608bb",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ee6348bd-e4c5-4ee3-8285-5c2c111df356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b446224b-81a9-4c53-900a-ba25c6bb9ad7",
        "cursor": {
          "ref": "c6f902df-b10b-4348-8d0e-f6192ccaa323",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3c1592fa-3a6c-408d-bef9-e7f8221ec1b7"
        },
        "item": {
          "id": "b446224b-81a9-4c53-900a-ba25c6bb9ad7",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "afe0a72d-734f-447f-8b37-2991bd181f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7843ebe9-a61e-41af-b105-2808356c3ad0",
        "cursor": {
          "ref": "cacaea30-5d78-4d68-bed0-b56e31374dbc",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "411ddd78-918b-4745-97a0-c07eb7b9b56e"
        },
        "item": {
          "id": "7843ebe9-a61e-41af-b105-2808356c3ad0",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5fbc5e35-37a7-42a4-aef3-7a8e707e3196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7badb4a4-7694-42e9-bbcf-8613e7330813",
        "cursor": {
          "ref": "7fbae971-c583-4bcb-b8bc-e194a8e4fa61",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "25f9dffe-334e-433d-be68-ed748e261610"
        },
        "item": {
          "id": "7badb4a4-7694-42e9-bbcf-8613e7330813",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "549bce97-34c4-4a4f-ae4a-f84eb31885e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7784412a-ebef-4c5c-bfaa-513a28a206a4",
        "cursor": {
          "ref": "700b342f-0841-41b2-a9e4-6a852db7b0bb",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e2499737-4921-4a22-a987-2d7eebf64ab6"
        },
        "item": {
          "id": "7784412a-ebef-4c5c-bfaa-513a28a206a4",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "bd6bad7f-1cbd-4e71-86b6-e0fa5951dce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a2c48f5-4ebc-4b67-b230-44ce942d60ce",
        "cursor": {
          "ref": "78ad8063-d6bd-4187-a1f0-b493d0ce91f9",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d3a472ff-dedf-489b-a965-d822778e9cb1"
        },
        "item": {
          "id": "2a2c48f5-4ebc-4b67-b230-44ce942d60ce",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f6df2475-bd9c-488a-8992-998f8cd6845b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da1a6c1-e2ee-4d48-af4d-64ff7227d344",
        "cursor": {
          "ref": "4bb694b1-34cd-4c57-b5c1-2f7acd0cc3ca",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a7c2307e-647e-480c-8165-e5b2970816f3"
        },
        "item": {
          "id": "0da1a6c1-e2ee-4d48-af4d-64ff7227d344",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "0f96f75a-6f9e-4d4b-98ac-d4eb19632333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dbc0140-0224-4b95-957c-d6db80b382c3",
        "cursor": {
          "ref": "a4d18fd9-3e07-4c44-999b-f3f10be67781",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a839c4b6-eda9-4007-912c-622a2550fb2a"
        },
        "item": {
          "id": "9dbc0140-0224-4b95-957c-d6db80b382c3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "cd469226-43c3-4c63-8dd5-2e2ccdd9a560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74a766e3-0260-4d1e-b178-38f397b91180",
        "cursor": {
          "ref": "abcd34f1-874f-44eb-814e-766198d07c66",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "bf60aa4b-4491-4533-ad50-c2ab8dfc10fe"
        },
        "item": {
          "id": "74a766e3-0260-4d1e-b178-38f397b91180",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9e830c57-c884-42b7-aaec-922e74185fac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2369b56e-939f-420e-a241-1f1172f2a746",
        "cursor": {
          "ref": "042a9c88-fbe2-4486-a677-be5a5517b7a2",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a8215f3d-7b22-4fe8-bc46-37ad24ce675e"
        },
        "item": {
          "id": "2369b56e-939f-420e-a241-1f1172f2a746",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "09da7d18-033f-4130-ad73-148935c3b12c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94842855-9fa9-44eb-bc71-6190c69d8857",
        "cursor": {
          "ref": "9c86ef77-af98-4778-a53b-6878ba11893c",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "005c897e-a3f1-46f0-8510-e1d609aca47b"
        },
        "item": {
          "id": "94842855-9fa9-44eb-bc71-6190c69d8857",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4eb31b6f-6ee4-4ec8-8ff9-5edce19c3b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c737f94d-a913-4628-91dd-f1b8a6043c13",
        "cursor": {
          "ref": "37d3ee1a-133f-4a71-8935-976d8098e87e",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "53c2a981-7845-4158-aa0f-a3c43e29e46a"
        },
        "item": {
          "id": "c737f94d-a913-4628-91dd-f1b8a6043c13",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "fd647284-cab4-4733-9f8d-7fa420cc199c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07223f2c-f05f-4050-b596-28bfc0195c64",
        "cursor": {
          "ref": "04cd7d8c-81d0-493b-812e-41fa5a2cd824",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0d855ef7-5d2f-4a13-ab08-03d180c969bd"
        },
        "item": {
          "id": "07223f2c-f05f-4050-b596-28bfc0195c64",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "21a48dab-ec4f-450a-836a-c9dd48794b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad27fc5-9490-4c8c-80fc-953e2197ce3e",
        "cursor": {
          "ref": "59434e61-235a-4a50-82d5-78a3416fa28a",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9f90f094-79b4-420d-a43b-9ca9cb7ea7a9"
        },
        "item": {
          "id": "7ad27fc5-9490-4c8c-80fc-953e2197ce3e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d1707785-3931-4ea9-bc3f-22c90e41c7f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e02c68c3-3d15-4d4e-89b3-37fea1cbf2fe",
        "cursor": {
          "ref": "80533ca9-23b6-45fb-a2f7-d1959bcc34e5",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "0c943bf8-2a0d-45b9-bfc4-dd12914e884e"
        },
        "item": {
          "id": "e02c68c3-3d15-4d4e-89b3-37fea1cbf2fe",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e60a9aca-b949-4dcf-9577-1ec229f3e3ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64fc7b96-a7ba-44a5-9943-745692399ccd",
        "cursor": {
          "ref": "b2b2167d-2b5a-4538-a4e6-dfef412cb81b",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d04a32b1-7961-4c32-a397-4871b5ebcef7"
        },
        "item": {
          "id": "64fc7b96-a7ba-44a5-9943-745692399ccd",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4c34a44b-8ed4-4c90-aae6-91d5e036dec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d540207a-b4f8-48c8-abeb-5f9950f0766c",
        "cursor": {
          "ref": "68b212e3-850f-4a17-a97d-bbdf9073f9dc",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ee71cdad-de8f-434f-b75b-f366926d7cc9"
        },
        "item": {
          "id": "d540207a-b4f8-48c8-abeb-5f9950f0766c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1507ba97-60f6-41e5-8c82-c7571d310029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91fc38af-3df7-4f59-be42-c51dc96fa293",
        "cursor": {
          "ref": "7a4ff7e4-0f3d-43a4-b4a8-b1fe15958c50",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c95eb8c3-f0c3-43d5-89e7-282a4bf60920"
        },
        "item": {
          "id": "91fc38af-3df7-4f59-be42-c51dc96fa293",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "47444417-7718-49e8-b391-da70f20742da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "506a682c-d7cd-4806-b0f0-14c37f76e0c1",
        "cursor": {
          "ref": "e55daefb-6fba-48ee-9971-2deeb6d3c80f",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5dee80fe-d9d2-4555-8f72-7dbb5386b66d"
        },
        "item": {
          "id": "506a682c-d7cd-4806-b0f0-14c37f76e0c1",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ce81870c-a950-4846-ae73-2bde03515d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "254190ca-d1fb-48f3-b71d-32ea40cb60a1",
        "cursor": {
          "ref": "f4cbf4cc-fa9e-4bd5-bf87-e77012e7c693",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9e961933-5cca-4de0-9f11-c869006bf008"
        },
        "item": {
          "id": "254190ca-d1fb-48f3-b71d-32ea40cb60a1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f4a2ca0b-ad11-46fd-a272-234329d7aa1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cdac986-e5f6-4fc3-bfb7-f12a6dcf888c",
        "cursor": {
          "ref": "d581626c-c498-4d35-a8a6-3df7b0a054a5",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7c2ff772-df0a-4fa4-91d0-265ca2d93800"
        },
        "item": {
          "id": "9cdac986-e5f6-4fc3-bfb7-f12a6dcf888c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8e1b0a93-df7f-4227-b460-ce3fb2f3f188",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "c7b730ce-bb69-4fc6-b23f-93bb4df491a9",
        "cursor": {
          "ref": "fb4674cf-90ce-4701-b180-47431dae8f89",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "21ead065-6697-48b7-bcb1-dc35e1ba2f35"
        },
        "item": {
          "id": "c7b730ce-bb69-4fc6-b23f-93bb4df491a9",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "6919200a-284c-4f6e-869d-995503044069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "79f5bd31-e869-45b3-8add-e7bb700972b2",
        "cursor": {
          "ref": "3a1884e4-3dbb-4585-9b10-d4ad9a1a2716",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5568e1fc-67e8-4edb-ac5a-d8cd56eb545d"
        },
        "item": {
          "id": "79f5bd31-e869-45b3-8add-e7bb700972b2",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8cf2d8dd-c8a5-4537-9d98-32e7d188f9f0",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "102ec3fe-04dd-46c3-8ce7-835aba175cb5",
        "cursor": {
          "ref": "2a49b4e2-74aa-4554-97ae-f8516fc864fe",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "10582abc-3212-499b-8b60-6fbe708173be"
        },
        "item": {
          "id": "102ec3fe-04dd-46c3-8ce7-835aba175cb5",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ff5430c2-eab9-42a0-b74a-eb34576f52d2",
          "status": "OK",
          "code": 200,
          "responseTime": 1561,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aacea21-5d5f-44ac-9406-8881e09367bc",
        "cursor": {
          "ref": "92c46f6a-655a-40b5-b29a-5dbfed83d8cc",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8a7d5fd2-c864-40fb-8cec-eef11aa5bcfa"
        },
        "item": {
          "id": "8aacea21-5d5f-44ac-9406-8881e09367bc",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "fda954f3-a31a-4e5f-bb01-ffd60f0b4964",
          "status": "OK",
          "code": 200,
          "responseTime": 2207,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9658754d-a3a3-469f-a81d-d4f3278ebf40",
        "cursor": {
          "ref": "acee4860-ed21-41a0-968a-24f7d2708a7d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "50dc6676-732a-49e1-addb-6e4ecd23dcff"
        },
        "item": {
          "id": "9658754d-a3a3-469f-a81d-d4f3278ebf40",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "347387d6-b4d5-464f-b013-db2b414cba03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "9658754d-a3a3-469f-a81d-d4f3278ebf40",
        "cursor": {
          "ref": "acee4860-ed21-41a0-968a-24f7d2708a7d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "50dc6676-732a-49e1-addb-6e4ecd23dcff"
        },
        "item": {
          "id": "9658754d-a3a3-469f-a81d-d4f3278ebf40",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "347387d6-b4d5-464f-b013-db2b414cba03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "9658754d-a3a3-469f-a81d-d4f3278ebf40",
        "cursor": {
          "ref": "acee4860-ed21-41a0-968a-24f7d2708a7d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "50dc6676-732a-49e1-addb-6e4ecd23dcff"
        },
        "item": {
          "id": "9658754d-a3a3-469f-a81d-d4f3278ebf40",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "347387d6-b4d5-464f-b013-db2b414cba03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "ff7c5b15-b216-457b-ac85-87a0bf4abaab",
        "cursor": {
          "ref": "262d1e93-0632-4cc0-ad59-a1776fe19382",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6f009322-4396-4921-b60d-49d530cb63d7"
        },
        "item": {
          "id": "ff7c5b15-b216-457b-ac85-87a0bf4abaab",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "b5b6040a-e5c2-49d5-b627-a7c98fb026b3",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 201
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "0f4ab9bf-2e9b-4c49-820c-7e237095cdcb",
        "cursor": {
          "ref": "b8a9a633-6ce0-4e7b-848f-a31d97193277",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a0e5a83a-f9e6-4d13-a0f1-d7a39605610d"
        },
        "item": {
          "id": "0f4ab9bf-2e9b-4c49-820c-7e237095cdcb",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a7fa0f94-8564-44bf-854e-a781654480e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "0f4ab9bf-2e9b-4c49-820c-7e237095cdcb",
        "cursor": {
          "ref": "b8a9a633-6ce0-4e7b-848f-a31d97193277",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a0e5a83a-f9e6-4d13-a0f1-d7a39605610d"
        },
        "item": {
          "id": "0f4ab9bf-2e9b-4c49-820c-7e237095cdcb",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a7fa0f94-8564-44bf-854e-a781654480e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "9b2cd0bf-640a-4a00-a34a-d4c92ca04174",
        "cursor": {
          "ref": "b9a2cd3f-3fbd-4792-8292-cd0de4779a00",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d20ab2dd-cfbf-4e34-a832-b15ff2fc50ae"
        },
        "item": {
          "id": "9b2cd0bf-640a-4a00-a34a-d4c92ca04174",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "fd6c1531-9046-4f41-b646-fd2b4f2ca197",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 356,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "caec7a15-ac6b-49ad-9639-969f87d2eb00",
        "cursor": {
          "ref": "65f7db4d-d445-4b96-8edc-402683326d90",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7461b1b0-b843-466f-9e08-bca4e4e6ec81"
        },
        "item": {
          "id": "caec7a15-ac6b-49ad-9639-969f87d2eb00",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1814c8e6-36be-44c1-ba47-706f9697b8eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "caec7a15-ac6b-49ad-9639-969f87d2eb00",
        "cursor": {
          "ref": "65f7db4d-d445-4b96-8edc-402683326d90",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7461b1b0-b843-466f-9e08-bca4e4e6ec81"
        },
        "item": {
          "id": "caec7a15-ac6b-49ad-9639-969f87d2eb00",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1814c8e6-36be-44c1-ba47-706f9697b8eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "49477bbc-de68-432f-ab86-90d222257982",
        "cursor": {
          "ref": "91cb7918-01ee-4139-93bf-00d88915a13a",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "2cc46043-c7f9-4782-bc73-634fb2052df6"
        },
        "item": {
          "id": "49477bbc-de68-432f-ab86-90d222257982",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "974ea4e7-ace0-4518-830f-bdb4208a5a5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}