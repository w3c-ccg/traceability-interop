{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "dc2ad2f3-b56b-44cb-ba95-c1d544be35ac",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b1a12ee8-5af2-41b9-a7e2-c42414676653",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4a070a34-1644-44cf-8241-ca3dcdaf6aaa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ed34a437-caad-43a1-9eb0-8438115df1f8"
                }
              }
            ]
          },
          {
            "id": "3079ee97-ea05-446b-a9c3-88b28ab13cf2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "70c54c4e-2c96-4995-a104-682db5dce2e8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "81a88785-596c-4803-bbfc-62f37c5a2ca3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "234dbfd4-b030-43a5-b7bf-f6ccb446a4bb",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "496180ee-cfe9-43d1-80dd-25a4ef4953c3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "27184c0f-dd48-4f0a-afbe-7764c17da094",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e5dff4b-59eb-4afe-ad62-82c32e4f92a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f763cc55-caf6-4891-8a63-780e0fd7d57f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7be949d8-1095-4280-bcbc-c10839f8537e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "43a896ae-222b-4dd7-9db9-b8f8b9e5a5cf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c1346b32-fce1-46c2-9530-a54371b03def",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "53936ce2-bb19-4668-9cc4-9b771ecd9dec"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b2f41879-cd2e-49a3-a100-305aba567c9b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8ccbc72e-6b5c-4d30-839a-a30aed7eded6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7221ea9d-c137-49b2-85b1-2dc64f12af84",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2462ac7b-aa33-4977-a9df-b1fad1fa9425"
            }
          }
        ]
      },
      {
        "id": "93e22d1e-8d44-4930-86da-65d326c4cbf5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ba1d50fb-6775-4a49-bea7-b730b9728d4f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1ba7902c-47d4-4f34-bce0-5b9a18571494",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a35cc99a-3975-472f-a3e0-f5036e5f6295",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9078ea86-6435-4045-b10e-e20cdf1bdd37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5499ffc4-fcb0-4953-83b5-4b2da4fe1bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf82a8a7-6042-4d89-b249-7b776a4e69f2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40359c5-15bf-4677-b481-47d830e9d6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30114f89-8478-4551-9d36-e5f65478fdc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881ca59f-0093-4051-8fce-196aae2c2099",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7977beb5-9ef5-4384-b3bd-17e0b1501ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6193126-0923-421d-ba43-1e5d707034e0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5782a361-475e-4828-8838-4598df908a91",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "66b3275c-4899-4953-9ebe-7072fc6a1164",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbda6409-7495-468b-9b96-da7897b68f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f95e2cba-11f6-4fbe-92f4-c7d7a8245e25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bcc5ca2-e07b-429e-a3bf-2d9b95b99b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b18aa374-3021-4549-8ff1-3b6e319689cd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d04fbd81-5767-4900-aef5-78e13d198b5c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0044e437-7c27-4b07-989e-8813bdcd38a5",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "523aeead-7325-48c0-8de1-06b5712e9462",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "af0b537a-3278-4dc4-9dbe-7ee161ada532"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17564b50-b970-4e03-86d6-4e8c32e24aef",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "f5f72164-4508-441f-887f-2dab20516227"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "130426a5-6070-427e-bf08-de4fadf2a181",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2199bbee-4305-490e-89d6-55c40fbf6a72"
            }
          }
        ]
      },
      {
        "id": "8477f0a2-fd79-4447-80fd-e8498411347a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7e6f43cf-d6e4-4058-baad-49a2694627e0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f7cf6dc3-fdc1-4e81-92b9-78187f0aadfd",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "270effc3-4f4b-4010-90db-df3cfcfd7c20",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5baa242b-22d9-4b47-90b5-0fb814fc8283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a37f2df-019f-4d93-9709-52269b976cb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11aa9f52-9edc-443e-85a4-cdbc051158b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e426bd9e-52e5-4509-9708-c9968b5d36c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71949590-64a4-449e-a99d-01f34bb063a6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b9daff-9d09-4b67-b789-c648d6035430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9db4571-19bc-49a8-a3f2-0f99c5695d25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d71767-d63f-4a28-af6d-7293fc8344f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b798a9b-aa8a-4418-a661-7311af8e2d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9caeaff-2f86-4273-9a4a-1e2d8185926a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1554f6a5-2c7e-4e10-a348-37bcd9bb222e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1be9aae2-087d-45bf-a4eb-c4291fc046b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "321ad449-728f-46d1-a07f-39a1d0ce074f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f6f3ced-3df9-45a6-af46-1c8fc6d5f8ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbd3a75-31e4-4114-ae95-9104093e3519",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc27c66-14a5-43e2-aef3-a0d7f35525e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cdaede6-607e-40b8-9412-9a4fa4e44508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0aecbfe-8d46-45c6-9ecf-d3868132b9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c849830f-0445-49ab-b6bc-6c662f845f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4d3b8cf-d127-44b3-94ec-cb827beadd6b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec27e26-da85-4c6a-8817-62e392f32836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "087ebc7c-8026-4677-af22-3b8d0e8eaf1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c5edf7-3237-4bb2-98de-0ba5245eca2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8cf9fef8-7ec0-4a7b-a1cb-bf9af1a8b07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c177575-2b6e-4e91-87de-d9ec6fe21e6f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "412ee7be-be67-4a3f-a1cd-d2b09a4d6069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4708b04d-1326-4ed1-9457-d7c0bdf26f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f48f71e-4b35-4d43-8f0a-5964f2ca28c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59a866c8-2f49-49e1-92b7-6d5f7707a322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e681ef57-60af-47fe-b98e-0b86140f5717",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b576cd-e878-4805-9778-26acc663553d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa38c668-7c64-4aba-9b85-9f562b09c8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a4b506-ca23-4c57-bb01-b717a938946d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad803307-f3ac-401f-b9e1-2445b14156d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d8f2d9d-4092-47cc-b8d9-46517c86c4f3",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a24b3de-8572-407d-837e-a404aa1a22d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28aca9af-d972-45f0-abb8-fc5255c73ba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "741ac334-918c-4d55-9753-ec9e842113c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81fcc93d-a856-4835-afd2-cbfd7bb51e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f09ae156-5a31-4f6d-8e62-869499bc0f6f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc49a471-315b-4a48-a764-a7e624876de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d21e608-647c-442b-841b-543f6a0f89b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beffdaac-fcea-4790-8e39-26b93abd74f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a55a4ca7-0b68-4063-abb4-419c353c462c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb355b46-b253-4893-b43d-1cefc76e7f81",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb1a16a-dded-4dfb-853a-2747a1537a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8dc3130-d496-4ef0-a628-11128d57f6e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6abf0d5c-075d-4446-8d92-51f7fd1bad80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92cfa85c-39a3-4775-bc5a-84b40f0c4a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c8eb02b-5138-4411-8d3b-64ede896cd5a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6fdf75-647f-42ee-8150-a9cc7bacc016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e385880f-5285-4429-a6dc-ae631c194db1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e11ce6-8060-4053-881c-d3b8f89c1bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "08c38391-f239-41b0-b757-f529064d33c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f702cfee-6f13-48c4-a66c-ed729be16b97",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0975b7d9-7122-4607-a9d3-d686f0c13265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46f02d4f-b4d3-45b1-b60c-d75326025018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5dde7ac-bf31-449b-bb1a-3d90c553754f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11b7f3a4-3cab-4b33-aeec-9f817515f3e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6314ca96-18e7-4fa7-b736-23329d1f25e2",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39509231-0630-413f-9fe3-60fe00e95fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a15dfd-c9b6-48c5-82cf-ac5a7b2414ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e47b77e7-24ce-489e-8415-2d848ffeb5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "095f1c47-bf88-423d-a5d3-3d748658fc50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0abedc6e-dd9c-4d3d-bb19-8d6d8bbc81e1",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f132d4-b71f-4805-91af-5ccdb9a7625a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19f62224-079c-4f9a-918c-07a5a9e47b88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cba8f55-7bc1-4294-9e58-069fd1678a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2435aa33-3f8f-407d-896e-6dd242495e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8612e7e2-67b3-46c1-abc0-2986bb9eb92a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6affde-7b2f-49b7-82b8-0d453cd6d3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9acef711-870b-4ed6-b828-53f7a28887f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "263a90c5-9167-42cc-abe6-d4422d8b3c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f82f623c-93d3-4eec-8d8a-28a5a4f02649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1ae29b-b6d0-4caf-a7a6-2364c8fb4b60",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656132b9-bbad-4363-9413-ca5c2531029f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7b2967c-eaa0-4793-b205-1ba8a596ea6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e763a59c-bd6b-4e94-857c-387fdf49328c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e86710df-92e6-4abb-beb7-144006945049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ac9dd4-96b0-496d-aef3-81c310b4752a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8611fe-e0fe-4c98-b354-e15fc8859207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e5f7172-c3dd-40af-86fb-965d0e1812e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e25e9ed-1c41-4b38-bbfb-29ae24f5a347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9742e75-4797-4090-8527-66fe19290c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3375ae07-2598-4ee6-bc39-2782ba7db472",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2876ce-8748-4926-8b7f-1770631cc42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54ca2b4c-440e-4032-a6df-4dbc34641a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9b4675-aeed-4bbd-bcae-b5deebe0c02b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "559cf07c-3c72-4dba-bf40-d0035bb7152b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa2522c-c377-49c5-8cb5-29950b2d1d44",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "424a1856-b460-4bfc-a6bc-4b6434883d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9a6275a-129f-40e5-9563-0fd45cf62051"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993b1d86-6bcc-4f1d-ac3f-a51e36e766f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4c2be49-e4b0-4538-8524-99b0c1a3482c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89cca3b-9b60-4dcf-9d79-478565e7c134",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a606c91-bfc5-4fd2-95a4-5090f092d13d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "725a54fb-d88e-444a-b58a-1dc94a021c10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec43542-ad3d-41bc-a0b5-40a8958f7436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c49fb43-78f2-4b79-a162-004d72b59b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393eff8d-009b-40a2-94a9-3aeae4785a14",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb8a2a8b-58d3-415a-8add-5096a4bbc85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a192d7-3491-4782-8b9c-d600ce6f9dda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaac3efd-1c7a-4abf-aad8-e92f2f2a2db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "55e5c77e-dc4a-4e85-893c-c2a61dafe80b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6455cc55-57fc-4292-bc83-bfc567bc446f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91883e62-9c1b-47c6-ae4f-43f36438b3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "429f6aa9-eb97-47da-a093-6104429a4078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14aee8d0-cf9c-4e18-8f51-a6f533e0f71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c01c965-a8fd-4afd-b116-d79252a134bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c069dd5-aa0c-444b-9d84-b4b46fd3cb74",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17bc6c1-0319-4e61-83c6-c4f0c6345498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08d4514e-b028-4f12-ad08-f4de28f31318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a081ea-3cbd-405a-9bbc-5b4872bb5f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "57cd2864-9bce-4367-81c9-c57ae74ad183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff1b5ad2-7083-4ef3-9a50-87083b0a1fef",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb52e86-3956-49db-801d-4db261575b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11f5b504-6f05-4b0b-9593-7828e3dc561b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc17260-5145-46b4-9da1-86d5de91d172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7efc51ae-2159-45f6-ae04-ee9f590db614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37fba340-b6d1-41d5-b4e4-f131b215b8e7",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33aa964-fa4f-4124-bc12-9b83387dc88b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22d5a330-33c6-4b62-99a2-57cc2cce19ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffeb3a8d-685e-4255-a162-74ed6c8292f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dce638b-8270-4920-ba56-40c4e21f7ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab8c3bc2-6042-43dd-af72-a00350d3a0e2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6858b004-d8e5-427f-8447-f388f6907b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e42748-f10f-4222-8201-71960479e6c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "662d93f8-9a21-4ecc-8449-df20cdbc4f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ace37e27-9a4c-4616-bcc0-687ca3dcd87c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6779729-90c7-4b3b-8bf9-d9cfff1eae25",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab449a2c-1579-4c3b-ae63-ef8f7933f428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60815bd3-c159-4cdb-8853-254fda5656e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ce8375-1a77-4e47-b98a-7837033d97f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca02abeb-35f2-4866-b32f-4738fd3577c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a45e806-5ab6-44e8-ae01-9e7f237cef0a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf2c443a-eee1-4a26-bbd0-1ac0fb56504c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3c2f387-8f96-4513-8c72-12f46bd14260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07308d96-314a-4c01-9159-d26feceed58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f59ca5be-15b6-4c39-9db6-82fa8a92b09b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1897f3-3737-40cd-b206-377ce43bf732",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce4fa5d-4587-46b3-ac30-a7994f5b6939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60612e4e-a42a-448c-97b0-b97024de6b60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4de57a2-a9d0-4ccb-aabe-d8edb9b32e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "550e1841-7449-4c51-b39f-ee91fc675b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4e81bd-8299-450e-a8b9-3b35b2eb29f4",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b98a0772-5c28-437b-952e-475ad4feafa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62677a3f-09d0-4dd5-967c-8a69fe19de7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077b5163-62d8-4fff-adcd-3b54068a873d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2aa02b6-380f-483b-81a7-ec71856193a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44290b47-4cfa-4780-a4ea-ae020ff9522e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e8f03c1-3de7-41bb-9186-9fb34d2fcaa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785d588e-4bb7-4a13-94f8-919efc1b2f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91204daf-6da0-434e-9110-b7cd9b1141fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b640d05-dfe2-4407-888b-2500a0f637a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9307dc06-01d7-4355-b29e-4615a6f4d43e",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8298ab54-77df-44ea-9ad7-e9e38556f9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f7900c-3515-47ce-93a7-8185a6d4c518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c21e62e-61a5-46ee-b8c8-03e897b6b2fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4ef68fb-85bd-449b-bd68-0df92c5ece95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dddd78c-3c3f-4596-b97c-795a50e61f38",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26eb5da-0bc9-4a4d-9420-1884b69a5f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e3ea1b-39d0-4884-aabc-cbce1043e92d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd2e261-eebe-41cd-8d7a-77d6f6349189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "97780364-eb6f-43dd-adc0-407d97f3ca17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "678a2b8e-aeb0-42ed-aed4-35b8b3411e34",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a87fb84-c314-4acc-ad6a-606098666241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "529c98df-f07f-4cd3-9489-9b370a0e28a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d465eb0-2aad-4a97-918c-cbc2c645c461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d61b6a26-9ab3-482c-99f0-e6b140f7e9d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12fa9087-6b45-4a37-aba3-41ca4826624d",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c80988-0912-415f-8d10-4ebf492e46b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baf2ae8e-90f5-4799-8d72-8444a344b50a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be48fcc5-eab4-4856-a335-150fbc906344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a8d88b61-2171-4637-b4a9-8ee89764b9f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8822d8f9-f39a-4906-9155-eae65650568e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7fc913a-df26-4a7a-82c2-8bf5e4ce8606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c99c7309-02aa-4604-83e2-87c54d0163d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2824ae13-1f1f-4075-b8c1-f10defc11704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8ccb75c9-883e-4c04-9599-3d64cda675df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb179ea5-e9c9-4fc7-a2d7-7d4a21a1a739",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b4c6dc4-b133-45a3-818c-3b5e8e06257c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d0dff24-7937-4c52-8adb-5c596c5a4ace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "423f69a7-5dc8-4c5b-b29a-b98226becf05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "68f7f4ad-43d9-4944-99e1-a72914b2bd5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4810427e-0f1b-40ee-a30e-cddc93087320",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90563c73-5ffe-49e6-a299-8bd6be91bab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ce3f93b-95a5-404f-91dc-976df4b98fef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f7a59b-e5bd-41ee-b1f6-6e9fba0cc328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea3fed26-4bf3-43b5-b7d6-a5f14b21442d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad64f71a-1791-4dd9-8ce5-cb511a088311",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b297672-6b38-4cbd-bb3b-3b6d5e2690f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cabd7d99-c9b6-4246-af52-033b5c74f827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20909339-5ca6-45bf-be44-4223a2eabcb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2cb726d5-60e1-4d2e-a2c1-d2d3c67fd43a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3b2676-4b0f-4ceb-b9cb-9dc27ae777c7",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33db7a6c-5bd3-4843-b4ab-dbd6fe45ae7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2346ebcb-b772-4443-8d72-8974fb421b59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7587b0ee-3e9c-4c18-85c4-047a0e2f8074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb169909-d95f-473a-83d5-294baa69d077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f0e6c1-8103-44cb-a54d-ad606e26933c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02d0b1f4-297a-43ae-8c95-f0d2b8a10187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2a67704-c18b-48a6-88e0-9b835406a2fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f1f647-20bd-4ce9-abce-f60103b641e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4eb9101e-1843-4bb2-8412-d725690c80af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9350abd-06d5-4445-a6be-f6a6d8d83ba0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5e0900-d7b9-4bca-8ba7-34a3a9fa97b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5560311e-ff9e-4f13-b5c7-0b73e5cc4a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9bc012b-dac1-4966-a43e-911600dd3d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "0b5b0e34-b93b-4a96-be9c-66f3f8352d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dfed876-7502-48ff-a557-4e78a45e34dc",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce04b097-7447-469c-8f98-15c775c8969c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29881303-d060-433b-9374-0eb1fa454df0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0c198c-4bfc-4b8f-854f-532da3c4deb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbee2f0d-13b9-4cdc-b91b-d82374902021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8e75aa-964d-4282-b314-7b97b426ab88",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2098df6b-7a30-481f-8595-ca24e2557bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e26d8eab-4d35-4a56-81d1-e9d3d74bd7f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5833a6aa-b843-430c-8fbd-edb6692747f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c86cb2c1-16c5-4aee-9085-2a428d2ab092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70bb575a-0324-4071-8228-e1c59aaf6d02",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b457ddb7-18bd-4c2a-866b-40d5e9534978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "400c0616-5ea8-4481-a0da-16484101b0ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b6901f-e3b6-4025-92a3-bb721c84713c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f56829cb-afd5-480b-b5f1-38d5a4293ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c46d104-28ac-477c-94ae-794648fbc5f7",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea4b98e-3db2-4af5-b091-e18c54fb2244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd3fb036-abea-4b8c-a646-f3038f486b9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de0a442e-2e01-408b-953e-9495b8505be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea112d54-73f0-4b49-abc2-fa2b0bdad4ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd043d6-18ee-4abe-b766-7fafacd86852",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1446c46-e91d-4a90-81e8-9cec4fed693e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25687bd3-5c15-4685-987f-f4e6d4e29b61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d3ee104-066a-4abd-bcd2-7099a3945e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86bd840d-df96-4a84-ba0f-0f9c5b829618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62a4595-b8d6-4cae-baf1-83b482473078",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ecbb34-c0ea-4efa-acb2-db1fb6a45dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92536705-d049-49d9-a81e-1ec85f697b84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c09fbee-d081-4ca5-bd4f-a9bde40f38a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff0b1d78-f94b-49f8-a3f0-43b84d2fa5af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ca917b-de5b-4f22-97ad-7517b126ea7e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2097958-2410-442f-b7ca-67d331d31d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52b9efd2-d94d-4995-8764-404a7062340f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6064362c-0344-4d2d-b9fe-d6b85fb2bbea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8fd9f7c-b4be-4d73-b32a-cc70e1fd0f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12596ced-f300-40b0-b2c1-35ff4a544d59",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d6ae79-a695-4924-bdda-d2b528cd58b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa66a500-2ba2-4dfe-ac91-99dbcb6c5b44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a99e31-f5f4-4abf-ad04-a5d646c13e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aa2dbd7a-5bc1-4c69-995c-2535217af27f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ce30c5-c6ac-49ed-9a95-8c9320fe2808",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da559209-d4a6-4d15-95cc-26f4b4482453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96edfc05-ec16-4e5b-a768-84305954898c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "541ffd0b-21f4-4b7f-8454-706d909bfc61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e829b10-ee3c-40a3-8c1c-915c9f372c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1817b7d-f937-40ff-b673-43e0558f0c38",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4611873b-4def-4073-a56e-513031ad8dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f5fe63-3f5c-4681-948d-9058c05173ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e4302f-e830-44a9-aa89-b6e1964f4051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9649ee0a-5cfa-48dc-888d-81372974fb87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0e92f9-3864-4a0c-8ff3-da67a5cb1325",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4667dc4-6c2a-48f1-aea4-3edd0491f9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a93e592-05cd-4b67-97f0-91050ac39b7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b1b548-b10c-47cd-b10a-2f20dbdd82e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b1f24bd-47fb-4937-8801-dfa03b028db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e3a8bf-8afc-4d89-8d50-bf9f6059f042",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7744b974-56fd-4907-9d7e-1c96cde5a1a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22a3e2c3-7d81-4309-80f6-c6b2428ee746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a9e2ed-de2d-4dc5-acc6-e11b115c819c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "276d9dd8-d22c-427a-be79-d64e61545f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a5ed2b8-3128-48ae-a94b-9ba230c90cfd",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd2f3b9-1495-4391-97cc-c290a3f7ecd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6d57371-4e3a-46fe-8b5b-5b6d0de7c420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7aa882-dfe7-4685-a6b5-072777229d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "203ed7e7-6084-4ecf-b555-04f62ecc17bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7e1437b-037e-4ab8-baaf-1019ebbfbcf7",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd15b162-f063-40f0-bb2c-05212c7a6d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5f8e977-780a-42f9-8712-de5e7757d7e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa38c35-ceeb-4955-8837-dd6e83aa5055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5bbb6339-0665-4c87-8fd9-824a6ca7accf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef10c0d-a866-4835-bd12-c721b3738ea9",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e2b7236-b12e-4f4e-8685-d1a4cdcf55be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a65d20-b604-442f-9120-c114211a073a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c341d8-10a1-4d05-9cb0-a5338d1b1038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "61c66f66-2e11-4f49-a6cc-0f06f6678be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1747d9a4-b919-461e-95e1-7d1424411912",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a457d00b-554d-4ad3-b9f7-6db6ade0645a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c67814fd-f37e-499f-9ac3-7151683c763b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5670b4c4-86f8-43ec-88fd-50f6161a6abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "63fbec3f-bcf9-43cb-8ec8-24e62e01d837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a83293ab-722d-48e9-8167-4fa0f4056978",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d29cb41-e8d7-4d96-a388-85df763c2b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d968fee4-e2ab-4e27-a3d3-552ae8392c53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9407af53-4c86-4d96-bb5d-82114bf965ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d548f9c-84b0-4272-9e69-619016e65f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a62b80db-5d4e-4ee7-a053-27b66482e786",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "372d78ee-e5ed-4e68-839c-93b37af68dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64bcad5e-016d-47a7-b76a-1a282e94b7eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a299cc6-a47f-4f2a-b8b6-24608844f843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "40727ce3-7852-4085-8332-e679b346823b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38907f2c-9719-44e9-9c22-81a171123a77",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "226bc24b-3238-4e36-9d35-ccdb886eed61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbbd73f3-4881-40fa-9f74-b5d09113521e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b5e2296-5cf9-41d0-8048-36ea2ee53924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3830444e-e556-443d-bd23-b0d2c0bd3f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b860e00e-1841-4728-9ef9-9f5b8134e0fb",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1cfe8f7-4084-4112-9dfd-51784b7801bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b1b8c67-b3bb-430e-bf2d-367291dc8286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c369cc-fd00-45bf-b046-695a530b8b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "04442e64-5109-4a4e-af56-72cfc8bc314c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b949a9-99d5-4186-8310-5017c7ad9de0",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85400a99-7438-4613-9a1e-f5cfaca99dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fec6800f-6a29-4d4d-96a8-411d6f565d86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbdb88f0-d8b6-41a6-93b0-c86cc33c6e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3141c1bb-8283-41b3-92bf-0412ca4c6462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b75ab42-0e20-41e3-90f6-19c66c7d7d88",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f4d003-38fb-44ad-8d73-5ca94277af20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c8b0dbb-13e7-42c0-937c-cc10d527e46c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "662472b6-cdf7-4fa0-bd52-b2410a20d088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d60bfe9-a677-484b-bd93-e1fbff4c9edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91055d72-198b-4748-9e41-5c270ca7f392",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c6b16b6-a1c4-4383-8e19-5ef553c5cbd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aac317c-3506-4a63-a519-81129e84d61e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27dbda03-696d-40ba-a713-9d2011c42057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "50bc7af0-0c60-46a5-87c7-c23ec2b9e95a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70fb8a56-0590-48a8-808e-5eca5305f05d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91093a3d-fafe-44ca-938c-33be228adc05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "086a8291-ba64-4bd7-b75d-0116c8dbda9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95826472-aac3-46d2-9084-af5568263c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b37f032-7fd4-4238-a1d3-193ebee12543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dac7294a-5b6f-4f08-a008-546752f9ceb0",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a945f836-2a0b-4a0c-951f-2d93ffc15b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d6ec8c1-eeb0-4e2a-9a72-59b45aaea666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "406832c3-9236-4658-b719-4e1538dd45c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cd37a5a7-f135-4b25-b165-227bd8367084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01078897-9aa0-4b42-a016-c3b7bbeddebf",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "786a8233-062b-44fc-8a3a-fc99b0a07f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "608a91fb-9dbb-46b6-b443-8a3f959b19fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b8bfb8c-3f09-4574-b424-5fd806f14b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cb746ef-9ffb-42db-b5d7-441439e3ee6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f41b5a-f80a-4b24-a42e-28ce0e1cb99a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c1d051b-505a-4c78-8742-d7e37b0e5484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0df8fd5-a4e0-4418-987e-b6b51012e017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2557be7-dfc9-4d21-bbd0-3a26faa81e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bea782c8-13c3-47dd-821d-1c84c7838057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb94cfe-b1e7-4ab6-8d28-4d16aea5f508",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d253e4ba-fed7-4c18-bf89-2231da2984c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c129cf4c-0f7c-4109-adcb-9e6908ecbae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508ee340-15b2-4414-bb06-f53ce742cb93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2786aad-04ca-446a-9ea2-e89c4ce5eda0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b8dd9fc-d551-4fdd-962a-689f4953d2ef",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ac5297-371b-45cd-9cf2-19424dc0fb46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a947f1a-b4d0-470e-a652-07edd9fe6c43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b530cfc-ddf3-4520-95f5-6fdb6bab6c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f01fef19-7151-4729-99ee-c92814f9b521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a468bd76-6c1c-4f9e-b2e3-a2a22b3ac0e0",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "171e20e3-fe8a-4f65-bdc0-691d3bb43b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72974e35-8b33-452a-8859-c8b2b2e4f4ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08232103-2d7f-4d97-b3fe-111678530767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "53d8e670-f83b-4363-b2e7-48c912e45524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7fc8c7f-e091-44b8-b4c6-504ce5090869",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "150fe4d7-b574-4072-b83a-0d45b51f9a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b33e89ff-a9f1-44f1-9c67-7efbdad76c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3d7c6b-ea8e-484c-9675-fb8ec85c0153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f38f989-1993-409c-a10b-9aabd34e6a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9e1a9cf-7c04-4d93-9270-ea27f5408ddb",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0acaa776-ad8b-4711-b6f4-a9db3c39efdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b25d0820-ee2b-48f7-8952-6f600a9038ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b404505c-c90a-4ab1-92ac-4cff8eec2d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "999521de-6d1d-46e2-ac47-961b969c11bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2472a9-fbf2-4bc6-ba0c-37d00f4e3242",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "960dd47f-d89f-45f4-a61d-60db4439b935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cbae70b-3e39-4fd6-b632-660826e21707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4272f7-f125-47d3-a22e-a248d8b3c06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "03a54723-7fd0-428e-a860-d40e5cccbb43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0579925e-a67a-4448-bbf4-c8c67271760b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "156f9200-6285-4b9e-a4ca-4a06eb68ca1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "061969d3-ad57-4bb2-9e12-1c4ddda6e3b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c6b944-3fce-4046-800e-0f94e0da523e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5a0dd6a-2497-4441-9675-9fdd3a112694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f325f8c-9c3a-4d94-9735-469175da5b00",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a91aac-69df-4835-8bd4-d570f6a50780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6780099-23ab-4dee-ac40-851fbe8b521f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d0b66d-a8fa-4c09-8c63-d8ad1cae4be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e8a7bfb-ba4b-4b34-8faa-5c7deb4fab5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4364c2ff-ecdb-40b1-af01-6397a5a1ecbb",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61dee4d-26d2-48c9-8cfe-6d01a1501d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d50d6269-a649-4834-b513-58e569f1a1c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d83c120-cb68-442a-9416-2a9071287285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "700e3ee0-1311-4e8b-a001-181e0864b485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "734b7c25-118f-440e-beab-207ea419f02b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "369e4c33-5275-45b5-9276-74d063dd593c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaeae4c2-d04b-4c5b-b7b0-63dc94268483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62bc6a80-a499-46fd-99e5-868e6028ef2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6fcd939-0b40-4279-beae-e661e54e3472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3c992b-55b8-4cac-9943-645f3f5a1cc0",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff57f793-0fdc-4e53-b56d-0997dd1a923e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bbd7c39-3a9b-486b-9c6d-49d17e21696f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c25c7f-3021-4367-b2d5-012a551c77d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "938e7697-3d8f-42ba-ae19-420c32a9e4f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b618bc4e-d9a5-4742-b9a2-c76516f20a61",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb5f028-75fa-4e6f-a6d8-88bc503f3e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7c40093-c232-4dd6-8223-142ddd97ebb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f50631c-476e-4f59-aead-876f721c7a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a3354fa-a87c-4d12-98d8-46c657f93451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e95924-55a3-457f-b729-ef2bca693666",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc0b4d59-10b3-4a50-9000-9c418944c96d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85b365c8-0adb-428f-ad00-a84c8d09cd00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad021e94-8531-4853-a80b-624bdf58ccf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "37f240c8-46ce-4b80-a096-696771b0c372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b528a9f8-b30e-4571-9379-cbcd5cfe75a4",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fbe2154-8800-4e78-8327-25fd6e0cedce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba21db13-4f68-4d46-857a-845e99a6cf45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43dc0072-3059-4534-9003-fad0bd87636b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1aaa5a39-a6af-4b48-a36a-36fef845847d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "769b0de5-10c2-429a-8659-35082f79b77a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "279b2fe6-5f2d-49c9-a7f8-f325283313e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a5ee6fb-cb63-41ea-93cc-bad3d5f981e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a66b3d-5600-4449-9bda-f6fb0d28f75b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "32154166-c772-4f4c-98ba-d6adf4d52475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35731a8-1a2a-45b9-b4bb-24f4ec3ae2c7",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd977b0-749a-4bb7-b403-e9ce521a61dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b27868db-393f-45d2-8732-7ef7bd35de9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb1c1bc2-7bd3-4054-81e5-6404dcbcbd85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4a19622f-c271-4373-a70e-60e5a33e3ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6943dd6-1a9a-484f-a3e0-f28b36a36f38",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8955aff9-e490-446d-8e7e-3c8b2575a8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "005191db-80ab-4123-b6ba-ca788b6f6a0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc27e26-7c64-4384-b437-6b7e608c55d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "41e7c18b-b357-43c3-9b11-9bd15a1922c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d080ce75-9db3-468c-a3fe-b5d80a219d43",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1209084-292b-4e18-b068-bc6307f8e018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a75a51f3-3975-40a1-8219-c1b6ecc5f8ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98aaecc9-d0da-4795-aec3-6c0c8593c6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c18d2fa-fe7d-4fe5-9bf6-31127c9eb8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cbc06aa-60ff-436b-afa6-c6c964d0075d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0bf5a7e-f00c-4947-8fbc-30c8ed7a4b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eded1f0-ae5d-49e0-9362-d6d8247312b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6206007d-2647-45f6-aacd-70cf3cb5ba98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "716eb8eb-925f-4574-912c-616f513882b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a473751d-786c-4e5d-a9ef-6db936a4e83d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2734b84c-480d-4c2a-99d9-185753f5acd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "441679bb-a6ef-47da-997d-cdd31f786119"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a099e3e-9517-451a-b689-35658da826d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a506b35-ca6e-42be-bbec-9d959738be6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0853c5d3-807d-4b49-9fef-a7dac919ca38",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a977c8-44ff-4b95-b1b0-f47aedcac9de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48dbaeab-6ef5-42bd-babd-619fcfbb73ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6774ce79-e882-4596-a1fb-641293ef144e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e432167-7740-4a17-8acd-bb0a45ea4357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df3e495c-9369-40f0-adf2-c28d0a0564ea",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35df9c65-31ab-4f04-9b6f-fcb0831099b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0267c45-7691-4546-a47b-7a9073a8d44a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26fc6b7b-ac62-4ec7-b829-ca449ebfa90b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f440d745-7f99-40b9-bc5e-3dd388973b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998e9715-f677-4544-b465-798446dc3172",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94272c31-1684-4738-87aa-f5505138712e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "73565e67-6d71-4c1a-9042-6cbc982e8e84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef10f505-b8a1-4108-82a6-a2dce1b10320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "907423b4-8870-4f83-9158-39976f81b5f3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "58e7afb9-5b49-44ed-8c35-e14b35b63716",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ca108c04-5781-4706-b47e-d1e85cce3171",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76abd7e9-cd9a-486e-866a-adb098942ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9084dd6c-b361-445e-9f14-2593099c798e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217c67f2-2218-4c10-b801-2614f628ca71",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7fc5792f-7d3d-4ccc-bab1-31462b98c3db"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73c77f0d-7a32-429b-945d-396a43e9cb99",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd8c92fd-51c0-4e94-b58d-87c4e4edf9ce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e73d7a8c-139f-44c0-85a5-bb4db22a8864",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56392dfe-1448-4591-bbab-e9af951474f9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5f119f9-a9ab-4072-8e7d-178027313822",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4cf511b2-3c22-499a-a063-2d21584d9dcb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "744607b8-a246-4777-8e41-2dd2ef8a6e0d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "388886c5-ad1d-44f2-a1aa-c9ab8032ba1d"
                }
              }
            ]
          },
          {
            "id": "32919b41-49f2-4235-a114-9f4947e812de",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bd9aaea7-01c9-41cf-bb39-317a3acf4417",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7647bbbb-0689-4e95-99b0-14710a414b17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d893c4ed-9860-4956-ba01-adf3ce495f91"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b8d21b8-0413-40b1-880a-bcbd8636ee17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2424e816-6782-476a-b5e9-16e0bb196b68"
                    }
                  }
                ]
              },
              {
                "id": "36d19ffd-7670-418d-bd45-6036cc7e975c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "487aa4b2-15cf-4385-b9b3-6116ecccc6ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d0458bd6-821c-4adf-922a-81e406b66569"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "179f1259-6a91-44a6-8493-d0aa02251dbb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2b5edd16-ae90-4941-b49c-83e37ab7f1d3"
                    }
                  }
                ]
              },
              {
                "id": "302b8eb9-9aff-4b4e-a1a7-e984136b699a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1b8f775-2bf0-494f-bd91-ca9484b7fd64",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6febf0ca-da29-4138-9473-67d23e6a7b23"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16ec87c3-5925-42d0-aa79-c6c8170238aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bb01f9dd-9112-4499-93ed-54f9447a810b"
                    }
                  }
                ]
              },
              {
                "id": "b70a8c34-fa29-4b4c-9223-604c298a8bd5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c4b4016-63d4-4ca8-b21f-f3250c9c901f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e470ff41-a672-4457-bce8-8af4678af8a7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd0d4d4d-4f07-462c-9f18-274eea1bd2ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "bdcf55d6-9aa7-4cbc-b6af-ac108ce627fe"
                    }
                  }
                ]
              },
              {
                "id": "3a6a5fd8-ae56-4210-91e7-8c0b209c67c7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "59249540-e183-4096-a24b-3d64df34d451",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0912ad25-c700-4cb6-8a7b-ab7a9446c351"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ad7295d-9d4e-4083-a8ad-a0276ab8c30b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9c9721be-8838-4420-b877-bd06d0e645b4"
                    }
                  }
                ]
              },
              {
                "id": "5d9d8d8e-82d4-49be-be50-8f35d01317a6",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a0d11e9-9e36-40e3-b179-3ea46f937d91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "10f23951-3bde-4baf-a6fb-17acfaa839c6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33e86a0a-fc50-43f6-97a3-a01220dc85fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "07d3da91-ca6c-4a47-aeb8-4fb11c04ffc6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2b55ab66-8878-4a13-9bf9-3f05ef97cae7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0016da1b-6753-46aa-9a4d-ca8dd4245fe1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "882fd5e8-4a3a-430b-b676-6f3a5ac2cfa4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eb2e489c-939b-4a73-b815-f0a951bf5e76"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0fd1e2a6-134b-43a4-9ce1-542168b995e8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "57463801-57fd-4652-ac0f-e16c1d8dc1eb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1bb5591c-0440-47a6-ba98-ec166e16f55b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "02891852-a6c3-43f4-a541-2950395ab15b"
            }
          }
        ]
      },
      {
        "id": "1c0b5529-26be-4043-aa5d-d09818056491",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4774a775-116a-44ff-b57a-2b47035c4d16",
            "name": "Negative Testing",
            "item": [
              {
                "id": "081ed93c-6d86-4bb9-8606-b49d222f464e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7618a8e9-005d-4388-a26e-ebbae98e32ba",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42097887-2d1a-4f5f-bf55-64ee40a40aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "898fe1a7-2099-456d-a3b0-bdb64e3b8baf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96e6d30-6dc6-4a28-a5d7-f9b95172a857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "308a3bde-9df1-483f-a873-b6ccb36ffac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c939bfe-2a17-47cc-bf67-f322684de180",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ec3f3b-b2ce-4214-9ca9-b0739490c0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7426321a-0080-4bdc-8468-11d76ac4689a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f20211-1e94-4287-9fe3-6a9d0070cc65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c59192b-13b6-4a61-a52a-e244300de4c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b35025-65ae-47c0-8a8b-e6661f91eca3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "418de7b1-6c81-43f1-bdb7-2e8fb12e1fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d86065f-4fd0-4f86-b646-7ae571e6daf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a6e286-99f9-4b50-a5ed-ad6ad34d7364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce66d856-1ba9-4810-bb67-458069f6f63c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f06b6f4-8572-4cb9-86d7-6f06fb87346e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce67041-bc33-498d-ad3b-7a9dc9de4918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f850fd0-ec41-49d0-a617-fb7908515fa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4304dc2f-11f7-4a13-a813-f6e20f0db998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5de5915e-17be-4022-977a-2964b13a5c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d0028aa-cc3f-4269-836c-be9ed7368a43",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6554b7-fddd-4c90-9df6-b9036f998236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a374ea16-18f2-4cad-88fc-666efbeb4c61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "737b4f62-942c-4f17-9abf-e5bafcd6cf7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "73110988-d00b-48d4-9c26-85384f5f4669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac5a56f-ed82-478e-94ef-f07879bee5db",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d83bc9fe-2d9b-427c-9f44-3242ff406bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5508ab4a-f548-402f-8062-4242fa9f34db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c813680e-912e-46cf-8e9b-a5786a9221bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c479b743-5bf5-4b82-a3d9-1a2892ff5e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6064a6-9743-4e4a-a4a4-c40d4b11842b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49958c33-9795-4bab-9e40-52666a2eacd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffaaf597-db1b-4e89-b7c3-2e438d92ec9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832600cf-2615-48ab-bc34-beae5f5c3b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4e08ee3-e2bb-428b-bab2-66d405c1346a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7efe2c00-9951-4ec1-965d-1781dadba313",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "392da715-61ae-4523-8bce-17db6057f1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10c5152e-f478-42fa-af58-3426f99a0357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9bf0665-2586-4001-8079-dfad4e7b2603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c8fc607-aa69-41c2-aad0-11d0d7e291f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e37253ab-3635-4a9b-981c-19bc77518e58",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d415e7-2555-42a3-ae8f-7511253814f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "437e508d-4055-44f1-8c09-925a9c23875e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f4ae86-beb9-4064-880d-4d9bcc84104d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5bcefcf-f1c6-436e-ba35-bb677f99059c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf4bacd-aa59-4bac-8859-cda2579bc622",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de274b18-1d3d-48ab-a950-5138f5cf1b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69c00d3b-1f9e-4188-b3f9-a4409f62cd80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19beb63d-dc52-4a11-9963-e0cf551b7eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0e83043-5a01-4017-80e8-ff3260dca376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0d0a18-235e-4ff1-8ecd-b141b034b725",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead660b0-c925-445e-9305-c252c35a556d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1e34d40-b78b-4e54-a254-cd5d6187e2b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192008d1-6e96-499a-9ab2-18d254191555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c03d69f9-0ef9-4322-9406-f1d085476dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855cef83-0cd0-446c-a6fd-13c46f18e2c5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc849e52-5491-4ace-b885-e5d15f9f063d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b6e72f1-b284-4a1a-be92-86537d03bd66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2fea29-d2e9-4130-8f96-e69d8aafca7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9099bd35-1dcb-47b3-a970-fdb84d3fdf82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a53084ee-4b65-4275-989b-196401284e3b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0328ff9b-a9c4-4800-81da-2429e8077ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "852c1534-c902-4d92-b05e-68536e85f805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5b5940-eadf-4826-8332-ee8287891219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "342b2afc-13ab-425d-addd-8d26036ecb2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "464fe576-2aee-49fb-82f8-dc7fe0dc6db1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b1750a1-fc92-42f5-92f3-4308ebd7c9a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e2d53bd-8748-488b-bf80-8fd206435a79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f724163f-70e2-43fe-93c0-0ccc2a9e485f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "188e6a50-228f-4e03-bbaa-9780bdbaa69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6721233-69cd-477e-bdd4-7577cb402147",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfda3a91-19d5-4094-a2ff-14d3a746e90b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b9f63ad-6649-4d26-b94e-29b5c886aae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3adc9a8-da60-4c59-86c6-20b693a63e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "edcd2a02-066d-48a7-a061-27d65e5028b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e47aa8a-9cc0-402d-b20e-2c0191d868c3",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9698c6e5-e179-4a15-b561-dd7da1b516ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fe28eaa-3943-43ce-8aae-217b488d0ab9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf3ae68-0b0c-48bf-860b-52e6d4f80761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "27ddc8ea-28da-461b-adb3-15ef67d05906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52a228e9-6a74-4d28-9e7e-0252d01c8780",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a81989f-107d-4825-ac62-9331aef4dd40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2dbef80-02d7-445b-a0d1-d167eb4531f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb090a4-a9fb-4b94-9d0e-616f23b39c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e1f9c3f-8413-4c96-846e-3d3ddd1c90e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ebb519a-4738-4cf7-b33e-140b879887ac",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9af041c-b104-4913-a396-c09fec374215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f44ee31-4a17-4311-9a0a-9f40546fe9dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349f8235-e263-4ac1-bb5c-938b8731e45a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8aca2a4a-2982-4b6e-a4bb-c4e6c59d76d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5db7593-8029-412b-ac2a-a9ee7ed94fc5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12972cbc-f400-424a-be91-8d731b3a57ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d1f97cd-df62-48a3-9f64-dc54a8a6004e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472d9f2e-499f-486e-b1f0-cd00644434be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f63c4b8c-cabc-4dfd-9afb-096445cb8992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c944fc-e43a-46d5-8fee-34fb97026b8c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "796d7ba7-8f57-425e-9494-6755621fda6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00638bd8-682d-49ec-aabc-3dd1f973decd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c7cddc-00f9-4fcc-b827-fee1780dc3f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b20bf228-f10d-4cec-8a1a-d2932ac84bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b35bcdbe-4e97-439b-9d44-036d0b5cd3e6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c3a6cf-f2eb-446f-bd68-484d85c3d070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7d978ee-ae23-410a-9732-cb01b6a0abd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735da415-dfc1-41ab-bc38-ae18e407f05d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f6fd17b-aab0-490a-acc3-433d55c79d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe67ccc-377c-4dd2-bd28-8c480547c784",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3473da3-68c8-478e-833b-05b0ea3a58c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "619b2b2b-949e-4693-9fde-acb70451a9f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9989ce6-ef5a-4240-9dc7-f2e36f0e9f46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74fa56c9-170a-45b1-9994-2581e71c95d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f9b75c-1de2-4136-ba0b-834bf7b46822",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "436104cf-0618-4d63-b540-411f81a62be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77745236-d99b-4dda-9482-d282ea8b2423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb85fe0-cf23-4fbe-a36b-e77dcb491d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2540f008-a608-4ead-ac21-13c999bd8e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad8bd2d-42e7-47c2-bcc0-96664753d85a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "becec46c-1067-4046-be44-4403ff39909c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87fa1365-ec5d-461f-be38-bdafc8023757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfcbf319-b061-42e6-8c97-3c8a7fb0c9bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f437ec4-2f67-4c22-bf78-c9054f6c240c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e187d225-614c-4fad-8738-8551cecd28e0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8543c94b-3c23-4066-87ba-57cfece61fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61d2be29-00e4-4336-9c39-1f5018cfbe2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1843895-8d47-470d-b4d0-41ebcee88b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5ced142-6710-4a77-a869-be3c3ac850a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516672db-420c-47f6-96fe-021735f8442c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01597133-6782-44d9-87fd-1fabd391f078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "907c68a3-cb3c-41e7-869a-8c25870be0ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2ea7e9-8489-4690-b80c-06555c6c0e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "447bf604-0523-457e-88bf-a3c993730597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68bb146d-830a-4d2c-a61c-07a086374096",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c008120-b7fb-48c4-8f63-86aaa3a1edbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "200aff2a-ac56-4748-a782-0e68f73a2129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbeed9bb-7dfb-406f-90e9-2760152b4e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d17ce42d-2ae1-46c0-977e-0724f7c3c549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f060803-e740-435a-8cc5-169c6f1d97da",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "567493a3-38f9-4321-943a-0c82a904f7fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e02c69e-a87f-4432-af84-082dc4995d6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07427b25-e735-4813-b1fe-ee1135988734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f7f2b48-614b-4ee8-9dae-6008edebc34f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e31ed19a-b3da-4cf0-a33e-8d059394b204",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "796baf11-7e9c-49da-8e19-a9e190293474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43b2af95-1bfb-4fbf-8c80-b5baa1c0ef0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dfc5840-0044-4ea5-9aeb-9cad1e4e831e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3e07d6d-3e8d-4f18-ba6b-294e9f03e714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98aec68f-aa03-4e2f-a2ca-b19875f39635",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4898ddb6-0a6a-40ba-a8a9-52def6cce78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f406f48-f680-48df-9072-dcd621cea0cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7371157f-9fb2-4fdc-96fd-36419e26f916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f5b229d-31b3-4cb8-914a-e90da2d78ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f07da84-a59b-4f2a-bfbe-3152cdb4a34e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fefe44-41eb-4067-b600-add398a0034c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5136b229-2508-4844-a2ee-2d5e9133864b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2043fb4a-db0b-419c-9a10-8287391218ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07ad97ac-5466-416f-953d-c9d61fe0229d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b3cc2f-911c-47c3-9788-39fc7da5dafb",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f8e798-6b5d-4f90-a902-9264420898e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f32cd6-8ebb-42bf-9fe5-0f00618b3893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f34f1e30-417a-4a36-bfd8-4ae7fdb7398b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4abe05d3-5c49-4cd6-be8e-23f2c3e4462a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "15f99e12-ccec-41ad-970f-7df3039c7a06",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e9fa4a3e-7685-4aeb-b20d-92b7e3e9eb44",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb6f4645-928e-44fd-bfdc-1695aaa8150e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "19c58da7-75fe-4e07-abad-32216217f19f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d75045-dd21-420f-9c2f-bea87d17b83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15210eb4-104e-4c3d-be4b-73f3ba93d8af"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc3c6c4a-3386-4015-80cb-46195567099f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04e308c5-c7c4-405c-acfc-d117863ab39f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac9a9d53-75a6-4bd0-8d9f-fa11ba400a80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a846e2d4-c7da-4d99-9092-d504d92bedf3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "359476b0-cebb-4dae-a9d5-b5e86f3aac3d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "064d1fe7-34c7-45aa-b4ef-a3c8f93ba9ac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f18cd7b2-2bee-4f00-bf9c-3ddfb6b298ed",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc2f97aa-68d4-4904-8d57-bb7b33629f96"
            }
          }
        ]
      },
      {
        "id": "f3b50ebb-6370-42c4-a14e-5e8b69db7fd4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "00af4a9b-ef1f-4cc3-b0b4-c77e29efdd21",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a17e70bf-49c4-4915-9952-6a0df1398c95",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "31d0fc31-7eac-4c1b-bfc3-6170f46e3969",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb82b13-b2da-43f9-bdde-156e43983928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1890d361-c553-4f45-a66c-0e30a2709737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4012194c-ad18-45d0-99f8-da6239c8bd71",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb23fd5-39d0-487e-9e49-24633aaa8b4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44d3a94e-ebd8-44e0-b323-17e7ae29f846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be709aaf-2774-417e-aa37-e446af699d8d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1280e7d9-45e9-474b-a067-13f2e510d3e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03b9974b-eb07-406c-addc-f67789082ce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d4e4b8-fa0c-451e-b8cd-34da3bc3b1b2",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "350a0747-3505-4fd7-ba12-f9cfb344e18f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4e63126-4938-4864-a650-64f4c9993b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8f4f52-99dc-408d-b0a8-1733834d6a47",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e00ebce-5951-4492-bb4c-c3b066f72d5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64195eac-76ef-4d16-a080-5d1d11477e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41d152e-0cad-4544-a007-64caa471f4d3",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1eb8e8d-8539-4e4f-ac9b-2b8439dc5e6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aaa1951-6c34-4d35-8f6e-8007b6514810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "314bfc06-6c55-4d1c-95c9-617b65e674ec",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9a7987-8f26-4742-aebd-0ba99d8198d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6046f536-fa40-4d2f-a3ab-ff1594b9b006"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b84307-1f7d-4338-a8ab-5df71f5a3591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8c7c448-d82f-46f8-be81-6a229ef573ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb1cfde1-e3cb-4d8f-ae77-20a628e7e978",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad06d04-0939-44d3-83d7-82e0b4f5dbce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "566868c8-26b1-45c8-a35f-bbf18668726a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8085baf0-f417-4faa-8277-c9cebc377f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8ff23ce-44b1-45ae-876f-c26104de4a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a205356f-a223-431a-86de-93318fdbbb35",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c74654b-c504-46af-8265-e4891e6cbe35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6811942f-e0c6-4eb8-ab24-8b17455120ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa68dd36-56f8-45a6-9522-f63b2ecb4641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "407e1da8-eb4a-4571-83d2-7c4a59d7545d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd41eea8-900a-4381-a64c-5f31746ec295",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7b4a00-e94a-4f46-b7b9-0455a4cb482c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd3a6335-e815-46ee-a104-797276cb36f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d6dcbab-8292-41e0-aabc-2745ff005ee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae0afcc4-1fb9-4d20-8641-487d39c947f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b93247e-d5aa-4ba1-a06b-7a1e735a90dc",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec728b20-2871-4e5f-9e80-852110eea56e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18805c78-2b25-4df5-8da3-6117a400cb48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f21774-bbfa-4bb7-93b5-df49fb7e9976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51f2c133-3ee0-4251-b6c5-5e116198441a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b827d812-3013-4eec-a080-4825fe93e223",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5acbff16-8db2-4aec-ad83-30da7d6a446d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad62cf2c-2113-42c4-a6ad-f067c081cf78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eadc007-4d73-4b3c-bb51-87c7fefd9e12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f77018-94c6-4573-a7b1-abb851f26b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33bf219-cc45-4b71-ba19-6f6095c9ba9f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d823e6c-edd0-4c1f-80e3-1f0ddb6a25d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa395080-c356-44bd-80f3-95a7256015e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c04d460-eee9-4e12-aefe-506fba72b24d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28487022-8b4d-4bde-a7cc-9946b4790879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d5360f-b013-4b76-b50c-84a50e49a1fe",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8970ea9-64fa-4193-ae0a-beb6e2ea0847",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "297c099a-a4d7-4fb1-8909-bb0234397a38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb589bb-08b8-47ae-a03f-c6e6ff62ccc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f05226ba-7d13-404f-a2b9-13826a7e9d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f89d2028-d312-44de-8f70-97331dd6652b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f1ab6d-9f5c-4af1-b1e6-110e3b7fc899",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14558691-730d-4d83-9f7a-38cba2fd36a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2400f20d-61f8-4722-986a-6448891d2a92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fed516b1-12d8-40a9-aec5-da6bf6b17572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54952467-f156-421f-ac03-de917a078dab",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a788b4-a54d-4f3c-909c-4c1e3edc4ae5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cc3926b-df58-46a0-a211-6fb4a0af4ed7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1230918d-df4a-4e00-b16e-5ad1c6199755",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a4e9100-1c5a-4bb0-8cde-fa6be6d764ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa53d81-d79c-436c-b721-e55d3c63cbff",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e5b8cb-ac6f-4998-ac86-d0b213323603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a506d50-6564-4377-9819-856ade991d04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6334944-056a-49bc-bb28-4a2322887ad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e2fecd4-4174-4fca-8777-a6dbf28eb546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22628e5c-a179-4801-9da0-b972e7f3ceb4",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a988927-c51a-4737-8ceb-6b20aa69ff14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e44106b-ff35-461a-aee0-a6067aa36592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b6039e-60b2-4432-b20b-f1c0bc23ca38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66ea25c9-6ad1-44bc-bef9-bdde042b7fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6d09cf-1441-4815-b848-6556db11b50f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f81736-5473-4fe0-bef0-4473091d3111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "483c1a88-23f9-432a-a752-bf2426104613"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "219f795a-7653-4ac2-bced-c1e6233a339f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "545f7dc3-3f86-41ae-bf24-141714f8cc01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70e42b5d-96b7-4012-99df-4f832afdc570",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97c6da6-a392-495d-aa5e-f6d17c36260f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48bf9c59-278e-45cf-93bc-d5c0fb4cc23e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d51ef03-1c24-4412-a0df-962310b48600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b03f7ac0-a1fa-4283-b6d0-c292b7cfd053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc251477-f537-4b35-82ca-a91e44c3de1a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1ca1a1-8ef6-425a-8e54-b20665030bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c1e084f-05cd-4cf2-be21-e3f2acbbae54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1854eba-ce1a-4484-bf51-054adda0ca79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6f990fd-77b6-4e3c-8096-49a85b2b5213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6944cdf5-cc1a-4a45-a0ba-0b15451a0fe3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f46c5272-accd-44a8-a8ef-cbbf4ca8817f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d79d490a-31a8-4281-8a45-1bbad55219d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d766f4fa-33c4-4b3b-af7c-6fd69ead191b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ae4f20b-7e02-4daa-b5ae-da209dd0625c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17055b0a-c45f-4be5-b6d2-be5ec0ac4d39",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07eb80e-bc68-47c3-95c6-8bb4f66f30a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3c7e2ee-47a6-46bc-b35c-b78c4b6bdeab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4a5ae9-5408-427a-b4a6-31b4a01264a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c908c27f-190b-4322-9553-7ed0b650e7b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e876ee9-aee9-4a92-99d4-0ec0fd3844bb",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d5a26a1-d4a9-4fea-9bfb-5053fd0f4ef5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c41fdb0-eb5d-4c3b-9cea-8936b4c423de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd77d579-8466-4a6e-afe5-9a686e0cb377",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "560f08fb-4b81-4e93-9707-f05ca9f22381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256079da-fd4c-4d46-b597-fc5824a17e03",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5fa7bfb-30ac-4db8-9959-9930a9b3bf44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "292e3fd7-a99a-4feb-aa03-44dea602cd3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8cb820-f12a-4924-992c-6e8b532c67b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1624a5-8c62-4e0e-8974-a536408fc247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4befffbd-83fd-406a-8bfd-fe2878f9ccbe",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719b1f95-3de4-4243-a258-4cbc48d70928",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "631ed230-1207-407c-9af8-0ce011f3120f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45db24cc-26ea-433c-ac45-98664348e598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9286e0d-0b9e-4c85-a22c-be2fc7244a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d8196e-acd7-4440-8c29-38c378b2ec0f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a376b775-48d4-4c9d-862d-9880be4cfe6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "829e5c5f-6386-4e2b-9ece-af3ccd10f709"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "189de5a5-2d84-411d-90cf-a5c7dc7e0552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a16a3cc7-c8f5-4b8c-ae62-414b279ee0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c46fed-b4a8-4328-adcf-cf5e0db0942f",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfaae0dc-cea6-4c97-af36-56baf7570abe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd066a7b-de6d-4561-b119-4a0ceb5a095b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa8781a9-069d-4186-acdb-678e872a6174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e1845ab-6dd6-45f0-b1a5-3b7cc522821c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b2f04a-0d48-4fe4-9bae-c4529e2461f4",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a7a2a1c-901c-4fb5-9581-6a8576c82483",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2736a9e6-c67e-40c9-9294-6b6339f8c97f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b86070-7d70-413e-8598-7ffbc5bd4859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a90a8b1-3d3f-47f3-b499-d42517917d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb0400e-72b7-4fb4-9461-f64b70864901",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ede7a3-d574-4034-b620-ef06f2bdf1a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "995d6860-a0f1-4c08-a9dc-262c168e6ce4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96917373-0efe-4996-9ad7-0e520d10e2b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1797335-3c20-4be9-8fb4-576fb75eb061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa79ec1-0d5c-40c5-9394-55a4c727f267",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b729c62-6679-4213-81b5-edf912d8c45a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cd3576f-45e7-4976-82a9-21115e556978"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb4d152c-04be-46f1-bafd-0296924f3275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c68667e6-9654-4d5d-86aa-4636a17c7790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5558a5f-2440-493c-af25-30a8c9404c4d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ba3319-24fe-47b1-b2d2-eb62cd901f7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "967f7ee0-c7a3-4ae3-b1c2-f6c9e288c6b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "def236dd-ca71-4565-b2b2-62a2c232cbec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd8483a4-eca3-48c7-8130-46a112a79d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a80a54-2beb-4274-adda-7283f6058feb",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ab2547-d9ca-4cc9-b1c8-1cf1e5283832",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d42cdb7a-c1b0-40b1-83dd-24884329f58f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70765102-eed7-4d44-bbc4-2213af97b571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c06e8685-fcb6-4a66-9619-6afe8930129a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89641eac-45de-4b67-ac0c-0d136836c2f1",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bba3637-3d7f-491e-b48e-cfba3f1c33bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c3e6630-51c4-475a-bd36-c62eba8b39af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db11fe63-f9e7-43fb-b211-a3729bd82f16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fa21b71-b7fb-45ed-a802-d9e4363cdf13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d58dab71-ebc5-4890-837a-1ab70fc2195d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6d48fd-b33b-4c60-9455-9418263f641d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20961f71-6f54-4ab1-83dc-000f29380d8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "310f99cc-fbc1-4497-8bbf-6c361bd032a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66653d43-0bda-4d0f-b225-0a88bb524f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4740d78c-2aec-45ba-83d2-5e8abbc6f2a9",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e49111-8e55-4838-a9be-8a0409e152a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "607297ee-6b79-480f-ae29-fa647d973b8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b52875-52f9-42bf-ba74-8b5a3e10fb27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db5a575-c2a2-486c-af7e-237442fdec79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e7f7a2-52b4-45ff-bab6-572607f026db",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82bb39e-59b3-466e-af31-fae00eb19456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d60e74d-b7d3-446f-bdaa-82b36b85db9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b42445da-699d-4063-ace0-ec655cf72238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2413eb5-18e6-4684-bddf-af2c03a13afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8386b8a3-1ac0-4241-964d-6bb1ede38a16",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaabfbbe-8e1b-4519-9193-ef326a32bd18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c93c737-dd7f-4c72-9dc2-5615b3072922"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d3635c-fe1e-4775-b061-1360291673b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a578edf-7c34-41cd-964c-229d8fa50f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08dce618-787f-4ffd-ad23-96dedc6017de",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd64a51-5131-40c8-b9a8-3479f0c2d265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5742da13-7d8f-4463-8506-c82d2327cba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a8333b-3544-463b-9ead-f2a48b4cd0c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05be9c08-e494-4c86-9796-4a9537926a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5793d4-e6e5-48a1-8273-a7e5929fd5c1",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3524ffa7-a55d-4c3b-b86d-5f5cdda42e7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dddd5380-d056-4727-8303-aa6c5b3e0ffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4214a412-f6e7-4225-b76f-4d18b125770b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb5b4d1-cc95-400f-a5bb-93676d81128d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a306025-1839-4d44-8a00-d51a54f56636",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1230de1c-f7d3-48a9-88fe-cec91356406e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b82d3cc-fea3-4b8f-88cd-9d8f81422270"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a28bea3f-d9b3-4b88-acc6-6c32213665f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5193d212-3fa5-427a-b173-fad6dfe9bd51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0543be4c-eb1c-4a74-9cc9-5b92e609447e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b385cf-c706-4405-83cd-5e786160600c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8bdc285-20da-465b-a69c-2ffc060d2fc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1fb9dc-e300-4e37-a2cd-52e2e4cdd736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cf7fefe-57c6-4c46-9b4c-c64feb182885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "219b4ddc-16e1-4be4-bbbe-695c1e71b1e9",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "165ea2cf-327a-4860-aa25-b89c67c09db0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc8d86ce-4c2a-4521-8ac7-7996e0eaa791"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8f9838-9e11-4406-b2ff-7c4361effcad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5624730-4918-4668-9f66-16b08158c3b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4bd2d4d-85e7-4106-9016-1f5a0e05a526",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08142a40-12b5-4c11-ba2d-4fb2d35de2f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa7da727-eaa5-4657-8bc7-514c3160008b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f95ad0-c207-4f3f-9be5-d1c650b599ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f01596ab-2cf1-45c4-8ccd-096aa33f07ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6daf755-a7aa-40e1-a210-5f0927bfb86c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b196320-6821-46ba-bfa8-424e1345e25b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbe88b5f-6688-4c18-ac40-a0699339f65f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbd111e5-a4f1-4e15-ab38-4af9a052c1b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae591446-d484-4511-a9ac-9fea8d26f8d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea7665e-b82b-496e-9721-c93ce1cb1d2d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc5cccf4-3e34-4812-91fc-5a9326c111ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c1b8fc6-d81d-4bbc-bc33-c0f444f8c64f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8861692c-1044-468c-b0b3-529285045a7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3fdf265-f40c-43c8-a778-44bbd33471be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b76f8b-c1bc-41c9-860d-5f34aba17462",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51ccedf-8c49-4088-9058-395a7d2bc848",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b25b955-ef73-4b2e-b725-cf7d45c1f47f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7a38c2-4cc2-42f8-aea3-32efc89e771d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22343c39-5e69-4650-813c-923cea0db372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4320e2-c2d0-40b2-a01f-0de4ed8343ca",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8601b57-369e-45c5-9990-020c53475f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd8400de-3af2-410b-8e7a-2b06fd1e80d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60d3e69-dcfb-486e-af5a-702998109805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bf05c55-e945-499d-9ec0-0b0a284cfea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f88815f-46bd-4ddf-b7e0-7b26e6a2b58f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32075f32-6d4c-4da4-aa40-3966adb9b954",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a2d0295-57e5-4fff-a46b-24e2b3c23c16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e3f06a-81c4-49d7-89e4-5fc563cb11ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f8c6af8-9c17-4df6-9c1a-e2d043615db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9e0856d-e6d6-468e-9ecc-9868497f3995",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef4426c2-a7c6-4cf2-a817-24531beeb31a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "975db431-cb62-4079-9361-852ed3f2310f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26312ba-b12a-4f40-b5cb-9d2d4ea90d89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4710adb-855f-44f5-82af-25882bda3e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d1162d-de52-4401-bdd0-bcb137a40eab",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7feea72f-22a5-4c82-88c7-6eb5146a9ac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faf2df12-d784-4749-8872-a53918ef4547"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b6c728-8313-4343-a456-99b826bdeda1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f30d649-f4d1-4dcf-b9d4-38b0d94a683c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d2d11d4-c076-43ef-bb9a-9278ac092755",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd12cdd1-fd3b-4de9-91a7-1f07edad4435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "742c45d8-caf2-4fa9-9207-96a2cabd4556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce20c5d0-f0db-4b65-a5db-c0474cab20fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcc66ee7-6ea0-4b35-a238-0f1ccd887750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86eac3ce-6228-4398-b82f-b3dced034244",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e97ae1c3-f6d6-461c-8021-36a5cd8ebe94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aece3b31-0e50-422a-b5ed-c77a9a5c076f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c76228c5-6acd-4392-a13c-bdd3fe8da4f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ae9016a-722a-40de-9068-3fdec6dee38b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad72991-efeb-47ab-953b-e08e8058ac19",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47cba15e-79ae-4af2-93eb-8f71ca5e2de4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "897c07fb-3adb-4b8a-8c96-d152788f2421"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ebfee31-6922-4548-9c1d-9de2742cefdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07fff04d-b1c0-45e6-85c7-c8d3eea1e391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd809d1-9a15-4aeb-8dd0-23b31929010e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3d8659-f280-428b-82d9-a0943060ccc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c743c95-713e-409d-849d-60175096ab3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9012646-67ff-48e5-9003-387449c773df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "130720dc-47fe-4fc1-8992-cd541f270465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1781700b-77bc-4918-9c4d-b8adb41ccf5c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd9e085-e4d6-47f3-a382-87bb916cdb1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f43dcd-3cfb-41bb-a2b7-e952200fddc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00533446-9203-444a-be75-85b4ada49121",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a77cab68-ecf6-44a0-bd7d-322e977f1706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71fda908-d8d5-4bc3-b658-054a8dd589a5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ca298b-4726-4d6d-b9c9-023ac00c9556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34ef4dfa-6b5a-4cb7-a4ca-fbea23d10766"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39abd176-a18d-445e-bb49-0ce1772877c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebd2b9a6-79bf-4d9e-8d8b-1abd0cb680d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "745f30d9-b9f5-491b-a7bf-8c5ea5f2fcc9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4354217-1ae9-4164-80e4-246e939933e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f99e7ef3-7a34-4006-9f8d-32efbf829369"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "288122a4-0dfc-4dc2-8c41-3d5e59acf12a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d745a44a-5f9b-495c-9cad-7b0c3f4bdd74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a330304-3de5-4aed-afc2-de336403b4e6",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed3f5c09-54c4-4009-af96-956cb63632ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d314d3c9-d57c-476d-99f0-7f71451ff15b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "693b0f7f-3a82-49fe-a828-e65d0aa90548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94b37d01-a4b8-4631-bf70-48eee0e786c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90cc11c-6e59-4896-9ef5-bfe13719a8ba",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3135db67-b651-4e69-ada2-64c63ce2f27c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b7f891e-542f-4bb5-b298-fff591065305"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b5b12ee-cff0-408b-b7ad-ccfccff810e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "650cc4fa-4723-4193-adaa-44fb8afe1958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573d1b0d-3432-4ffe-81fc-f27feb85a511",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0db176c-23e4-4063-b836-74302cb1e90e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cc848d7-c25f-4365-a8f2-8580bfee0b76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aff563e-cb9c-4d0b-8857-8f7de76823f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64c27097-c5a1-464c-bc67-fdfb18e149d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9e1311-c3ea-4ac9-9504-295ac591e037",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342c9604-f481-4fb9-b439-1f42ede92a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76093868-1d68-4709-9424-734c413930cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf2e083c-23e1-46e5-91c4-4c6994bd015a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b03867a-2b3a-4e03-978a-d64c2fb8ac20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c202c811-1e46-4497-a680-026e5265f464",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea17edbb-62e9-4aa1-b019-2412ea49dc76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0df6147-ca04-4a84-ae94-3e0bddfb5abb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01aa1df8-b033-4bef-aa0f-e25021d1628f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f19c716b-6545-4035-91ee-034868fde4d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067a63ac-0584-4e09-917e-edd571173b64",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc278ae8-76e8-4b90-bf9b-942d5b87700f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9caaa00-ad58-4085-9d66-a7a3ec21e5ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6e3c0f-12ff-40db-a8cd-50c2292482be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37365e5b-e57b-4590-bba4-0423bf5839d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114d0970-51b0-4454-adda-cf83d500e1a4",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b4b587-889d-41a9-b66d-7a16ceb5480f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d500bf3-6f59-431e-a1db-789dd5ec5420"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60352b4-09c1-4d34-a58c-66418760df2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52d34b5e-5f3c-4caa-ba46-221b6f3c4916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ce1317-725f-41be-b4cd-37e9a831a9ef",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ceaa20a-d562-4e04-ad88-b95f051cb43a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46e16912-d7f4-451e-8a62-d53bfa4b8a09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1624895d-eb63-4eb7-84b8-b23f18532b8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96be2bc3-3453-4b06-ac0d-30031642efd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5deaab-c850-40b4-a355-3382ec6dbb6f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce617406-bfb6-4346-b1bd-e0aa2b9e1495",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01d82e35-e6d3-4025-a7b3-8e8a62a99594"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac9cf75d-3cba-4a7a-bba4-0e82d74be1b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04cd098e-9f67-472a-9871-e318e05281f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1dee39b-7e0e-4c6c-b2e9-3a70b50c1f25",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "280a7780-12cd-47f7-b053-9b8044ba46b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f062b64e-7402-4adc-b3c8-9ca0c8d461cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f0f26a-6a16-4089-8411-a0e741adc4da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6527d3bc-ff4e-4572-b8a8-f95b31fe298f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f75a7773-6e8f-4a8e-a0e7-3735bd9ceaa9",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c46ed8-744b-40ac-b739-d42466a35d7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d66c2f25-8c35-49af-9434-c86084f1c183"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0957565c-285d-4e42-8660-b21b8d2a01f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e948d6b-5afe-4746-9c25-7eead5f885c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d81fd9-7ebb-4732-b93b-eab1fffa569e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cacb9cf7-40a0-4d7d-beda-3fe8642f5806",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b3f68ad-df61-4438-9ce8-e6fc42cc6348"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d03be280-3d22-4878-879a-3885277c01ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a00569fd-0fc7-4ffb-81fb-0b9ab508d342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e84bc05-2b40-48a3-9b43-949560805db1",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0111ef68-48a3-4eaf-be36-a9764345d0a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94b711c1-56ad-47ca-98f3-f71fa34134b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e5af67a-c0d8-4130-9112-9b3877544314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9dc9f8b-f5eb-4dc7-9e3e-99e09f29512a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "584badc8-5bab-45b9-b1a2-27b3ef7265ac",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f92ee5be-7b50-45ce-96af-3e225055dd8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc0a0add-0137-43a0-83ad-1a616765980d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c35ede36-36f0-43e2-85b2-00d5d250dac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aad40637-ffb1-4109-b3a4-583ad4b47f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c81cd518-f097-4a2b-9d73-c530e7b8e4e9",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30fa7df-8587-4e06-bfbd-e885da21f34b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9bbdd19-da5c-4c1e-bf0a-e5fd4cfd5274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd0ac4e0-aeec-408a-9bfc-cccf02c075d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5794483d-645e-4746-85db-0c378739ac81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6432f0e-4619-4be7-9113-a6f9ad29d04b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc4b995-f2ef-48b4-add4-7aca52a9b604",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "531cffa4-1c28-4bba-9cc1-d75c082681ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d49bf2-5e95-48b4-afdf-68364e7a5f24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c17feae8-820a-450b-a34d-9863f570170d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d43c88-55fc-4465-8b18-1bab0fd1e95d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61affc94-4c74-4d7f-8477-04c7ac779012",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef636776-19e0-4c69-8b62-eed3ff054bc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe5a95c-34ea-416b-a7ed-9daffb8a4d74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39fd8809-a79d-4ddf-b128-846127546ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c916c9-b63c-4cd9-ba6f-df9b3010aae2",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77af895d-0191-4f5f-83ed-e2880594e0b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51897653-8cdc-4f06-833c-841348924bcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af2922f-5680-4a1f-8dc5-c87621d01ef2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a235dbf8-043c-457e-94b6-3a24f11e9577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec8290d-710e-4a0a-afd1-2e0e7f1af47b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94bd120a-86f0-483f-9777-45a09624a762",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "683da53d-094f-4bd7-8950-d8b27c275937"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c77729-bb60-4854-8662-d66aa049e6a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a45f47f6-9682-48fb-8f1d-f60d281b501c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0cb4da-cace-4beb-b577-8e881ae6b814",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb64aae-8e14-48f9-9312-be7fefcaa974",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a78a2f4-e129-43ae-aadd-772c29c19770"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4be426-8d35-4220-a043-ecbb8f5db308",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "691b2f9b-d43a-40e8-ac38-97e43cf2af4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ffc732-92ce-47ea-8b35-a7cf669457ea",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "688ada50-ee20-4626-815a-e3da7ff67293",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a335e24-5699-4ed8-b3ee-a1a2aa3e5772"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ade0c4c-8900-4ddc-b8dc-24db7a57cbd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2c6b4c0-7e37-42f0-a90e-814ff7d1beca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05be9f0-db8f-4de1-9c10-aad18cd1fbde",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba9b5d3-1d31-431f-a656-1f03c9b05ad5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b8d0609-6eda-4976-bdd0-fe5f3d9d3044"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c992cedf-e924-4048-8f6c-94f1ee32c425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94c847a3-cb66-48bb-9805-831db38340b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23b73a4-565e-4990-bc70-cff60cd3ab52",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee51859-23b0-4921-bf24-5dcb7be2d2de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8ed18ec-1673-45db-927f-cf54c5ae1046"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6faa8ae4-1f9b-47fa-9f50-e803b24ab620",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1b7ed6b-5d32-4c7c-84f4-80bb5a8779cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5072bec7-fc42-4ae8-a154-8cfd17425647",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fbae874-3ed8-46db-b15f-a5f9141dc800",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8bdfb62-b76a-4bba-b3d1-23fd27ad896e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33babb62-d289-4eb6-85df-439bd3078d34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7573cfa-da91-4f6f-9e38-779147f7a24c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc33f7e5-a363-4af6-bf5f-6de5f114794d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b4b22c-4bf8-4dd9-930f-d3638fa5cc78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46e92bda-1c59-48e1-9b19-f0074da97d84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4fc102-84f5-4366-a147-8f4f1391507b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f303d45-5d6a-4f94-a233-92e1b80ddfd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc6859e-867a-48c0-b655-a6f825724b33",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4450dac4-840e-48f0-aefe-6e5f2445c673",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa536efb-1416-4ba3-8855-35344a128d8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c54748db-f8ef-4cfa-8371-e4262cfde565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e692cb69-5090-418f-b797-e35b38a546ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "312afa64-92a3-4791-a486-826e54aebc97",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb455786-a9b8-4c59-8650-7688362cb0e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28fb180e-369e-49ee-9361-08d1362d0f32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67080ffd-e478-4330-9a12-caeabbdef135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbc7afa4-9594-4585-9911-7479fb6e28e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770aff26-dbac-4810-9bc1-7c03dbd99b01",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ec935a-b8bb-4802-82c2-42b5d7274de8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91d82220-77d1-41d7-aca9-6818dadd2c8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc75297-d9ca-4960-9c87-fc713db61e1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dccd9919-acc3-4714-a56d-7ea521b3bead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7822bf16-2d3a-4ac1-b211-686cc84b0aaf",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b600ca-957b-4768-a754-803fd4dd376d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34afefe5-457e-4e0a-8e29-88306b18c23b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed75f66a-af14-4b94-9424-40106b1e7a67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fb10c72-0215-420b-8342-cf230be4e32e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20fbf40f-76ac-48b4-93f6-86cf62d08afc",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c304b2-3629-439c-90b8-5a45d6963e56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "346f9010-b686-4b56-92a6-bdeab9e7c889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c85661-d662-4982-a471-343db7b3271e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5447deec-a7e6-44c0-8081-43d5419a7e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6091766d-ebc2-4aa0-9fd5-804c6e00f7ee",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d4ba515-40dd-401f-82d2-8bb55bbc3c3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e013397-b2f0-4ddc-96be-243f508dac28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7f54a0-ef1a-4df9-8657-7cf4f436cb09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0f01ab9-fc0c-4647-b3a3-35ad8b875525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fede581-263a-41b3-a088-dfc3a2e56715",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e5c4e8-44f2-433d-825d-b92bee6b29a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94ff39ab-e8f9-42a7-ac3f-729b86d9600d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c2dec48-f5f9-41e0-a186-4a15e93113fd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "621971d8-1563-43b5-bb55-0db355a8e5ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00989e9c-66b1-4507-b046-ba4430e88a17",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c2c9a2-bb6b-4dd2-b469-a09c1634afeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abf11e0a-d8ae-4081-9c2c-cdd6f58f9044"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c075a9-194d-40bd-8c11-ecdb9f4fdfdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6161a03-2d8d-443e-a080-c5e5e8290c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86f3e97-9c6c-4c9f-bd7f-9dfa8ee7507d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77f3213-c377-4556-801b-94e9f913f8ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e42aa350-2eb3-4899-a86b-8a80cc999294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d3fd597-88b1-4024-9322-ae9a3f56fe15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac41a64-6403-4232-95c0-8b3915dc259f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619ef7cf-c190-4e21-90ee-52301c8a08cd",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c371259-0f20-4269-8174-4a498920528b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f09b0d47-e669-4ea3-94cd-a6a1c3a1ffec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b43fe6-c785-4f4c-95e6-ab1aa5fbb785",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f20f9b9-521f-463c-bdf2-33dfbe27e41e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d0ba56-92d2-4c7a-984f-9b2f4e847901",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c662dbf4-e661-4b86-8e4d-aa266675dce9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b227c598-383d-4f68-a3f7-c8b761730b00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d8eabd-1209-4417-8c01-37dbefc560d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae47b0f0-8ed2-4cad-be80-d8625af4d3ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "288a3d57-4633-4015-a7af-f667a4af2ece",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9449ed0-b2e7-4c13-a7e8-9735a99f53e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb86b0b3-72f6-4b9f-8924-3fe1964924d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e363a57f-d6a7-428c-b9ca-b5066b0cb6ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07612606-6186-4227-b195-5704bd03e666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d88085-bf04-4a06-9ec6-706fd81f468b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c50a04-34bd-407f-9526-06c4a45a71e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1472bacc-f513-45be-93b6-2f20985284c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ebc1f10-e3ad-4b68-ae28-6a265252ae84",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdaf25ea-cf58-40aa-9b4a-88fe896fdc2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "223ef76a-225a-4025-b616-ddec6ba98e1d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5bd0f13-e3b7-4fe5-8f70-0235ddd3c7a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "276a135e-7eca-48d7-b552-ce535f9287bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada3bebd-5a9b-47e8-afe7-8e64337c3057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "165c0469-920e-4dbb-8738-99442e6a2fa3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bdffbb72-b66d-4753-a6e9-8272bde50f27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "306ba81f-5d24-4988-935b-0edcdf49e571"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1f3d80f-207d-4bf2-87a2-ca706fc6cdf3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f7ef633-d623-4616-88ec-19796842b532"
                    }
                  }
                ]
              },
              {
                "id": "f9efb4f5-ba8c-44da-a34f-9a588a8a6cef",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fcdec1a6-5697-4cc9-9a93-574a5331411e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0143e463-fe29-4a7b-937a-5db42234ebc8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8df38beb-a22b-4553-8e4a-b7982759190d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09223848-0302-4b87-a7fa-84484ae9eda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c835a9c9-1142-4867-bc08-0a9e5fcb4ddd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfb2f492-4afe-419c-9ba4-95d310b23e37",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6db5bc77-4607-4cdc-b30e-c5e4d61f2bfb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "83df3ff8-2bff-429f-9273-0398959a6cbf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4289acc4-5d55-4fea-80d0-b3aacfe417d1"
                    }
                  }
                ]
              },
              {
                "id": "003456f5-01c8-47d0-bf93-f6b509861600",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "112c54e4-1b78-4300-a965-d2c29080a12a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35fbc609-a924-489f-bdee-67c2c2ae3195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "5388a2cd-dd23-4747-beb4-7dc0647fd4d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb01328-a15b-4423-bcde-00cfa3e445cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbe9cbfe-fc4d-43c1-b459-04fbae0f3f70"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "083e9972-a065-4b7b-98b1-c53fef426df0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "300f3e1d-6b41-44c1-9523-cf7a6e4610fb",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28f6a14b-189a-4a74-8d0a-380b296805f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "09983dc3-4c39-4228-aa8f-28f74b4220ae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc0381ba-9ca6-4f2b-980c-5be6312ac31a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aac8ef6b-0a44-42dd-a53b-a5a1dbe02ffc"
                    }
                  }
                ]
              },
              {
                "id": "bc9ece66-a3ed-41f0-ab57-a8b3350341f8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9befef37-b7ea-455a-b7e7-4002cf46c2a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "64158d8f-afca-4728-b4d3-657e33b61553"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b5b7b48-bdd3-46ea-a01e-7e64bda99b15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03d5ecf0-882c-4c10-a566-ba2c69f1538e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ec0cc0e1-1f05-4142-9874-cb348a647a69",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "01ffaea1-8cf1-4e69-9352-00feeef8b117"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d7d1a012-f0f4-4ef2-824c-401baab78c4f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19345426-8b49-4cb8-8aa9-0d690b7c4931"
            }
          }
        ]
      },
      {
        "id": "5034dadc-3551-40e4-b224-edc84626d5c8",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1088263f-3e3b-4c7e-b012-37514541e1fd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "710036c5-d68a-4b6f-9bb1-fafc325901f7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7d20bf10-d32b-4ff5-aae9-e953708ec01e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad76a332-7d20-4cc1-a0bf-c7f5165112c2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "38fc0d74-25a8-4b31-b9df-13c393acc059"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38c0468-4d8c-437c-9058-779368513a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1abd45bc-02ed-4e4a-87c1-ec4887aca47c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ac375c8-8b11-4787-9b33-16f6b627d715",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c5c80db-4636-4ea7-ac8a-488a32c1030d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1da45603-1375-4010-9a03-1f68bc66adf5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37f33702-dce7-4335-b448-676963e2ab00"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0edc9c7b-91b8-4f4d-9035-9d2116c81c72",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8b57ae9e-befb-4924-82b7-6b06dda2f5b3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "448fbf3a-77eb-4ca0-8c8a-ddfd28dffe81",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "197dd7b3-06b7-4ad8-8fac-51e2bb53db27"
            }
          }
        ]
      },
      {
        "id": "7ba0c866-121f-4023-b89f-894b7235f641",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8b56b3fb-ff3b-460e-b1b0-650e0079043c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "22b01d65-245f-468d-afcd-43d57fa10277",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9d87f59a-dc04-4481-8fb2-b06ff0b292d5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26082089-524d-4052-884c-92fd7d8eafce",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38b5b8bf-f92e-4020-8868-731d357111cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "614bc8bf-5669-4500-9bb0-d895b76756da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33a031d4-fca0-44d0-a99e-9c9ae50c73d2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d31081ae-eaa0-4664-9233-9a88eb78c71f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76e07bd3-b1f4-4433-9f9d-d5871837ca30"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "34d09310-f6e5-4acb-94a7-f778c5ca0f6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bfd04bcd-d6d6-4eeb-829d-a8001ee8f465"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "46b37cab-142b-4507-95ed-1ed863bc257a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d3581e69-31b5-4a90-9255-6683241a9a22"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5645b79f-7021-4afa-8452-632f10164ca4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c17e6a9d-d2be-44c8-8ef1-c529cdc8c4c8"
            }
          }
        ]
      },
      {
        "id": "52115b38-ce80-41e9-81a4-a776160afdaf",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5f4bec97-5701-41a1-a045-6781d28537b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "438a5939-d87f-4902-a41c-c66a5db35f82",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "79faf16d-cfab-440b-88fa-66adc3e19a82",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b216a3c3-c373-4f9b-bef7-cd378de53188",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf1087de-c4d2-49be-bdb9-ba10fdb260fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c140dc3-093c-4dc6-8ab1-113a2ea60614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "443b2074-e69e-4303-b9e9-71fff27b0034"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01112b1b-cd9f-4b35-bc33-efd0b61741db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45682772-74de-4539-980a-2fe46ac02c3f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7c5bd85-18f9-4686-a81f-b75b7e32b930",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d7961b5-59e5-4258-8deb-c9cb2aee2c35"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e58dcfec-aed9-47a3-8fd8-90d6bef61931",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3edecd7d-3ed0-48a9-9506-00f0d6e2490b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "310c0850-9e8d-4176-aac6-5bed748c13b5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c4fdc5a9-811a-4489-8929-eb5933b0075d"
            }
          }
        ]
      },
      {
        "id": "facac68c-b1ba-4c88-9ee5-40a7a2b205ed",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3d069827-bc46-470d-b13b-69bee163a39c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3e6c6cf3-9a6e-4129-acaa-74b5ffd07056",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "40d74297-5acf-421c-8452-0427f9b26417",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a3c3f255-401c-4cf5-a6f2-cfb81b0d2253",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "86a1cb36-35a0-46cb-8d90-53caca8cd3b1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 284.83739837398383,
      "responseMin": 8,
      "responseMax": 6415,
      "responseSd": 803.3171661900856,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1686098674868,
      "completed": 1686098758522
    },
    "executions": [
      {
        "id": "b1a12ee8-5af2-41b9-a7e2-c42414676653",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9928b33e-b821-4689-892d-8e63c0ede143",
          "httpRequestId": "d872f571-8499-4c11-a9f7-c85e1a321969"
        },
        "item": {
          "id": "b1a12ee8-5af2-41b9-a7e2-c42414676653",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9435fd6d-e3c4-4772-8f5d-31b41c344f7d",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 0
        }
      },
      {
        "id": "3079ee97-ea05-446b-a9c3-88b28ab13cf2",
        "cursor": {
          "ref": "b34744af-939e-424f-ba7b-7b416fe3ac57",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b7e30bd9-b633-4356-ac3c-7a8bd30d71ae"
        },
        "item": {
          "id": "3079ee97-ea05-446b-a9c3-88b28ab13cf2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0675299f-cfea-4b33-8a78-303e7b1adcc5",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "27184c0f-dd48-4f0a-afbe-7764c17da094",
        "cursor": {
          "ref": "2d21ed34-490b-4da4-a234-368a4a97d1d3",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f61c1d1d-eed9-4687-8a89-4bd77758f486"
        },
        "item": {
          "id": "27184c0f-dd48-4f0a-afbe-7764c17da094",
          "name": "did_json"
        },
        "response": {
          "id": "0f6d5e0c-d190-411d-8369-1d1d3467d8a0",
          "status": "OK",
          "code": 200,
          "responseTime": 614,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a35cc99a-3975-472f-a3e0-f5036e5f6295",
        "cursor": {
          "ref": "3f97c898-4d62-4c9b-98d9-17eeafb1bd08",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "487b3b6e-0936-4743-91c1-1353c29645ce"
        },
        "item": {
          "id": "a35cc99a-3975-472f-a3e0-f5036e5f6295",
          "name": "did:invalid"
        },
        "response": {
          "id": "bccc5b39-becd-413f-b573-06e348eb0176",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1823,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a35cc99a-3975-472f-a3e0-f5036e5f6295",
        "cursor": {
          "ref": "3f97c898-4d62-4c9b-98d9-17eeafb1bd08",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "487b3b6e-0936-4743-91c1-1353c29645ce"
        },
        "item": {
          "id": "a35cc99a-3975-472f-a3e0-f5036e5f6295",
          "name": "did:invalid"
        },
        "response": {
          "id": "bccc5b39-becd-413f-b573-06e348eb0176",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1823,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "cf82a8a7-6042-4d89-b249-7b776a4e69f2",
        "cursor": {
          "ref": "f6f41135-16b0-4d2b-93dc-8efa09f7394b",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "92de2583-74e7-4e1e-864a-415fa46162c1"
        },
        "item": {
          "id": "cf82a8a7-6042-4d89-b249-7b776a4e69f2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "10b253fe-a569-43e3-8d91-4bceabeb721a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 62,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "881ca59f-0093-4051-8fce-196aae2c2099",
        "cursor": {
          "ref": "5755a397-539c-45ac-92b3-def092f8a143",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b5e04290-211b-4007-83b3-ee09c6f74e5f"
        },
        "item": {
          "id": "881ca59f-0093-4051-8fce-196aae2c2099",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "09849378-6d43-46be-9ec8-1ac22dc3a274",
          "status": "Not Found",
          "code": 404,
          "responseTime": 62,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b3275c-4899-4953-9ebe-7072fc6a1164",
        "cursor": {
          "ref": "454a9e82-ca76-4c7d-9038-a4f183bf84da",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "088161a2-a29d-48f7-a66c-ff9436a711bb"
        },
        "item": {
          "id": "66b3275c-4899-4953-9ebe-7072fc6a1164",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b0bfa73f-0733-4c06-879b-e314e82b6fa8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "0044e437-7c27-4b07-989e-8813bdcd38a5",
        "cursor": {
          "ref": "55ee08ba-9a1c-40d9-a6fe-1c8a93e492a5",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cebc888a-6a1e-492f-a9e3-435bf82552d9"
        },
        "item": {
          "id": "0044e437-7c27-4b07-989e-8813bdcd38a5",
          "name": "identifiers"
        },
        "response": {
          "id": "18f6b1bc-df45-4894-ae4b-9d81d16c6f07",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "270effc3-4f4b-4010-90db-df3cfcfd7c20",
        "cursor": {
          "ref": "11147873-238d-49ce-86fa-beeaf45376ad",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "06e82d58-f9bc-48ae-8cca-c113b335ba42"
        },
        "item": {
          "id": "270effc3-4f4b-4010-90db-df3cfcfd7c20",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "cb730a47-3f12-47d2-ab5c-e3ab2e2c2b2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 376,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71949590-64a4-449e-a99d-01f34bb063a6",
        "cursor": {
          "ref": "09839cff-d8a7-4194-a28a-8243f4361fee",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4173c877-d495-4b1e-b769-bf13207a71fe"
        },
        "item": {
          "id": "71949590-64a4-449e-a99d-01f34bb063a6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "edbd45dc-362d-4b31-87d0-5df20d044f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9caeaff-2f86-4273-9a4a-1e2d8185926a",
        "cursor": {
          "ref": "2d14520c-940e-423b-9974-120fd87f0ecb",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a7a7cfa4-d3a5-45ba-8be7-560b6fd182b3"
        },
        "item": {
          "id": "f9caeaff-2f86-4273-9a4a-1e2d8185926a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b7f94723-d8f9-4fac-bde3-cd79ef20a2ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cbd3a75-31e4-4114-ae95-9104093e3519",
        "cursor": {
          "ref": "a9b3a52e-ebb4-4e98-ac98-33ca52126d3c",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "204e896b-3813-4675-96e5-66561ff093f4"
        },
        "item": {
          "id": "6cbd3a75-31e4-4114-ae95-9104093e3519",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "8c871517-6a08-44b8-9561-d7af735672f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4d3b8cf-d127-44b3-94ec-cb827beadd6b",
        "cursor": {
          "ref": "c69cf9f2-442e-49c8-b2cc-7abe8f811f31",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "643788ba-bd8a-4b03-ae8a-7be5091398cb"
        },
        "item": {
          "id": "e4d3b8cf-d127-44b3-94ec-cb827beadd6b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6c2a7a18-80fb-4c3d-b52c-e467f73e12fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c177575-2b6e-4e91-87de-d9ec6fe21e6f",
        "cursor": {
          "ref": "d47c4322-98f8-4a47-98f3-97b6bd9f2f12",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d71f1bfa-f406-40dc-95f1-3320b4a91c39"
        },
        "item": {
          "id": "4c177575-2b6e-4e91-87de-d9ec6fe21e6f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "4495f819-bf2b-41eb-b23f-de05b71bcf43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e681ef57-60af-47fe-b98e-0b86140f5717",
        "cursor": {
          "ref": "a0a42149-9987-486e-bf3b-bbec70a022b3",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e6cdcbaa-5ee5-4555-a6ee-bb7606e9ccd1"
        },
        "item": {
          "id": "e681ef57-60af-47fe-b98e-0b86140f5717",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3139358a-34b3-4fda-9d78-9eacad0ad213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d8f2d9d-4092-47cc-b8d9-46517c86c4f3",
        "cursor": {
          "ref": "8f6b3c1c-0adf-4365-874b-335a37030cc9",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "25e6bd6f-dcff-479c-854b-85cb011ff33a"
        },
        "item": {
          "id": "2d8f2d9d-4092-47cc-b8d9-46517c86c4f3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "372ff6e3-3aa0-406a-9ab9-9f621c8576aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f09ae156-5a31-4f6d-8e62-869499bc0f6f",
        "cursor": {
          "ref": "c70c75c3-231e-4820-876b-254e2dda816c",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "853ac523-ad3d-4fbe-902f-8edb43175a34"
        },
        "item": {
          "id": "f09ae156-5a31-4f6d-8e62-869499bc0f6f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "36d96c4b-e8ab-447e-8dfe-3b7b2d590740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb355b46-b253-4893-b43d-1cefc76e7f81",
        "cursor": {
          "ref": "6c6da6c2-4101-4b76-b379-647202af40f8",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e48d0e84-a0e2-4b17-8185-cadd9f1d82c1"
        },
        "item": {
          "id": "bb355b46-b253-4893-b43d-1cefc76e7f81",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1ab71487-feb1-4aa3-aa72-3f309c47a6a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c8eb02b-5138-4411-8d3b-64ede896cd5a",
        "cursor": {
          "ref": "25226442-838e-4401-ac4b-3f94e7aa2b0f",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e1458e56-37de-41ab-9193-79f60d188878"
        },
        "item": {
          "id": "1c8eb02b-5138-4411-8d3b-64ede896cd5a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "60a770b8-c36f-4f27-9e40-145ddb23f238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f702cfee-6f13-48c4-a66c-ed729be16b97",
        "cursor": {
          "ref": "dbdd159d-4805-4030-b7e0-e8a148c9bced",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7daf4727-9a95-49b6-bfa8-b7399c1b7070"
        },
        "item": {
          "id": "f702cfee-6f13-48c4-a66c-ed729be16b97",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c51f02f7-fb70-448d-86f7-f60221e18015",
          "status": "Created",
          "code": 201,
          "responseTime": 825,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "6314ca96-18e7-4fa7-b736-23329d1f25e2",
        "cursor": {
          "ref": "e0cea1e2-6491-420f-bd4a-b25973483933",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "778372d5-599a-4ab3-a633-f51fcc28e175"
        },
        "item": {
          "id": "6314ca96-18e7-4fa7-b736-23329d1f25e2",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f70e49f0-3c75-4dff-a5d0-5113d1029016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0abedc6e-dd9c-4d3d-bb19-8d6d8bbc81e1",
        "cursor": {
          "ref": "4fc2e168-2cb2-4a9e-8dd7-6a17ee2f5797",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e6690af8-041b-4122-a3d0-ae2a06f077d5"
        },
        "item": {
          "id": "0abedc6e-dd9c-4d3d-bb19-8d6d8bbc81e1",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0297b6d6-a3c1-4687-8eef-07c3b55158ca",
          "status": "Created",
          "code": 201,
          "responseTime": 6415,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "8612e7e2-67b3-46c1-abc0-2986bb9eb92a",
        "cursor": {
          "ref": "7f4b1d68-1e7d-4c61-bfc4-12efd6e4c480",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1a474633-b9aa-4016-a47f-90929ceed272"
        },
        "item": {
          "id": "8612e7e2-67b3-46c1-abc0-2986bb9eb92a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "aee76f29-497f-493b-8cd9-ba4084b31408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1ae29b-b6d0-4caf-a7a6-2364c8fb4b60",
        "cursor": {
          "ref": "ef1de0f4-48da-441d-8bba-f1e0ac3c7959",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "17c6e81c-f9ea-4134-b5f5-7cdf3bfbcf63"
        },
        "item": {
          "id": "7c1ae29b-b6d0-4caf-a7a6-2364c8fb4b60",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "59491edd-54c5-4810-bf3b-656c311bb4d4",
          "status": "Created",
          "code": 201,
          "responseTime": 3978,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "d4ac9dd4-96b0-496d-aef3-81c310b4752a",
        "cursor": {
          "ref": "5008133f-e012-4e81-9fa5-26e6eb687a3b",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b89a67e1-e5ce-4ad2-982b-ca5350f14c21"
        },
        "item": {
          "id": "d4ac9dd4-96b0-496d-aef3-81c310b4752a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "52fc2e09-a1d3-43b4-8b2e-3a21ea939c5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3375ae07-2598-4ee6-bc39-2782ba7db472",
        "cursor": {
          "ref": "5de99476-0c33-4678-abb1-98bcb7ea1b08",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "92323b59-7543-44dc-9e0c-231c1c158c1a"
        },
        "item": {
          "id": "3375ae07-2598-4ee6-bc39-2782ba7db472",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "63132a1e-f2e2-4bc9-afc0-a689a9d7e9dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa2522c-c377-49c5-8cb5-29950b2d1d44",
        "cursor": {
          "ref": "c4bf5a53-d138-4a8b-ab0e-1f08ea325f60",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0c4e75df-1778-4f2e-9aa7-30ddcb6d7f12"
        },
        "item": {
          "id": "cfa2522c-c377-49c5-8cb5-29950b2d1d44",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c2594184-fe6d-4abb-857f-3b8e72a55817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89cca3b-9b60-4dcf-9d79-478565e7c134",
        "cursor": {
          "ref": "ff9bc56a-b7bf-4474-88e7-a20d9c41aae5",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0a0149e1-3620-4f51-a6d5-6b1235430456"
        },
        "item": {
          "id": "a89cca3b-9b60-4dcf-9d79-478565e7c134",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e5417c06-dd09-4475-bd8c-b6cd1b94c7cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "393eff8d-009b-40a2-94a9-3aeae4785a14",
        "cursor": {
          "ref": "310acd3a-613f-4c77-a65c-8113a49a8ddb",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5a1e9d74-3a5c-4afa-838b-05c7af7b9c0d"
        },
        "item": {
          "id": "393eff8d-009b-40a2-94a9-3aeae4785a14",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "59b2c4df-dac3-49cd-bc63-c8aea3455da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6455cc55-57fc-4292-bc83-bfc567bc446f",
        "cursor": {
          "ref": "61d151b2-0ad9-4a87-8174-93fa7247077c",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f5c77092-f6bc-4db7-8672-f9986284de8b"
        },
        "item": {
          "id": "6455cc55-57fc-4292-bc83-bfc567bc446f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e4a39105-523e-421f-be3d-131936c99575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c069dd5-aa0c-444b-9d84-b4b46fd3cb74",
        "cursor": {
          "ref": "85ac73f3-c4f4-46b6-987c-bf87af91b39d",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8053d13d-8c9a-4c96-b65c-702531615ab0"
        },
        "item": {
          "id": "7c069dd5-aa0c-444b-9d84-b4b46fd3cb74",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "edd6603c-50ae-478c-86b1-de16ccead5c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff1b5ad2-7083-4ef3-9a50-87083b0a1fef",
        "cursor": {
          "ref": "6e6ccb41-854d-41cd-b74c-ad15c0258f38",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9554fa12-884b-4aac-be45-6506addd9034"
        },
        "item": {
          "id": "ff1b5ad2-7083-4ef3-9a50-87083b0a1fef",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "49d6befe-b0ca-41af-afe4-b84b26474fd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37fba340-b6d1-41d5-b4e4-f131b215b8e7",
        "cursor": {
          "ref": "e6e882c5-1180-44fb-9e02-e09b0427c894",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0ea99039-1c5a-4552-9392-58c394837fd6"
        },
        "item": {
          "id": "37fba340-b6d1-41d5-b4e4-f131b215b8e7",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1ff44aa9-2bbc-44e2-8cec-01950de5bcab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab8c3bc2-6042-43dd-af72-a00350d3a0e2",
        "cursor": {
          "ref": "c73d5005-fa97-463d-b099-d1384069c692",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f7251e40-5c0c-485c-bc24-a273a350d221"
        },
        "item": {
          "id": "ab8c3bc2-6042-43dd-af72-a00350d3a0e2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0cdfe0d7-b66c-4f09-b6f6-a5d608f12c9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6779729-90c7-4b3b-8bf9-d9cfff1eae25",
        "cursor": {
          "ref": "8ca8eeaa-534d-4976-9fdd-a9cd0072d2f9",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "962a2e47-264d-447d-a48c-dd031e0ca4fc"
        },
        "item": {
          "id": "b6779729-90c7-4b3b-8bf9-d9cfff1eae25",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "2dea0955-ce8b-4bca-a78f-7787c536bff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a45e806-5ab6-44e8-ae01-9e7f237cef0a",
        "cursor": {
          "ref": "645ddea0-a5ca-4143-a5e3-b7a8ac93e5d0",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "6ac8cf15-1031-44b8-be3a-8a1712f4fa87"
        },
        "item": {
          "id": "0a45e806-5ab6-44e8-ae01-9e7f237cef0a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "138e2982-5451-4193-a89b-18ab00cd393b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1897f3-3737-40cd-b206-377ce43bf732",
        "cursor": {
          "ref": "8feeda69-fb62-437c-971f-9aab2e439227",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c63f2099-e817-4790-96d5-7f5aa2e988f7"
        },
        "item": {
          "id": "9b1897f3-3737-40cd-b206-377ce43bf732",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "1f9a538e-aca8-4b8f-9ef2-01f529886532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb4e81bd-8299-450e-a8b9-3b35b2eb29f4",
        "cursor": {
          "ref": "500ff558-5c9d-4722-a767-688809658573",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ae1452e0-e59d-4d1d-804a-8b90b684d364"
        },
        "item": {
          "id": "bb4e81bd-8299-450e-a8b9-3b35b2eb29f4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "aa19ccdd-1dc1-462f-8cfd-25fb3bf43348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44290b47-4cfa-4780-a4ea-ae020ff9522e",
        "cursor": {
          "ref": "fe0f6231-a166-4608-b274-22001ecd89a5",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "72ce0061-0c80-465e-a7b4-12548213a02f"
        },
        "item": {
          "id": "44290b47-4cfa-4780-a4ea-ae020ff9522e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "60060bea-a8b5-4c39-8503-3c6bf7f2bc4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9307dc06-01d7-4355-b29e-4615a6f4d43e",
        "cursor": {
          "ref": "7307cbac-511e-4216-aa98-eda9bf31e02b",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "81fb6ae6-3396-48e5-bfdf-900d3ae6c476"
        },
        "item": {
          "id": "9307dc06-01d7-4355-b29e-4615a6f4d43e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7922c00d-0bea-4fca-b33a-e490399b4bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dddd78c-3c3f-4596-b97c-795a50e61f38",
        "cursor": {
          "ref": "d3217e6c-4616-452e-8776-b029236eb0af",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3f6e8cae-c02c-49bb-a8a1-845b71ea5aab"
        },
        "item": {
          "id": "9dddd78c-3c3f-4596-b97c-795a50e61f38",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "27b0c014-323a-4d87-8d25-1a38c72a60e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "678a2b8e-aeb0-42ed-aed4-35b8b3411e34",
        "cursor": {
          "ref": "3559c7d5-c936-4f30-b6df-fdabc50222d7",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3d30eb3d-b6e7-46ab-9039-94bb474d8df1"
        },
        "item": {
          "id": "678a2b8e-aeb0-42ed-aed4-35b8b3411e34",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "202bcc54-b198-46c3-b826-92a7994db0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12fa9087-6b45-4a37-aba3-41ca4826624d",
        "cursor": {
          "ref": "880cf513-bb48-45b5-92b1-96299f254ee2",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9b9f0577-f846-40ac-84cf-3cf2bbae43fa"
        },
        "item": {
          "id": "12fa9087-6b45-4a37-aba3-41ca4826624d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "dd172974-25b6-401e-ae8b-d8f3f326658f",
          "status": "Created",
          "code": 201,
          "responseTime": 3330,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "8822d8f9-f39a-4906-9155-eae65650568e",
        "cursor": {
          "ref": "cb58e1ad-4ec3-400b-bda2-a6afd913d067",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "193497c8-063a-436c-9b25-23550b6f5e36"
        },
        "item": {
          "id": "8822d8f9-f39a-4906-9155-eae65650568e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f0a75158-10a9-4a17-a653-9d23929b1f70",
          "status": "Created",
          "code": 201,
          "responseTime": 4701,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "cb179ea5-e9c9-4fc7-a2d7-7d4a21a1a739",
        "cursor": {
          "ref": "bc83b69a-5ad4-4858-a16a-3901390ff186",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "686ec614-f24f-4af7-b0f7-8c668aa16f62"
        },
        "item": {
          "id": "cb179ea5-e9c9-4fc7-a2d7-7d4a21a1a739",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "73e3d49a-b87f-4d1e-af38-e5cde74ddb08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4810427e-0f1b-40ee-a30e-cddc93087320",
        "cursor": {
          "ref": "8b147bfd-650c-4a78-9ad1-70329952e186",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "12db528d-d72c-4ba2-9ad7-56fa7dbe3e4c"
        },
        "item": {
          "id": "4810427e-0f1b-40ee-a30e-cddc93087320",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8c47cd7d-386f-456f-b707-070c7bad77bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad64f71a-1791-4dd9-8ce5-cb511a088311",
        "cursor": {
          "ref": "a217a591-5711-4da4-8b77-a8106cff4865",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "64ab353b-909d-4578-92e2-6c0c6cb14a03"
        },
        "item": {
          "id": "ad64f71a-1791-4dd9-8ce5-cb511a088311",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "44265b1d-fa07-42c3-8f18-093012140309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a3b2676-4b0f-4ceb-b9cb-9dc27ae777c7",
        "cursor": {
          "ref": "d242b2fd-0fe7-4b97-89d5-128c49f06caa",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "21ed5d2e-db5b-4064-ac57-9b624472acca"
        },
        "item": {
          "id": "9a3b2676-4b0f-4ceb-b9cb-9dc27ae777c7",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "62ffac80-2107-400c-9bbc-555683679147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f0e6c1-8103-44cb-a54d-ad606e26933c",
        "cursor": {
          "ref": "209f8b82-c7a9-43ef-8865-5fd5e9d71584",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ca30791a-283d-4f70-a714-6dcff96540c5"
        },
        "item": {
          "id": "37f0e6c1-8103-44cb-a54d-ad606e26933c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9b17ad43-859d-4794-96f3-4bd978ef313f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9350abd-06d5-4445-a6be-f6a6d8d83ba0",
        "cursor": {
          "ref": "0daaafa8-9d96-43f5-8406-438f6120c15b",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1a70a538-9039-4ea8-8c55-46409b2457a3"
        },
        "item": {
          "id": "a9350abd-06d5-4445-a6be-f6a6d8d83ba0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e574d4b0-7c3e-41a5-b07d-faebe02011b3",
          "status": "Created",
          "code": 201,
          "responseTime": 2897,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "2dfed876-7502-48ff-a557-4e78a45e34dc",
        "cursor": {
          "ref": "df56cac8-c981-4002-b6f2-a30656772792",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9f2a68e1-8cf7-43c3-b4b5-9e90b0eee30e"
        },
        "item": {
          "id": "2dfed876-7502-48ff-a557-4e78a45e34dc",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7ebc5b86-e7f8-4d9a-a938-e6b6fc4d15a5",
          "status": "Created",
          "code": 201,
          "responseTime": 2520,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "0e8e75aa-964d-4282-b314-7b97b426ab88",
        "cursor": {
          "ref": "15da0c50-262d-4ab8-b70e-0e3af365719c",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e90e9b66-94a7-47af-87f0-2d056c8a8e9e"
        },
        "item": {
          "id": "0e8e75aa-964d-4282-b314-7b97b426ab88",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d5ac209c-280e-47a7-9911-f0f866186b8e",
          "status": "Created",
          "code": 201,
          "responseTime": 2729,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "70bb575a-0324-4071-8228-e1c59aaf6d02",
        "cursor": {
          "ref": "cae2ac98-2c0a-4df5-a6a1-84f8a37356fb",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "193dc248-caf7-466a-83b4-c55c040d2ca9"
        },
        "item": {
          "id": "70bb575a-0324-4071-8228-e1c59aaf6d02",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "bd8e529c-927b-4722-a448-466ea667390f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c46d104-28ac-477c-94ae-794648fbc5f7",
        "cursor": {
          "ref": "1ef1b244-87e7-420d-b819-1b63123272bc",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5fd6a7a9-3e91-4d2c-8f53-90bb2245d65c"
        },
        "item": {
          "id": "0c46d104-28ac-477c-94ae-794648fbc5f7",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "95067675-6df1-407c-9310-450e9111ec32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd043d6-18ee-4abe-b766-7fafacd86852",
        "cursor": {
          "ref": "9324e6e4-081a-486c-a7b1-dea554191387",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ce117737-1dc2-47d1-b1c5-cac3dad48077"
        },
        "item": {
          "id": "2cd043d6-18ee-4abe-b766-7fafacd86852",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "6ac2da11-e954-4fbb-ac5c-a0f488a4a797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c62a4595-b8d6-4cae-baf1-83b482473078",
        "cursor": {
          "ref": "36051038-ddcc-4951-9d98-a96f0aefb518",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8815944e-fb64-48df-a42f-4b4c005f2991"
        },
        "item": {
          "id": "c62a4595-b8d6-4cae-baf1-83b482473078",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f2c0ea71-93b5-416e-a05f-7976bcfea97c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ca917b-de5b-4f22-97ad-7517b126ea7e",
        "cursor": {
          "ref": "618c0d64-f9e5-4af3-8934-6f4a256b1092",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e00b47be-7064-41b1-80dd-e124a82655f8"
        },
        "item": {
          "id": "e5ca917b-de5b-4f22-97ad-7517b126ea7e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ea79ff94-777c-4725-892f-b14336646301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12596ced-f300-40b0-b2c1-35ff4a544d59",
        "cursor": {
          "ref": "d8d4f359-a0fd-4733-8736-1598f5dc6b84",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c6d9f19d-8fea-4589-8285-81d61d25c9a3"
        },
        "item": {
          "id": "12596ced-f300-40b0-b2c1-35ff4a544d59",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5a18fc94-c7bd-41f1-8cff-b93a2faba2db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ce30c5-c6ac-49ed-9a95-8c9320fe2808",
        "cursor": {
          "ref": "72ade897-20e8-4512-bc9b-a85717c2da98",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4fffd8f2-ed81-4a24-a531-c7efd9f75fdc"
        },
        "item": {
          "id": "a3ce30c5-c6ac-49ed-9a95-8c9320fe2808",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a1934f64-3252-486a-a4e2-fdedd42633cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1817b7d-f937-40ff-b673-43e0558f0c38",
        "cursor": {
          "ref": "ad8597cb-abf2-408b-ab0d-cadd5a2dc4e5",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "8b3848c2-197f-407f-abaf-7297f8592b61"
        },
        "item": {
          "id": "e1817b7d-f937-40ff-b673-43e0558f0c38",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3800c573-d723-45b8-96a9-0bb4b323ae54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0e92f9-3864-4a0c-8ff3-da67a5cb1325",
        "cursor": {
          "ref": "3f240d16-58af-4e2f-b0e9-046355003f2e",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7d2a2b6f-d83f-45c0-8211-df72d029327a"
        },
        "item": {
          "id": "6c0e92f9-3864-4a0c-8ff3-da67a5cb1325",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8b7ec289-2d7b-43ae-9018-3b51aa34c4a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e3a8bf-8afc-4d89-8d50-bf9f6059f042",
        "cursor": {
          "ref": "018288d5-6e9b-420b-835b-f1b855fa638f",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7923c515-b17d-4aea-b0c4-4bf6ab6aba6f"
        },
        "item": {
          "id": "13e3a8bf-8afc-4d89-8d50-bf9f6059f042",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "e501660b-d6a9-480e-b525-ed3eb1283df4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a5ed2b8-3128-48ae-a94b-9ba230c90cfd",
        "cursor": {
          "ref": "08f3945b-4d00-41f6-9cef-cd14d51a5c5d",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "53cd5b09-a89c-4df5-8efb-170af6e38d53"
        },
        "item": {
          "id": "4a5ed2b8-3128-48ae-a94b-9ba230c90cfd",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "7204f6ee-35ed-4105-9d89-17a780ddbda9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7e1437b-037e-4ab8-baaf-1019ebbfbcf7",
        "cursor": {
          "ref": "435e28e0-ba8b-4457-a4db-88fe15a453fc",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "97ab92ad-6de1-4762-9e59-c74d134d11c4"
        },
        "item": {
          "id": "e7e1437b-037e-4ab8-baaf-1019ebbfbcf7",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ece3c227-2497-4465-a8a2-47651f2a51b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef10c0d-a866-4835-bd12-c721b3738ea9",
        "cursor": {
          "ref": "0eb8d8b7-428e-4eba-860a-73c5109b4d5e",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5c4170ad-d1f2-4814-9166-cd617fc1fe2a"
        },
        "item": {
          "id": "8ef10c0d-a866-4835-bd12-c721b3738ea9",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "6e1de31a-299b-4147-bb50-9e03abb90b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1747d9a4-b919-461e-95e1-7d1424411912",
        "cursor": {
          "ref": "a0d853a0-d7d6-4d5a-87f1-ca7df17dcbf7",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6e253610-6663-4cf4-a35f-c752ff2468d1"
        },
        "item": {
          "id": "1747d9a4-b919-461e-95e1-7d1424411912",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "377e5169-e137-4fc6-9406-b7e70aa4c1b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a83293ab-722d-48e9-8167-4fa0f4056978",
        "cursor": {
          "ref": "fd2035b3-2a89-48a7-9e7a-f49cbbcbff10",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "684d2dcc-d245-42d9-aa08-820f730d3450"
        },
        "item": {
          "id": "a83293ab-722d-48e9-8167-4fa0f4056978",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "75c8403b-a3de-4c95-9e2e-8edd6438bb12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a62b80db-5d4e-4ee7-a053-27b66482e786",
        "cursor": {
          "ref": "c51ece15-fa7f-4346-b94a-30967c548ab9",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "aaaa8dcf-e258-44b0-ac5b-144f2f38bc64"
        },
        "item": {
          "id": "a62b80db-5d4e-4ee7-a053-27b66482e786",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "55bac69e-e051-4d47-bc56-3dd7b4c15d2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38907f2c-9719-44e9-9c22-81a171123a77",
        "cursor": {
          "ref": "1957326a-4a15-403f-a372-6b0027825f1d",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "0ca94514-ce4f-49bf-858d-08d5dde6c327"
        },
        "item": {
          "id": "38907f2c-9719-44e9-9c22-81a171123a77",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d7573d44-444a-41c8-a1ce-473c49c834c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b860e00e-1841-4728-9ef9-9f5b8134e0fb",
        "cursor": {
          "ref": "ca920f67-ce33-420c-80d8-4d67e69e1d79",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b0d9e903-7680-4c14-94aa-557e034fc100"
        },
        "item": {
          "id": "b860e00e-1841-4728-9ef9-9f5b8134e0fb",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "dc038c60-6024-47ae-a87e-3800fcfce19b",
          "status": "Created",
          "code": 201,
          "responseTime": 2747,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "45b949a9-99d5-4186-8310-5017c7ad9de0",
        "cursor": {
          "ref": "e6d01833-725a-4e98-89bf-886ab737aa33",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "922b5b42-9f92-4290-81a3-a412ad553ce0"
        },
        "item": {
          "id": "45b949a9-99d5-4186-8310-5017c7ad9de0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c71a1a57-f07d-4b45-b3d9-2bc0bcad6a26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b75ab42-0e20-41e3-90f6-19c66c7d7d88",
        "cursor": {
          "ref": "7daf7250-ea7d-4227-8417-31d864874494",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c6758ce6-d9da-4130-890c-e854858d1a5b"
        },
        "item": {
          "id": "1b75ab42-0e20-41e3-90f6-19c66c7d7d88",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c4e89e37-ebfb-4ca2-9ab9-58df841cfddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91055d72-198b-4748-9e41-5c270ca7f392",
        "cursor": {
          "ref": "65a700e1-cbd8-4a59-ac4a-2b0087f5a6db",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1589601a-18a1-485c-b6c9-5d2c38e88564"
        },
        "item": {
          "id": "91055d72-198b-4748-9e41-5c270ca7f392",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1a25b47c-6b2c-4a83-9f23-81176c46f611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70fb8a56-0590-48a8-808e-5eca5305f05d",
        "cursor": {
          "ref": "b430689f-00c1-4784-8abe-177bed1c8718",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "4bca2074-c64b-433a-90c3-a3230941b417"
        },
        "item": {
          "id": "70fb8a56-0590-48a8-808e-5eca5305f05d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4cb3f147-55e6-4298-bd71-d75a5e822fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac7294a-5b6f-4f08-a008-546752f9ceb0",
        "cursor": {
          "ref": "8ebbaf18-882d-44b9-9fb7-dd694fb6b3b5",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "44e9daec-f3fe-4275-b52b-21bc698946b9"
        },
        "item": {
          "id": "dac7294a-5b6f-4f08-a008-546752f9ceb0",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ce67209a-a818-4ef0-b294-23116c6b71d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01078897-9aa0-4b42-a016-c3b7bbeddebf",
        "cursor": {
          "ref": "83427000-9477-41ab-a616-551f6393005b",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "81e338af-f0a1-4075-93cc-b97b4b33992c"
        },
        "item": {
          "id": "01078897-9aa0-4b42-a016-c3b7bbeddebf",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "024d8038-5102-4a48-a520-b6c853ce528f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f41b5a-f80a-4b24-a42e-28ce0e1cb99a",
        "cursor": {
          "ref": "80c86118-6f8b-4e48-9ada-280402f6a9fd",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "216aa8a2-3dc8-40aa-a5db-263f998cc5a7"
        },
        "item": {
          "id": "b7f41b5a-f80a-4b24-a42e-28ce0e1cb99a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7d4b095c-a94f-412d-8280-c4332af3fed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb94cfe-b1e7-4ab6-8d28-4d16aea5f508",
        "cursor": {
          "ref": "ede02a4d-0d59-4b03-a344-6ae78d872a15",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5189b263-35cc-4d17-8fdf-ba53a5297d77"
        },
        "item": {
          "id": "5eb94cfe-b1e7-4ab6-8d28-4d16aea5f508",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "20f98951-0bd5-4803-9738-9fef3119aa3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b8dd9fc-d551-4fdd-962a-689f4953d2ef",
        "cursor": {
          "ref": "d6521e08-2e8a-4b29-a7d4-f553699cfa3f",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "33dff883-eaab-4e52-8d09-82c346bec061"
        },
        "item": {
          "id": "5b8dd9fc-d551-4fdd-962a-689f4953d2ef",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7989e7a6-5930-4456-b314-395bfab81f05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a468bd76-6c1c-4f9e-b2e3-a2a22b3ac0e0",
        "cursor": {
          "ref": "fb5bc63d-e745-4dbf-af7e-30d7965d8fba",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f56073a0-e048-4c3d-ae46-f811b00811cf"
        },
        "item": {
          "id": "a468bd76-6c1c-4f9e-b2e3-a2a22b3ac0e0",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "43ca2402-3cfd-41bb-9712-3aadc79209a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7fc8c7f-e091-44b8-b4c6-504ce5090869",
        "cursor": {
          "ref": "fb41ae2e-2ccf-498e-a8bd-c0a8bd20391d",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f0dad8af-84b2-4bed-bec9-217aaa938589"
        },
        "item": {
          "id": "f7fc8c7f-e091-44b8-b4c6-504ce5090869",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c5a9f940-a094-4d45-ba83-7e962962da30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9e1a9cf-7c04-4d93-9270-ea27f5408ddb",
        "cursor": {
          "ref": "4121fc4c-e5d1-4f7b-b4f5-65709c151f41",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1afcfb7c-f30e-4d6d-9d7a-f61a842636d2"
        },
        "item": {
          "id": "b9e1a9cf-7c04-4d93-9270-ea27f5408ddb",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3426ac21-ba31-4974-9f45-919228a3dd9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2472a9-fbf2-4bc6-ba0c-37d00f4e3242",
        "cursor": {
          "ref": "149dfdf8-d4f1-410f-aec6-01a757e33854",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "cccc7579-8698-4fcc-bdd8-381462611de2"
        },
        "item": {
          "id": "9f2472a9-fbf2-4bc6-ba0c-37d00f4e3242",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "24094ad2-fc6c-4eb3-ae9c-39ea9e6b888a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0579925e-a67a-4448-bbf4-c8c67271760b",
        "cursor": {
          "ref": "87abf801-b75b-4efe-b883-1c2262eb0497",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "7aec1282-c0f0-414f-a745-fda92a975e01"
        },
        "item": {
          "id": "0579925e-a67a-4448-bbf4-c8c67271760b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "3d41fd09-190f-4bad-9817-684efc30d056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f325f8c-9c3a-4d94-9735-469175da5b00",
        "cursor": {
          "ref": "8ef4632c-8d6f-4fd8-81bc-6ca1e275010a",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c725b586-2234-41e3-8d9c-a7eeea648023"
        },
        "item": {
          "id": "0f325f8c-9c3a-4d94-9735-469175da5b00",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "904d64ae-86cd-48bf-adae-12d9c9f6d7e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4364c2ff-ecdb-40b1-af01-6397a5a1ecbb",
        "cursor": {
          "ref": "de16e828-327a-4799-862a-e2da51a846ab",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2a855665-5ece-458b-af0c-d153c8ec0ab7"
        },
        "item": {
          "id": "4364c2ff-ecdb-40b1-af01-6397a5a1ecbb",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "fafd2423-4165-4d95-9972-42f12e1a6766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "734b7c25-118f-440e-beab-207ea419f02b",
        "cursor": {
          "ref": "90f4c96d-ad56-403f-b152-417c4c1de332",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "2cad2039-a014-4958-897d-ce78b12556c6"
        },
        "item": {
          "id": "734b7c25-118f-440e-beab-207ea419f02b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "7c3844e4-157b-4ea2-81c7-fcf25d1a94a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3c992b-55b8-4cac-9943-645f3f5a1cc0",
        "cursor": {
          "ref": "0fefb3fb-bb42-4c31-b4ee-0692ef660d44",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8337daf3-e31d-497e-9423-df900f455cb8"
        },
        "item": {
          "id": "ba3c992b-55b8-4cac-9943-645f3f5a1cc0",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "a7f41146-1484-4b5f-a3fd-f14961c2a39e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b618bc4e-d9a5-4742-b9a2-c76516f20a61",
        "cursor": {
          "ref": "1ec660bc-4c0b-41a8-8088-c9b97d5923b2",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "09386dbe-ea47-47e4-885e-7449c0eb9027"
        },
        "item": {
          "id": "b618bc4e-d9a5-4742-b9a2-c76516f20a61",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6b7b517b-db07-4582-a306-74c892671d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e95924-55a3-457f-b729-ef2bca693666",
        "cursor": {
          "ref": "e4059783-c414-47f5-97fa-9f0fbc095210",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "08c00227-29ed-4d92-a003-623dda39ded0"
        },
        "item": {
          "id": "71e95924-55a3-457f-b729-ef2bca693666",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1f551196-c8a1-4780-a132-e23899c27003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b528a9f8-b30e-4571-9379-cbcd5cfe75a4",
        "cursor": {
          "ref": "2b6b3f4f-f667-40f7-8fa9-2b1da9a4bcdc",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b208976c-50d6-46d7-9261-c22de211683e"
        },
        "item": {
          "id": "b528a9f8-b30e-4571-9379-cbcd5cfe75a4",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "13dfafa8-c1d3-4e98-afb4-62340ee5572b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "769b0de5-10c2-429a-8659-35082f79b77a",
        "cursor": {
          "ref": "d3dc4f9d-d376-4dad-b8df-6bcda242d819",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "59f682f8-c288-4f88-ab63-3c2fd9467d2b"
        },
        "item": {
          "id": "769b0de5-10c2-429a-8659-35082f79b77a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "069a23d6-6535-4c84-b286-d550d3df4b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35731a8-1a2a-45b9-b4bb-24f4ec3ae2c7",
        "cursor": {
          "ref": "81738802-0104-4790-bbdb-65addec1b451",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "2a7c2c0f-dce5-48d2-a808-ce5881854a22"
        },
        "item": {
          "id": "d35731a8-1a2a-45b9-b4bb-24f4ec3ae2c7",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3d5e0929-214c-430a-9cec-35dd85c79a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6943dd6-1a9a-484f-a3e0-f28b36a36f38",
        "cursor": {
          "ref": "0b350b8b-3347-421c-b304-3325c77f2714",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "25974970-4b57-4fc9-a9f6-0c7b922ee90f"
        },
        "item": {
          "id": "c6943dd6-1a9a-484f-a3e0-f28b36a36f38",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "eef50571-5cd2-4a61-8bc4-eaa43e241d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d080ce75-9db3-468c-a3fe-b5d80a219d43",
        "cursor": {
          "ref": "189b7104-3db8-4355-af35-9f2196d06605",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "eae5eddd-e729-4e84-a1d6-1f8270913ddc"
        },
        "item": {
          "id": "d080ce75-9db3-468c-a3fe-b5d80a219d43",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1094a6da-3634-45fb-bf60-fa7280f4658c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cbc06aa-60ff-436b-afa6-c6c964d0075d",
        "cursor": {
          "ref": "5aa7c7c8-eb18-4073-b9bd-7a6e61ef6271",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "522f4def-9679-434a-ae40-db1a8a3f7c5d"
        },
        "item": {
          "id": "7cbc06aa-60ff-436b-afa6-c6c964d0075d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5514cd94-dde8-4fe6-a9e0-ff282ad6b468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a473751d-786c-4e5d-a9ef-6db936a4e83d",
        "cursor": {
          "ref": "c0b95120-8348-4f9b-af97-185e6bc7d5d6",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e082b90c-ea88-40bb-ac23-dd0cf1821448"
        },
        "item": {
          "id": "a473751d-786c-4e5d-a9ef-6db936a4e83d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ba283cc4-9cb5-4861-b490-9138c4b2a1b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0853c5d3-807d-4b49-9fef-a7dac919ca38",
        "cursor": {
          "ref": "805b0230-b9cc-4b0c-8b39-72567d5e5cf7",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ec0a6436-13e4-4380-b3f3-00a83c7a291e"
        },
        "item": {
          "id": "0853c5d3-807d-4b49-9fef-a7dac919ca38",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "13182d65-61f2-4d23-86f1-d34b08cee324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df3e495c-9369-40f0-adf2-c28d0a0564ea",
        "cursor": {
          "ref": "288e2846-e699-42d2-aa94-07be1a76a617",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4a320036-0c0d-47bb-8f03-e8c453308e4d"
        },
        "item": {
          "id": "df3e495c-9369-40f0-adf2-c28d0a0564ea",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "388016cd-7d3d-48e8-b0cf-e4b44f817534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "998e9715-f677-4544-b465-798446dc3172",
        "cursor": {
          "ref": "ee7f86f8-1f72-4ba3-90b3-cc89620519dd",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "215f072b-69fb-4330-8b43-d4794e7f0152"
        },
        "item": {
          "id": "998e9715-f677-4544-b465-798446dc3172",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "052f1737-8462-4b41-8aed-5d85cf21ed40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca108c04-5781-4706-b47e-d1e85cce3171",
        "cursor": {
          "ref": "ac3ad839-bd54-454e-a915-813aff1f8d79",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "16008d1d-ca53-4870-85d3-18f1e52ad61c"
        },
        "item": {
          "id": "ca108c04-5781-4706-b47e-d1e85cce3171",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "32001ea8-ad7f-474c-8963-7b8fe2cab240",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "bd9aaea7-01c9-41cf-bb39-317a3acf4417",
        "cursor": {
          "ref": "57cc8074-9667-4d9a-a170-661feee17619",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c14be8f7-4023-4de2-a90f-69ad875814f0"
        },
        "item": {
          "id": "bd9aaea7-01c9-41cf-bb39-317a3acf4417",
          "name": "credentials_issue"
        },
        "response": {
          "id": "1bd0fad6-6ba2-4f70-b60b-bf0039184961",
          "status": "Created",
          "code": 201,
          "responseTime": 1898,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d19ffd-7670-418d-bd45-6036cc7e975c",
        "cursor": {
          "ref": "593c4bf5-f9d3-4bb2-bea1-6dd9957cdabf",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "61c066f2-322e-49fa-a51a-64203d7ae878"
        },
        "item": {
          "id": "36d19ffd-7670-418d-bd45-6036cc7e975c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "78d4467a-fefb-4cb2-8837-173423319755",
          "status": "Created",
          "code": 201,
          "responseTime": 2621,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "302b8eb9-9aff-4b4e-a1a7-e984136b699a",
        "cursor": {
          "ref": "59ff9164-02cb-4a92-8842-86d4d4178789",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "66aea8f2-ac35-43bd-8891-db62e12d3b67"
        },
        "item": {
          "id": "302b8eb9-9aff-4b4e-a1a7-e984136b699a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2e6cc878-ea97-4c1a-9b37-c0c09f881f7e",
          "status": "Created",
          "code": 201,
          "responseTime": 2641,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70a8c34-fa29-4b4c-9223-604c298a8bd5",
        "cursor": {
          "ref": "46805208-1774-4c15-a009-8eeee35b9184",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "fd9c09fd-e3e6-4ac9-8596-006ef9d8c947"
        },
        "item": {
          "id": "b70a8c34-fa29-4b4c-9223-604c298a8bd5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "eb732f89-e14a-4f54-b59b-906f9085b74e",
          "status": "Created",
          "code": 201,
          "responseTime": 2591,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a6a5fd8-ae56-4210-91e7-8c0b209c67c7",
        "cursor": {
          "ref": "0372f895-7a19-4851-9c4d-d5776ff322a7",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a2ff2881-120b-4755-b1fc-daf65930bb2a"
        },
        "item": {
          "id": "3a6a5fd8-ae56-4210-91e7-8c0b209c67c7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2146f7d4-f9af-4e66-97f8-9fe26fe6ef58",
          "status": "Created",
          "code": 201,
          "responseTime": 2434,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-07T00:45:32Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-07T00:45:32Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "5d9d8d8e-82d4-49be-be50-8f35d01317a6",
        "cursor": {
          "ref": "bdeee07a-591a-4ad8-8b87-1434385ba08a",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5980f3bc-5275-46c2-921b-bb1839a4abf0"
        },
        "item": {
          "id": "5d9d8d8e-82d4-49be-be50-8f35d01317a6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "08512bab-94a1-4e43-a8df-f537d2e5f11a",
          "status": "Created",
          "code": 201,
          "responseTime": 2441,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7618a8e9-005d-4388-a26e-ebbae98e32ba",
        "cursor": {
          "ref": "5dc13333-db4f-43b2-bde3-b79a36b4cec1",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7475a922-dbf5-480c-8375-9e28fcb025e6"
        },
        "item": {
          "id": "7618a8e9-005d-4388-a26e-ebbae98e32ba",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8dafa420-7df6-4aa4-9820-85991d01aefa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c939bfe-2a17-47cc-bf67-f322684de180",
        "cursor": {
          "ref": "7699b38a-7357-490f-ae04-1c948518f777",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b498403b-f0f7-484f-aad3-b359a828f358"
        },
        "item": {
          "id": "8c939bfe-2a17-47cc-bf67-f322684de180",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1449eb10-53d5-4a87-b94f-8b1a36c7f2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b35025-65ae-47c0-8a8b-e6661f91eca3",
        "cursor": {
          "ref": "9745f973-11e6-4f40-879b-d0c5e02f1ba6",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1bd0b882-4434-4417-abe6-a4c9eb8205a0"
        },
        "item": {
          "id": "08b35025-65ae-47c0-8a8b-e6661f91eca3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "51b503ba-9aed-47b4-968f-aaa584338004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f06b6f4-8572-4cb9-86d7-6f06fb87346e",
        "cursor": {
          "ref": "a6f39be5-e5da-4f9a-ad2c-b06f5584763b",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "dd98cb4c-537d-4143-890e-887cbb5f24fb"
        },
        "item": {
          "id": "6f06b6f4-8572-4cb9-86d7-6f06fb87346e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6a515aa6-ffb8-44f0-8fc3-ab4cc1a297a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d0028aa-cc3f-4269-836c-be9ed7368a43",
        "cursor": {
          "ref": "29ddcddb-48b2-4115-a904-ef84e2019b9f",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a9a64d8d-04d4-4d46-916a-67f171d435d5"
        },
        "item": {
          "id": "1d0028aa-cc3f-4269-836c-be9ed7368a43",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5bf21a25-fc90-4104-8797-0ee42bbd68d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac5a56f-ed82-478e-94ef-f07879bee5db",
        "cursor": {
          "ref": "46e8f91b-3d95-4878-b97b-f33bad6e12e0",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ca1f647e-fffc-48fb-9291-2ca97b6f2f01"
        },
        "item": {
          "id": "8ac5a56f-ed82-478e-94ef-f07879bee5db",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "31ab4752-7584-45a6-95b8-2fc133b3898c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f6064a6-9743-4e4a-a4a4-c40d4b11842b",
        "cursor": {
          "ref": "9c4e5fd7-cd4a-42a2-977b-3200b78de523",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1f8ecd4a-810b-4d00-a829-01ef48e43f2e"
        },
        "item": {
          "id": "7f6064a6-9743-4e4a-a4a4-c40d4b11842b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "89011424-bb3c-45a0-a508-14bbdf13cd46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7efe2c00-9951-4ec1-965d-1781dadba313",
        "cursor": {
          "ref": "cb619a41-b462-42e4-85f2-8b79070ed5ab",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "17353574-70a7-4537-a56a-5c0bc45172f7"
        },
        "item": {
          "id": "7efe2c00-9951-4ec1-965d-1781dadba313",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "872f7ac3-c08b-4dfa-b856-068fe5ccaec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e37253ab-3635-4a9b-981c-19bc77518e58",
        "cursor": {
          "ref": "edea3821-873b-48e6-8d5c-6b6c5d5fa601",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ad245ee7-7440-48e6-a5a2-ebe652165b70"
        },
        "item": {
          "id": "e37253ab-3635-4a9b-981c-19bc77518e58",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "60c57945-f9c9-4b08-aa51-b3c119ff4bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf4bacd-aa59-4bac-8859-cda2579bc622",
        "cursor": {
          "ref": "cf1cff2f-8d8f-4df8-b4cd-501dddfebdda",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "16c1d59f-6a6c-4737-ba3d-170cc9ceaf04"
        },
        "item": {
          "id": "abf4bacd-aa59-4bac-8859-cda2579bc622",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c83f082f-4a4b-4e0f-bbe6-268e602e290a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0d0a18-235e-4ff1-8ecd-b141b034b725",
        "cursor": {
          "ref": "545f2424-aeee-4849-a868-441d93c25487",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d0748b9a-7312-4ee0-a79e-cb687a31e7f6"
        },
        "item": {
          "id": "7d0d0a18-235e-4ff1-8ecd-b141b034b725",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "122717a8-a981-49b7-9d83-ec41e260aec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "855cef83-0cd0-446c-a6fd-13c46f18e2c5",
        "cursor": {
          "ref": "f0870657-b3a4-4f32-af5a-9178187f8dbd",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "69fd4c9d-4007-45f2-b91b-9864cfa0716a"
        },
        "item": {
          "id": "855cef83-0cd0-446c-a6fd-13c46f18e2c5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b7db8f4a-7cb8-4e48-86b1-208c58bf9594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a53084ee-4b65-4275-989b-196401284e3b",
        "cursor": {
          "ref": "f9c718ec-2de6-44e0-8960-cd330fb72e0f",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "36416b44-5629-43dd-bb23-f9ebe5f22f82"
        },
        "item": {
          "id": "a53084ee-4b65-4275-989b-196401284e3b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4ad5ae5b-7c99-46ff-8669-a8c2f7550888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "464fe576-2aee-49fb-82f8-dc7fe0dc6db1",
        "cursor": {
          "ref": "7c0fb412-d00e-40b6-a449-fdda68a065a3",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "4bb5cb65-e96b-43ee-a427-236dcaaef083"
        },
        "item": {
          "id": "464fe576-2aee-49fb-82f8-dc7fe0dc6db1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "017eae49-66fa-43aa-b2fa-5718dde91d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6721233-69cd-477e-bdd4-7577cb402147",
        "cursor": {
          "ref": "52f5f2cc-662f-4495-aea3-e2b061a6edab",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5c68341f-ede3-40bf-84a0-d9e53e96aace"
        },
        "item": {
          "id": "a6721233-69cd-477e-bdd4-7577cb402147",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "35cc423e-7874-445b-9539-6aacfde8f5a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e47aa8a-9cc0-402d-b20e-2c0191d868c3",
        "cursor": {
          "ref": "8ea16419-b861-4516-a993-3a7763f2853c",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "dba605ec-dc81-4589-81e3-03678b450c42"
        },
        "item": {
          "id": "2e47aa8a-9cc0-402d-b20e-2c0191d868c3",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "41b7b445-c2a2-4f43-8d6c-fe5b962c44d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52a228e9-6a74-4d28-9e7e-0252d01c8780",
        "cursor": {
          "ref": "0fb87bfc-360c-42fc-86b1-46145d32a987",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7d994a06-fc26-4778-b205-87cd4e9b5869"
        },
        "item": {
          "id": "52a228e9-6a74-4d28-9e7e-0252d01c8780",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5218495f-a0d9-49b4-b702-27bd02afb7f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ebb519a-4738-4cf7-b33e-140b879887ac",
        "cursor": {
          "ref": "ee089c23-b7c0-4b88-bd9f-9089e7dba64f",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e10ea40a-e67e-4942-ba56-037485f466ed"
        },
        "item": {
          "id": "7ebb519a-4738-4cf7-b33e-140b879887ac",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7b9429e7-fd4c-41e0-b4aa-4720c0b02661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5db7593-8029-412b-ac2a-a9ee7ed94fc5",
        "cursor": {
          "ref": "c1352e87-189f-47c7-a19a-715d3dc49a62",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "a7f14c56-0be1-4719-b6b5-10af3956d60c"
        },
        "item": {
          "id": "d5db7593-8029-412b-ac2a-a9ee7ed94fc5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "94066be9-a32e-4fd6-9bbe-583e670e5633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9c944fc-e43a-46d5-8fee-34fb97026b8c",
        "cursor": {
          "ref": "a82fcab3-4502-45e5-9003-2ed42fe4538f",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "93b36bc8-c35c-435e-901c-a07bd0a80696"
        },
        "item": {
          "id": "a9c944fc-e43a-46d5-8fee-34fb97026b8c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e61b7de8-8507-4438-9dd2-94c037d94b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b35bcdbe-4e97-439b-9d44-036d0b5cd3e6",
        "cursor": {
          "ref": "f658cdd6-a11d-408f-a3f9-ef8114c900e1",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "028727f0-d233-4740-87bb-f4ea84358748"
        },
        "item": {
          "id": "b35bcdbe-4e97-439b-9d44-036d0b5cd3e6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "56135e9e-ea77-43f8-8ae2-c5a04d2ff129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe67ccc-377c-4dd2-bd28-8c480547c784",
        "cursor": {
          "ref": "15b58354-ac6e-49a0-a941-c6295edda143",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6e2f1aa6-2cf0-47ef-9448-b14c898529ba"
        },
        "item": {
          "id": "4fe67ccc-377c-4dd2-bd28-8c480547c784",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5a9fa08c-2459-445e-b7cb-9b53029fae01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f9b75c-1de2-4136-ba0b-834bf7b46822",
        "cursor": {
          "ref": "aba19a39-b76b-48a2-8d63-8cd8880284d5",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "109cd42b-d5f4-4847-977e-bed198ab51bc"
        },
        "item": {
          "id": "e7f9b75c-1de2-4136-ba0b-834bf7b46822",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9b24d6f2-bb62-4634-b4ac-c29707783af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad8bd2d-42e7-47c2-bcc0-96664753d85a",
        "cursor": {
          "ref": "0f2c312d-493e-498a-80ab-0599e6f3da89",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "5c916ef1-f231-48d5-bc41-c4396a399c91"
        },
        "item": {
          "id": "8ad8bd2d-42e7-47c2-bcc0-96664753d85a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f040cc76-0101-44f9-b6e7-4ceb256e1dde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e187d225-614c-4fad-8738-8551cecd28e0",
        "cursor": {
          "ref": "e0a0b9ee-e2f1-4ae9-941c-960e1babeaff",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "27b5031c-fbe9-4a97-8678-ee4325897452"
        },
        "item": {
          "id": "e187d225-614c-4fad-8738-8551cecd28e0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7fc3b060-07fc-4cfa-97ff-19e17855c4fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516672db-420c-47f6-96fe-021735f8442c",
        "cursor": {
          "ref": "6acc09ff-67a7-43dd-b0ff-895eb2d8a182",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7ba9058d-c2dc-445c-b1ba-6ecd8ff7bb19"
        },
        "item": {
          "id": "516672db-420c-47f6-96fe-021735f8442c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "de3fd0da-cbeb-4837-b4fa-8af5f6600c29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68bb146d-830a-4d2c-a61c-07a086374096",
        "cursor": {
          "ref": "65c4a466-369e-4f06-b78a-55877728d2c0",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0213e011-4e6f-4d75-a79d-4ba003787b10"
        },
        "item": {
          "id": "68bb146d-830a-4d2c-a61c-07a086374096",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e3ccc348-194c-4207-aab7-e7d5139832e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f060803-e740-435a-8cc5-169c6f1d97da",
        "cursor": {
          "ref": "bbde7520-7a8c-46bb-8454-d559889105d4",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7cbadaf9-9c38-4624-8dc0-1e95c97a1569"
        },
        "item": {
          "id": "3f060803-e740-435a-8cc5-169c6f1d97da",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "65280643-213a-4477-98db-4e5bb511d0b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e31ed19a-b3da-4cf0-a33e-8d059394b204",
        "cursor": {
          "ref": "bcc0ef75-14d0-4f77-a923-68fc1f311028",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "229fad30-777a-4e99-8e67-1dfdf506b00f"
        },
        "item": {
          "id": "e31ed19a-b3da-4cf0-a33e-8d059394b204",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a71abb6c-e866-4ae8-91f4-a0e2fab0c2e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98aec68f-aa03-4e2f-a2ca-b19875f39635",
        "cursor": {
          "ref": "8d5b4a04-d11d-4f6e-8fd7-b10a82dc748d",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9fc7bfdb-7a23-424f-8aaa-b05a22e175ba"
        },
        "item": {
          "id": "98aec68f-aa03-4e2f-a2ca-b19875f39635",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "311a0678-60c3-4504-af73-254592279083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f07da84-a59b-4f2a-bfbe-3152cdb4a34e",
        "cursor": {
          "ref": "b63c98a2-d30b-4215-ab1f-e89769f17b8b",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "bfc45ef2-a740-47e4-8997-0ea9d5171479"
        },
        "item": {
          "id": "6f07da84-a59b-4f2a-bfbe-3152cdb4a34e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "671d6c7d-c918-4c7e-a48f-c675c510b423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75b3cc2f-911c-47c3-9788-39fc7da5dafb",
        "cursor": {
          "ref": "bce138ce-c2ed-48db-b4e2-f5f9707b96cf",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0113f941-8dab-494f-a4ba-e63f1072c45d"
        },
        "item": {
          "id": "75b3cc2f-911c-47c3-9788-39fc7da5dafb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "9f9f63b8-9403-4252-b696-62a52c75e33e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9fa4a3e-7685-4aeb-b20d-92b7e3e9eb44",
        "cursor": {
          "ref": "0ce1590a-111b-4cb5-92e9-0b807be570aa",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "fd3c1d72-666e-44a2-9533-baf0514bf44d"
        },
        "item": {
          "id": "e9fa4a3e-7685-4aeb-b20d-92b7e3e9eb44",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ab6041b8-9301-4052-a1cb-44456e898808",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "31d0fc31-7eac-4c1b-bfc3-6170f46e3969",
        "cursor": {
          "ref": "a694ab2f-404a-43ea-ab07-e40106847005",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a6f032a7-76f2-423e-84a1-1a92a850bac0"
        },
        "item": {
          "id": "31d0fc31-7eac-4c1b-bfc3-6170f46e3969",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "fc0192eb-9f19-4061-bad2-54ba37104fc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4012194c-ad18-45d0-99f8-da6239c8bd71",
        "cursor": {
          "ref": "8dd9caa5-c446-44e9-9ca6-5f0da47a9f60",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "39a39500-ad7b-40b7-85c5-af9c3afe2ce8"
        },
        "item": {
          "id": "4012194c-ad18-45d0-99f8-da6239c8bd71",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f34fc68f-e198-4e6b-909d-9cee25748750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be709aaf-2774-417e-aa37-e446af699d8d",
        "cursor": {
          "ref": "3169734b-c192-45db-a250-1ae8545a3c18",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "8cf1dccf-ee85-4a92-bac2-3096c3e5e072"
        },
        "item": {
          "id": "be709aaf-2774-417e-aa37-e446af699d8d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "0abf7435-e541-474b-b9bc-634dc4ca566d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d4e4b8-fa0c-451e-b8cd-34da3bc3b1b2",
        "cursor": {
          "ref": "589e90f2-3e76-4607-b80b-4e1c8e3d4d90",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "52ac11bf-7cd2-4eed-8965-0a8a2641e863"
        },
        "item": {
          "id": "11d4e4b8-fa0c-451e-b8cd-34da3bc3b1b2",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "49158cda-0dfa-4389-b3d6-eeb683d9f0e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f8f4f52-99dc-408d-b0a8-1733834d6a47",
        "cursor": {
          "ref": "76abce7d-ff23-459d-85c2-07986e61c0b3",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "49bc02db-a5af-482a-be25-dfc77ecab685"
        },
        "item": {
          "id": "4f8f4f52-99dc-408d-b0a8-1733834d6a47",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9d57cc7d-4959-420d-9284-67bae8280ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41d152e-0cad-4544-a007-64caa471f4d3",
        "cursor": {
          "ref": "60f2e5b4-3b92-4599-98e1-a32f6fc14db6",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "48e0be4c-12f4-49ef-9280-29daa8b3a6c2"
        },
        "item": {
          "id": "d41d152e-0cad-4544-a007-64caa471f4d3",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "7149450e-5465-4fc2-b444-5a76f4eb99cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "314bfc06-6c55-4d1c-95c9-617b65e674ec",
        "cursor": {
          "ref": "cb517cde-bcaf-46b6-b36d-14b2515618d9",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c2a223d6-e8af-4074-aeda-68328bad0ebe"
        },
        "item": {
          "id": "314bfc06-6c55-4d1c-95c9-617b65e674ec",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a1779afb-b5f0-48e7-a788-4f0aa12f2943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb1cfde1-e3cb-4d8f-ae77-20a628e7e978",
        "cursor": {
          "ref": "0741a36a-4ba8-498c-87a3-f72c7f7b11a0",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b78c73d5-b65d-415e-a7ec-0ef908b90a71"
        },
        "item": {
          "id": "eb1cfde1-e3cb-4d8f-ae77-20a628e7e978",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e4d4b59f-7fed-413a-a1f7-86cbec37e4a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a205356f-a223-431a-86de-93318fdbbb35",
        "cursor": {
          "ref": "84e54603-bbac-4704-bb3f-b9bccb107e2d",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "caf9b845-d74c-40b0-aede-90d4707e426d"
        },
        "item": {
          "id": "a205356f-a223-431a-86de-93318fdbbb35",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7a85e48f-b833-412c-bfdf-e5a89bbd8541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd41eea8-900a-4381-a64c-5f31746ec295",
        "cursor": {
          "ref": "a2b4ab4a-7e76-4f4f-b234-ecf789f6247f",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1584a482-2b32-4b88-bf5c-58465249d0d9"
        },
        "item": {
          "id": "fd41eea8-900a-4381-a64c-5f31746ec295",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "00da0295-4810-44dc-a232-9ad38b71b505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b93247e-d5aa-4ba1-a06b-7a1e735a90dc",
        "cursor": {
          "ref": "b4ff387d-6238-4f2f-ad29-9fc5768194a9",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "966b7467-c14e-4a01-9a1f-3a89d5d5bdc5"
        },
        "item": {
          "id": "0b93247e-d5aa-4ba1-a06b-7a1e735a90dc",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "01bb847d-b702-41af-99fd-c4eba7bfc58b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b827d812-3013-4eec-a080-4825fe93e223",
        "cursor": {
          "ref": "efd5f786-c604-4019-aab9-511c7b5d0699",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "166df5c9-eef7-4de2-ac40-a067bd4ff415"
        },
        "item": {
          "id": "b827d812-3013-4eec-a080-4825fe93e223",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5f4a6912-e70c-4ea4-8581-9e4df3c60b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33bf219-cc45-4b71-ba19-6f6095c9ba9f",
        "cursor": {
          "ref": "950c5d50-9c3b-43ee-b855-31714f7d3380",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9c36fec4-1051-49d5-9249-b35c816db6e0"
        },
        "item": {
          "id": "d33bf219-cc45-4b71-ba19-6f6095c9ba9f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "24740c38-a271-481e-947d-c6aa5cef59b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d5360f-b013-4b76-b50c-84a50e49a1fe",
        "cursor": {
          "ref": "685311e7-5633-4253-8c92-85f742124fe8",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a9c8057e-51ee-4248-9920-87ad1695f658"
        },
        "item": {
          "id": "b8d5360f-b013-4b76-b50c-84a50e49a1fe",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b7aeb8bc-16b4-4bbe-996d-c4b23d39a3ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f89d2028-d312-44de-8f70-97331dd6652b",
        "cursor": {
          "ref": "2eeccd5f-2bf7-4aa2-bef6-387ee8744246",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3b499bba-3450-4d98-86c7-2172d88fc226"
        },
        "item": {
          "id": "f89d2028-d312-44de-8f70-97331dd6652b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4937d4b3-a7cc-44d1-8187-1f96835bd0f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54952467-f156-421f-ac03-de917a078dab",
        "cursor": {
          "ref": "2663c4f0-1687-46b5-857a-98eb1471ed10",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4d36c197-bc4d-41d0-ac25-4aba9fe5bdcf"
        },
        "item": {
          "id": "54952467-f156-421f-ac03-de917a078dab",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "555d99ac-af80-4f57-98ad-cbd72eea62ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa53d81-d79c-436c-b721-e55d3c63cbff",
        "cursor": {
          "ref": "2914f5ed-3c56-46a3-921e-b956854e4aef",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "30f5af99-fca9-482f-8327-479588448040"
        },
        "item": {
          "id": "3aa53d81-d79c-436c-b721-e55d3c63cbff",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5a77d749-761e-4c98-a279-1e03ed9f962c",
          "status": "OK",
          "code": 200,
          "responseTime": 295,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "22628e5c-a179-4801-9da0-b972e7f3ceb4",
        "cursor": {
          "ref": "aa96ee90-4d19-4a83-a961-22eb81621c0e",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4478ab5e-ebee-4967-9e84-cc12c2de8a4a"
        },
        "item": {
          "id": "22628e5c-a179-4801-9da0-b972e7f3ceb4",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "984765fc-1033-497f-9e9a-4cfba95a4d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6d09cf-1441-4815-b848-6556db11b50f",
        "cursor": {
          "ref": "884c64e9-a6a4-437e-8bb0-8a5a604e484d",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7c572eba-1d14-4cf3-8421-64f720466e69"
        },
        "item": {
          "id": "dd6d09cf-1441-4815-b848-6556db11b50f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "78f0c259-1d85-4e5e-a341-8e89121efd9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70e42b5d-96b7-4012-99df-4f832afdc570",
        "cursor": {
          "ref": "f0b384a3-3c5f-46dd-87ed-2467d46ef08d",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "150cca34-6fe1-49ed-b318-b29c1cc0f8d5"
        },
        "item": {
          "id": "70e42b5d-96b7-4012-99df-4f832afdc570",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "835605dc-5782-41d5-b4e6-4cefc21ed393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc251477-f537-4b35-82ca-a91e44c3de1a",
        "cursor": {
          "ref": "66e20251-2294-478e-8e3b-dc19bfa3244a",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d179de94-be74-4f25-9f03-08a8d2658826"
        },
        "item": {
          "id": "fc251477-f537-4b35-82ca-a91e44c3de1a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "de319909-1214-4325-9150-032b89df7eb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6944cdf5-cc1a-4a45-a0ba-0b15451a0fe3",
        "cursor": {
          "ref": "0e5556ee-86d3-4260-abe9-a07909f78e74",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f384ddbf-c25b-4ae0-9df5-893e6cc5d862"
        },
        "item": {
          "id": "6944cdf5-cc1a-4a45-a0ba-0b15451a0fe3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "78a0c562-0778-4039-9f1f-d12ba5a0feb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17055b0a-c45f-4be5-b6d2-be5ec0ac4d39",
        "cursor": {
          "ref": "e697f616-eb0f-45cd-aff1-b4f7f794952b",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "528055fe-1100-4e24-a1d8-08b103a4337a"
        },
        "item": {
          "id": "17055b0a-c45f-4be5-b6d2-be5ec0ac4d39",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "82073042-eb04-4331-a3b8-cc5b87d29474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e876ee9-aee9-4a92-99d4-0ec0fd3844bb",
        "cursor": {
          "ref": "abff633f-86ff-47b8-a734-726421bea622",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a0fa5077-9883-4108-80a5-a82d46d5bfbd"
        },
        "item": {
          "id": "1e876ee9-aee9-4a92-99d4-0ec0fd3844bb",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "bbddf35b-3417-45f2-8af3-05be235c6b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256079da-fd4c-4d46-b597-fc5824a17e03",
        "cursor": {
          "ref": "b6321d7b-e73e-4f41-b0cb-b8b9774a056a",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a7f40cfe-903d-4973-9496-cb14f0caad16"
        },
        "item": {
          "id": "256079da-fd4c-4d46-b597-fc5824a17e03",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1f44830e-d136-47cb-94b8-d6d5cf20ff2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4befffbd-83fd-406a-8bfd-fe2878f9ccbe",
        "cursor": {
          "ref": "35eb1a71-c3c5-406b-85f6-bbfdd56723e6",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "0cb9e386-18d1-47fb-9cbf-d65c9e14c495"
        },
        "item": {
          "id": "4befffbd-83fd-406a-8bfd-fe2878f9ccbe",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7e415e42-4efe-4563-a681-865f98e90bea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34d8196e-acd7-4440-8c29-38c378b2ec0f",
        "cursor": {
          "ref": "c59fe3b6-b505-474d-bede-fed5fa96df36",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b9cd6dab-6f15-494d-bcba-1b27a3da6e6d"
        },
        "item": {
          "id": "34d8196e-acd7-4440-8c29-38c378b2ec0f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4f6f9826-e3cd-4c3f-aab1-29c51440cc6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c46fed-b4a8-4328-adcf-cf5e0db0942f",
        "cursor": {
          "ref": "e402505f-ec77-447d-aeeb-8dcc0b54e667",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "15078249-d630-479b-9006-2f8ae589968d"
        },
        "item": {
          "id": "e7c46fed-b4a8-4328-adcf-cf5e0db0942f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "91545c62-f8a2-4976-b507-4977590fe55d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b2f04a-0d48-4fe4-9bae-c4529e2461f4",
        "cursor": {
          "ref": "5e552f79-6528-4a71-9d22-5d1fb05973f3",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b557d765-be38-47dc-818e-fdb8bfd39d20"
        },
        "item": {
          "id": "83b2f04a-0d48-4fe4-9bae-c4529e2461f4",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "bfbcb623-0d4e-493a-9a74-432eb726ca8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bb0400e-72b7-4fb4-9461-f64b70864901",
        "cursor": {
          "ref": "c0b5bd00-12e6-4f14-8544-9e029dd04a61",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ca688f16-08de-405b-a03d-173d02d134fc"
        },
        "item": {
          "id": "7bb0400e-72b7-4fb4-9461-f64b70864901",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b436cf64-ccd3-45bb-b5fe-3fb14e1e37b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aa79ec1-0d5c-40c5-9394-55a4c727f267",
        "cursor": {
          "ref": "33e4ac00-e971-48d7-8f0e-99c9433371cb",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b8c7b4a4-efa8-49ad-9572-fc37d908a5b4"
        },
        "item": {
          "id": "4aa79ec1-0d5c-40c5-9394-55a4c727f267",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "eee0cb6e-2c77-4aa8-a7d2-068c4f6385cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5558a5f-2440-493c-af25-30a8c9404c4d",
        "cursor": {
          "ref": "9fbafdd0-37de-4bf3-9af5-856a14826eda",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0e97ad7b-9dfd-4a8e-9b55-0f67abd27bd5"
        },
        "item": {
          "id": "d5558a5f-2440-493c-af25-30a8c9404c4d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "48229ce8-31d9-4be8-afc1-42329b186c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a80a54-2beb-4274-adda-7283f6058feb",
        "cursor": {
          "ref": "9edf77c1-1751-486c-a205-8f00a82d549c",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1f8b6f9e-b73b-4a82-bfb6-9488e9c94828"
        },
        "item": {
          "id": "50a80a54-2beb-4274-adda-7283f6058feb",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "77e2d20b-d1b2-4750-aeac-889eef2da034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89641eac-45de-4b67-ac0c-0d136836c2f1",
        "cursor": {
          "ref": "88f99e5c-a62e-404d-af09-510daa02c918",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "31e46c4e-296a-4e3d-a768-3bfe27f2d885"
        },
        "item": {
          "id": "89641eac-45de-4b67-ac0c-0d136836c2f1",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a5adaae2-5ef0-49da-8a2c-38ae85e9495b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d58dab71-ebc5-4890-837a-1ab70fc2195d",
        "cursor": {
          "ref": "394aa468-08cc-41bf-bf9a-c654c291c2a9",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8b9d4639-bf2f-4d01-a3d8-57790916dab9"
        },
        "item": {
          "id": "d58dab71-ebc5-4890-837a-1ab70fc2195d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "0b08ae31-8f26-4124-9988-a8efc0f5f63f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4740d78c-2aec-45ba-83d2-5e8abbc6f2a9",
        "cursor": {
          "ref": "3f1349c9-fb44-4725-88a1-6e1611600503",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "130069be-4fbb-42de-bd44-563aa35b73ba"
        },
        "item": {
          "id": "4740d78c-2aec-45ba-83d2-5e8abbc6f2a9",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ccdfc9ce-c8e3-4765-831d-b6e209ffb85b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e7f7a2-52b4-45ff-bab6-572607f026db",
        "cursor": {
          "ref": "55aac0bf-04ee-4e21-ae2f-f56348d368ab",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5db65d1f-76f7-4a32-8a67-263b8c381add"
        },
        "item": {
          "id": "c1e7f7a2-52b4-45ff-bab6-572607f026db",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9cb02fdc-0949-46e0-9f55-cace70f2c39f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8386b8a3-1ac0-4241-964d-6bb1ede38a16",
        "cursor": {
          "ref": "1db1e24e-ff79-41a7-bc98-5ff947a45319",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4cbb6f00-9a73-44fe-a02f-42c6ffca16d4"
        },
        "item": {
          "id": "8386b8a3-1ac0-4241-964d-6bb1ede38a16",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "197dbb66-ae5e-41a9-a5c4-8d631e8f3c5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08dce618-787f-4ffd-ad23-96dedc6017de",
        "cursor": {
          "ref": "d6024a5b-5191-4f65-8a52-8a2142c1da96",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "456488dc-65b4-42ac-a49a-c1346f99e2bb"
        },
        "item": {
          "id": "08dce618-787f-4ffd-ad23-96dedc6017de",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a12bef4f-2f0a-4cbe-9f3a-801119ec723f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e5793d4-e6e5-48a1-8273-a7e5929fd5c1",
        "cursor": {
          "ref": "7c48c70f-9074-4858-9911-f28a73398254",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b695d939-0b60-4bbb-af14-3921e8f79f0d"
        },
        "item": {
          "id": "3e5793d4-e6e5-48a1-8273-a7e5929fd5c1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "95abc7e1-2a7f-45d4-8817-f8822eef546c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a306025-1839-4d44-8a00-d51a54f56636",
        "cursor": {
          "ref": "aa7304dc-5776-4560-96bb-b8f0efed655c",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b0666634-97c4-4d05-a41f-09c7051d2a41"
        },
        "item": {
          "id": "6a306025-1839-4d44-8a00-d51a54f56636",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a6656896-bf34-4954-acc8-cc156aa31c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0543be4c-eb1c-4a74-9cc9-5b92e609447e",
        "cursor": {
          "ref": "f4540a5d-fb90-445e-a84d-ce0b24c703d1",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7f6518f7-7f3b-490d-a492-c8343295a14e"
        },
        "item": {
          "id": "0543be4c-eb1c-4a74-9cc9-5b92e609447e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ab91d485-3f22-4561-bf7c-678cd843db88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "219b4ddc-16e1-4be4-bbbe-695c1e71b1e9",
        "cursor": {
          "ref": "549039a0-50ee-43fc-9379-721461acb4f8",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3afe24c8-811c-4d94-8640-3507e527c4ee"
        },
        "item": {
          "id": "219b4ddc-16e1-4be4-bbbe-695c1e71b1e9",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1115eda1-d73a-40d2-8384-064a31728694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4bd2d4d-85e7-4106-9016-1f5a0e05a526",
        "cursor": {
          "ref": "fe87a398-9238-4be9-81a1-533fa51cd294",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "15ae2a67-a787-432a-9a8c-890fe08deedc"
        },
        "item": {
          "id": "d4bd2d4d-85e7-4106-9016-1f5a0e05a526",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8632d9ae-06e1-4199-ae6c-ff235795a24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6daf755-a7aa-40e1-a210-5f0927bfb86c",
        "cursor": {
          "ref": "8016f0aa-da61-4e14-8ee8-f7669c3fa5bd",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0e652101-3838-46d7-8447-3c013c5637da"
        },
        "item": {
          "id": "c6daf755-a7aa-40e1-a210-5f0927bfb86c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "44ac2cb7-68f7-4f16-be51-ed015a1bea2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea7665e-b82b-496e-9721-c93ce1cb1d2d",
        "cursor": {
          "ref": "460e1cc4-faa8-4fe9-bd3e-fa509dd9c39a",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "4ed871ca-3c8b-4d34-b723-6bdb61b237d7"
        },
        "item": {
          "id": "6ea7665e-b82b-496e-9721-c93ce1cb1d2d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0922289d-12ba-413d-9340-1c27dbaf417e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b76f8b-c1bc-41c9-860d-5f34aba17462",
        "cursor": {
          "ref": "66433386-2695-4705-a5d4-556bafbed8fe",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "0247d04f-05b3-4eee-a650-1639044bc8f7"
        },
        "item": {
          "id": "36b76f8b-c1bc-41c9-860d-5f34aba17462",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2b1f981a-a58d-4de5-af3f-faf69c17af0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d4320e2-c2d0-40b2-a01f-0de4ed8343ca",
        "cursor": {
          "ref": "28f02e44-49a9-4733-8765-6f17e543346e",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4375bfb9-fe63-44df-8dc6-44d6259295c1"
        },
        "item": {
          "id": "7d4320e2-c2d0-40b2-a01f-0de4ed8343ca",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "44dd75f7-1d72-42b2-803d-5bdd0360dd06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f88815f-46bd-4ddf-b7e0-7b26e6a2b58f",
        "cursor": {
          "ref": "21c06bd6-a411-4bd9-a4fd-9a952054f8ba",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7475c637-d87e-4025-b55e-eb4f26fd8ccb"
        },
        "item": {
          "id": "9f88815f-46bd-4ddf-b7e0-7b26e6a2b58f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d0cc2ff8-4cd8-41d8-8bd0-9425d0521567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9e0856d-e6d6-468e-9ecc-9868497f3995",
        "cursor": {
          "ref": "0c9c9285-1c22-4ecd-864f-dd92151527ce",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a85cc0d7-4219-47f3-b2e5-e644994f6cbc"
        },
        "item": {
          "id": "a9e0856d-e6d6-468e-9ecc-9868497f3995",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "02a95ff1-3b59-48ef-bbd1-d873f20a5658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d1162d-de52-4401-bdd0-bcb137a40eab",
        "cursor": {
          "ref": "a87a526e-7533-448d-96d9-ac18f3d8f990",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a54b1879-67b1-472c-97e1-537122b71a00"
        },
        "item": {
          "id": "47d1162d-de52-4401-bdd0-bcb137a40eab",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "50e67417-cfa7-4e31-b34d-5068324c7cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d2d11d4-c076-43ef-bb9a-9278ac092755",
        "cursor": {
          "ref": "5e9c95bd-b934-439c-96a5-f7abb76d48ba",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "790c39fb-c4bc-4abe-b104-18c6c5aeab4d"
        },
        "item": {
          "id": "1d2d11d4-c076-43ef-bb9a-9278ac092755",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "83a14272-85c3-44ea-9f6e-5a73f9e827b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86eac3ce-6228-4398-b82f-b3dced034244",
        "cursor": {
          "ref": "7c9e06ff-867e-41b0-b483-e1c4f5a48fa6",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ee64ef6b-934f-4074-92c4-a44548a1ba20"
        },
        "item": {
          "id": "86eac3ce-6228-4398-b82f-b3dced034244",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2a2a5927-2797-4b1e-8369-aa2481a5f295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad72991-efeb-47ab-953b-e08e8058ac19",
        "cursor": {
          "ref": "cce344a7-7385-48bf-861e-a55ee4c192d4",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d8447bc7-88aa-4dc8-9fd0-103f2ac2c19f"
        },
        "item": {
          "id": "bad72991-efeb-47ab-953b-e08e8058ac19",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c88a66c7-78e8-4da2-b3a8-40794a090a28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd809d1-9a15-4aeb-8dd0-23b31929010e",
        "cursor": {
          "ref": "20edfa33-c568-419b-9edb-d4e4ec0b2e14",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "61bc28ca-ef64-41b7-a7a5-cfa9c3b9c419"
        },
        "item": {
          "id": "3cd809d1-9a15-4aeb-8dd0-23b31929010e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e0ce96a2-8059-4241-b9de-d881379e4a0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1781700b-77bc-4918-9c4d-b8adb41ccf5c",
        "cursor": {
          "ref": "9913f57b-3733-4138-a5b2-634773efc226",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ef6373c7-c036-40ce-85ab-88dc9f8cbeb9"
        },
        "item": {
          "id": "1781700b-77bc-4918-9c4d-b8adb41ccf5c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a4b5451d-9dea-48a2-b335-68393cd6db68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71fda908-d8d5-4bc3-b658-054a8dd589a5",
        "cursor": {
          "ref": "787a207e-c934-4db0-8fdb-5daff4eaf2d8",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f747dac3-8827-428a-b03f-1379dc607882"
        },
        "item": {
          "id": "71fda908-d8d5-4bc3-b658-054a8dd589a5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "cb87b071-2953-4820-ad22-162e06039470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "745f30d9-b9f5-491b-a7bf-8c5ea5f2fcc9",
        "cursor": {
          "ref": "992aa4ef-dfcd-4549-b4bf-4146534943bd",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "48abcaed-babe-4a43-b7d8-ac8441989427"
        },
        "item": {
          "id": "745f30d9-b9f5-491b-a7bf-8c5ea5f2fcc9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "71bb3b22-6d57-453b-b424-515b9bc7f826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a330304-3de5-4aed-afc2-de336403b4e6",
        "cursor": {
          "ref": "56a489f6-ec2a-464f-a40e-2ae009d6d6c8",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "25bcf2b2-37d4-4e89-9d8d-84007a9eb48f"
        },
        "item": {
          "id": "2a330304-3de5-4aed-afc2-de336403b4e6",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "eda5b893-df0c-4038-a8cc-86718e5fab6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90cc11c-6e59-4896-9ef5-bfe13719a8ba",
        "cursor": {
          "ref": "6ed3c58d-4f1b-4899-85cf-10e7bfc89019",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3adf4abb-9128-43cc-a77b-0d806063536a"
        },
        "item": {
          "id": "a90cc11c-6e59-4896-9ef5-bfe13719a8ba",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e60323da-b4a2-4041-a8a6-144f2456e4e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573d1b0d-3432-4ffe-81fc-f27feb85a511",
        "cursor": {
          "ref": "37145cd3-8da2-4643-a19c-6e7c5cc0d645",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "43f8caff-9ef3-4461-a41d-fd13ddbd25ba"
        },
        "item": {
          "id": "573d1b0d-3432-4ffe-81fc-f27feb85a511",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6fa4fc17-a479-4d90-a5dc-fe688ecce0b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9e1311-c3ea-4ac9-9504-295ac591e037",
        "cursor": {
          "ref": "69188b4d-8128-4d74-8253-8a7c542dc5fb",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "fdc8b5e0-80d1-43c7-ae92-e09dade7bce5"
        },
        "item": {
          "id": "bb9e1311-c3ea-4ac9-9504-295ac591e037",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5089d19f-766d-4931-bea3-efd93632ce38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c202c811-1e46-4497-a680-026e5265f464",
        "cursor": {
          "ref": "70ea42dd-acef-46ff-9e6f-5b6e62f94232",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2c957978-b797-47ea-9e87-1a5b924eed70"
        },
        "item": {
          "id": "c202c811-1e46-4497-a680-026e5265f464",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a6f84a26-6876-407d-b30c-a62de2fdc1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "067a63ac-0584-4e09-917e-edd571173b64",
        "cursor": {
          "ref": "6bcdb08f-11a7-4942-af1d-128f556c699f",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c035d27e-64b5-45d5-b54a-d6ded4b6cb84"
        },
        "item": {
          "id": "067a63ac-0584-4e09-917e-edd571173b64",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "122db8c7-6c9d-4885-8378-d46c584d3c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "114d0970-51b0-4454-adda-cf83d500e1a4",
        "cursor": {
          "ref": "6f1008ac-d8bb-4c41-8274-fc89899eaf56",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2cc34a41-8cb5-4069-a530-ab76619ecd1e"
        },
        "item": {
          "id": "114d0970-51b0-4454-adda-cf83d500e1a4",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "81127073-f761-47ba-871c-b5c51713ce35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92ce1317-725f-41be-b4cd-37e9a831a9ef",
        "cursor": {
          "ref": "2bd711e2-e108-4303-a549-853eba534c23",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "51f6bb6c-62fa-4ee9-99a7-74058eb73a92"
        },
        "item": {
          "id": "92ce1317-725f-41be-b4cd-37e9a831a9ef",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "fb29edae-f8f1-41ad-964b-5cb3cf4e3342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5deaab-c850-40b4-a355-3382ec6dbb6f",
        "cursor": {
          "ref": "b7d13596-19e3-4159-8935-a901e80de5fb",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "45d7fbc8-d077-495d-bc15-d456db390523"
        },
        "item": {
          "id": "2a5deaab-c850-40b4-a355-3382ec6dbb6f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "51077dcf-a541-483f-9dc6-3756693d4786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1dee39b-7e0e-4c6c-b2e9-3a70b50c1f25",
        "cursor": {
          "ref": "7959afa6-de7e-44d7-8666-4ea5bdfc285f",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b1ac011f-1167-4c4a-9b14-fa8107f05f0a"
        },
        "item": {
          "id": "e1dee39b-7e0e-4c6c-b2e9-3a70b50c1f25",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "90e1f9f4-3b6a-44de-a0f2-3e060c2260b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f75a7773-6e8f-4a8e-a0e7-3735bd9ceaa9",
        "cursor": {
          "ref": "284b1c75-f2e3-488c-aa71-a7fee53415da",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9b82a834-e4fb-4565-8658-c042bf4f8155"
        },
        "item": {
          "id": "f75a7773-6e8f-4a8e-a0e7-3735bd9ceaa9",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "bb1e3c49-d2e8-4b85-bb21-a8b5a35f3c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d81fd9-7ebb-4732-b93b-eab1fffa569e",
        "cursor": {
          "ref": "bdff86c7-1d0c-4fa1-9314-fa463d2aa1ef",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d6c8d265-24f4-46d1-b18f-c07ee05ab1dc"
        },
        "item": {
          "id": "a7d81fd9-7ebb-4732-b93b-eab1fffa569e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b8724a64-f563-44e6-96d5-1b8568d0e572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e84bc05-2b40-48a3-9b43-949560805db1",
        "cursor": {
          "ref": "68a17533-58a7-460f-b52b-0d614372bda1",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "623c666c-9ddf-439e-9939-f4e1fa8d81c3"
        },
        "item": {
          "id": "8e84bc05-2b40-48a3-9b43-949560805db1",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a6a75161-31be-434c-844a-d1dff480ff0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "584badc8-5bab-45b9-b1a2-27b3ef7265ac",
        "cursor": {
          "ref": "c00fa8e7-3a4a-4c0d-bee8-5ce4a5f82df8",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5208ce51-2467-4672-ac7d-2cf21973893b"
        },
        "item": {
          "id": "584badc8-5bab-45b9-b1a2-27b3ef7265ac",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b5ce9c8f-1b87-4ce9-b5ea-deaac8db581d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c81cd518-f097-4a2b-9d73-c530e7b8e4e9",
        "cursor": {
          "ref": "ebcb50e7-7dec-40b5-a018-f5427375fbb9",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "649c50bc-1e11-4280-bc92-c5b929821879"
        },
        "item": {
          "id": "c81cd518-f097-4a2b-9d73-c530e7b8e4e9",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "aa0f96a1-220f-413c-98cd-00bc6c525557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6432f0e-4619-4be7-9113-a6f9ad29d04b",
        "cursor": {
          "ref": "265287cd-fb64-4921-af78-7ed923c3beda",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "63b693da-12fb-4738-9a75-246189717ea8"
        },
        "item": {
          "id": "e6432f0e-4619-4be7-9113-a6f9ad29d04b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "324674dd-8674-4f57-a98f-77ccfa769c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d43c88-55fc-4465-8b18-1bab0fd1e95d",
        "cursor": {
          "ref": "848ca929-675c-43b2-8a29-92a170d80c0b",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "358dd9b5-753c-4b2f-885d-d8b80bad751f"
        },
        "item": {
          "id": "05d43c88-55fc-4465-8b18-1bab0fd1e95d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "345445d9-c5fa-4959-acea-c91d2120c70a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c916c9-b63c-4cd9-ba6f-df9b3010aae2",
        "cursor": {
          "ref": "1572b530-77fe-45f2-bff7-a6e7fef4910f",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8d61b6ed-8c8a-4129-9e67-47e38f28c2fa"
        },
        "item": {
          "id": "15c916c9-b63c-4cd9-ba6f-df9b3010aae2",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "998732ac-eb86-43c3-8fd1-a0b3a4350e73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec8290d-710e-4a0a-afd1-2e0e7f1af47b",
        "cursor": {
          "ref": "f3a08024-bbea-4626-9a0b-a0f7d3a78db7",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a345fb89-69f1-438e-9487-3225acf11487"
        },
        "item": {
          "id": "cec8290d-710e-4a0a-afd1-2e0e7f1af47b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e197db9c-71d4-416e-b02b-9e735de3d90f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0cb4da-cace-4beb-b577-8e881ae6b814",
        "cursor": {
          "ref": "5f762148-ef57-4134-bff1-75e37e5012ef",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "888d90e3-237f-458c-8364-3021789e59ef"
        },
        "item": {
          "id": "6e0cb4da-cace-4beb-b577-8e881ae6b814",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "4870a0a7-b726-4d6c-ae24-bb035d34a1e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ffc732-92ce-47ea-8b35-a7cf669457ea",
        "cursor": {
          "ref": "229b617a-ad75-46cb-917b-36fcb447fd56",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "00e457e2-02f7-4b5f-a657-0013d9d158b9"
        },
        "item": {
          "id": "19ffc732-92ce-47ea-8b35-a7cf669457ea",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a2b3e10f-2231-4e69-8bc1-189be9295134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05be9f0-db8f-4de1-9c10-aad18cd1fbde",
        "cursor": {
          "ref": "cf72df88-bb63-4bc6-a017-89a114337b8d",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e9a37682-3566-4919-b962-c559a390ecca"
        },
        "item": {
          "id": "e05be9f0-db8f-4de1-9c10-aad18cd1fbde",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0546a0ad-cb78-4dfe-bc4e-03d6ea894cbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23b73a4-565e-4990-bc70-cff60cd3ab52",
        "cursor": {
          "ref": "a253893d-e6bb-45f3-adce-355a737cf549",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "bf795adc-f28a-4dad-b3e1-4208aad3c6bd"
        },
        "item": {
          "id": "d23b73a4-565e-4990-bc70-cff60cd3ab52",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "781998bc-0a08-4137-af2f-228dbf65e25b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5072bec7-fc42-4ae8-a154-8cfd17425647",
        "cursor": {
          "ref": "3b2c05f9-18eb-448e-a7a3-82f67dd0cd8a",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b5f20a6f-1ac4-4035-af75-735a044c75a7"
        },
        "item": {
          "id": "5072bec7-fc42-4ae8-a154-8cfd17425647",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "00562cf7-f0f3-4306-96c5-032560e250ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc33f7e5-a363-4af6-bf5f-6de5f114794d",
        "cursor": {
          "ref": "3b1175e5-04b3-494c-8123-fb7b2affedda",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "34cf36bb-8313-4fd1-98bd-d300288f6b28"
        },
        "item": {
          "id": "fc33f7e5-a363-4af6-bf5f-6de5f114794d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "34209b53-5956-49e5-bf92-08da0d6b370a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffc6859e-867a-48c0-b655-a6f825724b33",
        "cursor": {
          "ref": "12d42d41-8e15-49cf-b37e-e958f03cbf70",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "519279b6-884a-4b4f-94a8-fed4d50b2cc6"
        },
        "item": {
          "id": "ffc6859e-867a-48c0-b655-a6f825724b33",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "15eeed7b-e3cb-4a29-823b-c72774a2d8bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "312afa64-92a3-4791-a486-826e54aebc97",
        "cursor": {
          "ref": "a9e04cc2-db32-4f08-b10e-d6951619a0b9",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "1c247037-31cd-4193-b888-f99d9817156f"
        },
        "item": {
          "id": "312afa64-92a3-4791-a486-826e54aebc97",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "6d138270-5b16-4b91-bda5-5d6c6b41762d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "770aff26-dbac-4810-9bc1-7c03dbd99b01",
        "cursor": {
          "ref": "eb2b506c-593b-4461-b008-c2c7c97c04f9",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "092aad4a-39f2-40c5-ae35-a45ba6d4da36"
        },
        "item": {
          "id": "770aff26-dbac-4810-9bc1-7c03dbd99b01",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c6ffcf28-39df-48e0-8c55-fe344386d70a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7822bf16-2d3a-4ac1-b211-686cc84b0aaf",
        "cursor": {
          "ref": "5baa321d-c607-4363-82ca-a090ff2ab209",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "71e76dae-e663-4ca0-beca-70d31a3fbb1a"
        },
        "item": {
          "id": "7822bf16-2d3a-4ac1-b211-686cc84b0aaf",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "58f5a124-e074-4a34-b4ff-1338c102d4b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20fbf40f-76ac-48b4-93f6-86cf62d08afc",
        "cursor": {
          "ref": "91a5146c-840b-4fc3-9e94-f26afbe0018e",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "26e70f24-6411-4547-b690-552877a1a6ed"
        },
        "item": {
          "id": "20fbf40f-76ac-48b4-93f6-86cf62d08afc",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "675fed02-bbbe-40e5-8121-3beb021862a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6091766d-ebc2-4aa0-9fd5-804c6e00f7ee",
        "cursor": {
          "ref": "32b490a7-82a6-4ba2-8cbd-b37c0f3f7501",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1bccf34f-5825-49d1-8b35-2d8debbc6524"
        },
        "item": {
          "id": "6091766d-ebc2-4aa0-9fd5-804c6e00f7ee",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f39c0254-1ba7-45fd-a0aa-564d51a454bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fede581-263a-41b3-a088-dfc3a2e56715",
        "cursor": {
          "ref": "0dc9536e-2c19-402c-89df-db5722009de2",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "744ad1e9-60d7-4986-a787-4cf09ca8279e"
        },
        "item": {
          "id": "1fede581-263a-41b3-a088-dfc3a2e56715",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "078cb096-ea60-4004-be0f-bde6a2377b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00989e9c-66b1-4507-b046-ba4430e88a17",
        "cursor": {
          "ref": "220a5091-9187-4631-ba04-94ed1804a8ad",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0dff8b1e-6eeb-44d1-a4b9-b083ea646756"
        },
        "item": {
          "id": "00989e9c-66b1-4507-b046-ba4430e88a17",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1cc0497c-0a19-482f-9357-5f45124ec221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86f3e97-9c6c-4c9f-bd7f-9dfa8ee7507d",
        "cursor": {
          "ref": "91c7e128-aa62-4433-a089-7c867f767d64",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "16533c7a-2430-4a51-acef-cbb08ad336c0"
        },
        "item": {
          "id": "f86f3e97-9c6c-4c9f-bd7f-9dfa8ee7507d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "46a53087-125c-4830-8dd7-7b06305a5fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "619ef7cf-c190-4e21-90ee-52301c8a08cd",
        "cursor": {
          "ref": "5c4c21a3-c573-4093-a396-43a8ad413240",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "98aa394b-1126-47ae-a5cb-58da02c6700d"
        },
        "item": {
          "id": "619ef7cf-c190-4e21-90ee-52301c8a08cd",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1bf79367-6cc9-4823-98f7-91d8aba43e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d0ba56-92d2-4c7a-984f-9b2f4e847901",
        "cursor": {
          "ref": "e9165f03-4704-417f-9c38-dae15459adf9",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a197f192-46cb-4d33-a1dc-3dba27b12e24"
        },
        "item": {
          "id": "c1d0ba56-92d2-4c7a-984f-9b2f4e847901",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "15d9196b-b5d7-4a39-90e1-aa741ab20fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "288a3d57-4633-4015-a7af-f667a4af2ece",
        "cursor": {
          "ref": "73301afc-7b59-41ba-a780-f95b1db98532",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3f0b0ae7-cdcd-41ef-9c99-5a84c8d517d6"
        },
        "item": {
          "id": "288a3d57-4633-4015-a7af-f667a4af2ece",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "9029e7a7-46c1-4766-99b2-d10818a9c32c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d88085-bf04-4a06-9ec6-706fd81f468b",
        "cursor": {
          "ref": "0dd4c6a0-2531-4ddb-bbe3-b14db9b2ca2e",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "72a827ea-23b0-47ca-9ba6-bd05bd111440"
        },
        "item": {
          "id": "76d88085-bf04-4a06-9ec6-706fd81f468b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "685cf49b-a524-4b03-96ad-699ff41a9947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "223ef76a-225a-4025-b616-ddec6ba98e1d",
        "cursor": {
          "ref": "05e767bc-8a25-45c3-8d35-75e88b06b395",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "23b82ceb-48cc-4553-a1f6-b01ad72df47b"
        },
        "item": {
          "id": "223ef76a-225a-4025-b616-ddec6ba98e1d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2554969a-0044-4eff-81a6-2c2ad8123865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcdec1a6-5697-4cc9-9a93-574a5331411e",
        "cursor": {
          "ref": "014da3d2-4dae-4b9e-9363-e58c4dc2c7fd",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7dfd820a-b7d8-43f1-b4b7-0fa7dd4f254d"
        },
        "item": {
          "id": "fcdec1a6-5697-4cc9-9a93-574a5331411e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "23095924-db78-439c-b09c-74afb42143fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "112c54e4-1b78-4300-a965-d2c29080a12a",
        "cursor": {
          "ref": "2b130f59-4088-4ed7-8f9f-d7db71c639b1",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "edf3173d-28a5-4c56-b2cf-b9d0c416f103"
        },
        "item": {
          "id": "112c54e4-1b78-4300-a965-d2c29080a12a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ac90d2c8-a0a8-4fdc-981c-fa9372c2040c",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "300f3e1d-6b41-44c1-9523-cf7a6e4610fb",
        "cursor": {
          "ref": "cad89b2e-3fd7-4724-b95a-41ef17b9debc",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6494839c-6d70-4dce-b9b1-cc2a3383ef2b"
        },
        "item": {
          "id": "300f3e1d-6b41-44c1-9523-cf7a6e4610fb",
          "name": "credentials_verify"
        },
        "response": {
          "id": "51c92a23-9630-46af-ad87-b2d80586cd1c",
          "status": "OK",
          "code": 200,
          "responseTime": 2275,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc9ece66-a3ed-41f0-ab57-a8b3350341f8",
        "cursor": {
          "ref": "fff4b3ba-6ed5-474d-8bc5-1f78e05b3556",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "df04da67-d407-40b8-bacb-d98a7212e379"
        },
        "item": {
          "id": "bc9ece66-a3ed-41f0-ab57-a8b3350341f8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3f0b15c8-3dd9-45d6-bd18-723f1f9b04fb",
          "status": "OK",
          "code": 200,
          "responseTime": 2784,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d20bf10-d32b-4ff5-aae9-e953708ec01e",
        "cursor": {
          "ref": "0d74bc0e-2f50-475e-9569-5ad49eb7561e",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ddecab5d-4137-4a0a-b08b-dae10b65898e"
        },
        "item": {
          "id": "7d20bf10-d32b-4ff5-aae9-e953708ec01e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5a5cdd03-fe29-4c5e-8b30-7e9d373dccbe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "7d20bf10-d32b-4ff5-aae9-e953708ec01e",
        "cursor": {
          "ref": "0d74bc0e-2f50-475e-9569-5ad49eb7561e",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ddecab5d-4137-4a0a-b08b-dae10b65898e"
        },
        "item": {
          "id": "7d20bf10-d32b-4ff5-aae9-e953708ec01e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5a5cdd03-fe29-4c5e-8b30-7e9d373dccbe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "9d87f59a-dc04-4481-8fb2-b06ff0b292d5",
        "cursor": {
          "ref": "94c57872-b341-4af0-9ddb-942bb4012692",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e632de9b-9a5a-4ace-861e-bb99e2c86184"
        },
        "item": {
          "id": "9d87f59a-dc04-4481-8fb2-b06ff0b292d5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f487a431-e3b5-4411-b57c-96e454fb50df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "79faf16d-cfab-440b-88fa-66adc3e19a82",
        "cursor": {
          "ref": "ed8d6fb8-da05-4aeb-bfa9-e4f7515892ca",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "9ef88608-31c9-43d2-8921-31045b229db3"
        },
        "item": {
          "id": "79faf16d-cfab-440b-88fa-66adc3e19a82",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "70787acc-7001-4107-88a7-9cb5d439386b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}