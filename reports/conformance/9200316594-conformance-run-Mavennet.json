{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fa774d67-33d9-497a-ae00-85da6959b1a6",
        "name": "Clear Cache",
        "item": [
          {
            "id": "c20dc822-78ec-455c-871c-ae5ee4a0ebb2",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e1d90b58-f38b-4d7c-acd8-381c89b84b2d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4d1dfd88-7d1e-4a9c-8d94-c17b14d468eb"
                }
              }
            ]
          },
          {
            "id": "11165760-1afa-4215-a842-f9fd33fcaf98",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ab2ab9b1-17ac-4540-88e0-0178fece33b9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4f62561a-3837-4c59-804f-2b9196fc49d6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "75d6c221-7a5a-4b43-a0a0-bbe3cbb28557",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "39c32221-7bb3-46b2-b532-b5e1ade4fac8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a67578e0-c5ed-4bb4-9300-0337706e89dc",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2073bb62-7654-4dd8-9094-d4caec9c738e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "158885a6-aa19-4cee-90c7-4d9682cff17a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cdde1dd5-f257-4f36-899c-d22038741212",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "510cc203-8081-445f-8be4-36d074d33764"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "17196e2f-8883-49ea-ba0b-a35985d4cacf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ba6aa318-3bb2-4365-b2c1-790bccc66d29"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "edabe896-11ee-4fae-b321-cf7090451198",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "30f1513d-40ba-4c7c-abed-bb0a46359745"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63cd5e39-4d8e-44cb-9e4a-7a9688b5c9b4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "202eb894-40cf-40a0-8cac-13259b023a0f"
            }
          }
        ]
      },
      {
        "id": "478dd6e3-1f70-4b4c-8a9a-329b0a7db8fd",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2501ddc6-8ac1-4930-9b37-97b17ed578db",
            "name": "Negative Testing",
            "item": [
              {
                "id": "966a27fa-2ac4-40a8-9173-aabf90ead157",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1a9556cd-1b27-49f5-9d40-ccf262520317",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aebf5882-dcea-488c-ab6f-5a755ac1e73b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d354e3c-b742-4d07-8596-2dbc1148a16b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18bceda2-feed-47ef-ac3a-1ef7134bfc49",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c08723a-78ff-47e3-a5d7-9a1c6cc600b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dcd63def-6560-4c60-abfb-539f79ca7fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b56cc75-51f4-4d82-b30e-f274a5aa017e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "703eba4e-c106-4446-b63e-50c247d255ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d4e1f18-3936-4b0e-b8a9-f026ac956c5b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8ba15449-5841-4d84-be95-21b5fed56b02",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "21bc4916-98c8-435b-9a66-9a7b1b4df384",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7238d7fe-6b97-4523-a6bc-19b511ee52f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48e25427-f694-4222-a379-ec9dc929d11b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95950a82-3b2c-4356-9cc7-ff728c0fd1c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "024bbe87-b171-4677-8e4b-45a89dcbbad1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b1910ace-a3ec-49f8-8929-e5f27b41339b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4e92db09-5314-4e25-8e5e-edcb4c777e9c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4dad75a6-cfc4-4002-a544-02158ef5d547",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "96f3c224-8d68-4bee-b84b-a8f8b8efb9d6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "23519d06-9ef2-41eb-99e0-d3022daf3bb8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "ace2124e-2eea-47d8-8e65-9d1235fb69f5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c19be309-0c52-4dae-ac4c-ec6cdfee7016",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c4d77e13-464b-4163-aa83-6825bd666be2"
            }
          }
        ]
      },
      {
        "id": "df497ab5-af11-4e10-bc2b-b9b1a4a0a219",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3396c17c-afcd-462e-8a34-6271d129d5be",
            "name": "Negative Testing",
            "item": [
              {
                "id": "14d1ad4d-0dbe-4743-9213-243a54c66f61",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7244cfe9-b4cd-4506-920c-97b1a8c2f8b5",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada034b4-6bfd-4ad2-b10d-a23623be2a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "696d8aa1-e048-4ba7-bb76-f8f3b466f52a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a396f5-4f71-44a6-9536-ea212cd9245c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6fccbd8-0ec2-4d24-b855-27f34cb1b4c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1839328-f77f-4a42-b03c-13979d94d7bd",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "177af467-81b3-4f1b-b114-b3e240c048f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6cb5898-8714-499b-ba09-501d637aacf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99396eb1-7f6e-4799-a99d-301508d22950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec0611fe-769a-425a-8d41-b63108cc69e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca9a665-322a-4a1d-8fb9-e22668acef47",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a2801d-4c0b-49fc-8814-d0bb1970bcbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa6aad35-157a-42d3-90f3-91328faa1c9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb850bc3-50cc-4e1b-bf8b-a4e406fb90ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c543417e-aefa-4b19-b2a8-c44b0a919841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e44ab5e8-7440-4447-90db-00673599ed2d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6940ffa7-3f5e-476e-833c-91e59d2a9e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "000a7207-e966-4fbc-8425-ebb6370a3a03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2755240-065e-4adc-98f3-8f702b0f89f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82bc2bfd-c973-48b1-b601-feadcfda96d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5fd413d-59c2-4d9f-9393-be87d3e04fbf",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a7d48c-84f1-41f2-aa30-10cc2f7d17f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99c3d991-4ac5-4e07-a256-a8c4722c7cc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79af3c9f-8050-4ad4-a043-58982b84a7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4bd40ba9-f14a-4e09-a335-a6b5035ab762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c7712a-2f8e-4148-b77f-1940428fe152",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d57021-0ea3-4223-adc1-973c44121209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b378b37e-2b7f-420d-8587-4fe55b62621b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "534fd8e1-351b-4580-a756-f654b1e97bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e656d1c9-77c2-4d03-943c-b0419979f111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebbf8057-22f8-4e1e-89a9-263a254e5244",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2ef883-a376-45c7-915a-d4e8de24cbd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ef3d91d-21a3-4291-af8a-b33ec088f17d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d26f056-8237-4b9a-8d23-7d02d1aea8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba4c88c3-7461-40f7-bcfa-130c66113972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b881da08-7147-49b7-8a45-0179a96a8368",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "310e211b-2076-4432-9aaa-60f07c12eddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab97d43-4e5c-4068-8f09-8bafece3053b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a0a203-9ecd-454b-afe3-39e1ace9edb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f728e7ae-9d88-449f-b41e-4cc316ad2f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a45b08-11c0-4a16-8d0a-92ffc09f89ef",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ded684-d67f-4c89-9a17-332eb3d545fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61a28a85-cc6e-4510-a120-23da91dac562"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e8883ea-0c92-43a9-80af-a2263b1592ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8cc3bf7-4b01-4345-9bfa-ea038866450b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91f9afb-0eae-492b-b8be-e4fb1e45d097",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5097c5ea-9ee7-4187-97ff-6f3602a3d86b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3a04de7-1860-48b3-b9c3-331784b5cc58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f02701-3e71-4166-9e6d-3a3cd2db7162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cdd5b139-ba7a-49c8-aabe-6eb66f05370f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d943df6-b412-4be6-a9d8-cfb71dbb59f1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f47b9b-9fbd-47d4-a71d-0b36bee8c605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f3bb6fd-2171-4bde-b60e-fb8a153bec57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5166e4b9-80f8-41ef-8ae1-5d80b125bfa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf0feaa8-fcd1-4639-9cd0-e95202edbf91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b358e2-bec9-4014-bd34-d3c88efd84e7",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e5332d-632d-4ae3-8258-0b5951740ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a0eda42-e7d4-49e4-a2e0-e1f1797c0dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa5eb01-5e90-4599-975b-2b0eb41cec85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20e18cfb-f6cc-4b90-8142-b2234951a16c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7acd1f8b-7ad1-43a4-8648-a9db7ac70781",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6713778-792a-4c58-bee4-e65befe00e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8304812-2987-4d7f-8807-22a56be328eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb3e4b3-764b-48fe-a33d-faf378fb714a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b5c6f1a-4c28-45d4-9fad-cd9f169a7c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c17060e4-fb44-4a16-af76-1f52f8699491",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5353dad8-0e65-4670-ad0b-7863b790391e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d164a34-adff-4e84-834b-e987814c1891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ed31af-4974-4728-95ed-6ae4d9f5a6d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd622bcf-c645-49ad-86ee-5e1987775de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075658e1-b5a5-49b4-b325-75180dcc8e08",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e185cba-de1b-47f3-bc80-cc32ca53f3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97990c28-10fc-4b02-a85c-5cce7fcb3a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdcd6d99-4836-498c-901d-1dcb104dc7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7e54550-b681-4150-addd-b90ae180634a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796f845b-1b4a-4599-a6d5-8859047e0389",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7a485e-e543-4433-97f3-bb03a7b70a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54a30857-24f6-441f-998f-b04b9eb77d6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21074b35-2e1e-4bc3-a220-b10319f619bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4a43feb-e4d1-4184-9fec-44534651228d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8626fbdc-25ec-4693-a9f8-4796c67a8556",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d6dff2-3555-4678-84df-5dbdf5c459b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "667f2022-a814-477f-a7ac-0fcaf2ff744b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e0b0b3-74e3-45c2-8d6b-e72c01f7a3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "968a435c-407e-4114-87bd-f493329cb74a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdce9040-6abb-45bd-a31e-97ccb25a062a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebd7da1d-19bf-4ce8-87a7-b01729ae2b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b005132-c088-4e06-8ff0-73004b6eaefa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a64ef1-8e3a-4c69-b639-727bacfd7cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "98a8a132-4e7b-48a0-a221-ee6fed4bdc7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab1c034c-55b1-49f5-a01c-ecb7a7fdbfcf",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6620c5d-ed52-4097-8bec-ae48784aa543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0617f93b-82d7-421f-9f22-1987d569be35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c2ae718-7363-4c05-934c-87824d40d8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4910dcba-ed11-4ca5-a5ae-1b7df41055b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1e40c9-ac04-404c-976f-a7bc2741c0c3",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ae26e4-de59-4337-99d0-44a107bd1a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "971a7977-e6ec-4edb-89f2-6060de3be97b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328a3641-1c7c-469b-ac38-901aee5e043c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fd33751-9328-4005-8835-a93db218c6d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6df23333-d934-498d-95d0-d39e9494c03a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfba7fe2-c80e-49bb-a397-01b5dc934fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fb5a980-8961-4fe8-9cff-e61c11d2a543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58cea500-5750-4976-a188-dfd7d854b951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9179b5f-1ea4-4ef8-ac45-1d1f59a1aa70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d769943-c9a9-4388-8b9d-91ed2e309141",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac4be90-e913-4e9a-865a-dbafb92413cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a11953c-c6aa-45c0-93d5-89857c995db8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb948119-e9c8-4227-8d6f-5b1eae7aba8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9cf2f29f-58b6-4ea5-870e-f6846c2b4d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc439b7-f8db-444c-b2d5-55c7a63f153e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6957f2a3-c9c5-47c2-a078-7c22c5700987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0254f385-8308-4b66-b4c6-d7b9d81e1dc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbda8189-1638-4d42-8ad4-43f6dbd39360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "adf33c2f-15c3-490c-a943-e8ed4326628a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358f9759-9917-4cdc-bea6-5c432539dbe5",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "455dc463-3c54-463f-8683-b5f070b2e513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d147132-7d98-481a-b2b3-4aa977224c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b00d521-b6b8-45c5-a06c-b4587ce4e69e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "87e134c5-1671-4ba2-aa17-e6d6047816bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2229bd-e779-49f3-968e-bf4342af84a0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5933ff6f-07ca-4d75-aa35-0045b274d0b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe3ea394-4efb-4c7d-9357-10494371492f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e53fbf83-cfc1-45a1-9e8d-57b94753f042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7706abc-dd36-4c80-8381-a72d2fd37899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984e3d04-27cc-4dd2-aef8-d68a8d468398",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "745272c8-4d55-446e-b3c5-55fa0609614b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "652f5682-0fc7-45f3-886f-ba24abe2d091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f53f0f-3295-4481-93d6-6dbc9ddf5ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3753e52-2bab-449a-ac23-ee5ab8e44920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aaf2965-631a-493a-a09b-565c5461d2ab",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b8c1f6e-41f3-4d03-a180-913e8ee4aa10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fef308b-c5a1-49e6-a26b-7f0ec3edc799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ee25af-366b-4c91-af4b-56b1bba10626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "20e30edc-c8ec-4fbb-94bd-14117b121e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afef2b6b-74f5-4488-890d-ed40b6f29c48",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea623480-7963-4310-8cfe-d5a325fcc1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4862bff-519c-41f6-a33f-e63029947401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589d91a1-4237-4eab-8fbb-98c747d6d74c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cff9291-c800-4d41-b7e2-c353d14a354a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470d9c1f-fc8a-425c-8b80-a2d62741a5ef",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a1aec7-2b1e-4280-83c6-c5f9201b18f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1092a78b-f549-4a91-8cc0-77a375b248bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09593d5-302d-42fd-a4ab-18952a8e0b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c846537-ce6f-4501-ae70-b660ab4ae0b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1819fa93-b58f-4342-81e8-d3ea73e7b850",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f18eada-c324-4524-9848-ccb9426aa6c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9420b534-87a0-46b1-b845-9960e39a6313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a32a082-7284-47eb-a634-e19c55d92a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "201ec5a7-9d81-4d4b-bf6c-6180300dc101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b19b66e-e376-434c-bac7-bfd108a14ad2",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a32b460-57b1-4b31-b9c1-afde7873217e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e4ab260-4ae2-413a-8ccd-e2b427c0da08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905d141d-bffc-41ef-bff6-f213bb7a7067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "59b49a9d-940e-498e-ba60-dcbb42280273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676394a4-b1c2-4a03-a3c3-5c420c6c1713",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0423c775-3eab-4fbb-8fd0-c469fea65194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7020505e-3f2f-43b1-91ac-153108617a0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59c4dd0-215b-487a-bcb8-1fb0e60e2f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb5ac521-bc4f-4ee5-addf-6d512b6da3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a4eb9c-c627-49a1-87f5-4af62ba69d00",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b356710-a9c8-41e2-9560-1dd6c0cb0105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5fd8557-40a6-452f-8de1-1355894c4e28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aae0c63-c409-4e11-8ae2-157e4c4b4a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2e92752-a8cf-4f89-9a6d-bd8cf23230a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de97976a-635a-4658-a944-39d360ecf7a6",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ffdd769-4e81-45c1-a14b-b46132144a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a490b35-bd52-4b31-b97e-6383bfff7232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ae7aa3-15af-4492-87d6-02c902d2f3cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0df06223-dee4-47e5-a0e5-150ed19ae3c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2d61a0-dfcc-4d42-bb7b-db236e7d7bc6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61bfc668-c7bd-4692-a981-f112d94a790f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd8249fd-9242-4609-a76b-38704dee865c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee456ca7-cb2c-41ca-abc6-7a3f1f058992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "97eb042a-3d40-4fcd-b2b3-4d7f97dd8da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a971e0c-ec3b-4062-a86b-5a1e13f73b4e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "018d75e9-150f-4221-b016-8196769972d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60f0c55f-106a-4aeb-8efd-ccdc0bfaaf78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4994c8da-3e08-4843-aff0-c19b0ea321df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ee121f04-6f94-4c88-b55e-a54f58270112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd6be90-1827-40ae-a7c7-9c90d859045b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2c84e5-087a-4466-84e2-e8fea6eac0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "defc68ec-9035-4c3b-9509-e615e6baa4d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c74077a-14d7-4a08-8df0-12a07541bcc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "508f31d5-b3a4-4426-903b-3c3c9d98400c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6e1794-5dfd-419c-aa36-8dfd6ac6daf4",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c2412b-3e5f-4ff6-92a2-d242648482ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c73d8d0-ad63-42bd-8798-2ae2f156e5f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61534f4d-4fd1-4022-954a-5e81c00aaa8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c82b02c5-e8ed-4a2c-b676-28afca875b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea482543-50e2-4956-b35c-18543efd9709",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ca4100-9de9-47a4-85f4-665874414f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e71b250d-93dc-4992-b0cf-63f8380cab4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0516dc40-e12a-494c-825e-bd0fde36839d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b32f24c9-3a75-4417-a1b1-3b8003edde1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33ee030-9220-41d4-a4c0-1417ac132a37",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8216c25f-1c15-4759-bcd3-efca554e4994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0605346f-74e2-49e5-bcb9-a4f34846224c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7418a9a8-c918-47df-aad5-febac183b2e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1049754d-469f-4cc1-a7e3-e599b55273ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e561c5b0-ecf1-49c8-8a61-459cb005df53",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "068affff-2af8-4d5e-94f1-73b6dd835831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f3ac5c1-9c96-4ef2-88fc-1837982f6e8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8544d76f-555f-467c-b3d1-43b9fcaa802f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "44b5deda-1a46-4806-9d93-49d3c7791213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8035b750-ca07-4f85-8ff7-a3ab7a4299ee",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37fdb2bc-1068-49c7-84cd-0d74210f24f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30a8100f-2829-40ef-bd1f-5acb3eea860b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b50583d-64fe-49e7-a2be-38912c7f0026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "964ee955-342b-4f87-ba25-1e88d793b832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f0f7a79-67a1-4395-bba0-275f0f87c73b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77316c4-5a03-48ae-8cfd-cdccb9a07a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd89421b-ba5f-4272-af4a-691264640ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45c2223f-48d3-4b9a-a740-65099ea67d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2928b0d3-2c01-4b93-972d-eea241e4a314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f1a589-ef08-452d-8824-899e0a91e423",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6820e2d-e4ea-4b8c-80a7-6b756261eb3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35abf601-b761-4abc-ab85-e7c14b305890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8c7198-9b37-444a-b109-dd6109078a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d9ee400-0c8c-4346-aa62-8cd6a82f13ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9381f361-74c4-4836-bbfa-49c0c0901705",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e69cf62-84e3-4225-b4bc-3791148ecf50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a985951f-5f4d-4115-aa34-9e59f25ab769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "151f416d-7fed-45aa-98e5-49d4e23f7019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2da7a96-4c0e-4b47-8a13-e5d1709cff2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2e2f95-f731-41a1-b0f1-a96686fb633b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f69e82-f55b-4e46-a38d-eccf41023a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9346961a-2aa2-49a2-ba83-3e77adc20175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a706325a-04a5-44ac-b01e-a92a36abc066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab116dd5-b43d-40ab-be12-9ac99ee54ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73784c99-8963-450b-9523-e70d425ace16",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe040b1-a0a6-4a4d-ab3d-1bd790efacff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c45643b0-59b1-4056-a5c7-84c57e2a1d95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085b28df-2c1d-4ea9-b36a-58d0dab2f6f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fb80c88-6a32-4d52-8f6f-498b8d8a3938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47739710-4a9b-4c3c-a51e-1dd710698e00",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1472b2-c410-4010-9e85-4ea8294c78ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bd2931e-f848-4ab1-9d99-7fad8eca3b82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a419f26f-760d-4715-95a9-68e5db9b5bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1eb0514-0913-4996-86b2-f2175cdb8667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caddd390-f60a-466c-9ff3-fe74367722f6",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "567c9c75-027c-41b3-b9b0-fdb70b3ce803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "213d40bb-d8dd-4c23-afe7-bc0568e3d3a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b13097c-837a-4079-8cef-3d10ef9e1c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "581950c1-adc6-4d56-bc6b-e2891fee1bdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9383660f-851b-4d63-a8c7-c57a6cbcbc01",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f051f6-ff1f-4e99-bd00-6603543b9fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3ff66ec-1eae-4c5e-a645-68830b407d64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac3a1da-bb5b-4cf9-96c5-da3c57939b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e502810a-c15b-4353-8959-33258a3cb1c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9c3fce-2757-4833-b653-2b744e798ef2",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb8d9a5-bb59-4560-8432-6916dfdf1ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18143c19-0ebc-40ff-ba26-7d99581e5483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "510e3ce9-2558-4bd2-9150-ddea6d71b76e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d85d629d-4b0a-42bb-b155-1d792eefa8e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cee0854-f352-4a05-b8b7-c18256687fbb",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f97e63-8279-4400-971f-3db2d840f992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44d4aafd-b807-4bb7-a88a-0bcce34fa2ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab7e9fa-8df2-4d16-ab8c-fef0fc2caec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6be28d41-bec0-4e55-81d9-d89d0dd24adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa3263e-16d7-4501-979b-8a70cabc193d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f073af-1c2d-419e-a33f-aa97908eaf9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "055f8a5e-145a-4b30-91f6-c937e7e5028f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e46cc3-d137-40a9-a890-3c5e7af21b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61e78525-b084-44da-a4df-b81b4c501a68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcda0832-0231-4501-b7a4-d0a1984c8871",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63df6efd-1739-4097-943a-63e519ed4b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c4aae9-81d6-426d-afa1-df45a6282d2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46776dc0-326a-491f-9995-f134c821b515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42926975-9cc9-4c67-9756-a732a4f9cd35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b48413f-661b-4284-bd40-c7aeacbd3597",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16d19df-f500-44bd-8da4-452c225ee71a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71120699-bcd4-4d35-b03e-6703bc44f9db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abcc542f-786f-43f5-ace2-1eaf469b0913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6ea4999-6050-47ae-8e3c-4410ec245b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb2295a-d6ce-4358-892f-39485ca782d3",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd7e008-112f-4add-8297-23d6901c9c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2a28fa7-97c3-460d-8219-d1d4f7e95a9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61fad00a-feaa-400e-be72-9ca8f6d57e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "9e477761-611b-4408-b245-f0b198998ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac06b65-5dfd-4075-a5d7-f9511b126359",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58279aec-8a74-4405-86ff-1357358b68de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b44916d-bc58-418d-8f0c-749467f0189b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6addc36-1dd5-4749-8ab6-8822c195c311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "efa33531-8641-4369-8982-461a6f2a4b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72bf2d25-b437-472a-b905-6c2c8b943071",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf1cb9e-18ee-4b82-aa4c-00dc1b094c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94032b91-683f-4851-889e-590ef5e22e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1949edbb-d346-4fb6-ac6d-a13f42e5df3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3cdc6b4-5254-4544-a2d0-a3543bfef628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd7c6a9-ffe8-4e0f-b625-407b2a3bb8a5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "036e23f3-f5c3-4d0f-9901-c44fbc8c166d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19dd4e2f-a954-49ba-b806-0e84b8cfcfba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee04687-5a9d-47fe-9dde-44f307c477d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3cbfd2f-e907-4917-933b-e2ad6389a680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "501ab509-c4ed-48aa-b1fc-e534321d26aa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8d1b11-934e-44fe-87c9-61e152e765c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f315fa-4412-424c-b2db-0c74e707d115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb5b0a9-ce7a-4135-aa86-fb4aafd36849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "44cf0bff-6844-4df6-b487-1e9eb21494c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32453dc6-c12c-4926-a3e0-3b175f451da6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c3d72e-a4b2-458e-9b24-ee3839daf134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "580cd7c6-69b3-4084-a41e-de4fc8ea6914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f30f6206-92cf-4c97-931e-62b3687c0ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c33975a-2e4a-4d1c-a9cc-53a7ce934030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55906de1-c64d-4c0d-8cd9-70dca864fc71",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f4b4865-76dd-45d9-afc4-5a0575b14a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46fa144e-f7a1-40be-b696-fabd81863ca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8db06f-d74a-4c2a-be88-d51c20906200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "dae6e218-aeaf-4f0d-89ba-aba519336ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b537dd-7fec-4e1a-8d23-e6f5b318819f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49652283-6e61-4ed7-992b-97e988998c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71b7b2fb-a643-41bd-99d6-b9bd24e22d35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48b78f6-81c8-4529-9902-e0e77b37001c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9859baa-d739-448b-9a3a-a6dc63d0bd48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae0a880-a634-4d28-bc53-1a2b98b6a869",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc98cc6-29f4-42dc-9ca4-0d45fe25291a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ceaf600-3292-4fb5-9be1-8be1d4b2d2a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6675aa6c-bfb9-450f-9142-77fa04fb5dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "afb3722e-b83e-4ff8-9d86-b0e674e9e922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8c9a4e-1adf-461e-8e6f-be35eabbf409",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b60fabd-d1c0-4e17-adfc-923afb5e0363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fd48394-016b-4d6f-a470-e5b3562b019a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adeab6d4-b969-499e-80d6-2848b7c243cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe4ffc3c-6f75-487c-a417-b891d01fff4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63382e53-1e23-4c4e-802c-67bef7199a87",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b86e81a-2004-4b87-a64e-bfe5a37de78f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28b53a86-8ac9-4885-a3b0-4183367ed43d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b5a5e9-eb34-4d68-9477-4330730cc107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f34c39a6-0208-406a-9ac7-34f09d65a54f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5683db6-a3f4-4e52-9ba5-ce0a88368246",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "583ba1e4-740a-4405-8cbb-763013ef729c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc2e2bba-4416-476e-8c84-d9c1d2dce076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e440f91-7364-4566-ba63-924d97a2150e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e7c71860-2849-44a5-8379-937ae3f2c0d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f8b844-b72e-43cf-baae-cc00ff45a31b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ef1214-b0b3-4620-b309-ab093a51dce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c133fe34-6003-4263-b872-c7549818771f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c870f0-61e0-49b2-92d9-5acc0787df5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d5a72f6-100e-4636-adbf-58e8d68c23e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7bc84b-2950-461c-b4c6-9cbd8280da8b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d10b75e0-a75b-4611-8766-abcdfd570c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f791ca4-a8c2-4249-8f7c-e11efdeb7443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2534168f-29e0-4456-95f2-4b390442c44a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "60b3435d-5d94-40c6-8736-8ac2067b9242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b00bb1-9476-4d1c-ae9c-4c239114d422",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac138471-83f3-4aed-9189-6b83e54ff4f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b8f3864-d8c5-4a62-859f-03a54f376927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f983bbd2-9c1e-4c6d-bd64-2457b1b478cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "755290c2-4fb2-48d7-acb5-047bccadb084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07a34e7-1c6c-4ded-914e-1827a06e62a6",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce0db8e-ddc9-49a1-9a5d-cf787ff044bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d45fedd-4d6e-4a55-9ee6-6818f8d62293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35db7d68-912f-410d-8e3f-20517ec1a85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bfa573b-5e93-41c6-b3d9-e724a7ba328f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a214abfb-895d-4dbb-8267-877dafd2d4da",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b7b733-fe54-4bb0-87c3-a93bfe0ef69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fde9aada-efe9-4ef8-aa9d-2408de5c9335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426ca507-d948-4e45-b8c2-ce0679c616a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d63df5f-a260-4821-ba58-a161eeedcb97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2677b6eb-4ede-4478-822f-71e996a038ab",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31175d5-0203-496c-8727-3e424c49677b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b030a1a4-3ed7-457f-98f7-3afe9aaae5ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34064b84-b22f-478f-9ad2-63d4118bd7ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "68de6665-7c4b-4298-b00e-697bc8bc1c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d1c01e-d4dc-493d-8804-efc3f5be37c9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd551ff-b6f8-47f9-a63a-4cb4b834f910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab3603d2-cb81-45f5-b7f1-48ea391ffbb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84a8214-9a67-41d1-bfcf-fc8fd8d49156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e2eae0df-495b-4569-9fbb-e034632336b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992addc2-2881-446b-8c71-b0e8240824ff",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8b7780-6874-40b1-b798-4edb587094cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "260f02e5-ea9f-444a-9dc4-aa36ac31478a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee657649-2281-452f-8988-5bdfac0991fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b5b8dc9-9ca6-4058-98d7-5147d941f3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f06da5-56e4-432d-8c5b-8ae8a6e9863f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2e7ea9-7c50-4d8d-afd7-c0044a7d8927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "356a9749-c96c-4e3c-b844-ba2632def4ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b24737e1-807d-4360-bffd-e1c728eabc13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2538e964-773f-4320-9684-168e2bf2222d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "499ce4c2-b728-4b4c-9970-4820f377eb31",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7e4f00-87f3-459a-977b-785da98448c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dc8a38e-1c89-4331-8c94-eac3ec2ede78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8efdd7c-c48b-4a4e-8774-599f486302d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c739bc4-7326-4fe3-9a3e-9863707d0925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c38b8d9-2d02-46b7-8355-bcc089d86cbf",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd1462e3-9935-4837-89a6-1d07b605c277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da51cbbb-cf68-4ef8-a081-f5d041fe554c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e1e3d54-b1ba-4171-b619-825956b21784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a95d8930-d5b0-4856-a480-b30db22c2d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dcb4ecd-3eca-42c1-ab81-63d5aa5ba667",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74ad931-097f-4f5c-8385-a4612d963c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ac3c981-1261-41a2-8be1-18a8190f7e35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67dcba3e-ce17-4b96-b3dd-c36203f6b500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5a5c1f2-f8ee-4bc4-8017-201162739731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc34bdd4-8bad-42ff-97d5-70d9f0c475a0",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "673b218b-5ce0-42af-affe-b293cf59dcf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02f6ff18-5887-4db8-962f-de9565d27593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7950c75c-3501-4164-bc34-46ded8322e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f5b01616-17d4-4d29-93d9-baf235f09019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a9e813-d49d-4d29-b5aa-9f6cb3edcaf4",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "614474da-fc8b-46f9-a28a-7efe14459ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa5ab39-1c88-488b-a6b8-d0816409c4d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e214ba6d-7610-4300-9c9b-53122dd65bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb17a23-3557-41a6-8803-f810bb57eb44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7e40c57-793f-4155-952d-7a02f26f8ee3",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83cabe9-58e9-4633-ae15-277bc47d0fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0052078f-d72d-4a7b-8956-f67852ba057c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d055cb33-307c-4291-b4aa-a589e422aefb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "11c3c802-d12f-4ffe-8f4c-e892b8db74a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e8a1413-ee1d-4831-9073-edd8a2e2217e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e89b7bc-da07-4c36-898a-7f13b63cc844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1817713a-2f8d-4a07-8830-f447019c952c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2aa6a26-ec1f-45e6-b00e-7b858c829c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea880dce-a53d-4332-a915-a8f97473f0b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "782241af-0364-45c7-acc1-e753618f426d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca501a19-cce4-4c3e-a331-5564a198b321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aaec87e-c071-4e86-86e4-79db017a056e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f2dc3e3-3195-4f33-a2de-6161bfd9b95b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e029d094-bc0d-4afd-be6b-840171ce756d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a30da42-1a44-4f71-a636-77ed6e4e8b20",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4e826a-1459-4f4f-a96f-73ad485fd019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d806566f-7962-4da1-89f0-c911d92ad1fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed3d4bee-be34-4b93-a7b1-3da5ff3273e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "09b1a891-6710-4d23-ab3e-368bed9a4988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e56af18-cfba-48eb-b06f-f7ea55e4f8e8",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6115d02e-7446-4674-8d6f-7aa35552c736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "878b0027-ac5e-4628-b9c7-2d452ae4c3bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be92478c-9e70-43fe-9ab1-0100b02d6805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "57cf82b5-a18c-4e1a-a9c7-12abf1e748e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ceae79d-cd03-4354-8069-c925c0a37783",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4b9e17-b795-48bf-9bfd-a4175851e7b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a80d187b-0968-404f-bfca-7dddcca27175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b996c4cb-b9a4-480f-8fc7-b5678e2dae22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e9370d3-0704-4a64-a89f-2c85692c65ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c02083b-918d-4283-8510-224c2b4e54cf",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e2c2fd-1626-4c1e-8966-5acbc3bc3a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba410dd0-3e3a-4b68-8ed8-4ce0a1dee613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b787c14-7384-48c0-a08c-30ad63ad4b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f385a34f-f277-439d-8406-ee6293885cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a566db3a-ecbe-4628-b3b5-bcee03983f09",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ef7e91-e6b2-4064-9b8d-0bd76d9e9fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb17858-584a-475a-97ac-0ab541bf2de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e12616-b217-4e51-b84b-83dfbe3c6192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f04b0000-5349-46f5-b909-83ecf9a9a281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b175c0-2224-495e-a623-b0dfb724bf43",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6bcb0f0-849a-4116-8778-f4e42bf0524b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87befb39-e3de-4c5a-b8b3-14a3bbb688b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c31036-f2b4-43a2-8362-fc6d1f0cf6db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b25da388-bca0-441e-bead-e1059a9f0c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb09c999-db48-4573-ba07-67800571b07d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04496fd4-6fa3-45e8-bbc9-59a68e352ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a756d052-f8bb-457b-92d2-f6bba3a9d089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657bdf7e-b72e-4717-8f45-5388e61e7c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "43e1d2da-4f38-490e-9b62-f5ad55834cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa8d6fc-dd1b-47d8-9d34-bd6892eed5de",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb82031-fc6c-4e7a-b64d-34f9bf696ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9ad86dbc-f39e-4873-b20e-7479cf906a56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed7bd040-9f67-4a5d-b642-f76a9450bc21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "23e4963e-acb2-42dc-bd64-35ad1d9e78ba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0fe7ddfb-e34c-4a62-b58c-5fef31e00ffd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3156206c-b46c-429e-87b3-2669f91ab283",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3faec96b-3a43-47b4-b584-079982189203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "80be0d81-1864-48b1-828e-1c06255105d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52d156e-8b55-42d3-8b40-dadc03357fad",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af88368d-320f-4e0d-b5a9-2f1227424f9e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff619a1a-8b1e-4f40-b103-ca18bce18d3d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4fd49928-c752-43cd-bad2-b8cb5e7d342f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "94d87765-0304-4e73-8923-d590ccc4d342",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df08b59a-7d98-4911-aa4a-63d3f5aa5721"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8ac2fd89-a893-454b-886a-c0a06f52b384",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c1cf56ea-55f6-4c7b-a0da-877b085c60ab"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b5f16cf7-d779-4dfc-81aa-c0a2bd9b3471",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "edd029fb-a440-4599-b21f-826141e85c2f"
                }
              }
            ]
          },
          {
            "id": "dc248f1b-5011-431f-99b7-7a7fae8bf153",
            "name": "Positive Testing",
            "item": [
              {
                "id": "95a8a7bb-f98e-43b6-9c2f-60d2e1386dea",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "6b3d35fb-753e-4e80-b104-e9677580f0de",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "291fdd45-c6e6-4d90-96fe-d4571fd9f768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e134deb1-35cd-4010-b9d5-ecb518709a5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbbaf46b-36ee-4be7-ad5c-adbbcd36b1fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "565e77a7-7e70-486c-9056-b44a4a4255a2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1161c998-4801-4c05-a48e-931beb31f48b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ac0fc80-1ed2-40fc-b62b-ac13591466c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "498a2a28-b0ec-4191-a1e6-6fe5f5431412"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b903563f-905b-4f7d-8243-d812fdd48933",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "44dd449f-ed17-41ee-98dc-a42f04d97394"
                    }
                  }
                ]
              },
              {
                "id": "3f34c796-1ab4-41a5-881f-48f2262dbfa9",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db907e3b-2567-476b-9f2c-813f59f54d11",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c9874cd9-22d4-4bf3-a704-20e3eef87243"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "263944d0-7725-482a-9f03-efc5fe43c824",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "481032cd-38b9-4bd9-add5-e6952280f3c6"
                    }
                  }
                ]
              },
              {
                "id": "3f657bfb-84c5-4af2-b728-464592f5c471",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d7aab38-d9c3-46dd-9725-12400b196933",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5cf342e9-3549-4563-b189-28046ceb6f5e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "373c517e-56cf-4fc0-8271-270a930ddffe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8a947dfb-d427-46d9-8aba-4e4caf89c6f2"
                    }
                  }
                ]
              },
              {
                "id": "b912dad0-8214-4899-b625-84ff4e3b0d5d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ab600c8-a9cd-476a-98d3-f0728e9d3e39",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "26b817b1-0dbc-4bc3-a11a-01dc3807faf4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6af828cf-c88a-49b8-a057-260c07e47e72",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a87bedb9-896b-4a0c-9b00-ce6345ace952"
                    }
                  }
                ]
              },
              {
                "id": "2930a472-f8c0-42cb-915c-af37c1f6afe7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b27a97a-203a-4665-a298-3142e35c10d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ac070ebc-1377-41d2-a050-23dec7dad462"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b414e99-e1e9-4099-b1c0-6244ba41388f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "43e99969-3eeb-4d8d-99a0-881b7ac45ea0"
                    }
                  }
                ]
              },
              {
                "id": "3e5af6e7-e461-41e5-ac89-d60d658d90e0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aceae2ea-2fd1-4733-a02e-39841bceb983",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1d462d7f-186b-4612-b4a8-35a4cf02276c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bbea1125-be31-4c34-9263-23a25ce6b0fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8a483725-5293-431b-81a1-6ae93569a6b1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "97f3ce94-306b-4cba-a5e2-c6d7bcad2a1f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bf425fa6-cd62-4b98-afa7-e93a53705e44"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5e7b8870-afc2-4272-a013-f6545f19159b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "45695c6f-2336-46e5-9d19-b0c29a21a904"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cf65555f-eee9-44e2-b26b-e9819ce6b07d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "355a68fa-0612-44da-86b4-9c2b4a1bb854"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6a496d3d-ba25-4a56-ae73-1798857819c2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "75c77112-dcb4-4289-ab74-56a8b91383a7"
            }
          }
        ]
      },
      {
        "id": "160709f7-7b03-42e5-9a77-f77b7c5cecb3",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "53c19cb2-d792-49df-80d3-6596d0d675ba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dc28660a-0637-4dfb-860d-83630dde4532",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dc473912-19b7-49a1-bed1-e54952f4f9c6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecfb2f5e-f7c7-4599-9153-e59795fb8249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f3b3850-250e-45d8-a747-50671c32b3cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edaca619-6414-4ee5-b5bb-e0a3d8308270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "569fbd49-4368-4894-96de-633e3e5c951a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0ade1f7-b487-4346-a21d-0ea85e813388",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc9016d-743e-4b34-baa1-cabf701402a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd320961-471d-4d7a-985e-898f71cc944a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01df1fbf-151c-466f-ac69-ea349c78bbc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb543c41-ffba-49b1-bd72-7dc0433579b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da41dc9-f6dc-4bb1-b9ae-07af08375059",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6532bcac-e13f-4af7-abc4-6bc50a420c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c5535cd-bdf8-4743-bc00-1f423b74e800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c012d23a-ae87-49af-a2af-0866495e9cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "76816a85-507f-4c03-bda0-9848d0e0c935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ddb3aa1-78c9-48d3-a4ec-f3bfd946c02c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "053e72bd-d41f-4975-87f2-028e7c3f162a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3489adba-0b1c-4e88-bf83-bfb2f9c0c663"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db349c7-39c8-43d2-8d6b-153cf59be3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ea464e5-cfdb-46c8-980d-dc558892de94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f8d72f-105a-4755-ad7d-28d3482c97f5",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb896c42-216a-43d4-94d7-2296342ccbc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bec2397-a53d-408b-93e9-27142df8112c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee7498b-5785-4742-ac69-37d9d0daa2c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "224e489c-41f0-403d-b071-e656d4735af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a0678c-0bfe-42db-a01c-c9db343eea9f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c365c7-1e52-414f-8c2e-f7dbbc2f9892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce64c7d0-3da6-4c8c-86fb-807b8a7b98a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b39ee00-8f9f-49a4-828f-d4691e26095a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "48b9ad43-d584-4b6f-b9f2-611a61879fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f3ba4e-ae8a-4c23-bac6-06103722006f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7258c55-c5cd-49d5-a4c2-420a74b35fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "622f726a-f18d-4cdb-b913-706f5649d75e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae59c0e-8d0f-4db8-88c0-4e4085088b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "989dd589-b895-4fcc-88f0-65c7cfb6a6d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f500c615-662c-42c9-ab34-6c1544804ef3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "805cf43d-0cfd-4a93-92c6-3576de425c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f58805c-b6d8-466c-b141-9189d761f615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b3275ed-ac47-4f7a-9534-d221aee31627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "45f5c280-d358-40f2-9138-79e8e0c0afe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e69cfec-8546-46eb-abbb-19c7aabf193f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75315823-ca77-4661-b032-46058b703800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7de1f60b-0a9d-4136-91ad-811f073021f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f64af52a-01fa-471a-9b3b-3d49422634cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "10f28815-5a79-41f2-a1a6-2e1664018bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62531731-4a37-4442-b10b-786cdc29b504",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5967d8f5-842a-429c-bd19-98554c0d58a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a16f25d-cab9-4bed-856f-01fc4988a0a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4523d3df-47b5-476e-a1a7-838d4c7bb872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5461122-2a90-4bd8-8536-7b4036af1da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ee694c-6aa8-4a63-8ef5-c0b8f1c224da",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30bb755e-20ff-482e-b580-3e11fc2e9e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e47c6c-28d9-4cc8-85a3-51a6dec86661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6867b9d-6754-46cb-b1aa-62f7563c2a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "be91fc8e-cea8-439d-9b7e-f32d99b9e4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "745f0639-fc66-4f8f-9ef3-47111e4d97dc",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f0806b-1f6f-4681-b6fc-bd1904fb25a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7530a24f-addd-447d-97b8-71fe9bcf6087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "091ea4fa-40e0-491c-8038-a78fb855f759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c81318fc-0f01-4969-87bb-985e29e426d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d86da9-7b72-4f96-acdc-a8333c9534ee",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ece7e05-3cac-4246-8312-b12d372e92ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d88d962-2cb7-40bf-a0ba-9eacd33445a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c546096d-67a4-4e20-be1a-c534b1b5b2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb0619cd-4aa1-402d-af65-58c51df4e6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86471849-29e4-462d-9df2-f8422b235859",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48fa6670-9159-4f47-802f-02d98d19e551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c6da122-7b7d-4ef6-87a2-041122da5e47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b908fe0-c483-457f-bc0d-9c6784704254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "44af3728-fc3c-4e70-9472-110df6f54733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa1e7c9f-caa0-4a30-835f-352977ad47f1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b11729d-6908-42e3-8c65-023ac5be8a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93eafb2d-1496-478a-98df-92cfa72e72b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfbcd67d-910d-4fe9-bd41-6878485b73b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e0be288-a900-4bbe-b7a6-f2fb243db1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60be87a0-3739-4b73-9ba6-3810c084b561",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0dc052-24ff-4420-8e00-4d1615757efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c8abe7-f454-431d-99ef-4e8a3d5bb864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0853563-38b7-41d0-8ddc-073e1bd20a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c588775b-08c2-407b-8d5f-88273e5b2513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66550c93-2b40-4de8-b9e7-72145e1ade34",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "996c43b4-d1cf-42f6-b630-bad9e58ca8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4316103b-6872-442e-9c72-aa35291e8d53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1909bd03-5f96-4beb-aef5-8eed2a9ef26e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "77a4bb86-c238-413b-af37-8e2148e1591a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a85bb496-b87a-40ed-90c6-28dbde070ce2",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f20a843-c5df-443e-b25c-167b09362e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43dcf722-c73d-42a2-b564-7e0e3edb24e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0effb37-cb41-4ccb-b2c1-a6a828787d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe23786d-a8dd-40ab-93f0-376db4108c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a918be8f-fc5d-4dcd-9903-2bac1ab16dd0",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3521309-88aa-4e70-b5d5-533347697a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55470c71-5063-41aa-8609-e60de1d0d1d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b2a31fc-714c-4367-9b8f-8e4d3586079e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc86f88-91d0-4c9a-aa1c-9c9353945d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70258cb7-546c-488c-887b-0fe3fde34f15",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccbfb115-fa69-4c03-a136-72390a9d8363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd9b6542-b875-4ea0-a269-851cc986738e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac05a0d-5f83-4053-a511-fea393aef0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fad66dcf-daef-48dc-b0a1-32fd6282f5f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6d377e5-d484-42ee-abda-8589bfb9ab5a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31d0c625-acf3-4af4-9055-745b10f7cd96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99583d1c-8cd1-44c4-aa31-add55077e304"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "284567c8-d6ba-4ba0-bf43-b8ee3a08f900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba56d626-9054-4b1f-8759-9c6c4d99b6cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e054f9c1-6f94-4f1a-a790-9fb91505f7f6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8cfd956-5dec-46dc-9062-ebc242aa851c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b992ce2-da1f-4729-8869-8d51560dc3fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f01711-7163-431a-85a1-4d7d2d2e062a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07974503-4c2e-41b1-a4f3-c34b92454f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e81e1fef-4b16-4bd4-9819-83be293f2a79",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe727849-1f0d-4ec1-9cb5-fb03f5fcd7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3766e838-566b-47a8-9eee-4bf003c90207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d767db-29d4-43a2-9371-62e222c35355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5a76f45-cfe3-476d-95d8-5540f83def1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f68558-562d-42ce-b54f-e3d95859e989",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f470342-86cf-4b46-a752-2ec1456ee9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4226d739-a56e-4b5f-81b7-0004a479862f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae921dd6-06c1-4954-acc8-3d2ef8381074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a8cc94a-7cfc-4f97-8298-a0a2021cf0fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2222560-d7b4-4d44-862c-4262a66a3bcd",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22a1e0c-6e98-49e3-a498-1216a2513f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e919f08-d363-417e-8d11-0264ebc79193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c808bc-6ac6-4937-aa5b-90ce2fd2ac22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc4ae309-d064-47ae-b99b-de65387cc135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "250d6951-150e-4003-bd53-37adf52f0f1f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b166c7-54a5-4a75-9483-2cfadfd8f671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "015a5e74-c530-4c2d-b233-d417b5f85b8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22fa964-c53a-4e63-b977-ae9bfdb6700e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f711877-a34f-4eb4-a116-33e2f5af3161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe9bc7f-6335-4dde-8173-0aa777418e96",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17dd0cd0-073f-41b5-a71f-58da50f7ec58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "260e0a49-a9ae-475f-a0c3-89173ccd9086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ac40ff-7f31-47f9-9a36-e10e986d04a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ca526fe-b5a3-4658-9678-0892b8ccdf69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7259307-d876-4d84-96cb-e5a76a6eadd3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce1638f-6b6b-4ce4-a1fd-5b55ecc0d6ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96911767-ffb7-4e78-9699-975cdad8e0e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8994ab13-df3e-4533-92ed-6f563367fb81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3ec4ff3-af08-47c8-a90d-bb31317f8e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b977be-5da1-4e98-8aee-ecdc2900e23f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf0104b-13b1-4054-b44b-66442d85169d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64f0d371-0370-4d6d-94ac-b3865fa6af6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de0e10f4-980b-4b59-a216-674350dc4cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cb88891-954e-4f0a-bc58-be627eee16c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f67bb211-a3f6-41ff-95eb-5ecd57315f61",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e367fc-93a7-4b49-aa73-c8dea360bfbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "945af81a-49c7-4cf9-be28-5dab178ef746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497736a1-b030-49df-b3cb-6e70d4ff6575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "048d3c94-ce9b-4da7-ad30-02cc01d70d64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fbade72-525a-4e46-b885-5a0b9fe88280",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c065ba25-f929-4989-b63d-fddd4d4c60e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9e7f992-0b45-4c6c-9197-29e3a4eb0353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e60aad-158a-489d-8481-87b3cc182317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53cd8798-d3cf-4b10-874e-45b355133363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa607ccd-1dc4-4c72-804e-e98bc63b7a77",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "257e8484-d457-4fe7-9b01-48461e79a68b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de4ec016-a5b8-496b-9fcf-8a0467a357fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b50056-43ce-4f5e-9c6d-a0b30df069d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd9dc283-0719-4ae3-8bfb-9d0dddfcf203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca51b8aa-6ef9-4a78-81ce-a33c7bc37ee1",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09f68b84-b9aa-4952-9776-d4bf21fca2c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02d3b1f8-2283-41bb-ba8d-52a584099b41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c132a8f-87d2-46a4-9603-c707a1c1ccf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d82fd317-d2dd-4956-9cf4-bde711b0407e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5550e34-6861-4ca2-9248-4043909afa97",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a736c3-1c1d-447a-a4ab-0ae25efc0f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f348a08-cdc9-4fa6-bf97-e87aba9cbebd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b69d28a2-ecc4-4781-b5bc-01f737dd8e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86b8e637-b3db-43c6-b4f7-ead214e51841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44132177-9dc5-4335-a3f7-3804b6190deb",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44886357-c46d-4ed0-91ed-35a0c1d18b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55edc3cc-cbbe-488a-9c57-3ceb56abcd45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad139af-1f6d-4da1-ac55-3ebf7287bc99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ade85295-c970-405d-9d55-ee2a5ce4edde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a1299f-b9bc-4ce1-95b0-63b2d92c056d",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbbe11e7-7ba8-4b75-8824-77fff7dced0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c128ffb4-0af8-41d5-8183-ac72aced88a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf4f4b9-504d-4967-b02d-c27cc0e5e836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75e530bc-66f5-45c7-b6c4-4cabe228f341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f03a01-0b1d-4682-a608-e8f424f4d124",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecfca8d8-cba7-4b1f-97ab-15171402eb74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34766e53-9430-4dff-b85a-ac147ac7391e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d7fee8-0fcd-4981-8ba0-a3a4b24c817b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c0e4d69-c23d-4b4b-bb9c-94c46037ca6a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6fb745db-5f2f-4488-9ee6-5cc14ceb1377",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a5e5c302-7e0b-4b63-b15e-d48bffab10e5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec1f591a-e55a-4e14-87ae-168d20987c4f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "109ec107-625b-468d-aab2-2c0eb3243cfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66eb1f45-2c55-4ee6-bc8e-b6a45735c9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e21b77a2-9c60-4f11-aaf3-840a10878659"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f57154f2-b607-4053-8251-97b0928478be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf923696-3020-46ea-8218-b10976325c75"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb46225f-730a-4f3a-becf-665130047f97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afff9004-0c97-4e74-bdce-749fd27f6066"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "60511347-4c96-4730-b431-afbcef3cb8b6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4278c7c0-c36d-4e2d-a38d-6e0b6be6ff6d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "83823e6e-5720-4bf8-badc-8f097046d6fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ee93e103-461b-4c0d-a242-d1b0ef4e7cbd"
            }
          }
        ]
      },
      {
        "id": "82b4ae45-7dc0-4925-a121-03ba4392935a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "bb383f68-92c4-445b-960a-4974941e3171",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a7c1699c-9c0c-4ed5-ad8e-51d95d1ee18a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "95766a99-2a57-45aa-81c4-9ac7f65abe1e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40208c3b-dad4-41e1-aef0-05c76b7b19c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0695d7b0-9431-4127-ae0b-9f471bbfe05d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e03ec402-f4b4-446d-94a6-7c59b9b89265",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62985629-576e-401d-af37-907f71a6a300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ac43ec-fb1c-4ad8-bdf7-0480f581ddde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32e50a7-2eac-4900-a080-716ad0e0d7aa",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b58f2c-f0be-4e74-94b1-e1bc53a1924f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84bbf424-f8a0-4cf7-9555-6642d3ccaa50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1293c88-35d5-4371-b0f6-7f16492f7302",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "333eb1c3-ca54-42d4-8bef-34583752ab32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac135bba-5412-4e9b-ab26-e6bd7df04b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e83cda-738e-463b-a3a5-1ef03c0b11d7",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "921e5df5-4a29-4d8f-ab56-5693a577914c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c5f52f1-ed5a-4b9b-bda5-b5259177b11a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5642f0b-192a-4192-aa60-92805246206d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "841fa91d-5f29-420f-9cf0-9efd1f17bb5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2655fcae-6f22-47bf-833d-b8a1b0dbd2cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3fbc99-8eb4-4078-b0f0-86f54a1b3806",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab04a70f-f6c9-421f-8a28-40dbeaf7790a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0632197e-6330-4964-983e-006c9e2cc986"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8bf7df0-c77d-40b0-b6f2-1fd90365be89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd74ae1-b234-47d1-979f-d10bc35458c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ddf6451-630b-438d-be31-4a50e68b518f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aba1c48-6712-4995-97db-3375d3e28d90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "800e2462-7e7e-4c4f-a1fa-9ea7db839fa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1ca3fb-e128-405c-a0e1-282b36b50adb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3591fca-fcde-4eeb-a3c3-9eac15980306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252b2ad7-c352-4174-aaa1-a399d1a2d99e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1174ac6-468c-4eb0-9e46-c93d61fd8815",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c3a01d5-4727-4911-915e-34e720fc43e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2309fb8b-dc56-4da2-ab78-92c4be233395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "501a132d-0ae4-4d08-b4d2-af6f218b0fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f77a1d57-cbe5-45e7-bfb6-62e75076de24",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2539fb-9fe6-4226-bfde-904ce5996486",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbac8e6b-9969-4453-9e51-848490368c85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b17800e-d8af-47f1-89af-891e472f4293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adcc6a90-0a80-484e-95cc-0b5f3f2ea14c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de5135d5-6842-464c-9297-417ae4c8f490",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82565504-66a1-4d04-b3fb-07e8b2d90b1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5361a8a-cb52-4744-afd1-adee46908f80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a0bebce-0bda-4ab3-b5a2-d438cd56da74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "394aaad0-d93b-4a0f-acce-513b285517d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a9b74c-1f7f-4de0-ad9e-a543ad4ae92a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e800ef86-ceb3-42e2-bb52-4d0f2181d3ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a01b09b-066a-416d-bb51-5146e35c9ac1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b244f2d1-2f3e-46d5-ac1f-2e51ddbed6b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcc841a0-6f0a-4afe-a15c-c19b7a70b69b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ebba49f-d713-421a-9ce7-0960b6f683ac",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b64c74-f6e2-4147-9293-82a783cd65ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7ba9e69-70e3-45da-8eb6-a91fb1468a03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8304c70-0506-4301-a727-f36a46ccdb27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f5b3471-e916-4241-be7d-4eb90c93505d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93c6b48-ddca-4bb5-bf6d-4a5f1186892b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c2497e-85c5-46bf-966e-c53115b258a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46d94c24-e9de-4a89-ad56-74cfb7a1bdbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd05ed8-ab0e-44ec-91c3-4405097c9d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "780bd3da-5d00-4953-8aea-4c8f610fd887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e5c4a0-db63-4eb6-a410-a9b180a534b3",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3ee5be2-ab39-4902-9aaf-1adcfdae0d8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d26746ee-51ea-4f46-b29b-26861bc118d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2778113-4214-4ebe-a562-9e8276b37553",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9468c0dd-f025-42ef-bb49-5a4747ec23b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "803bb977-fbbe-41c5-b2b3-6653f48bf03a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43eb0388-15de-4866-8f80-650418c3e263",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3107747-89af-49e6-ae5a-c81def04aeaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f6c56a9-c457-4dfc-b049-8af35ac76415",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d967b002-1b86-4adc-a5f4-db8c59eeca2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "105d61ad-6dab-490b-92b0-ad8e41baa098",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e827a0cd-983a-4b85-b2a9-dcf8a0f8b116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cc73012-448d-4c24-9147-d466fa5f8fe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "705b1a9e-8571-40d1-858e-6ad8b7abd888",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fb657be-0b5c-401f-93fe-16206b3bd1a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a19af50-80ea-4c5b-8623-7a53556b3cd0",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a052f3bf-300e-45da-ada2-adaff43a4bdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a50cbff-d8d6-45b5-9663-9edb26b462bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "289701b0-55b5-47d5-838d-c7e3edb447b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0da3a78-7d8f-42db-9e6a-2b4623a9b66d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a5b1524-187f-436c-b5ac-796c2649579e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6fbbc8b-f158-4853-8173-3ad71cb06bc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6c7880d-906c-4a89-a7cc-24df9ecccfc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c10d2dda-e0ca-4bfb-a85b-72108bb31319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "414bce99-d053-4839-be5a-0308e0da9d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcdcac3b-0f0e-4f1d-868c-b98a31789cea",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feea2ab5-1dec-44ee-9367-202ef9e1945e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3931a976-c7cc-441d-9712-28bde186c8c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e160ea-ced5-45ae-85f2-e0d1c177a8af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ec946cd-0743-45a5-b7b1-ae6d9b2294c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193d05b9-d910-492b-b62d-38d2f453c698",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8782280b-f1b4-4782-8e13-ad9cbec60b65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52cd509c-147d-4c93-988c-c58f06dd87ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8215fd72-6ad7-4f0a-a96e-0fdb7b712732",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2984bd9-9cf8-4b52-b6c3-93996f0fae72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a6b3ca-2d64-46b6-99ab-f0433b0bec95",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d1c3d4-cf1b-4a10-b34c-63b39d84d188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0023cdb-5599-485c-90a2-08595879c61b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5e1822-3481-47c2-8c4f-2b735052e284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a300d89-8bc0-4975-b892-fcb1a06de268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7917b89a-a76f-4f28-b3c3-403c0b7af5c4",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ebf1eff-403e-49dd-8b49-dc64c6eec501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a03967b1-f5c3-43f3-9517-e804e49d3a80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ce0e0b-61e6-4aae-a39d-d8ce15cafc14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3605d3c6-00e8-4776-9dc8-4b8ce5bc21e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21768f3d-a889-4e45-b82e-8ecb93e91323",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22063ac-99aa-471c-8041-5e0951d2f667",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d9437f8-f8a0-4542-8653-7e12221a320e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea8f500-d825-4ca6-90e4-129501ea734a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5958fe9-0f73-4fd1-a836-a457ae095137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e12b6bf-aac5-452f-9f71-426d736d917b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8adfd5a4-712b-4631-8b0c-20a4464e3119",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba6a37e0-2f1b-4442-8fe2-f154ce143c65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c941b26b-2769-48a1-87e6-eb1e420693ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7a1df30-02b2-4117-94a5-3df54a868231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f6d704-b5b5-4a75-aa37-72a6ca599571",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b97b86a-4cba-419c-929c-21dade06505b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "453e0c65-4d12-4eda-8784-037c4eed9c03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c112c244-5a78-42d4-ba7f-38f9e25c2a11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a6d12cd-7665-44c9-949a-0f3aa08985f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26cc9bc9-a187-4ae9-bc7e-faccc727f8bc",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af867f4d-cb9c-4b6e-a992-a449721ce055",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ed84ca0-b1c7-43e4-80d7-492d7a4afe71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3afec1a-8669-400b-a42a-909cbe52a8ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb6f1791-2ed3-46f7-b9de-46e697a2fbc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20a8dfe-a052-46c5-a2aa-f977769dd650",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5d1634-a578-4879-ae00-6fc92a8f1166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "493b0ec2-f800-48ba-8c23-76e7dd3cf113"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6338a6af-5d41-491f-8bc3-4e251544488b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "919fd13a-8607-4bbf-852a-bade08b5cf2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d269db6-3cd6-41b2-bb40-8964c80b65e0",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dcf9154-a4f6-47b1-90f5-5f4d6b301286",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8979721b-36b7-48d9-8c2d-51de84b669c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b9ff4b-576b-48e0-a21b-7af68a464312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08854686-f047-4870-8eab-5ffd0445483c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2d021c-f601-4f4b-8f5d-556c1c7ccffa",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0b0d37-a2de-4a66-90f7-bf6db2a000e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "283c84f3-fd7d-4808-b51d-ba136d45af74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "434f5f5b-7561-47a0-8912-b8988eaa8426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "778b465b-73b0-4a22-b9ac-91e0a7f07c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24a67b2-9704-4d8a-b4fe-749b03b44d37",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5dc0045-c0f1-4baf-bb0a-1bc6c38f1f64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c8f1d83-c66b-478e-b1b3-578504f9253a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa3a931-74e9-48c5-a40d-697e3c2f4b1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "371d1629-61c0-4a99-87e8-03c6dacfa4da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9608608c-b881-4702-9492-a82c9721e318",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af9b641-61e5-4c6d-914a-0fa19cf51da5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15937508-4a25-4756-add0-40bb4368d557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93fcaa02-0f6a-4dcc-b7ee-cd98df9f2c41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6503999f-3a34-4d35-b020-38158e4b3780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e9ed36-5787-4e8e-ae35-47ec9cc79e14",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca83aac6-dfee-4403-87cd-e12a8a1e8a1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6e4121b-e74b-4fc2-97b2-0f38d174ac23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae13ac92-fc0a-4ff0-b28e-7142068affeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "962f62eb-32f7-4fe8-8244-a44fed01f0a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61666514-6faf-49e1-823e-e1c826d34519",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd1d1a3-c90c-4455-8f33-f74766e80d0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7f4596c-1b24-48bf-9047-859a53beb2f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48c5eb2-77cb-468a-9418-bb83c1c3c26c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b6e21b8-995c-424c-a327-c792e3cae053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "954897e9-36d6-48f3-84eb-a1126af80ee6",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44699029-0c3c-4b53-8f95-def8ceb5b50f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "553b721a-cce5-483e-8987-2a7e215d4f2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "525da706-8c9e-4c6a-be80-7d322b5cb073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5330a819-0c28-478c-a953-492f7ad99db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b28692ac-e34a-476d-8446-c9cc7069efc7",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cccd64fd-6d41-49f1-9e38-e2fd02e6283a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16a8432b-a935-4dab-bc58-62ada48f8826"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d5dc27f-1f31-490d-b147-e61c7f7ce31a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18af25ca-e8bf-4012-9771-09e34b7d74b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb52fc14-c823-415d-b203-8fc5c03c0b18",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e3c1a1-903e-43d7-aa23-bb9be891b012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fb51e8b-ef88-4948-a543-649ba2030365"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b8a916-044e-4c93-8c18-9769e1de9d60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10106ad6-d2db-4744-810e-305102e9db2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a007e468-b1c8-4d6d-90d0-8989083da65c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e23b11-5def-41ab-94a8-85cc88e7094c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e8c69d8-7c1b-4359-a1ae-81d98e55bb49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b69df402-c5bc-4c07-a02e-ab4ae0f4c01d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba661a94-ca1d-4376-9a50-f6dbb8ecbd15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152353fc-5438-488d-aa98-1bab344f0c61",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa834e3-4eb7-4b7b-a060-e2b458476d83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "606f33ea-e251-4a6a-8ba9-26cf27edb304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a53d3b1-3b33-4f8c-b3de-dfa817185ba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f48c05fc-f27d-4e00-923f-1f0e9c976ae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0883470e-3cf4-4951-a4a6-64a7ddb8420a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d744fd-5525-43c5-ab23-0448e0b85651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4b1eb43-8e63-4c29-badd-8b7172d89417"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e17639-d894-4710-b9ec-ac735727dec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1900c84d-4928-453e-8283-02b33d9927da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8be39a-6db9-4127-9ee9-ca390ea2c79a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb34f187-c097-462d-bc4c-3a83fdd008a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93504480-54c5-4d2c-9a45-ba758fed2546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c7f0a5-a7ee-42c1-9f5d-3e5160cafd09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19a02a97-adf5-4f81-9535-bc5d3986ef07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38cbeb3-dede-4d17-9f05-4ca73dc1e91f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985f78f2-4adc-4eb5-b6c7-174ce47f8e53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d9d789f-e4cd-4943-8c10-471127c8934e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d975a0c-95d3-437e-a6ee-5dec7e004028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae557bb7-0ebe-48fa-b8a6-6888adeb11e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad6a980-00fe-4fae-a581-48881c008f6b",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06020fb5-36ae-41a8-b610-09928c572ee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "685b9547-cc35-4bb1-bf53-9289aefd42bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f96fa9b0-204c-4ae4-964d-c0fce483247c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caba7664-d9a2-4b53-ab41-a51d20cc48d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba26c310-9907-4565-9c55-50601b4d0f4e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d206fea4-7373-4356-a6fd-93f87b40465a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad2b7906-e4dc-4228-8c40-f55cd8bccff6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc25842-9544-448e-b24c-981fba54561d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20821c48-4212-4cc7-8146-36717e563e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d72558-6b17-456f-ab31-678600764581",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de25caf-c43d-4105-98b2-0035213e1ca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d7db76e-8dd9-4db7-8510-7a6397611da5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de247734-d2e9-4d34-ae12-dc4daef2b63d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "365d352c-114b-4e50-9643-215015d3a03a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59da92b6-1ce3-4207-8431-d472213dfd6a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83806054-71f6-488e-9fec-4f019c230120",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d327b098-55ea-4530-8625-b24a814fbb64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b73ff9-8e39-4ba0-a2b6-ec64975469de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03c0b3ab-a8da-4999-8438-aefd8bcbf96b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85c1f26-ba4c-49df-b1e1-5f8021a74c78",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a4a0aa-0dfd-400e-b1e6-874ac6db3af8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1204a326-133b-4ad4-842b-09397f2e065e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a079e82b-80f1-4c8e-adb9-8ed8f0368ed1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29779123-77f6-41e1-a82b-a527bee2640c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b268ec1-5dc5-408c-b5a6-6c0d9088d75c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1454cf-b8a7-44f6-a81c-8abe2525af6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f4628c7-40be-4321-9a42-2e60ef106501"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d75733b-1148-4b24-aa0e-78cad33ddf59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a483f97-2fc8-4294-a85d-666c71ff7745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28e4446-9bde-4720-a868-e2f50e95e9c4",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b69d21-a12d-444a-8b80-b6e6680a6d12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "151cb59f-f5f4-43b4-913f-a287426d1732"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14498f3f-c70b-4986-ac18-97f189b54fcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9f5116b-2a8a-469e-8cef-54352681d65d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "422ee1e2-ac4e-42b5-b721-2adf1020877a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12461227-a3ce-4e30-bc1a-3e6622e2b5c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4e618ea-77b5-476c-9c95-b885e3a18279"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ef422e-80f8-4818-839d-c1705c2a99d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21af5392-24ae-4ac9-bd20-4222106aa6e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7258ae89-6182-403f-b7ff-02c0771298af",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04fbdf36-eb92-4725-bb94-45739feda09b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8ecee2b-eeb2-456e-9abd-b90fc8e5f65c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e8c0242-b4be-4f82-9382-6d3d36de2eba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd3c440e-4566-412c-9286-5a0523f2bafc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b60856a3-4c6a-4d30-9cfd-1d2e77737f27",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20fd7e38-7875-4507-9d6a-4da0d2243376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adc58aa5-2fad-445a-bb30-b158873fcdc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4fc0028-c3c3-4927-999c-343199d8c903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d8ff017-8e81-4c10-9c93-c9a72c4489c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73274f5-8ad1-4714-bcde-ac64896ab886",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "042b1110-6373-4218-aabd-ee0afa6901f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cd9e2ec-76d2-4337-a6eb-881d918b45a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f14b9c-d520-473d-a8d3-8d58dac9440c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c83b5b0d-764e-41c0-ac35-992a81d196fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5562164-a9e0-4959-9651-bc30950b8829",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5296d30c-abf3-4ee8-84df-6d93d44d7055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "810a331b-8245-4604-bd39-dc0caea4b3c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e220141-2f30-40f1-a6b1-37043ab6e1a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c50c16f3-2910-4fca-b866-a6eb77203012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f71842-1a6d-4d0f-bfb5-93ba05b25e06",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b11b637-9d9e-4906-96b3-89222aeeb862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab124d5f-0c22-49f5-8b1a-6b192e15a10a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4691734e-2b82-4f9d-a31b-79cbe9f333fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "128fc313-7976-4c34-beae-8fc87f2dcc28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4104892-394d-4e67-93a5-ffb5caf4df9a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed7e5831-ae83-4748-b13c-56990b1d5f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ea81b3d-07fd-48e7-85fc-b7f45a01d462"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51fffb63-c225-4f9b-a04b-802ef09534a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a475e45-2af7-4460-86a7-64c6d8b4d7d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671db29d-0247-4512-815c-5f765b5b72c4",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862621c9-8471-4ea4-887a-3a2d85534119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5213ddc-60a5-49fa-978c-a8d2f1711ed3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8278be4c-fce8-4567-88ba-585eb5619d8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e817592-30fd-4c9b-88e7-c5a4ca6e1c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1b094d-8057-4628-af4a-e92231a5a40d",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9d2a3e-597d-42fd-afde-f34a900949b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56fcf544-cdfb-41ca-a9ac-0c8c38b6ed82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c063622c-a9d6-4b18-8318-58e4a0a001a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14438ac9-f980-4424-91da-8b4d6786e17a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536a25af-3d53-4618-877a-e84f600bbbbe",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e55a8595-c2c4-4870-86fe-a09b3c4e42ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "359ec36a-bc4b-4413-a66c-ea07d8c8ec28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "833aa08a-5be8-4b6c-acee-93daed472339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79c79fcd-f7e8-4f1b-aa91-886113b30eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3406b881-7377-4559-8f7a-f7926c2f4f2c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c2cbd3-a4af-4f7f-b2bd-915cfc2d5c54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b186c98e-5f28-4b5e-b39e-7a60d19a952d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "246442ac-0f21-4066-9174-57c749501017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3026642e-8c9f-4bef-bc86-305564d039fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603b4f5d-3360-44b8-88b2-9ff75aed46c0",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c01c35bb-3a25-4633-937d-8689dd65eaaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07653354-1b39-415c-95dc-f06a1fa7944d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c20f5ed2-5e3a-4364-91f8-a33183f660a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d641137-6cc3-43ce-af49-69b7379e2f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e578a8d8-1eca-4554-af40-c77ce936879d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bfc97dc-dd5a-4c18-9e32-48d19ac90b88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cf540a2-f68b-4dfd-8627-228c96a4ad6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "733a66ab-0a98-4730-aedf-ceccb5594394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae39c9f6-44fc-43cc-ba22-abb133bd088e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b9ad54-204b-4258-91d2-70ea9e091d52",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd566b0-0e28-4b66-afd6-87c6ff3c2e78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df989080-acef-4f6a-979a-16925922b126"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5911141f-b00c-4d22-8be6-7c7901744963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c539b447-1a86-4094-ba6b-163c226252dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb2cf25-2724-4822-900e-a0d788b7e80f",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5597d529-3440-48b1-89ea-ec2ebc76d614",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36d6952d-b69e-40c8-a011-b19df68049bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da710877-b57d-49fb-9706-f07d9743e242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e911aec-99c7-42c6-bf18-1068905abf7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e45c9b3-2ce0-445b-8092-da3cbdc9d6be",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f28aff-a494-4f8f-87dc-1461722a6393",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36da3bd8-f9b7-4651-bbb1-d95631541e6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e031505a-f7ac-42e8-9f7e-b4c97d13c8ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96ac1500-f02a-42ea-bcb7-a3240cbc6c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "701bd9d3-4453-48cb-904f-d17f0c6ce8a7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec8b9c3-9660-4947-ab41-ba35618a8407",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08b3949c-0c61-4f15-9ef3-f77d5386f9d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "267eb50f-f452-4a0f-9051-cfca2cf7d013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93352007-ee84-4357-8196-116b91e23fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1ba3d6-5cb2-409c-b1a7-fbb0fc9a9b47",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca0c3660-53f1-403f-9ca7-135513bf52ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71d0377a-362c-4b47-bbf6-f04a2ab850a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46ad213f-36fc-4b92-b7ee-2b0cc6754d81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0dd849b-3519-4a24-b189-cb639cbcebc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5651964c-eb37-4da0-9a19-5e491a51ef52",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb53528-d8db-4a88-b072-09e3f93fbacf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ad8483e-0614-4a22-8477-e9df8df1c4ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be38643-f06d-49bc-aae4-57f56be2d052",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d07bfdc2-f961-4686-b894-0f656a09e2e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a039e8e1-6300-4c05-9271-780964dd865e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c8fa7dd-f555-4a3e-9ee6-73b4b12ec519",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edb8cf5e-e98a-4fc7-b4de-4d990f061191"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3099c6cc-997c-4553-96cd-bb7e0f09fbb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86d7e573-0ecf-4321-9ce9-abf62b7669cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "052a4164-cd6b-4b78-b66e-b22afb57fe26",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd643fd2-bc50-4ac9-9937-acb040567350",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f02394c-9974-457f-ad27-7194b96b7b43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89875e66-0ba7-4436-bcfc-06059e937790",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b91d0932-d1bd-4b5f-98e0-6abd5e4ad16e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1715cdf-03e6-4bfd-8000-015160ebeb9c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72effed4-7f04-474d-aae3-7c60cea5a9e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ecca13a-ca79-4f59-9d20-e7d75d7fe130"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76683098-9a48-4290-afe6-394bfc347763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0857e2eb-8ece-4d95-8db8-940671a01055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863d063d-f603-4dd4-ac06-e6ffd88bba8b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d3d9bd-4416-4b88-a6a8-78254f52025e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0726de75-08e7-4e3d-bb40-1027c49199c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bbfb03d-3238-4e2c-bf65-eb91483bdc62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0101d343-de98-4a05-a729-5d2b16af267a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da7ff03-586d-4874-a0d4-b9f6007db1ff",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a8b527-0276-47aa-a36a-06d090e6ddcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f46f16cf-b570-4baa-acc4-21261eef32c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ceeb41-3682-4bdb-a91a-b5f994df0272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9716e7d-dc43-4f68-8fd0-2ead6b447123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444feac6-ef55-420b-ac50-47f27733377f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5adb92-e1ac-44d3-abe6-9241631cd0ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a568c34-0877-4587-b34d-b33a0d0dcb4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33fb9f8a-e6cc-40fa-9cc3-e8a8651d7701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1929a8e-6ab2-4c82-bef4-c234735518f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5865be9-da0e-4242-93ca-779729678d81",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "499ee6ba-fd8b-436b-9a63-5250b05b0300",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99ec30ed-acde-463f-ad36-c3e063617bb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae0dbfe-d37f-41c0-b35d-2dcf3f3cc16e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf12cb57-bcf5-4c02-9d7c-d7857eb3be6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532002a0-06d5-476c-bb44-66b597a4fcff",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b806435-696a-4053-84e4-7c3584dedbc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8e1b3f2-8ee9-4ac4-a93a-5454143115f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4bb992-e815-4dad-9828-cc54fe863397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c516716a-87d6-4ac1-a2d3-dc9312aa2dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555cba61-4af9-4ed5-91f0-b1584485f3b4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04850c7b-4b5d-464d-bbb8-ee4661f6942c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69de81d1-98de-4b1f-88c6-536a6d39ab50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "065ab0b6-aea5-4504-982a-7789404aa841",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7387441-d8fb-417c-9075-d9124b1c9b67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7243289-d16e-48ce-a007-8ab399d151e9",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c5442c4-4d76-4c2c-a6a7-aa60fcdf2505",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8841266f-eca5-4a76-a1ed-b12d41f4c217"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c7516f-6119-4ae5-85b6-f28dd2263961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0378e170-7097-4365-bbbb-ce71e15ba900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80cf201-06e7-4844-8901-66a4fee7b5e2",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4abed29c-6119-4117-80f7-417ef93cd072",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5422d70e-ede2-4276-a5c6-0f5416040abb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1992026-9f36-43f8-9fea-59348f81b929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e91b4375-9a92-4eeb-aeff-560a4c130bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca01bf6b-7cbd-4fc3-bb2c-69d4b1cf12bf",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5479f6d0-c201-470d-89dd-c550cb50a35b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5929d7d3-4ac8-4717-8d1a-b8ea24d485fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5eb0e45-6263-42b4-a5bc-85c03edf8875",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6486678b-f919-4a78-a9bf-daa6470786ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52d67ca-b5c7-4916-b366-7deb6fe288b8",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca6fe3e-cf7e-478f-ab3d-24f62aa3233e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d4972e8-a99d-4977-bac2-0ee60efc024f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b28ad1-c4f0-4b6d-b631-7c1b4b0fdb77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d61364e3-60da-425c-92d5-5aabb6ac5d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0ec1a63-8b9e-425c-b1bf-2198f56f010d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea1879d-e386-4694-831b-ee784470bea2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e282fc54-1046-4bc3-a84a-6fe04598681c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b352122-ff82-4e58-9714-302618aaec4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae2533c-fea9-4069-a0a6-19d919e730d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "420d250d-48ea-4d13-83a6-4cb86ff0db24",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e18a5f7-b4f7-4f7f-a75e-018983380000",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c52127b-e3d8-40c9-b12b-5bc2227bbc4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dca7de9-2c7f-4916-bb2a-20d45e559f70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d4ad91-3544-422f-9589-e77ccc604214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c289d4-9d79-428a-9a03-34f62cf2d3a2",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ebb30d-d6d7-4677-a39a-d9acd5c41c46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1ae3f94-0aa3-4605-ae3e-5d3b895c7124"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c46e94-5271-498f-91f8-a9048f7fab18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3af97c38-f15a-461a-85ba-29ff95aad3a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef504a0f-9587-4949-beb0-cd0de45e21de",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "809ce6d9-6f72-46d6-86e6-425ee9fe49f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "783c693e-5cc8-4003-bd9f-9301912227c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab0b9e17-24ed-4273-9e50-26a29dabf25e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c85d278c-ebe3-4d8a-a62f-83ccfa120e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "821d09ea-b49d-43ae-8065-819956b477f1",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147b0a27-1e08-4073-bf79-a1be6151d238",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51285706-b3b1-4067-9730-06f5c3966f7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b85c79-2db3-43c1-8b5a-931ae9bf6002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6413d86-761c-45a1-8943-eb13926d71f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c99986-b891-4bae-9bbc-ad80da63f1af",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61592e3a-1371-42d8-aaa6-ffd2d522340c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d53be0c-f291-46d8-aae2-c28df0e67baf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78263164-c2d8-4f2e-b560-8e30dcd4073f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f025a4f-8c64-4fc8-a976-e47e1fd8b8dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e556c295-115c-40af-8062-48b79efb5664",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b8abe6-0d6b-4073-83cc-640f6e341318",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8d166c4-abe4-4cd0-8e11-4d85e0a72e03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb57070a-26c4-43c3-9320-2a5142a0ceec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf81b30b-cb93-4b89-b944-062d4a052115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805e5dea-523c-4b16-9437-fa4743343db0",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012ae173-1b1a-4339-b35f-86cabe5f9fe5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9523e195-1c21-4884-a66f-eede08be5fd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e89c23f-fea6-4585-bcf6-eb4bc5398956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ebf5f9-6768-440f-bb54-90a50bb81ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e90413a-220b-43c8-9332-54113b878558",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82e6f0e-5ed3-4e93-8185-fd7eee321c3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b3d9f6a-8eb9-447d-b40e-a7dc24d73dda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2a674e-a671-48c2-8d09-ab21a2448e1d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82333d32-9329-4433-9b53-ce458b2d5907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99262b0f-9037-4cc8-b511-343f0e44f93d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b876bf-efef-4fd9-8fd6-3f5575ebd5a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63ff7a20-430d-496e-9481-919a38836fca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "353f706f-bb3d-42ab-a1a4-b71ba4255684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d190a1b2-479d-4609-8950-3ae750d89a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d191d0-db08-435c-9b6b-7a5141a2b174",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb9f5e57-99f2-43a5-8c93-82a4308507ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b212e379-6141-448d-85a9-ab26e299c23e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3990fec1-6ce2-4902-95c7-6a4547eed2a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b585907-07a7-4db9-93fc-2f6c0876709c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be37f842-98bd-4144-baaa-9ab21fc208d2",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba308f9b-360f-4eb3-9423-f5a8ee02f52f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb6ff006-1547-4f92-a8ee-ef2a695b65aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e25a61f-d5cb-49cd-908c-b7c90e14178e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "390d99a0-b1fa-4f58-8c42-7d4acc2e6886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6590f2c4-1434-4712-b75f-668a392dd281",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b4df484-ca90-414c-95d4-d05afbd571fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01a7425d-5384-47b1-b768-38c512c819b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdde786f-f599-45ce-9cd5-367a73a82856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65308e06-87c9-429b-b8d6-82291f09dbe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd72013-0165-4e7c-a192-ae4ab90297f5",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d57d67-beac-4ab6-9182-03835311f2ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e0053c5-e84a-437b-933f-3a1ec86601bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98328622-99e6-42a2-9a4c-0b5fe1f835d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e207d829-d2b2-4b50-8254-deafb5e7f2b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "791acc74-cd33-4008-8e08-4e52a84be907",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa1f3cb-baaa-4d60-a11c-b1d64c3e953d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d1aa2b7-4d8f-4dba-8afe-158018b5fafe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "374a7e82-163d-48ed-b0c5-23c5fcb3f81c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7db2a4b5-ee3d-4ad9-903c-e3dadd51a972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "753c5941-2634-417a-9a65-a59a91c05977",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d5f50f2-2745-40ec-bb45-35a0675b226b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed9659b7-b6b1-476c-b148-8965da3f3444"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "258b4c83-d1aa-4120-b1e5-11c19d892f34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7f30aeb-2203-4c98-9cb3-2293f97c92fc"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ecad33d8-2e50-4ae1-b1fd-02286173107c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6a8dbb8-ae0f-4ca3-8acc-06fc794d0037"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ce9b571-b4d8-4697-8b1a-256e4ea9f244",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fbd1d3a5-f6c0-43c0-9a66-9dbb0e68ae47"
                    }
                  }
                ]
              },
              {
                "id": "36c2dbbb-7714-449d-bc76-4dc24dd9c1c3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7cbe74ed-3716-499c-9f73-68555e0685ed",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce012b4-828c-4881-aad4-2906c3ce5079",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0bfb7872-edaf-4cca-8129-1be46f010ab9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2cd89e-e133-416d-8f64-4baec86ff3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae739454-cd75-4f18-9966-d350b82740d8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a535fda-6a8c-46d5-9d5c-2c60ac2824df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7f39f12-9b17-480b-9203-3f31562e29b6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9404b033-1f85-493a-bfbc-b8da5ef4a277",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3b8ce5a-ebd9-40dc-bb37-376caad5c192"
                    }
                  }
                ]
              },
              {
                "id": "f52d7b3c-15c3-41a9-8e3c-e11707a7bcbe",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6dcb2a06-2e92-4bac-8038-164137c158f9",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70cd89bf-1a98-462f-9930-569a960ab97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "c06c63bd-d8cf-492c-8dce-859331eb4df4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba4e2e35-3844-41cb-b62e-662af688d9f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8bb2b44-9456-4342-a362-136295d13f94"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "33ed89c2-21fa-41f1-a512-3b8e3282525c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "641e4443-5489-40a0-9811-4719a714a11e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dee78b05-5343-41c1-a1e6-5f55d2ee13c0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "267b8596-9751-494a-92e2-1be927a20ec1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5160d59-19b4-46ea-88da-0888d6567996",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6dc96f59-7353-4a3d-aba4-9b09c170899d"
                    }
                  }
                ]
              },
              {
                "id": "2e0125ef-dba3-489e-8656-698fd7c3ceed",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "05382b6b-524a-4191-be48-f71acb45bc9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7ef26851-ecca-422c-a554-d86e2c1b453b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9fa8fcb-bab9-4970-9843-fdaf31b7e9e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62632f0e-4dee-4df8-9839-156f04be1a01"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4a9022d-aa93-4af2-b07d-5ab345a59320",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8de87f4a-0ff4-400b-98ad-8b4feae044c2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cada02dd-45d6-4734-b298-7adc6636cbc9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8c28dc63-944a-419c-a1da-c6496ed4a65e"
            }
          }
        ]
      },
      {
        "id": "d9509a7e-4340-4b6b-af0c-85c3a99be569",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "69a75560-5294-4e67-b961-08909a3f0e57",
            "name": "Negative Testing",
            "item": [
              {
                "id": "363c9b37-5cb4-474a-b0f3-6d6c8b5f20e8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "caa0ba8f-9b20-4c72-994d-46d2e004ea2b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918858a6-ee3c-482e-b5e5-15b0b44303b1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f6d13faf-4a1c-45dd-9c36-18536bbc5370"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a07f20-7c09-4a60-b494-c961323fedf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69647704-7d19-44ce-9ffc-44e6596ba61f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "297b79cd-bc51-4330-b3d9-77d9c88c698d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c83827a-4482-40d2-81a3-861001c891c9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cbab31e1-6663-49b6-ba03-d3d62aced2f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37e97fd8-7041-4a0c-b18f-a9d08797a1a0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c1816e2-deb7-453a-9c5a-77ec5a3ca569",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "787c3162-820d-4c96-9b1b-8bbaf4fd0566"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "42f661bb-a2af-467d-910b-8b32bfc1c18c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "10fd3b84-5e94-4de2-90c7-b5a0ee606fc1"
            }
          }
        ]
      },
      {
        "id": "5984d93d-fa4b-4318-91e8-7deea2ff4ac1",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "536225a6-c261-4ddf-882c-4a1b6569b7e6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "44a53cdc-a84f-455d-a721-a320f2fda4af",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4972bbe0-22d5-46c5-bd06-6f58e12d4199",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7f87e3-0f29-4853-8d37-214cf7950122",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b02e6b40-e7d8-4e48-a295-58aa458da3b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d7d5d7-d8bd-4f02-b127-6ee2e8b0bbe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db6ed351-5e3f-44bb-95da-640e22f00e54"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f4d5048-0645-4774-98c3-000c36d73595",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45b5427e-ba08-4273-abed-a4eabb266533"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "56a9b53d-c95e-4777-870f-4808ab073240",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c299f74-e4ed-4f0f-95dc-c29a0f0a11fe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee068372-4919-4b39-b6d7-96e4fdb3caf8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "89c7f554-0d6f-4d65-8865-1ceb161be11b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "be6f5d7d-5867-4795-bf4f-e069832597c3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6649eaca-cdde-4aca-9b73-4d076f6cd71e"
            }
          }
        ]
      },
      {
        "id": "efd174b1-a820-4572-8686-b60753167342",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "682e64a5-44db-4693-a549-ef299b9cf427",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2bee8a02-084e-4bf0-83b0-6e3ee2abd21c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4c64071d-0207-480b-a8f2-634284083611",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e3b99e0-f805-4f47-a864-e29f29bbfdea",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db4bcc2e-709f-47f4-a44f-f0b687ed3a95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "192ca774-a9b4-4965-8a6b-fe07acbbe586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d8bc1dd-9f9a-4efe-b6f2-c23128852d9c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0da2637-dd2b-4652-b580-6c110c2022f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8def0e80-30d4-4684-bfe1-e4a34069de38"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c1f22c6-924c-4ffe-8745-dab85e0294cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0c733eda-5dd6-4834-9cb8-7a1881ebbee3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c15f1286-87da-42c8-ada3-a908ea3399d9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "adc20511-3463-4075-9f60-f6784efbed7f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "73daaf00-f46d-4657-8a8f-d57ad80ff6f1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fffeff94-bf80-47d0-987d-e82fe7a22114"
            }
          }
        ]
      },
      {
        "id": "5233a6e2-dbb8-4e9a-8af6-24c02b5b883e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4d75e41-ec58-48b9-acd2-ce1b35bd4495",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "33ada69e-840f-4ec0-a38f-fb0ead7f07cc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d384372a-a497-4f8c-970f-15926bab7ffd",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d521aa3b-544f-4b5a-a78f-11ce246153ab",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63e2694b-3b76-410c-8eb9-c016032c972e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 114.42063492063492,
      "responseMin": 5,
      "responseMax": 699,
      "responseSd": 79.37387451266595,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1716424606001,
      "completed": 1716424643221
    },
    "executions": [
      {
        "id": "c20dc822-78ec-455c-871c-ae5ee4a0ebb2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "824d1715-9876-40b1-9908-c9ff4350481d",
          "httpRequestId": "d02c12a0-0966-4a1e-a1c8-1024bc54e400"
        },
        "item": {
          "id": "c20dc822-78ec-455c-871c-ae5ee4a0ebb2",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b56040c4-ae4a-4ff8-b642-8132a5f14bfc",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 0
        }
      },
      {
        "id": "11165760-1afa-4215-a842-f9fd33fcaf98",
        "cursor": {
          "ref": "be3e0d78-ecd8-4782-bbcd-b6268063d1fe",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "04286601-eda7-47ee-8f1a-4bebe68d2c23"
        },
        "item": {
          "id": "11165760-1afa-4215-a842-f9fd33fcaf98",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "db8b8b1e-b1e9-4618-aa77-41f6041c3738",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "a67578e0-c5ed-4bb4-9300-0337706e89dc",
        "cursor": {
          "ref": "d1e757df-17d1-44d6-88bd-070b359dff10",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d7933b83-d14c-4be1-bead-f44bda5237d3"
        },
        "item": {
          "id": "a67578e0-c5ed-4bb4-9300-0337706e89dc",
          "name": "did_json"
        },
        "response": {
          "id": "9ec8a04d-5bb2-4e88-8acc-14c16f8f929a",
          "status": "OK",
          "code": 200,
          "responseTime": 241,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9556cd-1b27-49f5-9d40-ccf262520317",
        "cursor": {
          "ref": "e0e0b1e5-0ea7-4b93-a0e0-040f35aa076e",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "228ae6ff-fe57-4d20-9681-68c80105daaf"
        },
        "item": {
          "id": "1a9556cd-1b27-49f5-9d40-ccf262520317",
          "name": "did:invalid"
        },
        "response": {
          "id": "f160c793-ebae-4584-b47d-fc18a6f5b3fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9556cd-1b27-49f5-9d40-ccf262520317",
        "cursor": {
          "ref": "e0e0b1e5-0ea7-4b93-a0e0-040f35aa076e",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "228ae6ff-fe57-4d20-9681-68c80105daaf"
        },
        "item": {
          "id": "1a9556cd-1b27-49f5-9d40-ccf262520317",
          "name": "did:invalid"
        },
        "response": {
          "id": "f160c793-ebae-4584-b47d-fc18a6f5b3fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18bceda2-feed-47ef-ac3a-1ef7134bfc49",
        "cursor": {
          "ref": "502f1e8d-2a19-4e18-a56a-db5229251e4c",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6bb2d95e-e597-4455-9ec7-2ffa445c4426"
        },
        "item": {
          "id": "18bceda2-feed-47ef-ac3a-1ef7134bfc49",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "61a39651-dc00-4131-9ed5-5bc2cd082002",
          "status": "Not Found",
          "code": 404,
          "responseTime": 214,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b56cc75-51f4-4d82-b30e-f274a5aa017e",
        "cursor": {
          "ref": "40de671a-9345-457b-a6a1-c77c7279e232",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "205aaadc-110b-445c-81b3-b805e54cd60e"
        },
        "item": {
          "id": "3b56cc75-51f4-4d82-b30e-f274a5aa017e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "adfbc12e-3f50-4966-aad9-f933d1a4b695",
          "status": "Not Found",
          "code": 404,
          "responseTime": 83,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21bc4916-98c8-435b-9a66-9a7b1b4df384",
        "cursor": {
          "ref": "d9bc5f4c-8819-4d1a-8709-4a849a8211b0",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b66dc244-562e-4801-afd4-3b445d63c1e1"
        },
        "item": {
          "id": "21bc4916-98c8-435b-9a66-9a7b1b4df384",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f9629188-6c5b-4b25-86e4-51bd4ff1e5c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e92db09-5314-4e25-8e5e-edcb4c777e9c",
        "cursor": {
          "ref": "bfc2e293-0206-4842-98ab-a0e1ca36e44f",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "45ab142a-f8bf-48c3-93ae-a167d78a32ea"
        },
        "item": {
          "id": "4e92db09-5314-4e25-8e5e-edcb4c777e9c",
          "name": "identifiers"
        },
        "response": {
          "id": "2c298a87-8c79-4433-bccd-e16065b998d4",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7244cfe9-b4cd-4506-920c-97b1a8c2f8b5",
        "cursor": {
          "ref": "8f5085c5-3b99-4314-ac7b-73da64593f83",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "298db20f-358a-41c7-94ae-5b610aa6f87a"
        },
        "item": {
          "id": "7244cfe9-b4cd-4506-920c-97b1a8c2f8b5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d66fb62c-0fdc-42e6-bb57-f17a898df39f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1839328-f77f-4a42-b03c-13979d94d7bd",
        "cursor": {
          "ref": "23c61293-8e41-4b16-8413-82f00fd45a93",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fd44cba5-ea01-43ff-886c-9edb5cde4d51"
        },
        "item": {
          "id": "b1839328-f77f-4a42-b03c-13979d94d7bd",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "067257ea-0204-4293-b8ff-1259bd5169bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca9a665-322a-4a1d-8fb9-e22668acef47",
        "cursor": {
          "ref": "57f62682-1dd2-4906-aae7-51002fe44946",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "044802b1-c652-4a54-b27a-ca61517f3363"
        },
        "item": {
          "id": "0ca9a665-322a-4a1d-8fb9-e22668acef47",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "dd441533-4966-4f57-9f74-b9985ee1d259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e44ab5e8-7440-4447-90db-00673599ed2d",
        "cursor": {
          "ref": "f7a9d3b7-0ad9-463d-add3-bf887a33b5c4",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "24103e45-396c-4f94-ad9f-164d7cc66f18"
        },
        "item": {
          "id": "e44ab5e8-7440-4447-90db-00673599ed2d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "31b4efc6-d2aa-48d2-8989-1b5ff80b99be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5fd413d-59c2-4d9f-9393-be87d3e04fbf",
        "cursor": {
          "ref": "ec23be64-f984-4119-aeb0-9e3b69bcf55c",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0d0359a8-6fbc-4e46-8852-70efbfddb83e"
        },
        "item": {
          "id": "d5fd413d-59c2-4d9f-9393-be87d3e04fbf",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d21e7594-252f-4850-a6fb-7968fc712390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c7712a-2f8e-4148-b77f-1940428fe152",
        "cursor": {
          "ref": "9be9f793-7ff4-41e7-ae57-e6963d1ff977",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e32f38f8-b623-4ae4-8e32-58a20198ef36"
        },
        "item": {
          "id": "69c7712a-2f8e-4148-b77f-1940428fe152",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a88f8b7f-5ad3-4eb6-87de-7d3f98e7c630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebbf8057-22f8-4e1e-89a9-263a254e5244",
        "cursor": {
          "ref": "f0b100cd-820d-416d-b9cc-01cafcb945e2",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e189a7b6-5751-473e-89d5-260eda81d933"
        },
        "item": {
          "id": "ebbf8057-22f8-4e1e-89a9-263a254e5244",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "94d935a1-5ba3-466d-a2ab-18b68085b522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b881da08-7147-49b7-8a45-0179a96a8368",
        "cursor": {
          "ref": "6d6df569-3291-45c9-826e-425f5f96b0aa",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "34735d85-9b10-465d-82e1-5853292081f8"
        },
        "item": {
          "id": "b881da08-7147-49b7-8a45-0179a96a8368",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0c0ce598-c7da-41d7-bedc-f2a084776d42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3a45b08-11c0-4a16-8d0a-92ffc09f89ef",
        "cursor": {
          "ref": "09c1d38a-4581-4ff7-822c-4b4cec6988ca",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4d1004ac-0116-4b8c-9e20-584e5711ed6c"
        },
        "item": {
          "id": "c3a45b08-11c0-4a16-8d0a-92ffc09f89ef",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "96c4be57-c9a9-4b38-b80b-86b66b848da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91f9afb-0eae-492b-b8be-e4fb1e45d097",
        "cursor": {
          "ref": "c2ae8d2f-fdb0-4169-bf65-0a3d1e4b2897",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b1168263-d507-43aa-bb41-b5259b03cfd1"
        },
        "item": {
          "id": "b91f9afb-0eae-492b-b8be-e4fb1e45d097",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8809f56f-c079-4ee4-8021-bd27c8264efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d943df6-b412-4be6-a9d8-cfb71dbb59f1",
        "cursor": {
          "ref": "55386d33-9a7c-466d-890c-89ded69ef1a7",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "19dbd804-420c-4b7d-a491-ea22ca3de764"
        },
        "item": {
          "id": "6d943df6-b412-4be6-a9d8-cfb71dbb59f1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "111f33b3-e66a-4cc2-bb2f-f4308c375775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03b358e2-bec9-4014-bd34-d3c88efd84e7",
        "cursor": {
          "ref": "cc222e9e-1491-4cab-a26b-cff803d4b1d0",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "99e6fdbe-215f-48e5-920d-dd990567b843"
        },
        "item": {
          "id": "03b358e2-bec9-4014-bd34-d3c88efd84e7",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0a31a55c-3def-4d61-962d-63191f4dec89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7acd1f8b-7ad1-43a4-8648-a9db7ac70781",
        "cursor": {
          "ref": "0ad8ba03-0247-4764-8a3f-5fffa73b51b9",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "183e901a-3148-4367-b0fc-d1a931efca1c"
        },
        "item": {
          "id": "7acd1f8b-7ad1-43a4-8648-a9db7ac70781",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "aa886ede-2b9e-4b64-bf0d-43f07eb1017b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c17060e4-fb44-4a16-af76-1f52f8699491",
        "cursor": {
          "ref": "27089734-4132-4026-aae6-07f8ca45cdb6",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fae0d090-f398-455d-8bc8-b2d26cb6893c"
        },
        "item": {
          "id": "c17060e4-fb44-4a16-af76-1f52f8699491",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a0d7631e-e65a-4606-a0a9-3db088f07f7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "075658e1-b5a5-49b4-b325-75180dcc8e08",
        "cursor": {
          "ref": "235a4327-cc31-42f8-9657-89ad881d83d5",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1e53a055-3bc2-40ef-8d97-0a6257277c39"
        },
        "item": {
          "id": "075658e1-b5a5-49b4-b325-75180dcc8e08",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "8719e065-474c-4b89-93a0-39a167544e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "796f845b-1b4a-4599-a6d5-8859047e0389",
        "cursor": {
          "ref": "f6f02b1a-010b-4f81-9b48-eec6918690fc",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6a7fb4d7-2c35-4618-be30-3613047647a7"
        },
        "item": {
          "id": "796f845b-1b4a-4599-a6d5-8859047e0389",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7c60ac44-b854-4d58-8091-e7c140415a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8626fbdc-25ec-4693-a9f8-4796c67a8556",
        "cursor": {
          "ref": "690b65ec-d15c-449a-a250-96308ee3686a",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3ee18cc1-5925-4db0-8906-a4a7562d6612"
        },
        "item": {
          "id": "8626fbdc-25ec-4693-a9f8-4796c67a8556",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0bac646c-eb07-4478-8cc4-8535677d9065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdce9040-6abb-45bd-a31e-97ccb25a062a",
        "cursor": {
          "ref": "c9b0bd50-0bdc-4b42-8de4-d43f31c09787",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "85e5880c-1fbe-4a10-8b3e-2c688bc4cf99"
        },
        "item": {
          "id": "fdce9040-6abb-45bd-a31e-97ccb25a062a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c8f1f838-5492-49d8-9e0c-14b56127485e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab1c034c-55b1-49f5-a01c-ecb7a7fdbfcf",
        "cursor": {
          "ref": "7ca6f1f1-89fd-48e3-a230-a936ffa6eb50",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5340daf0-cbb1-49f7-a841-5efb3a15ed29"
        },
        "item": {
          "id": "ab1c034c-55b1-49f5-a01c-ecb7a7fdbfcf",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b00a341b-0b05-4386-972a-bf66dfda0c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1e40c9-ac04-404c-976f-a7bc2741c0c3",
        "cursor": {
          "ref": "826c8c65-f036-4f13-b4d3-6f2b7572ec68",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e20a464a-f8f8-4d2f-8e72-843ef5a64677"
        },
        "item": {
          "id": "cb1e40c9-ac04-404c-976f-a7bc2741c0c3",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8c2f55bc-5369-4e5f-b3f0-7eae0b250d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df23333-d934-498d-95d0-d39e9494c03a",
        "cursor": {
          "ref": "20fa50a3-c855-4ee6-acc4-f2ec7a4715a8",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fa5ac449-4108-4708-a8fe-a8e42b10e547"
        },
        "item": {
          "id": "6df23333-d934-498d-95d0-d39e9494c03a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d62fabdf-1ab3-4464-bb88-eaf9777a77fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d769943-c9a9-4388-8b9d-91ed2e309141",
        "cursor": {
          "ref": "bf393534-aaa5-4d5f-9d81-77bbd2150998",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "bb8030a1-fc61-4906-9245-850429d56be6"
        },
        "item": {
          "id": "3d769943-c9a9-4388-8b9d-91ed2e309141",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2dd03d4b-c12d-4bed-946f-a0e80451546d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc439b7-f8db-444c-b2d5-55c7a63f153e",
        "cursor": {
          "ref": "62199a9c-ad90-4417-a96a-e7a52d8bcf7d",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "bfe8c775-8b48-4067-a3ab-c6559c7c3204"
        },
        "item": {
          "id": "8fc439b7-f8db-444c-b2d5-55c7a63f153e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "8326d47a-1be6-438c-b18f-1901adcf7d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358f9759-9917-4cdc-bea6-5c432539dbe5",
        "cursor": {
          "ref": "83d1f57d-9325-4328-a729-a9fdca116f97",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e386bb47-e422-4431-bc18-a91fdba5a62f"
        },
        "item": {
          "id": "358f9759-9917-4cdc-bea6-5c432539dbe5",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "42c8c3eb-4cfc-4f5d-9a8a-2da05f618503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be2229bd-e779-49f3-968e-bf4342af84a0",
        "cursor": {
          "ref": "c09d6b3c-090f-4abd-a47f-057d0c5a9501",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9b09617c-5bd7-44d2-99ab-61cd37ba983c"
        },
        "item": {
          "id": "be2229bd-e779-49f3-968e-bf4342af84a0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c88072d7-ef6d-4387-9702-28791cf17121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984e3d04-27cc-4dd2-aef8-d68a8d468398",
        "cursor": {
          "ref": "a5b0f395-4984-452f-b378-f5492b7ff960",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "70cfb620-a760-4cbe-b668-71763acfea47"
        },
        "item": {
          "id": "984e3d04-27cc-4dd2-aef8-d68a8d468398",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "894e745c-0f7a-4e79-bb41-f60fd2b209d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aaf2965-631a-493a-a09b-565c5461d2ab",
        "cursor": {
          "ref": "aa10981f-45d9-4744-b153-674ce4bb5688",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c853d835-9c29-4bd7-bcfd-dc9dd20d5923"
        },
        "item": {
          "id": "1aaf2965-631a-493a-a09b-565c5461d2ab",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1eff054d-32c6-46d5-abce-0128d7897bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afef2b6b-74f5-4488-890d-ed40b6f29c48",
        "cursor": {
          "ref": "1ca67491-7398-4f77-af8b-3ec7ab38fce2",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "bfcd1bba-77d9-4584-87c1-cf1b5378b5f2"
        },
        "item": {
          "id": "afef2b6b-74f5-4488-890d-ed40b6f29c48",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "8915c17b-2060-4ec5-9881-f5cd0ad89aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "470d9c1f-fc8a-425c-8b80-a2d62741a5ef",
        "cursor": {
          "ref": "b55da15a-b8ab-499f-9659-0360b7e56064",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "28153c92-6ce3-4628-ba39-786899665c51"
        },
        "item": {
          "id": "470d9c1f-fc8a-425c-8b80-a2d62741a5ef",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "463457b0-940f-46b9-a33c-b6bfa99b71ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1819fa93-b58f-4342-81e8-d3ea73e7b850",
        "cursor": {
          "ref": "6b38ecd5-8896-4584-9c81-2178a873b79f",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4d156ffb-366d-4cbb-a5d7-bd5ada535af7"
        },
        "item": {
          "id": "1819fa93-b58f-4342-81e8-d3ea73e7b850",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ab15e696-b008-47e4-8224-1b10295b48bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b19b66e-e376-434c-bac7-bfd108a14ad2",
        "cursor": {
          "ref": "2f2a3d46-3774-4efa-9cd3-24401e7cec97",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "12cec117-1650-4794-a5c5-dd772017cfca"
        },
        "item": {
          "id": "5b19b66e-e376-434c-bac7-bfd108a14ad2",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a6d3b46c-18a5-444a-9ab5-6c6aa358e0b3",
          "status": "Created",
          "code": 201,
          "responseTime": 699,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "676394a4-b1c2-4a03-a3c3-5c420c6c1713",
        "cursor": {
          "ref": "2c75427a-a5fb-42e6-990d-6c72411a5529",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c6a3a457-0607-4c2a-adf9-b29e15fac0c5"
        },
        "item": {
          "id": "676394a4-b1c2-4a03-a3c3-5c420c6c1713",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8405bb21-9e49-4f29-af37-0d7a4f196afe",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "54a4eb9c-c627-49a1-87f5-4af62ba69d00",
        "cursor": {
          "ref": "fb9046c3-1094-47c5-a0dc-eb7c0208b57b",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "61366cdd-81b5-4c89-b783-398425fe09eb"
        },
        "item": {
          "id": "54a4eb9c-c627-49a1-87f5-4af62ba69d00",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "bea8373d-daad-4b34-8e0e-d279b6d1e883",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "de97976a-635a-4658-a944-39d360ecf7a6",
        "cursor": {
          "ref": "b41d8ddc-f81d-4716-adf4-49430f298001",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "01af27a2-e962-4c50-8ef1-9ec01feab923"
        },
        "item": {
          "id": "de97976a-635a-4658-a944-39d360ecf7a6",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "dd13eca8-111a-4080-ae48-d582415b0b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e2d61a0-dfcc-4d42-bb7b-db236e7d7bc6",
        "cursor": {
          "ref": "4332bfe5-9168-46aa-80be-c364b5e36fe8",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2324065f-6fbe-4ca5-8f94-6a32dad646cc"
        },
        "item": {
          "id": "4e2d61a0-dfcc-4d42-bb7b-db236e7d7bc6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3440fdf0-b5c2-4ddb-bcef-1070961812e3",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "5a971e0c-ec3b-4062-a86b-5a1e13f73b4e",
        "cursor": {
          "ref": "f5036ebf-3032-400e-bb9f-8ebffbfbc094",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "dda4b1d8-5822-4b06-8b0c-9de740b9f557"
        },
        "item": {
          "id": "5a971e0c-ec3b-4062-a86b-5a1e13f73b4e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "68170e99-8297-42dd-be18-12e4135c94c0",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "9dd6be90-1827-40ae-a7c7-9c90d859045b",
        "cursor": {
          "ref": "7b77b721-ceda-4c65-a897-00ca15aad444",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "329b7ba3-4194-42c9-944c-763cf0f5a9fe"
        },
        "item": {
          "id": "9dd6be90-1827-40ae-a7c7-9c90d859045b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e2e49cf3-362a-475c-93fb-ea3cb2a053c4",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "7b6e1794-5dfd-419c-aa36-8dfd6ac6daf4",
        "cursor": {
          "ref": "0d5ef34d-45eb-475e-984e-7b4eaf6067f7",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "98c5eff1-5fb9-4713-b6d2-6e37789173b6"
        },
        "item": {
          "id": "7b6e1794-5dfd-419c-aa36-8dfd6ac6daf4",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ae90c62e-5987-4144-9f36-09627a1f6f1d",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ea482543-50e2-4956-b35c-18543efd9709",
        "cursor": {
          "ref": "6ebf97cc-ff5d-47c5-920b-c7c655f7139f",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "811b9241-8075-4dda-ab83-8ca421584b3f"
        },
        "item": {
          "id": "ea482543-50e2-4956-b35c-18543efd9709",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c5abadd3-c07b-4a49-a46d-5d0839406d74",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a33ee030-9220-41d4-a4c0-1417ac132a37",
        "cursor": {
          "ref": "1bcfe50d-45f7-4274-89da-a1b72d1b5f21",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "8ecb6808-802e-41d2-936e-5341e74f6ea0"
        },
        "item": {
          "id": "a33ee030-9220-41d4-a4c0-1417ac132a37",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d3b0c258-a295-4373-9fbb-e11b8ec18a23",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e561c5b0-ecf1-49c8-8a61-459cb005df53",
        "cursor": {
          "ref": "4a28472d-21f4-4e72-b5c2-893a71ee4a78",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "bbcfeccf-3cd0-40e3-989b-bfd10f847977"
        },
        "item": {
          "id": "e561c5b0-ecf1-49c8-8a61-459cb005df53",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b007cb92-7a87-4e63-93b1-9973b0343218",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "8035b750-ca07-4f85-8ff7-a3ab7a4299ee",
        "cursor": {
          "ref": "daaba445-b351-4135-af46-52332b6175ef",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ceb73480-0325-43fc-9629-a4ab39b532c6"
        },
        "item": {
          "id": "8035b750-ca07-4f85-8ff7-a3ab7a4299ee",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "02f38b21-dfa9-4583-b69c-132c9a86f58e",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "8f0f7a79-67a1-4395-bba0-275f0f87c73b",
        "cursor": {
          "ref": "9c270f70-715d-4360-8840-d335c82c5705",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ce554ab6-c5af-4cb3-8e41-3c2c6bc4b662"
        },
        "item": {
          "id": "8f0f7a79-67a1-4395-bba0-275f0f87c73b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ee7fbc5f-3ec8-44b5-a248-63aa871cbadf",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "c7f1a589-ef08-452d-8824-899e0a91e423",
        "cursor": {
          "ref": "aa3f17f6-e58f-4357-a97b-f8adc7d0611b",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ce1bc782-afcd-4da2-b39a-b1d9545d1c67"
        },
        "item": {
          "id": "c7f1a589-ef08-452d-8824-899e0a91e423",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2c3c6bee-519f-4f1d-9fe5-107d1e7accf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9381f361-74c4-4836-bbfa-49c0c0901705",
        "cursor": {
          "ref": "f09e5d8c-7c58-4b7d-ab22-5a4ef135d204",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b195b434-628d-47a5-a955-dae71eb7f0a4"
        },
        "item": {
          "id": "9381f361-74c4-4836-bbfa-49c0c0901705",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ad2d63ef-e6b1-4f85-a327-e33a4368f2c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2e2f95-f731-41a1-b0f1-a96686fb633b",
        "cursor": {
          "ref": "708c0b96-c0e2-4aa4-bd76-e91112495824",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "61d1e082-184c-403e-a646-a9bbc2082759"
        },
        "item": {
          "id": "7e2e2f95-f731-41a1-b0f1-a96686fb633b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6a357d7c-0108-43ed-b310-ddd0bd0418be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73784c99-8963-450b-9523-e70d425ace16",
        "cursor": {
          "ref": "efdd5214-ebae-4204-8ac0-a9b0d71aa096",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f9f4ec9d-7a9a-4dee-8e46-e18e230f3bce"
        },
        "item": {
          "id": "73784c99-8963-450b-9523-e70d425ace16",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5c2cb3d1-d497-4ac1-a0c9-0394fc1a15c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47739710-4a9b-4c3c-a51e-1dd710698e00",
        "cursor": {
          "ref": "afd95b2c-05fe-4de3-8358-767f8ab98539",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3789e723-e76e-46d4-a768-49d8f104b303"
        },
        "item": {
          "id": "47739710-4a9b-4c3c-a51e-1dd710698e00",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "45b3aee8-a664-4b70-95d2-2e3a6266dbac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caddd390-f60a-466c-9ff3-fe74367722f6",
        "cursor": {
          "ref": "27fe1d00-5a4c-4590-87d3-a245bf83b6d7",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "975f6f90-848d-4093-b68f-83fb3f684938"
        },
        "item": {
          "id": "caddd390-f60a-466c-9ff3-fe74367722f6",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "57638179-725c-483d-9245-91dbc4fb42ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9383660f-851b-4d63-a8c7-c57a6cbcbc01",
        "cursor": {
          "ref": "18c7ee4e-a5c5-4726-a8ab-028d6bcb0d62",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "68b624af-6c01-4c0a-a228-db77aa6fe0e9"
        },
        "item": {
          "id": "9383660f-851b-4d63-a8c7-c57a6cbcbc01",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "eab2b5cb-4fe6-4c03-b71f-bac54c39d776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9c3fce-2757-4833-b653-2b744e798ef2",
        "cursor": {
          "ref": "21d0780f-fa79-49e8-914b-6c01293c9a17",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6c3a9dbe-3771-401e-9b21-163cf37bb8ab"
        },
        "item": {
          "id": "bb9c3fce-2757-4833-b653-2b744e798ef2",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1a0a63bc-472c-42ef-866d-726070d32a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cee0854-f352-4a05-b8b7-c18256687fbb",
        "cursor": {
          "ref": "c2c2e34e-c593-4c28-9e8c-f56c2598009a",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "332aacc8-6bd2-4430-aea2-3b56844fa7b4"
        },
        "item": {
          "id": "0cee0854-f352-4a05-b8b7-c18256687fbb",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e594c155-f8ac-4afb-88ce-b74c0e31d21c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aa3263e-16d7-4501-979b-8a70cabc193d",
        "cursor": {
          "ref": "3580d4bf-072a-4cfe-8b17-3aa92fd2ea1f",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "63e27582-aa9c-4a7a-ad8f-c76b3e606a08"
        },
        "item": {
          "id": "9aa3263e-16d7-4501-979b-8a70cabc193d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e249255b-5437-462a-9f20-25666e4f6606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcda0832-0231-4501-b7a4-d0a1984c8871",
        "cursor": {
          "ref": "a12db3fa-5ee8-41fb-8aa6-1f8e6c75a137",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d10acf92-57f9-4b55-b05b-79913115ff06"
        },
        "item": {
          "id": "dcda0832-0231-4501-b7a4-d0a1984c8871",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6ee6382a-e6bb-4107-b5ef-a277ec83bb1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b48413f-661b-4284-bd40-c7aeacbd3597",
        "cursor": {
          "ref": "2605eaff-6a5c-4ca6-95a9-262c7e712def",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "87494a85-7f62-4d4b-9c5e-2fd180d0a1ab"
        },
        "item": {
          "id": "8b48413f-661b-4284-bd40-c7aeacbd3597",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e64cb683-c894-41af-9d36-4deca3250ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb2295a-d6ce-4358-892f-39485ca782d3",
        "cursor": {
          "ref": "64529cc8-ad0a-42c9-8ba4-e782fdbb14ba",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "cec98e4e-3cea-4c90-a593-4d7aed2a3d7f"
        },
        "item": {
          "id": "ccb2295a-d6ce-4358-892f-39485ca782d3",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e4e67b65-7ced-4750-979a-18cb44728360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac06b65-5dfd-4075-a5d7-f9511b126359",
        "cursor": {
          "ref": "f379f93f-d43a-4a8a-8767-8a1c64595d02",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4b9906c3-4fe0-4368-b6fd-0dd5606f3e70"
        },
        "item": {
          "id": "7ac06b65-5dfd-4075-a5d7-f9511b126359",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "3b1e6cb8-83dd-4485-bb68-d444e0f8133c",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "72bf2d25-b437-472a-b905-6c2c8b943071",
        "cursor": {
          "ref": "da2f06da-2266-4926-8098-a528b65a3530",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "941957ae-0d28-4fc2-9add-73f41f0912d8"
        },
        "item": {
          "id": "72bf2d25-b437-472a-b905-6c2c8b943071",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d0a2fc22-35ad-4c77-8e5a-e1fa3f35561b",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "5cd7c6a9-ffe8-4e0f-b625-407b2a3bb8a5",
        "cursor": {
          "ref": "53df194f-1ee3-41c6-9c33-91ab3549cbe0",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "cf814df9-53e6-4f7f-ba57-7198383b2070"
        },
        "item": {
          "id": "5cd7c6a9-ffe8-4e0f-b625-407b2a3bb8a5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e0971ccd-468e-475c-b90c-288eba16bdb7",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "501ab509-c4ed-48aa-b1fc-e534321d26aa",
        "cursor": {
          "ref": "3a5b4e07-55e1-4d71-997c-340cdf3d6c61",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a7dfb3b7-a119-4fa0-b8d6-4925c8432626"
        },
        "item": {
          "id": "501ab509-c4ed-48aa-b1fc-e534321d26aa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "46f7ae48-9913-4ceb-bb01-54be6d95ec14",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "32453dc6-c12c-4926-a3e0-3b175f451da6",
        "cursor": {
          "ref": "565748f5-8bb2-4223-ab99-3d2f3149c5a0",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3a0f5232-902d-4ce3-b387-14225cd209ad"
        },
        "item": {
          "id": "32453dc6-c12c-4926-a3e0-3b175f451da6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e050a8e9-451f-4cf1-a1de-633bfaac8487",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "55906de1-c64d-4c0d-8cd9-70dca864fc71",
        "cursor": {
          "ref": "bd5262fb-1e1d-4d7a-922d-197263564157",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9b35cd14-6a8b-436b-b3b4-73083f7b73c2"
        },
        "item": {
          "id": "55906de1-c64d-4c0d-8cd9-70dca864fc71",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "4f2f4408-8b73-4d8a-9ae2-dfd79cfece64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b537dd-7fec-4e1a-8d23-e6f5b318819f",
        "cursor": {
          "ref": "835dc71c-3483-489e-8f5b-359283dc6405",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f93d75fd-be64-4530-910a-edb930deabc9"
        },
        "item": {
          "id": "94b537dd-7fec-4e1a-8d23-e6f5b318819f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "646e76f3-a87e-4818-acaf-b84f208b1e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae0a880-a634-4d28-bc53-1a2b98b6a869",
        "cursor": {
          "ref": "d2f42112-403a-4120-a69c-c527567273ab",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "903f7f80-2d8a-4618-bc83-c68145504830"
        },
        "item": {
          "id": "dae0a880-a634-4d28-bc53-1a2b98b6a869",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e157f967-2483-435c-80fe-ba5496710274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8c9a4e-1adf-461e-8e6f-be35eabbf409",
        "cursor": {
          "ref": "3d8ab0c3-c229-425a-806c-0d78a758fc75",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9f323af2-fe07-4635-91f7-712ffb65850e"
        },
        "item": {
          "id": "6f8c9a4e-1adf-461e-8e6f-be35eabbf409",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2004df75-ccce-4e4d-9d33-de8c83a2c75a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63382e53-1e23-4c4e-802c-67bef7199a87",
        "cursor": {
          "ref": "abac0578-56a2-4152-9798-d9766719cfdd",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8630c25e-9290-4a67-9321-73d6c76617ac"
        },
        "item": {
          "id": "63382e53-1e23-4c4e-802c-67bef7199a87",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "fa04b6ff-3777-4c2e-b247-68eb71aed087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5683db6-a3f4-4e52-9ba5-ce0a88368246",
        "cursor": {
          "ref": "44fb9f7b-2078-4387-a10c-eb945dfda19b",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7ea519d5-8a88-46c6-8c09-34999388e9f2"
        },
        "item": {
          "id": "e5683db6-a3f4-4e52-9ba5-ce0a88368246",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ee244847-83ff-4d7d-92cd-7fec4af725ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f8b844-b72e-43cf-baae-cc00ff45a31b",
        "cursor": {
          "ref": "cd1536a2-f9d7-4739-be27-99102bd7495f",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a924e57b-7aeb-4ef4-bddc-50d8c2e1a408"
        },
        "item": {
          "id": "86f8b844-b72e-43cf-baae-cc00ff45a31b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "459236d4-1146-4615-b95a-5e0e7348a90e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7bc84b-2950-461c-b4c6-9cbd8280da8b",
        "cursor": {
          "ref": "69978f6f-a6d0-43dc-b020-226a11ee5a04",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "6a35c929-2d54-401c-b3e1-5aea4de2c754"
        },
        "item": {
          "id": "dd7bc84b-2950-461c-b4c6-9cbd8280da8b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "40af80ba-25fd-4a74-9f7d-3030e1581e2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b00bb1-9476-4d1c-ae9c-4c239114d422",
        "cursor": {
          "ref": "02a5f6d4-8dfb-43c2-80d3-d026e4b82932",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "323229eb-3167-4d15-bd2b-ac13fd34a456"
        },
        "item": {
          "id": "e6b00bb1-9476-4d1c-ae9c-4c239114d422",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "cb980118-4edd-4e08-a411-36071835fa1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d07a34e7-1c6c-4ded-914e-1827a06e62a6",
        "cursor": {
          "ref": "d136ad22-22fa-4dd2-b20c-6b957509d657",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "cefff859-6b7c-4acb-b847-3fbb6cac7ae6"
        },
        "item": {
          "id": "d07a34e7-1c6c-4ded-914e-1827a06e62a6",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8f1cda2f-44bf-4e4a-b75c-96d3f083ab29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a214abfb-895d-4dbb-8267-877dafd2d4da",
        "cursor": {
          "ref": "71022db9-01a6-483e-9868-b4e680c4cf67",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2c199029-d11c-4aac-b9b3-c47c67778ab9"
        },
        "item": {
          "id": "a214abfb-895d-4dbb-8267-877dafd2d4da",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2ab28c07-2819-4bd2-96ce-2cceb3ab1fea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2677b6eb-4ede-4478-822f-71e996a038ab",
        "cursor": {
          "ref": "89ac7c4c-7486-4aa2-be09-36b9c5167c43",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f708f125-adfa-417f-95a7-38471bcb53ac"
        },
        "item": {
          "id": "2677b6eb-4ede-4478-822f-71e996a038ab",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f0c627ab-b072-4cd2-a985-3941820ff8b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d1c01e-d4dc-493d-8804-efc3f5be37c9",
        "cursor": {
          "ref": "7f36cc5f-b03c-43e8-9f0b-07c0a6f288b8",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "02360008-18f0-4c25-8dc7-8044323dd75b"
        },
        "item": {
          "id": "50d1c01e-d4dc-493d-8804-efc3f5be37c9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3fbbbd35-fa6e-47cb-9f19-d95aeed1f93b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "992addc2-2881-446b-8c71-b0e8240824ff",
        "cursor": {
          "ref": "ebdf6cf2-7115-4d98-858a-c765b69eaba5",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "25ffc126-ed6c-42ac-a314-60784520b148"
        },
        "item": {
          "id": "992addc2-2881-446b-8c71-b0e8240824ff",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ab88cf0b-9d53-4076-9505-d46befd4474b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f06da5-56e4-432d-8c5b-8ae8a6e9863f",
        "cursor": {
          "ref": "e1f52b9b-780e-4cfd-8cca-fb037a88f4fd",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "bb1d876e-60e5-4cf6-9e56-0352f0172699"
        },
        "item": {
          "id": "59f06da5-56e4-432d-8c5b-8ae8a6e9863f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "cfac3fd2-20ea-415a-b57f-2296e77ca40c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "499ce4c2-b728-4b4c-9970-4820f377eb31",
        "cursor": {
          "ref": "ba7824b1-becd-4502-bda4-56fd77c543e4",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9ac6f01c-a2bc-4bb5-9d49-1018b389e175"
        },
        "item": {
          "id": "499ce4c2-b728-4b4c-9970-4820f377eb31",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "7d239cae-5717-4a16-8651-adffc45cec3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c38b8d9-2d02-46b7-8355-bcc089d86cbf",
        "cursor": {
          "ref": "b84bf19a-75e4-4885-8d84-6bd717c1d5ad",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2248fb45-4b43-491e-846a-1df39c428d81"
        },
        "item": {
          "id": "6c38b8d9-2d02-46b7-8355-bcc089d86cbf",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c7b70802-9e32-4ec0-8427-7f6ca983bfad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dcb4ecd-3eca-42c1-ab81-63d5aa5ba667",
        "cursor": {
          "ref": "6a6364b8-1aa2-4f52-923e-b482f30295f3",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "99edc268-4cb0-4cc3-86ff-e27d2d7c6065"
        },
        "item": {
          "id": "5dcb4ecd-3eca-42c1-ab81-63d5aa5ba667",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e91c5fe9-5028-402f-bf6b-673f4b0bbfcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc34bdd4-8bad-42ff-97d5-70d9f0c475a0",
        "cursor": {
          "ref": "baef87ec-dad2-4ec4-9b62-969693e8fc45",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2e61e68c-ed8e-4c15-bd52-f299a474d78b"
        },
        "item": {
          "id": "fc34bdd4-8bad-42ff-97d5-70d9f0c475a0",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b78216b2-c803-4977-b4c7-7f19583ed594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a9e813-d49d-4d29-b5aa-9f6cb3edcaf4",
        "cursor": {
          "ref": "ce5026ab-255a-4f77-992a-9fcbace3cdd2",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "0a8500e9-92e8-41a2-a9bb-fab713a3bfa2"
        },
        "item": {
          "id": "e6a9e813-d49d-4d29-b5aa-9f6cb3edcaf4",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ceef2746-94e8-46d5-866c-a3e70cb32df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7e40c57-793f-4155-952d-7a02f26f8ee3",
        "cursor": {
          "ref": "0ecc5cd3-a14c-4a39-aecd-79e37e582e67",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4ef13f13-a14c-4c41-81fc-3cf257d00a0f"
        },
        "item": {
          "id": "d7e40c57-793f-4155-952d-7a02f26f8ee3",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "cbb226fd-f5a1-4cc8-8474-353429cd7505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e8a1413-ee1d-4831-9073-edd8a2e2217e",
        "cursor": {
          "ref": "eefd3486-df6f-4ae2-8aa8-582c87cbc213",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "eb216dfe-0e51-43fa-94cf-2dc1e185578f"
        },
        "item": {
          "id": "1e8a1413-ee1d-4831-9073-edd8a2e2217e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b8ac9da0-3d2a-4b88-a979-1ebe8ef04efa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782241af-0364-45c7-acc1-e753618f426d",
        "cursor": {
          "ref": "67d6c104-e90e-4023-bd22-0785597c599e",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "14b7bf04-ab63-4747-8006-02917caf11e5"
        },
        "item": {
          "id": "782241af-0364-45c7-acc1-e753618f426d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "464cc708-5128-4106-b758-a023abf69524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a30da42-1a44-4f71-a636-77ed6e4e8b20",
        "cursor": {
          "ref": "f50b58e2-1334-49a7-a916-ec1f464a025c",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f43f0c21-a3bb-449d-b569-c97c3b1949ac"
        },
        "item": {
          "id": "5a30da42-1a44-4f71-a636-77ed6e4e8b20",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "0045b5f0-c89c-4d3a-bd54-fa76dbecb928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e56af18-cfba-48eb-b06f-f7ea55e4f8e8",
        "cursor": {
          "ref": "3190defe-708f-42b5-adf1-c19a930ddc52",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9e743f14-aa39-4fd5-8e07-3976e2e00b0b"
        },
        "item": {
          "id": "6e56af18-cfba-48eb-b06f-f7ea55e4f8e8",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "cd14204c-7aa9-49e6-9214-2ed87fdb7d25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ceae79d-cd03-4354-8069-c925c0a37783",
        "cursor": {
          "ref": "67495d56-97a5-4f19-b862-f74e04165094",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "99550306-f282-4a4e-9ca6-8a2be6e2700d"
        },
        "item": {
          "id": "6ceae79d-cd03-4354-8069-c925c0a37783",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "5138fa93-fe59-4e6e-8306-39e932f1ca96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c02083b-918d-4283-8510-224c2b4e54cf",
        "cursor": {
          "ref": "384cd296-ab57-4e06-8a70-e7aed0ae069f",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6e010490-7831-4f09-b9b1-d3456d01b855"
        },
        "item": {
          "id": "1c02083b-918d-4283-8510-224c2b4e54cf",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "6b8ff4e8-f4ee-440d-a740-c253bfcf034b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a566db3a-ecbe-4628-b3b5-bcee03983f09",
        "cursor": {
          "ref": "605df1ed-26b9-4bb2-a59c-5db1ecb0f982",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "08236477-018c-439b-b20d-51050162ad4d"
        },
        "item": {
          "id": "a566db3a-ecbe-4628-b3b5-bcee03983f09",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ceac46b5-08f6-4c5b-9b44-a7862a7b4d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b175c0-2224-495e-a623-b0dfb724bf43",
        "cursor": {
          "ref": "66dbd7d0-04a2-4a9a-a717-c436c636f7e6",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1b1bd295-be9a-4407-add5-4dc49aebb7dd"
        },
        "item": {
          "id": "12b175c0-2224-495e-a623-b0dfb724bf43",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a485c0a2-6e99-44e3-8190-b0fe36265f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb09c999-db48-4573-ba07-67800571b07d",
        "cursor": {
          "ref": "a4700b8e-17bd-43fd-a46e-488a5e282c45",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1e90adf4-c507-4e02-b10b-c22e2f6e77b4"
        },
        "item": {
          "id": "eb09c999-db48-4573-ba07-67800571b07d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "fe80409d-7838-4e5a-ba9e-aed816cf9272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa8d6fc-dd1b-47d8-9d34-bd6892eed5de",
        "cursor": {
          "ref": "3a7a51d7-7c21-43eb-b123-b089363fd330",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6deca2ca-6043-4606-b7c9-f4b9c448302a"
        },
        "item": {
          "id": "9fa8d6fc-dd1b-47d8-9d34-bd6892eed5de",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "1d1d1358-edce-4541-8c47-25a8ceefc35e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3156206c-b46c-429e-87b3-2669f91ab283",
        "cursor": {
          "ref": "fbf0598e-6c56-40ba-8cd9-52c829a4f71e",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "3538747f-56cd-49b1-a629-e5e44cb51e81"
        },
        "item": {
          "id": "3156206c-b46c-429e-87b3-2669f91ab283",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "5ede818b-5715-43c1-80c6-dc4e9411ce5a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b3d35fb-753e-4e80-b104-e9677580f0de",
        "cursor": {
          "ref": "ffb63a62-5666-4e78-8dfe-57465223f214",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "fca05dde-bdb6-4009-b8e6-e590f38b2dd9"
        },
        "item": {
          "id": "6b3d35fb-753e-4e80-b104-e9677580f0de",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "bda52988-e019-4a6e-a913-8dcaf1b06611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "1161c998-4801-4c05-a48e-931beb31f48b",
        "cursor": {
          "ref": "8216dc05-818f-4426-98e2-6485e595a5a0",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "36412337-b661-4081-9eff-2dbf8550ce21"
        },
        "item": {
          "id": "1161c998-4801-4c05-a48e-931beb31f48b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f72c3771-e8c8-45e5-b96e-56e0449f0a4f",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f34c796-1ab4-41a5-881f-48f2262dbfa9",
        "cursor": {
          "ref": "8c1bcd32-5b1b-46d9-b0e7-8d71b79bf43e",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "77c1ee31-5671-466d-8db8-4dd6d97b5670"
        },
        "item": {
          "id": "3f34c796-1ab4-41a5-881f-48f2262dbfa9",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b5c37e6f-8764-443d-a30f-53dc73c5aa35",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f657bfb-84c5-4af2-b728-464592f5c471",
        "cursor": {
          "ref": "74d41a78-98f7-4db4-b6b6-79b937f9f18b",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "96024f8e-ed8d-4c54-9ae9-5b7a64a071de"
        },
        "item": {
          "id": "3f657bfb-84c5-4af2-b728-464592f5c471",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5b46e760-6e92-425e-9eae-c8605b8e1d10",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b912dad0-8214-4899-b625-84ff4e3b0d5d",
        "cursor": {
          "ref": "d8ac8772-487d-46dc-acf2-aa29565e0fe7",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1c47eba1-4848-4933-84fa-729a5562bedf"
        },
        "item": {
          "id": "b912dad0-8214-4899-b625-84ff4e3b0d5d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d97978cc-122f-4500-b60e-d1c705eac235",
          "status": "Created",
          "code": 201,
          "responseTime": 339,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2930a472-f8c0-42cb-915c-af37c1f6afe7",
        "cursor": {
          "ref": "f4b91327-5245-41d9-9e22-d54a242a795b",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "71695a27-abc5-46f0-8649-6d4e35ffdfb3"
        },
        "item": {
          "id": "2930a472-f8c0-42cb-915c-af37c1f6afe7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "898cb89f-9d58-4b1f-8ffd-f87d79eaaef0",
          "status": "Created",
          "code": 201,
          "responseTime": 447,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-23T00:37:05.136Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-23T00:37:05.136Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "3e5af6e7-e461-41e5-ac89-d60d658d90e0",
        "cursor": {
          "ref": "c9a57b2d-ca77-4c51-a4eb-485a52979c02",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f9eb2ae1-f8da-4c8f-9e95-5c7fd2b975ba"
        },
        "item": {
          "id": "3e5af6e7-e461-41e5-ac89-d60d658d90e0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8630be14-526e-40ec-bc2e-23ea7a8b5441",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc473912-19b7-49a1-bed1-e54952f4f9c6",
        "cursor": {
          "ref": "6c0989b0-c52b-4349-bcc8-070dbad75b49",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "af6f332b-2fd0-40f8-953d-ed021f2413bb"
        },
        "item": {
          "id": "dc473912-19b7-49a1-bed1-e54952f4f9c6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "751755df-f17c-4651-8ac6-76e02c3a5678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ade1f7-b487-4346-a21d-0ea85e813388",
        "cursor": {
          "ref": "5cb2bf7f-675c-4e37-b3d6-89c2be06a54c",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "effa78bd-ec17-428e-a22b-2072c4327e8d"
        },
        "item": {
          "id": "b0ade1f7-b487-4346-a21d-0ea85e813388",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c5b8e6ce-c796-4a51-885d-d0290dd6cd11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da41dc9-f6dc-4bb1-b9ae-07af08375059",
        "cursor": {
          "ref": "eb121255-8ecb-4fe6-85a9-4280d78b899c",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "8f3a638e-cf0e-4bc0-b3ad-8a8b5f48050b"
        },
        "item": {
          "id": "0da41dc9-f6dc-4bb1-b9ae-07af08375059",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f416e8a0-9282-4b13-9008-3aa0d02ee87d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ddb3aa1-78c9-48d3-a4ec-f3bfd946c02c",
        "cursor": {
          "ref": "d84e18f1-60d3-4ddf-afa9-92be496f7a1d",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9b11c41b-1f2d-4e2b-9b64-cb8a58ef8f3e"
        },
        "item": {
          "id": "4ddb3aa1-78c9-48d3-a4ec-f3bfd946c02c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f3497f7e-4555-4384-b851-f5db5f4ee2d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f8d72f-105a-4755-ad7d-28d3482c97f5",
        "cursor": {
          "ref": "253c1e14-fcf4-4e1f-b176-4a827d9dc16f",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c76a03d4-2386-4d8b-acd8-a437924e51f0"
        },
        "item": {
          "id": "a7f8d72f-105a-4755-ad7d-28d3482c97f5",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ba55b35c-1ba0-4f6f-80f4-447643cb6cb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a0678c-0bfe-42db-a01c-c9db343eea9f",
        "cursor": {
          "ref": "c265b7e8-c532-446f-a5f7-023a415d1d94",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "cf3832b7-053b-4a5e-81e6-7ad459d7fdf8"
        },
        "item": {
          "id": "04a0678c-0bfe-42db-a01c-c9db343eea9f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b1982f22-fc79-4f1b-82f8-d6fd2a72ee7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f3ba4e-ae8a-4c23-bac6-06103722006f",
        "cursor": {
          "ref": "108d2c3b-0a1b-4d79-b36d-d8978c6cb3ad",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "38c48a9f-172a-48c5-876d-cb7c2274e029"
        },
        "item": {
          "id": "f8f3ba4e-ae8a-4c23-bac6-06103722006f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "aa92abdb-c960-40d3-a6b7-c1227ab1cbcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f500c615-662c-42c9-ab34-6c1544804ef3",
        "cursor": {
          "ref": "31d59dce-5797-4898-aeb4-eb0ffaee244e",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "074a6db5-6871-4d2e-808e-1eab7a77e8db"
        },
        "item": {
          "id": "f500c615-662c-42c9-ab34-6c1544804ef3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3a2339de-b180-4b7d-b51c-77ec94c4fb76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e69cfec-8546-46eb-abbb-19c7aabf193f",
        "cursor": {
          "ref": "4a2bfa1d-c936-4cec-ae9f-0fda4ae8f267",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "00ab75a2-4dc8-46fa-8633-e2304ae3ba7f"
        },
        "item": {
          "id": "3e69cfec-8546-46eb-abbb-19c7aabf193f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1708cc0f-6482-4cbd-adf3-c7e1710800c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62531731-4a37-4442-b10b-786cdc29b504",
        "cursor": {
          "ref": "f6fc41a3-e9c8-4ea5-aacd-c2dee2709ca9",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a5e51933-085c-4765-99c0-2df08d6f4bb1"
        },
        "item": {
          "id": "62531731-4a37-4442-b10b-786cdc29b504",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "71d13090-1f0b-48cc-a080-1fd43f859071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ee694c-6aa8-4a63-8ef5-c0b8f1c224da",
        "cursor": {
          "ref": "3db3b412-ca19-4a60-a189-495a64d3c716",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d844cdb8-cdf7-460c-b08e-3e3f2ef0f3ee"
        },
        "item": {
          "id": "11ee694c-6aa8-4a63-8ef5-c0b8f1c224da",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "26b9ccbd-15a2-450c-89d4-cc75ebbddd4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "745f0639-fc66-4f8f-9ef3-47111e4d97dc",
        "cursor": {
          "ref": "c0e23a29-3a23-44d1-8da3-e03c9f8a1416",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "25e89764-f10e-4823-916f-7fe4ad533a4f"
        },
        "item": {
          "id": "745f0639-fc66-4f8f-9ef3-47111e4d97dc",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bb6ef60c-5d15-43bc-821d-fa3974aa5bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d86da9-7b72-4f96-acdc-a8333c9534ee",
        "cursor": {
          "ref": "f71d7f5d-64b6-4744-b81d-92486504b121",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b5357c03-a883-4a71-a0a8-bc3fb6eed3e2"
        },
        "item": {
          "id": "81d86da9-7b72-4f96-acdc-a8333c9534ee",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c1c659b2-5ba6-4b56-8267-3d00f8ed429a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86471849-29e4-462d-9df2-f8422b235859",
        "cursor": {
          "ref": "91a6445b-e20c-47ce-b8e2-fd4b6f9567a4",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1e39b635-95a1-44c7-bdeb-78ad010b07df"
        },
        "item": {
          "id": "86471849-29e4-462d-9df2-f8422b235859",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5579cd3f-1af7-4cce-9b06-13f7d2646def",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 107,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "aa1e7c9f-caa0-4a30-835f-352977ad47f1",
        "cursor": {
          "ref": "50a24812-e630-4719-af9e-afabd1bc6f93",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3ef7238d-4ec9-42f5-887c-e3dad1cd1cbe"
        },
        "item": {
          "id": "aa1e7c9f-caa0-4a30-835f-352977ad47f1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6057041a-7c3d-4ee3-9091-fc7d17deffa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60be87a0-3739-4b73-9ba6-3810c084b561",
        "cursor": {
          "ref": "f7f9b792-0730-43af-ae67-88a98e87151d",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2a2528c2-36f8-4252-8851-6d8c0d081434"
        },
        "item": {
          "id": "60be87a0-3739-4b73-9ba6-3810c084b561",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ea5edc78-16c0-47ae-bf51-8200eee743d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66550c93-2b40-4de8-b9e7-72145e1ade34",
        "cursor": {
          "ref": "5106c178-99eb-4a81-af50-0c31a6b2ef4e",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "22bed206-25e8-43dd-838e-0e3caa6b0ef3"
        },
        "item": {
          "id": "66550c93-2b40-4de8-b9e7-72145e1ade34",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "09ae4b8f-f31d-4a55-be5c-321430417b1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a85bb496-b87a-40ed-90c6-28dbde070ce2",
        "cursor": {
          "ref": "5646c29a-0d96-4a34-98ca-6c95e8ef7714",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3f0f8dd8-2995-43ba-88bd-d0bd139c1c73"
        },
        "item": {
          "id": "a85bb496-b87a-40ed-90c6-28dbde070ce2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "128c2860-ff45-4efa-b40c-16d752d4c6b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a918be8f-fc5d-4dcd-9903-2bac1ab16dd0",
        "cursor": {
          "ref": "ece77368-0605-4593-a8ae-33b73bd3b089",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4c4798fc-97ad-46f5-a482-0e30fc71fd3c"
        },
        "item": {
          "id": "a918be8f-fc5d-4dcd-9903-2bac1ab16dd0",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3fc75d01-cfcb-4c45-800b-553aea565f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70258cb7-546c-488c-887b-0fe3fde34f15",
        "cursor": {
          "ref": "f451b969-2101-49a9-9f42-cdd6582b4b87",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "6f680f3a-d418-44c4-ae42-e75ac5ffa9cc"
        },
        "item": {
          "id": "70258cb7-546c-488c-887b-0fe3fde34f15",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "85c5cede-fbed-4833-9c47-99fb73a19440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d377e5-d484-42ee-abda-8589bfb9ab5a",
        "cursor": {
          "ref": "c21fd019-8bf8-43f2-916d-8cd117e40291",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3b29f0db-d616-47fd-a98c-bbade44ab6bf"
        },
        "item": {
          "id": "f6d377e5-d484-42ee-abda-8589bfb9ab5a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4223118b-77d4-40ae-b26c-2b2ffdb046c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e054f9c1-6f94-4f1a-a790-9fb91505f7f6",
        "cursor": {
          "ref": "0c44e0d2-2aef-40d5-9274-0fceea3ebf3d",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f593e85a-2059-434d-9c70-f0c58f4299b1"
        },
        "item": {
          "id": "e054f9c1-6f94-4f1a-a790-9fb91505f7f6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7f5f2a95-7648-470d-af42-3f096f623948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e81e1fef-4b16-4bd4-9819-83be293f2a79",
        "cursor": {
          "ref": "a086e8ca-5d75-4c8c-ac6f-cece90562733",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b537a5ad-329f-45ff-b67d-40e904a11add"
        },
        "item": {
          "id": "e81e1fef-4b16-4bd4-9819-83be293f2a79",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "94bca17b-054f-40aa-8ac0-79a4eda89597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f68558-562d-42ce-b54f-e3d95859e989",
        "cursor": {
          "ref": "47f8daa0-988c-4230-a70a-98a831282e71",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ac285956-43bb-44d3-8e16-6be5c5137bde"
        },
        "item": {
          "id": "39f68558-562d-42ce-b54f-e3d95859e989",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d488aadf-611f-4e13-8a61-a7ba5401ecea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2222560-d7b4-4d44-862c-4262a66a3bcd",
        "cursor": {
          "ref": "c0a3cb10-e156-445d-8f94-136a13f78f8c",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4386fba1-1094-4ea2-a7b9-b9de6e1c8676"
        },
        "item": {
          "id": "c2222560-d7b4-4d44-862c-4262a66a3bcd",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a6a2a974-b273-44a9-b298-e2718703ebaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "250d6951-150e-4003-bd53-37adf52f0f1f",
        "cursor": {
          "ref": "8f82bc3c-4059-4b6e-b6d8-30d8918297b4",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b2f0aa10-61f4-4cdf-83a3-66fd8e3067a0"
        },
        "item": {
          "id": "250d6951-150e-4003-bd53-37adf52f0f1f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "10d33d76-1130-4729-a0c7-0485af3abe7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe9bc7f-6335-4dde-8173-0aa777418e96",
        "cursor": {
          "ref": "8d541cac-609b-45c3-8417-462fb932642d",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9d50e84c-5931-4cdd-a22c-a25cc17093be"
        },
        "item": {
          "id": "fbe9bc7f-6335-4dde-8173-0aa777418e96",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "68d5190d-0996-44f4-9a61-2bf1d71fca6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7259307-d876-4d84-96cb-e5a76a6eadd3",
        "cursor": {
          "ref": "a4649a34-b3eb-4957-8ad4-3a153087fa38",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c7fc636a-9d64-4593-8801-acd5ae3f63ac"
        },
        "item": {
          "id": "d7259307-d876-4d84-96cb-e5a76a6eadd3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3614a135-53d9-4759-96f8-86c919d6783a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b977be-5da1-4e98-8aee-ecdc2900e23f",
        "cursor": {
          "ref": "3257bcb1-68ca-49be-a577-6517c7e37187",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7f0198ac-c3fe-4aaa-9754-9a247c45b073"
        },
        "item": {
          "id": "78b977be-5da1-4e98-8aee-ecdc2900e23f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "74626633-f4ba-4e85-8b9b-943c0fdaa69b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f67bb211-a3f6-41ff-95eb-5ecd57315f61",
        "cursor": {
          "ref": "8792f7e7-3f0f-47d9-b001-b2605a0daf32",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b0b3aacb-d391-4265-bc17-331e0464b8ad"
        },
        "item": {
          "id": "f67bb211-a3f6-41ff-95eb-5ecd57315f61",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "84c0f612-0a18-4739-8521-6af73ba43772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fbade72-525a-4e46-b885-5a0b9fe88280",
        "cursor": {
          "ref": "97c3c285-2f93-41d7-b0af-fcf5b5ee03f8",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c648541d-8dc3-4235-9231-5e3e4a09da65"
        },
        "item": {
          "id": "9fbade72-525a-4e46-b885-5a0b9fe88280",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0e47eae1-6755-4e5e-81b1-44e3496b47d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa607ccd-1dc4-4c72-804e-e98bc63b7a77",
        "cursor": {
          "ref": "79504e71-6589-4815-81c9-c9e891e34d35",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "fc44e9fd-fc04-42b9-82fa-a85631f20914"
        },
        "item": {
          "id": "aa607ccd-1dc4-4c72-804e-e98bc63b7a77",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ff96af10-d076-4423-95c9-3514aefab1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca51b8aa-6ef9-4a78-81ce-a33c7bc37ee1",
        "cursor": {
          "ref": "a15e827c-e2d2-47b3-8cf6-4767a78d158e",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "caeb0ec6-ab35-413f-8c07-25a996acc435"
        },
        "item": {
          "id": "ca51b8aa-6ef9-4a78-81ce-a33c7bc37ee1",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "967ecac9-ebbc-4b9b-9703-4d2e99bbd5ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5550e34-6861-4ca2-9248-4043909afa97",
        "cursor": {
          "ref": "17189a58-d8b9-4b99-82bb-aa9654c9d9a1",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "341cf929-22ae-4b60-aead-5654f1b6e255"
        },
        "item": {
          "id": "c5550e34-6861-4ca2-9248-4043909afa97",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "fe8b8153-a2db-4852-b93b-df5c294a3509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44132177-9dc5-4335-a3f7-3804b6190deb",
        "cursor": {
          "ref": "91cb2d02-5fc5-4470-ac25-205b53170db7",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "51696210-0fd1-41b0-951f-d0127dcd1a1b"
        },
        "item": {
          "id": "44132177-9dc5-4335-a3f7-3804b6190deb",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "93c4b187-632e-43cb-a9e6-1be925be380a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a1299f-b9bc-4ce1-95b0-63b2d92c056d",
        "cursor": {
          "ref": "630a8e2a-e393-44df-b3b8-df6da5a4ace2",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3b4bbb33-5058-42d0-8c49-94a55979d117"
        },
        "item": {
          "id": "98a1299f-b9bc-4ce1-95b0-63b2d92c056d",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "f968b50a-6215-404e-85cf-bd006ffd2491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18f03a01-0b1d-4682-a608-e8f424f4d124",
        "cursor": {
          "ref": "46f73bb5-10a5-4d9a-9fbf-2245f04e6993",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e774a4c5-776b-4d86-a386-8272b6995350"
        },
        "item": {
          "id": "18f03a01-0b1d-4682-a608-e8f424f4d124",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "ecd78785-c0c4-4e18-b4c3-8b9b7f7c708a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e5c302-7e0b-4b63-b15e-d48bffab10e5",
        "cursor": {
          "ref": "64783385-2dd1-46ce-8c36-dda22b6140ed",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2c2d5899-c702-48a9-a9ab-37e4d06a012c"
        },
        "item": {
          "id": "a5e5c302-7e0b-4b63-b15e-d48bffab10e5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f97b3146-f84f-489d-ae16-cd64f1fe65f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95766a99-2a57-45aa-81c4-9ac7f65abe1e",
        "cursor": {
          "ref": "c4aafdb5-68de-4e63-88b6-361e1ade4804",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d9b1098e-99d9-401c-82f6-7b42b929ba0e"
        },
        "item": {
          "id": "95766a99-2a57-45aa-81c4-9ac7f65abe1e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3ab5d20a-f427-41e1-a05e-253624915fab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e03ec402-f4b4-446d-94a6-7c59b9b89265",
        "cursor": {
          "ref": "f52dc742-d5ac-4044-89fd-49128080b902",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "fe7e3953-de2c-40d8-8d8c-5b84b7ab6ac1"
        },
        "item": {
          "id": "e03ec402-f4b4-446d-94a6-7c59b9b89265",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b25332a7-c692-4c82-90e5-4f4b4937d980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32e50a7-2eac-4900-a080-716ad0e0d7aa",
        "cursor": {
          "ref": "22f31128-dc73-47cd-bbf7-363f305cdb26",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "03c1d90a-df40-49b0-bfdb-7b8eae2a4867"
        },
        "item": {
          "id": "b32e50a7-2eac-4900-a080-716ad0e0d7aa",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "14ff6ada-1647-4de2-9b98-8b2df2e50595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1293c88-35d5-4371-b0f6-7f16492f7302",
        "cursor": {
          "ref": "6ee8b5ab-6fcd-406f-bbd1-71c8231a5944",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e60749d9-f27b-41a6-ba0c-942e4ca2fe20"
        },
        "item": {
          "id": "f1293c88-35d5-4371-b0f6-7f16492f7302",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "cdedfbe8-a2e7-419b-8581-3aabf0aedfcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e83cda-738e-463b-a3a5-1ef03c0b11d7",
        "cursor": {
          "ref": "0ab4a6a6-96ef-497b-a43e-8d5f22f281c4",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c8f9289c-cad8-404b-a8ae-12ae2bcd3598"
        },
        "item": {
          "id": "a7e83cda-738e-463b-a3a5-1ef03c0b11d7",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "aa67280a-e5f4-4458-bc7d-9896aa218710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5642f0b-192a-4192-aa60-92805246206d",
        "cursor": {
          "ref": "2df6ef95-df37-4023-8592-a11a857d3b35",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6e00be85-6bc1-4314-b155-4c81a421a7ec"
        },
        "item": {
          "id": "d5642f0b-192a-4192-aa60-92805246206d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c3106b9f-de3e-42c2-8884-edcca4fb21b8",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "5e3fbc99-8eb4-4078-b0f0-86f54a1b3806",
        "cursor": {
          "ref": "8bbb622e-5cad-4c18-988c-89f8f5c61679",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e4ef4a29-bd75-44cf-a8d7-71889956e1b1"
        },
        "item": {
          "id": "5e3fbc99-8eb4-4078-b0f0-86f54a1b3806",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "29fbc349-e9b1-44df-8648-07f7950b120a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ddf6451-630b-438d-be31-4a50e68b518f",
        "cursor": {
          "ref": "6cb704ed-00d4-4c98-9ffb-42f8de79dde6",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b887c475-5e1f-4fdb-bbbe-38f0473bb423"
        },
        "item": {
          "id": "6ddf6451-630b-438d-be31-4a50e68b518f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b906c485-2d7e-4fd0-88c7-ad9017a74619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252b2ad7-c352-4174-aaa1-a399d1a2d99e",
        "cursor": {
          "ref": "ce165827-337e-4a72-8c07-ffaa0ee383e1",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "8c000771-e871-4c68-9c35-47715de5a5cd"
        },
        "item": {
          "id": "252b2ad7-c352-4174-aaa1-a399d1a2d99e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b8e82e88-7fc6-4da9-a752-1157a06342e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77a1d57-cbe5-45e7-bfb6-62e75076de24",
        "cursor": {
          "ref": "26465677-60da-4c27-a3f6-f9543878400a",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f5daea60-7cac-49e6-b024-85d27f7b7069"
        },
        "item": {
          "id": "f77a1d57-cbe5-45e7-bfb6-62e75076de24",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2b480909-ba57-464f-aea7-60be858cd1c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de5135d5-6842-464c-9297-417ae4c8f490",
        "cursor": {
          "ref": "04ed89d9-d35d-45ab-a3a7-fc46ed86e33d",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "17a5aa4f-d5cb-40c6-b8d4-43dd45f2bfbb"
        },
        "item": {
          "id": "de5135d5-6842-464c-9297-417ae4c8f490",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6fea0735-5f26-47ba-b567-b9bd4ab26c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a9b74c-1f7f-4de0-ad9e-a543ad4ae92a",
        "cursor": {
          "ref": "597366ee-6956-4a99-af33-33e6a7bc7c51",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a3366d36-9a49-4a32-87e6-f77db969c381"
        },
        "item": {
          "id": "d1a9b74c-1f7f-4de0-ad9e-a543ad4ae92a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f59e1ee3-ed69-412c-9d10-89c7cfb4c0f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ebba49f-d713-421a-9ce7-0960b6f683ac",
        "cursor": {
          "ref": "8b2592a9-8f84-4168-9a5a-b21a62f6583c",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6fdddf75-4326-4477-8a23-106b733243d5"
        },
        "item": {
          "id": "8ebba49f-d713-421a-9ce7-0960b6f683ac",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "50452743-c59e-4d59-acf5-463faeaaa1e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d93c6b48-ddca-4bb5-bf6d-4a5f1186892b",
        "cursor": {
          "ref": "21f11f99-7fab-46a8-9021-0cbff0874be6",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "965d82c9-336c-4add-ab42-b1c4cebeadc0"
        },
        "item": {
          "id": "d93c6b48-ddca-4bb5-bf6d-4a5f1186892b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "372eea30-20a6-46fd-ae24-50a5646f9a8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60e5c4a0-db63-4eb6-a410-a9b180a534b3",
        "cursor": {
          "ref": "38de6622-4531-4f6d-b950-b9dc512fa169",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "21ba053b-c161-423e-883a-30f1e5e00c71"
        },
        "item": {
          "id": "60e5c4a0-db63-4eb6-a410-a9b180a534b3",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5acfeadc-abff-4bce-bc92-3541995f8d7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "803bb977-fbbe-41c5-b2b3-6653f48bf03a",
        "cursor": {
          "ref": "e263444b-d656-4b5d-a108-4ee5c7651ec7",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "2ff37476-951c-4521-a16a-2630f6f43475"
        },
        "item": {
          "id": "803bb977-fbbe-41c5-b2b3-6653f48bf03a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "638eb0bb-6c73-4ed2-bead-661199ae89b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "105d61ad-6dab-490b-92b0-ad8e41baa098",
        "cursor": {
          "ref": "3dc6e047-3b31-48f0-9486-f0f967601e00",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e020e60f-c276-4202-a80d-958c2d305944"
        },
        "item": {
          "id": "105d61ad-6dab-490b-92b0-ad8e41baa098",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e250ce1c-8a73-4c2d-840e-e5dadd304cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a19af50-80ea-4c5b-8623-7a53556b3cd0",
        "cursor": {
          "ref": "c3ecfacc-adda-481e-a130-52ba804319cd",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6509ea96-a2f6-42fa-8ced-17137e758d3f"
        },
        "item": {
          "id": "9a19af50-80ea-4c5b-8623-7a53556b3cd0",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3356482a-42bc-4fd0-afe9-67b82cd11e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a5b1524-187f-436c-b5ac-796c2649579e",
        "cursor": {
          "ref": "8303abdd-2574-4620-a175-0bfe23c37954",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ff136e7e-14ff-4b3a-a6c6-dd4bd1dfb310"
        },
        "item": {
          "id": "4a5b1524-187f-436c-b5ac-796c2649579e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "5f1c3d68-f0e9-4cba-b4db-007421c85f02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcdcac3b-0f0e-4f1d-868c-b98a31789cea",
        "cursor": {
          "ref": "60cbae16-fe91-4686-8003-099dbbd164d1",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "59b885ac-1532-4e91-865c-7c6874835eaa"
        },
        "item": {
          "id": "fcdcac3b-0f0e-4f1d-868c-b98a31789cea",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d9e1eb5f-39d6-45cc-ae11-9d3297b91715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193d05b9-d910-492b-b62d-38d2f453c698",
        "cursor": {
          "ref": "84d2236a-b140-4ff7-b64e-96b406a260c2",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ae0a7d27-f139-4237-beb8-3f15adebec88"
        },
        "item": {
          "id": "193d05b9-d910-492b-b62d-38d2f453c698",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0352802f-ffa8-4da2-a1fe-b20f2aa547c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79a6b3ca-2d64-46b6-99ab-f0433b0bec95",
        "cursor": {
          "ref": "1ea8756b-bd36-4a14-ab1e-6163c1bd5e20",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "7c29c886-ef73-4816-b1be-157dbbd408dc"
        },
        "item": {
          "id": "79a6b3ca-2d64-46b6-99ab-f0433b0bec95",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8e3ae35f-a0ce-4975-8fd3-4447ed14973e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7917b89a-a76f-4f28-b3c3-403c0b7af5c4",
        "cursor": {
          "ref": "5c937f37-75f5-4d28-9798-758d2619c235",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "0b9cbbce-6f0f-4fb3-aa2e-4b2536d8fa76"
        },
        "item": {
          "id": "7917b89a-a76f-4f28-b3c3-403c0b7af5c4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "fbb35638-bd82-497b-b846-4815b6232f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21768f3d-a889-4e45-b82e-8ecb93e91323",
        "cursor": {
          "ref": "e25d9d7d-2ed8-4c32-9373-707471c68d10",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bc507b45-5885-452a-989c-fe4ae1e414bd"
        },
        "item": {
          "id": "21768f3d-a889-4e45-b82e-8ecb93e91323",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b2606a92-3dc0-45f8-81c2-3e67c294d241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e12b6bf-aac5-452f-9f71-426d736d917b",
        "cursor": {
          "ref": "3ab75acb-14d8-4964-a4e2-3e2249c9ba9d",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b65ff61d-8a5f-4282-af49-c35dd681c843"
        },
        "item": {
          "id": "8e12b6bf-aac5-452f-9f71-426d736d917b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "384feb9a-beb0-4968-8572-81007b3e9c88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f6d704-b5b5-4a75-aa37-72a6ca599571",
        "cursor": {
          "ref": "bafe0f63-608b-4f71-83bb-767e5fcc6323",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9f982ffd-b681-467e-b87f-e3caabd4c5f9"
        },
        "item": {
          "id": "24f6d704-b5b5-4a75-aa37-72a6ca599571",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "bf8d267e-cddc-45df-8bd7-d78236127e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26cc9bc9-a187-4ae9-bc7e-faccc727f8bc",
        "cursor": {
          "ref": "eb37d5a7-2cc1-47ea-a078-9fcd663bcfc1",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "fc92d96d-44ea-4d73-8979-08e937fa823d"
        },
        "item": {
          "id": "26cc9bc9-a187-4ae9-bc7e-faccc727f8bc",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "80aa2fb4-9e79-427f-869a-bb866e9e19a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20a8dfe-a052-46c5-a2aa-f977769dd650",
        "cursor": {
          "ref": "0710ad51-7f87-4f60-93f7-8379a71112da",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8e2b0d46-d3c0-4065-a587-f91a42c37051"
        },
        "item": {
          "id": "a20a8dfe-a052-46c5-a2aa-f977769dd650",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "afbe0e24-f7fa-4991-8985-23bef2230013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d269db6-3cd6-41b2-bb40-8964c80b65e0",
        "cursor": {
          "ref": "3da56705-4f5d-49f0-bcdc-91322a7a6709",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "1ef95f6b-ad92-44de-b2aa-a5d90c43b7ae"
        },
        "item": {
          "id": "3d269db6-3cd6-41b2-bb40-8964c80b65e0",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "2f40975b-cb6d-480d-a77b-e53f26187fa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2d021c-f601-4f4b-8f5d-556c1c7ccffa",
        "cursor": {
          "ref": "f400aa6c-4bcf-44c4-bf79-d5258bcf54f5",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4b3426bf-5765-4f70-817a-e090fa308835"
        },
        "item": {
          "id": "ee2d021c-f601-4f4b-8f5d-556c1c7ccffa",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f074d890-7700-4a0e-9e18-3810ce0e49be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24a67b2-9704-4d8a-b4fe-749b03b44d37",
        "cursor": {
          "ref": "835d8cfa-0e49-437d-b13d-d8c64e4f73f3",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "07f4e960-d3ff-44d5-9634-db086cd21907"
        },
        "item": {
          "id": "b24a67b2-9704-4d8a-b4fe-749b03b44d37",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "35ffbc81-8068-4c8e-a09b-ac4b468e0162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9608608c-b881-4702-9492-a82c9721e318",
        "cursor": {
          "ref": "eb16788a-c9d6-4a40-8338-46070055ce22",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "765412d2-16d5-495f-8879-ff843db6e3e3"
        },
        "item": {
          "id": "9608608c-b881-4702-9492-a82c9721e318",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c10f464c-3c5d-4012-81fa-433d3dc8a076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e9ed36-5787-4e8e-ae35-47ec9cc79e14",
        "cursor": {
          "ref": "3394d653-e170-48e9-b6d4-d372d3ba852f",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3edaa84b-56b1-4cda-a460-3b9ff11804ba"
        },
        "item": {
          "id": "e0e9ed36-5787-4e8e-ae35-47ec9cc79e14",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5f9dc58e-0909-47f5-80ca-50033b4633ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61666514-6faf-49e1-823e-e1c826d34519",
        "cursor": {
          "ref": "c73c3385-c683-48c8-addb-798d277a3895",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9b1f848b-2817-4ae0-9ac9-ba88895f3ba5"
        },
        "item": {
          "id": "61666514-6faf-49e1-823e-e1c826d34519",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c0a432c4-6b44-4a3c-a85c-81603b5ddd80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "954897e9-36d6-48f3-84eb-a1126af80ee6",
        "cursor": {
          "ref": "ac7f85c6-e719-4e7c-9097-d6d8139d7aa1",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b819dc5f-c75f-4f35-8e61-5597af8a53f3"
        },
        "item": {
          "id": "954897e9-36d6-48f3-84eb-a1126af80ee6",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "749a5c96-fc34-486a-8d4d-63c0cdb75bb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b28692ac-e34a-476d-8446-c9cc7069efc7",
        "cursor": {
          "ref": "63160734-ac1b-4b46-88f8-b9591960b53e",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2ce4d6d4-8887-4c4a-acf0-5559bbb4d7de"
        },
        "item": {
          "id": "b28692ac-e34a-476d-8446-c9cc7069efc7",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6e265a0f-235c-4e0f-ac72-6b1cd08fdb07",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "cb52fc14-c823-415d-b203-8fc5c03c0b18",
        "cursor": {
          "ref": "cecb9300-ce99-450c-aae1-837613557bdc",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f37925b9-ffa0-4173-bdb8-db65de4ae3c9"
        },
        "item": {
          "id": "cb52fc14-c823-415d-b203-8fc5c03c0b18",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c20dc96e-b404-44fd-b21a-91a55887cc19",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "a007e468-b1c8-4d6d-90d0-8989083da65c",
        "cursor": {
          "ref": "01523922-8332-4e20-b296-1f4da4d3980a",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f87f380f-5308-425c-b52e-795b11ebf1a2"
        },
        "item": {
          "id": "a007e468-b1c8-4d6d-90d0-8989083da65c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5e71f668-58d8-4c3b-af59-747f4fddb3b4",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "152353fc-5438-488d-aa98-1bab344f0c61",
        "cursor": {
          "ref": "45e4e2ef-5e8f-49b9-937e-6f30aeaa9df8",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f0e40861-57cf-4bd3-84d3-01621406ea81"
        },
        "item": {
          "id": "152353fc-5438-488d-aa98-1bab344f0c61",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "eb1caab6-7719-4f0d-9322-18a15714fc68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0883470e-3cf4-4951-a4a6-64a7ddb8420a",
        "cursor": {
          "ref": "6896a234-e2b0-4684-becb-e487e9549673",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f2854f26-dec6-4c46-8458-3ea75467a8ca"
        },
        "item": {
          "id": "0883470e-3cf4-4951-a4a6-64a7ddb8420a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1edbe5cd-668e-4c24-bf6d-8833edae1bb9",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "4c8be39a-6db9-4127-9ee9-ca390ea2c79a",
        "cursor": {
          "ref": "42950c35-305f-4a71-8ce5-4463eabbeeb8",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "05670755-4100-42ac-8dda-4cce0244c49e"
        },
        "item": {
          "id": "4c8be39a-6db9-4127-9ee9-ca390ea2c79a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7e222330-35f6-465c-929c-d2f5d692987b",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "b38cbeb3-dede-4d17-9f05-4ca73dc1e91f",
        "cursor": {
          "ref": "e6e92990-7bb8-4fe0-aec3-33bed58dc906",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "165c12d6-17ad-4070-a406-3facfa9a0144"
        },
        "item": {
          "id": "b38cbeb3-dede-4d17-9f05-4ca73dc1e91f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "67846a12-1eb3-4843-bc31-ffa134d87bd6",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "9ad6a980-00fe-4fae-a581-48881c008f6b",
        "cursor": {
          "ref": "0cb9c8ac-ed1f-4d3a-9e72-0cacd682b926",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f4718f8b-a907-4d29-9c38-0e443c46832f"
        },
        "item": {
          "id": "9ad6a980-00fe-4fae-a581-48881c008f6b",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "7a97c6b6-8774-4367-bf8c-8202dfda30c2",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "ba26c310-9907-4565-9c55-50601b4d0f4e",
        "cursor": {
          "ref": "ae7477c7-ddea-4347-bf2d-19a268ece1ff",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9ca19ff1-737b-4cb9-9cd4-e31252fef5b2"
        },
        "item": {
          "id": "ba26c310-9907-4565-9c55-50601b4d0f4e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "d7b9fdce-d328-445a-9596-c312bc30f631",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "58d72558-6b17-456f-ab31-678600764581",
        "cursor": {
          "ref": "9bd5246a-40de-4ee5-927a-2aab75d170d2",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "0059cda3-0018-410f-b8d8-75670195102d"
        },
        "item": {
          "id": "58d72558-6b17-456f-ab31-678600764581",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1bfde339-c834-4f7b-a828-6100a172c241",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "59da92b6-1ce3-4207-8431-d472213dfd6a",
        "cursor": {
          "ref": "7dc11a5e-68bd-4ce3-973e-9bc8ec35395c",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9ad46bdf-c9f0-4db2-8600-024ca9d3bde5"
        },
        "item": {
          "id": "59da92b6-1ce3-4207-8431-d472213dfd6a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6a7177ff-9af9-4cd6-82eb-aa631c7c97a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f85c1f26-ba4c-49df-b1e1-5f8021a74c78",
        "cursor": {
          "ref": "9b8ad81a-cb62-4d9f-89c7-419fa99690e6",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d1e4810f-8c6e-4486-893a-358985aeea1d"
        },
        "item": {
          "id": "f85c1f26-ba4c-49df-b1e1-5f8021a74c78",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1867a0c2-60ab-4b6a-920f-9e14cfca3c4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b268ec1-5dc5-408c-b5a6-6c0d9088d75c",
        "cursor": {
          "ref": "9fab2bfc-685e-40f1-9a63-70d8198fefeb",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a5973c73-122d-46f4-804d-06091c29b5c9"
        },
        "item": {
          "id": "9b268ec1-5dc5-408c-b5a6-6c0d9088d75c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4ce75c74-43a9-448e-be60-270f150f0544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28e4446-9bde-4720-a868-e2f50e95e9c4",
        "cursor": {
          "ref": "16b4235c-3f88-472b-82aa-2ae492b96625",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e7ef82db-fa02-4850-aaa5-d4214a8e9013"
        },
        "item": {
          "id": "e28e4446-9bde-4720-a868-e2f50e95e9c4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "2cda60df-7437-4908-85fd-207f0fe3dd76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "422ee1e2-ac4e-42b5-b721-2adf1020877a",
        "cursor": {
          "ref": "a351bed1-a853-47fa-834f-f4ad21780459",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7ca3a42f-ccaf-4b73-9f32-47e68b7127dc"
        },
        "item": {
          "id": "422ee1e2-ac4e-42b5-b721-2adf1020877a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a2b86aad-d7b7-413f-94e2-f11b8ed3c07d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7258ae89-6182-403f-b7ff-02c0771298af",
        "cursor": {
          "ref": "ef2ade40-5919-4083-b5b9-1953788e6584",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "099ed0c6-4790-4d40-9527-2eace2f42a7d"
        },
        "item": {
          "id": "7258ae89-6182-403f-b7ff-02c0771298af",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "89bdb7f9-8487-47d2-bf6c-2e18a08fb31d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b60856a3-4c6a-4d30-9cfd-1d2e77737f27",
        "cursor": {
          "ref": "ae839ddb-5f4d-4311-a297-ed23469a347d",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6207f19d-1094-4e93-b0af-04b694956ba2"
        },
        "item": {
          "id": "b60856a3-4c6a-4d30-9cfd-1d2e77737f27",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7b4a8ddf-bae0-4d52-a750-d28f9abc7ae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73274f5-8ad1-4714-bcde-ac64896ab886",
        "cursor": {
          "ref": "65fc4ef1-7d6b-4a24-bec9-54a1dc4639b0",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ff334449-216c-4770-b20f-009bc5a0b273"
        },
        "item": {
          "id": "a73274f5-8ad1-4714-bcde-ac64896ab886",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d313ac39-9ddd-4137-802d-323eeab2baa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5562164-a9e0-4959-9651-bc30950b8829",
        "cursor": {
          "ref": "5f34f4cd-e41a-4974-9032-4d8636e942cb",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "dda4954f-dbb4-4109-a3e7-24b187f48ee0"
        },
        "item": {
          "id": "e5562164-a9e0-4959-9651-bc30950b8829",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "dba6f50e-5f3c-4ac7-99bc-0fc2edc4bef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f71842-1a6d-4d0f-bfb5-93ba05b25e06",
        "cursor": {
          "ref": "2458a00c-ea85-46c9-9df5-3b16ac7e36a3",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "584d7504-fcff-4c42-aa14-f0d2ccf0fcd5"
        },
        "item": {
          "id": "53f71842-1a6d-4d0f-bfb5-93ba05b25e06",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d671c89b-337e-4354-a759-5b3f939dbce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4104892-394d-4e67-93a5-ffb5caf4df9a",
        "cursor": {
          "ref": "984bad16-d80a-41ff-996d-19f38b5b22a6",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "af3fc2e1-aa26-4446-9b8a-67f370c4efe5"
        },
        "item": {
          "id": "f4104892-394d-4e67-93a5-ffb5caf4df9a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d3981fe5-d13c-417e-90f7-a5f7648c560f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "671db29d-0247-4512-815c-5f765b5b72c4",
        "cursor": {
          "ref": "8bb2c0d2-a300-4f8b-9480-5b1bb6168c95",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c0c44605-f994-4b3b-ac5b-cc9bc782eb7d"
        },
        "item": {
          "id": "671db29d-0247-4512-815c-5f765b5b72c4",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "07b936ae-5b5f-4a1a-9f91-c766ffb1bd1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1b094d-8057-4628-af4a-e92231a5a40d",
        "cursor": {
          "ref": "4ebb1293-34e8-4344-a7ec-09b4ceac2d6f",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "239787e2-55c7-424b-beb8-876f1b3f0cc1"
        },
        "item": {
          "id": "4c1b094d-8057-4628-af4a-e92231a5a40d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e261f8cd-eb3b-4dd2-9c2b-e22015ea0f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536a25af-3d53-4618-877a-e84f600bbbbe",
        "cursor": {
          "ref": "96f92e5e-fa27-4ef6-a6cb-55de3ba2eb1a",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6567132d-3d67-4574-9f41-4c2293c438ab"
        },
        "item": {
          "id": "536a25af-3d53-4618-877a-e84f600bbbbe",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c364bc65-f68a-4770-9811-041a5cd68bad",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "3406b881-7377-4559-8f7a-f7926c2f4f2c",
        "cursor": {
          "ref": "fb3335d3-f374-44dc-a445-4151619afd53",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "ab793f25-38f6-4428-b525-fa22c4950bc2"
        },
        "item": {
          "id": "3406b881-7377-4559-8f7a-f7926c2f4f2c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3043be71-1f42-4a0b-b324-0174a14f24ed",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "603b4f5d-3360-44b8-88b2-9ff75aed46c0",
        "cursor": {
          "ref": "5b6ee93f-5d45-46a6-bd6e-fcc971a21b56",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "90d25dcb-6efb-4c4c-9d36-07fe123f36fa"
        },
        "item": {
          "id": "603b4f5d-3360-44b8-88b2-9ff75aed46c0",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "79dda9f1-2725-4119-a183-cc828b546ec2",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "e578a8d8-1eca-4554-af40-c77ce936879d",
        "cursor": {
          "ref": "bf37d908-392c-4680-bad9-56103e02aa0c",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0fe749a7-eada-435c-a0b5-8cdce8876e25"
        },
        "item": {
          "id": "e578a8d8-1eca-4554-af40-c77ce936879d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "43f26740-b635-434f-bd52-e7b028613ba2",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "75b9ad54-204b-4258-91d2-70ea9e091d52",
        "cursor": {
          "ref": "51414714-6609-4b6b-aaa8-54b5d6ac0827",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "59a92552-4d73-46f4-a019-ee57a8225f5a"
        },
        "item": {
          "id": "75b9ad54-204b-4258-91d2-70ea9e091d52",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d3a4f39b-ca06-4d4a-bfdf-42973bae571f",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "4fb2cf25-2724-4822-900e-a0d788b7e80f",
        "cursor": {
          "ref": "aa289a62-9baa-4c6b-855c-9ee2bf188a49",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8614feb7-ef53-4940-928a-d0746f585283"
        },
        "item": {
          "id": "4fb2cf25-2724-4822-900e-a0d788b7e80f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "150c28c9-8483-4e70-90ea-3204b268a1b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e45c9b3-2ce0-445b-8092-da3cbdc9d6be",
        "cursor": {
          "ref": "10ff8e41-b83a-4d82-b91c-5a2281362be7",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "18e409a2-abe5-4094-8444-481055c500da"
        },
        "item": {
          "id": "7e45c9b3-2ce0-445b-8092-da3cbdc9d6be",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1316d78d-19b0-4bc5-8ecc-fcebee99962e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "701bd9d3-4453-48cb-904f-d17f0c6ce8a7",
        "cursor": {
          "ref": "95771d6f-36d6-4cc1-86fa-1b515dde0636",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "be50d502-fa9e-4d63-9362-1e1c392cd86f"
        },
        "item": {
          "id": "701bd9d3-4453-48cb-904f-d17f0c6ce8a7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "17b6cdb9-df55-4f59-b788-b380d2f0720d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1ba3d6-5cb2-409c-b1a7-fbb0fc9a9b47",
        "cursor": {
          "ref": "6b86637f-76c8-4bb7-b1a5-e4fe7ec4fbe0",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d8e20063-0be0-4d8e-9011-207d92709572"
        },
        "item": {
          "id": "4f1ba3d6-5cb2-409c-b1a7-fbb0fc9a9b47",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9d15a112-f2dc-459c-8bc6-c029b7d80721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5651964c-eb37-4da0-9a19-5e491a51ef52",
        "cursor": {
          "ref": "cc2f764a-e01a-43a5-8040-3671bcc7c37a",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c36696bc-821f-4d9a-af3c-b131b11b050e"
        },
        "item": {
          "id": "5651964c-eb37-4da0-9a19-5e491a51ef52",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "bbfcc37b-c3af-433f-aef9-719a8f6f953e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a039e8e1-6300-4c05-9271-780964dd865e",
        "cursor": {
          "ref": "c7ad4884-e3c6-40a2-a923-4b5cba1d6293",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b00f3010-28b0-4a89-8d11-513a003a3779"
        },
        "item": {
          "id": "a039e8e1-6300-4c05-9271-780964dd865e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f8758e0b-b06b-442a-bc5c-294f8191fd2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "052a4164-cd6b-4b78-b66e-b22afb57fe26",
        "cursor": {
          "ref": "1515e150-5331-4f6e-a9a6-aae123b91331",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "36689ee3-d4e1-492c-bb9b-256449a0bcb6"
        },
        "item": {
          "id": "052a4164-cd6b-4b78-b66e-b22afb57fe26",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "910c9508-40d2-4b67-8ab1-797602bfba3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1715cdf-03e6-4bfd-8000-015160ebeb9c",
        "cursor": {
          "ref": "942de318-fff9-4f03-85af-fea84631539d",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f6db5c7d-2776-46ff-abf9-4e5cf9106eb6"
        },
        "item": {
          "id": "c1715cdf-03e6-4bfd-8000-015160ebeb9c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "03abbbdc-c06d-4c15-b165-61067dcc9bee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863d063d-f603-4dd4-ac06-e6ffd88bba8b",
        "cursor": {
          "ref": "bb764140-449f-4b89-849e-4fd5db98cfe2",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7294fb33-3c09-41fa-a69e-5d5965795a33"
        },
        "item": {
          "id": "863d063d-f603-4dd4-ac06-e6ffd88bba8b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2c7e5bb2-1f02-4209-9931-05643a486760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da7ff03-586d-4874-a0d4-b9f6007db1ff",
        "cursor": {
          "ref": "f5178372-aa3f-41a5-9a33-3228b903d3b5",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d6d17c3b-12e3-4c27-a458-95da63abb54e"
        },
        "item": {
          "id": "5da7ff03-586d-4874-a0d4-b9f6007db1ff",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "a5e33141-b4e2-4641-99e4-2c1f590c2b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444feac6-ef55-420b-ac50-47f27733377f",
        "cursor": {
          "ref": "26b3c7cb-30d1-4e83-a753-a308c242aea3",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6ef2bd5f-968a-46dc-bbc6-6d06779388e2"
        },
        "item": {
          "id": "444feac6-ef55-420b-ac50-47f27733377f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "9f31aba1-59e2-4bd3-9e21-cdb04ad4115a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5865be9-da0e-4242-93ca-779729678d81",
        "cursor": {
          "ref": "09fc84d1-ce39-4de0-8a85-606f99dc9a59",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "cecae50e-3d32-4740-92e7-3236255f3a8f"
        },
        "item": {
          "id": "d5865be9-da0e-4242-93ca-779729678d81",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "01e8721c-4079-4acb-83da-6c894951fabd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532002a0-06d5-476c-bb44-66b597a4fcff",
        "cursor": {
          "ref": "5804cf0c-a343-4d4e-b007-5e036c0b68f0",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d7df1bf4-5ac3-485b-8e68-29189a08c6b2"
        },
        "item": {
          "id": "532002a0-06d5-476c-bb44-66b597a4fcff",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "00d5f3ed-2513-40b8-8ee0-a06ffb74e0d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "555cba61-4af9-4ed5-91f0-b1584485f3b4",
        "cursor": {
          "ref": "a89f832d-a047-4a39-a3be-d7ff282a3198",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c1d74cb7-a0bb-45d0-af2e-4358f7ecf838"
        },
        "item": {
          "id": "555cba61-4af9-4ed5-91f0-b1584485f3b4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "710b5287-f7b1-4440-99a7-cb2f7c4bb6bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7243289-d16e-48ce-a007-8ab399d151e9",
        "cursor": {
          "ref": "90881444-1f2f-449a-9339-c4fe965324f2",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c31018e1-34ef-41ca-8d3c-af7bb08c7b65"
        },
        "item": {
          "id": "b7243289-d16e-48ce-a007-8ab399d151e9",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "20f5cfb2-0293-46f6-96a6-ce2b62e7ced0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e80cf201-06e7-4844-8901-66a4fee7b5e2",
        "cursor": {
          "ref": "69ef9f63-784f-4f19-ac56-c98c61d2ddf5",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e28f5723-b35d-4b7a-aa1c-2b69f68879c1"
        },
        "item": {
          "id": "e80cf201-06e7-4844-8901-66a4fee7b5e2",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5610922b-18a4-4a15-8e15-7e54441b112a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca01bf6b-7cbd-4fc3-bb2c-69d4b1cf12bf",
        "cursor": {
          "ref": "1099ee24-9ba4-4bb3-bcbf-b97fc3914137",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "9fa3d135-753b-42f4-b6c9-42a2e5a3cd52"
        },
        "item": {
          "id": "ca01bf6b-7cbd-4fc3-bb2c-69d4b1cf12bf",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a02f574c-e0b3-4279-bc01-b28459872c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c52d67ca-b5c7-4916-b366-7deb6fe288b8",
        "cursor": {
          "ref": "f5df4800-121f-4631-a71e-8e26a7056d70",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d0e66b94-8951-4414-9bff-b5ff331a04dd"
        },
        "item": {
          "id": "c52d67ca-b5c7-4916-b366-7deb6fe288b8",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6a511e83-37ad-49ed-8ebd-f87d0c71479e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ec1a63-8b9e-425c-b1bf-2198f56f010d",
        "cursor": {
          "ref": "e01e46ab-5920-4de3-90bf-8563bbac65a7",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "60472add-92fd-4386-b86f-cb2e5cac3ebc"
        },
        "item": {
          "id": "b0ec1a63-8b9e-425c-b1bf-2198f56f010d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e574b108-c7d8-4a8d-b820-aa3af5555997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "420d250d-48ea-4d13-83a6-4cb86ff0db24",
        "cursor": {
          "ref": "5d8cfbaf-7f3d-44a5-8388-2a5f41587d2b",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ec3e7ebe-b6b8-464d-8266-6252c463ab53"
        },
        "item": {
          "id": "420d250d-48ea-4d13-83a6-4cb86ff0db24",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a57301eb-b5be-4ca8-b23f-b1380f34a152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c289d4-9d79-428a-9a03-34f62cf2d3a2",
        "cursor": {
          "ref": "ddaf9be2-d8a0-41aa-9fec-d89894c9cebc",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "398436ea-1b8e-48e1-8640-c29d5f6ba65e"
        },
        "item": {
          "id": "78c289d4-9d79-428a-9a03-34f62cf2d3a2",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9f6df424-71d2-4129-984f-a7b8bf21473a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef504a0f-9587-4949-beb0-cd0de45e21de",
        "cursor": {
          "ref": "8d491c9b-69b6-4e5c-9394-6530dd1d1dbf",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0eb7c0b1-5aed-4df3-8b34-4cd9b6ed3c8f"
        },
        "item": {
          "id": "ef504a0f-9587-4949-beb0-cd0de45e21de",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d6a549d8-d4c4-4515-832a-f21ea9fd4e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "821d09ea-b49d-43ae-8065-819956b477f1",
        "cursor": {
          "ref": "dae927c4-9edf-46cb-9583-94952b14d260",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f98fc3c6-e5c5-4e99-ae95-cf71a10e8b1c"
        },
        "item": {
          "id": "821d09ea-b49d-43ae-8065-819956b477f1",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "831d7212-9605-489a-b4e8-c09b2c19954e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c99986-b891-4bae-9bbc-ad80da63f1af",
        "cursor": {
          "ref": "86271f75-756d-43e4-8de3-e48d88a8541d",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0d4a5ab8-8f2a-4c30-ba77-91dc0d361b2b"
        },
        "item": {
          "id": "62c99986-b891-4bae-9bbc-ad80da63f1af",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "49e1cb54-bb10-4954-afa3-ef1d4b8d84a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e556c295-115c-40af-8062-48b79efb5664",
        "cursor": {
          "ref": "96fbf4df-e665-4156-9edd-c27c2f1fda75",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "deee7ca3-0267-40aa-9281-5e25374ca3b4"
        },
        "item": {
          "id": "e556c295-115c-40af-8062-48b79efb5664",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "23be533e-a6b9-4f65-89b1-ab164081dd01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805e5dea-523c-4b16-9437-fa4743343db0",
        "cursor": {
          "ref": "29340561-767a-4151-a997-65af96b26890",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "76d2e117-acd9-465f-844a-762399a97779"
        },
        "item": {
          "id": "805e5dea-523c-4b16-9437-fa4743343db0",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5e41e0f2-55d1-4cb6-9694-244e5fd73f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e90413a-220b-43c8-9332-54113b878558",
        "cursor": {
          "ref": "f0ad67c2-b057-45e1-ae92-a2c523364b3c",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "90d1e0fc-0a5b-471b-9d87-a0cc751151e4"
        },
        "item": {
          "id": "9e90413a-220b-43c8-9332-54113b878558",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "45d3f81a-5428-412c-bb90-8b700232b2df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99262b0f-9037-4cc8-b511-343f0e44f93d",
        "cursor": {
          "ref": "ae3c6d2a-d63b-4e3d-8d4d-5db41f1f5c8a",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "cc748771-8056-4770-aa61-77aab645ab7b"
        },
        "item": {
          "id": "99262b0f-9037-4cc8-b511-343f0e44f93d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e6f950a8-67c5-4222-906e-bd5f9b69975a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d191d0-db08-435c-9b6b-7a5141a2b174",
        "cursor": {
          "ref": "7f2b6350-476a-44ea-a577-03c0842138c4",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "350f7427-b856-42ca-91b2-5d44a02ed08e"
        },
        "item": {
          "id": "94d191d0-db08-435c-9b6b-7a5141a2b174",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b4449227-d321-46de-ae18-82f650913b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be37f842-98bd-4144-baaa-9ab21fc208d2",
        "cursor": {
          "ref": "0612f4f3-68d1-4701-987b-04104d59c8ac",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f2bbfd98-cc59-47e5-921c-cc90897bf5d9"
        },
        "item": {
          "id": "be37f842-98bd-4144-baaa-9ab21fc208d2",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3498aca4-bebf-40b7-8ad2-4a1f8f0649b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6590f2c4-1434-4712-b75f-668a392dd281",
        "cursor": {
          "ref": "55484f00-d971-49f8-b376-18036a892aa7",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "276ac5ed-5d55-400e-97f0-2e5cc99260a7"
        },
        "item": {
          "id": "6590f2c4-1434-4712-b75f-668a392dd281",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d7a3f649-2166-4ce3-a926-341b2305cf1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd72013-0165-4e7c-a192-ae4ab90297f5",
        "cursor": {
          "ref": "ef20a1a6-3437-4f93-a2de-585a05122d80",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5ee79697-848d-4913-bd1b-cc73b5cdafd6"
        },
        "item": {
          "id": "2bd72013-0165-4e7c-a192-ae4ab90297f5",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d58ae535-7f6e-4a63-b6aa-05d62ca1e083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "791acc74-cd33-4008-8e08-4e52a84be907",
        "cursor": {
          "ref": "cc0af41c-fbad-4039-b044-bd2025de1a84",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "be75c38d-3453-4dc7-b91f-56193c5a8a52"
        },
        "item": {
          "id": "791acc74-cd33-4008-8e08-4e52a84be907",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "24b9cd29-8bfa-4cc4-920d-f6fc0b06f2fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "753c5941-2634-417a-9a65-a59a91c05977",
        "cursor": {
          "ref": "73571390-db4e-4262-8b2e-dd5daf57cbb8",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "28f54a55-5f7e-4225-a61b-262f0dc5729b"
        },
        "item": {
          "id": "753c5941-2634-417a-9a65-a59a91c05977",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "055b499b-6df0-4a0b-845b-9be5ea2bd973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cbe74ed-3716-499c-9f73-68555e0685ed",
        "cursor": {
          "ref": "a63f8cb5-6ff2-47c1-9af1-353151f60b03",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "671375eb-157d-456f-a27c-cbcd7fd5b366"
        },
        "item": {
          "id": "7cbe74ed-3716-499c-9f73-68555e0685ed",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1c183aa6-2057-40f6-a1e4-48f58955ebb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dcb2a06-2e92-4bac-8038-164137c158f9",
        "cursor": {
          "ref": "167d5215-5659-457c-bcbd-ba31b87f0211",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c9ce35f2-ba01-411c-867a-70b1968621be"
        },
        "item": {
          "id": "6dcb2a06-2e92-4bac-8038-164137c158f9",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1fa47893-df8e-42ed-abec-b8109453bfc9",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "641e4443-5489-40a0-9811-4719a714a11e",
        "cursor": {
          "ref": "32949fae-4779-407b-a7dc-dcd0b56e28be",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4fa707cf-3660-48c9-8c18-750ea3ec776c"
        },
        "item": {
          "id": "641e4443-5489-40a0-9811-4719a714a11e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "367dad76-ca24-4320-a266-4115cda453f0",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0125ef-dba3-489e-8656-698fd7c3ceed",
        "cursor": {
          "ref": "62653bdb-4116-4972-bcf2-c3b8c7e1e05a",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2fe6b6d6-c5fd-4fe3-a008-be0f23629ee1"
        },
        "item": {
          "id": "2e0125ef-dba3-489e-8656-698fd7c3ceed",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0984aaf0-808d-47ea-9f19-5819041fa4ed",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa0ba8f-9b20-4c72-994d-46d2e004ea2b",
        "cursor": {
          "ref": "4dfd417c-f81b-4612-b87d-50b8d87fbb55",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e6f7f227-e8b2-4290-bde7-a830bbdc4250"
        },
        "item": {
          "id": "caa0ba8f-9b20-4c72-994d-46d2e004ea2b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4652379a-6fb8-4323-b279-7e1d9e613840",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa0ba8f-9b20-4c72-994d-46d2e004ea2b",
        "cursor": {
          "ref": "4dfd417c-f81b-4612-b87d-50b8d87fbb55",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e6f7f227-e8b2-4290-bde7-a830bbdc4250"
        },
        "item": {
          "id": "caa0ba8f-9b20-4c72-994d-46d2e004ea2b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4652379a-6fb8-4323-b279-7e1d9e613840",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4972bbe0-22d5-46c5-bd06-6f58e12d4199",
        "cursor": {
          "ref": "a404f357-446b-46c0-8633-8cd82030e7ff",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7d3867c1-a5ff-4005-a0b1-1456ceaf552e"
        },
        "item": {
          "id": "4972bbe0-22d5-46c5-bd06-6f58e12d4199",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "40b87796-f6d2-4d6c-b205-0ec90ca6ec33",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c64071d-0207-480b-a8f2-634284083611",
        "cursor": {
          "ref": "28b6ee5b-0169-43c5-abb6-f7687553ec3e",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0d002f9b-51c8-4618-a579-c970cd62b7cb"
        },
        "item": {
          "id": "4c64071d-0207-480b-a8f2-634284083611",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0da46e9c-6304-4906-af9f-f655bf0f2bed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}