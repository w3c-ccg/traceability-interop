{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "05132397-83ce-4a85-af40-d8163dd6a89e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4c0faab3-b6b6-4690-9dae-ee729f8860bc",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9a3f4812-0875-4cad-95af-0b0648c23307",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3f717c88-9a9e-4392-bf44-7a03ad498748"
                }
              }
            ]
          },
          {
            "id": "012b3c9c-dcb7-43cf-bc76-5a05104be0ed",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "680e8f74-3486-4ad3-b617-584e24681d1d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0daf97bb-a165-4d3c-b77c-6f9adb9628b5"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "737e45e2-da74-41e5-8e5f-6d909f9817fd",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d64624e2-d124-42af-88c1-e9e1fad4e94f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d0df47dc-d574-4702-85b6-1bba3dde08f1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8349cfaf-2bc4-4de9-888b-a5fb5d27eaf0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ca844d4d-6fc9-42c6-8515-c86114bd9a0c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "919d6edf-5c32-42ad-86d4-6704ef7ecd77",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0ac18217-7ce4-4e4f-b246-d1516e84ed18"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "010aef6e-0944-4864-85ef-be5ee340cef6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "17423c87-fea5-4d8a-80c7-220370272361"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2717befb-a1d0-404a-98e3-a2320152827f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "15dae4e7-6543-4d85-b4ba-eceeb7ea4b62"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "db9b8af1-643b-4a6b-abc5-6842ce4b2329",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "80169b90-946e-4128-b437-54050fd65f31"
            }
          }
        ]
      },
      {
        "id": "3aee0959-b705-4131-b301-936de3753e2c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "537bf34b-24f0-47d2-bd91-04465f446d8d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4b347ecf-da6b-4884-a6a0-8fd9e9279883",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "363add2f-aa65-48f3-ae94-3830726ccae5",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c9042e-b677-4910-883e-f4395391265c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0999e9c3-c170-4516-8e08-0d4d840a6c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e806293-9256-463f-8867-51df29dafaa6",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "115ff530-b86b-47e8-b583-e5ef1d3cce7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9fd9474-383b-44a3-ac01-91a8409aad9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6a8d20-10db-4f95-8b2b-94253444e226",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f27a5c-f693-41ee-8e01-d88327f80827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d66c7f1-4de8-4fd9-9c21-f62ccfd6c3ea"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f791f30b-225b-4a0d-bd63-a95c7d4efe90",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "73969624-c85e-40e7-8666-ad8c53226609",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d091d085-0e53-4c77-9dea-b60dcac82110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "085f8d29-99be-4a3f-9ab0-a3ae913f48c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6f7783-d3f6-406f-8308-d4773fec2069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afbf79e4-0124-4a85-9d44-26dd97091e82"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "30de5dfc-a82e-4616-95b8-4ab9250ff7ba",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5b3d2e5a-e4cf-43f7-bad5-775de721c5a6",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4098c6c-245d-4976-af36-d4ed1ed0d45e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "36aea03e-a1db-418f-9ea4-7c68c3ddfdca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6348ab4a-e509-49a5-866e-5707841f98f4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "2a7f4b13-526b-497b-afaa-50c69960699c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e1f948b-4bec-46f0-9bdf-d6ec7ab28c78",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4113400b-7c5e-4cd9-96fe-21964e97d0b0"
            }
          }
        ]
      },
      {
        "id": "c09c2631-e271-46f8-b8a9-1fe5a7cf4cd4",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "bab27011-095e-47d8-bc5f-f8f3b4580574",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3a26b55b-6b17-477d-b615-2e16632dda21",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a0caf111-05b5-4a2c-8963-4d6dce25142d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94bd0a4-813d-4baa-b6e2-6b6ab4359fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d27f748b-8505-4655-8fb1-44e7caa8379e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "542983eb-72d1-486b-a17c-d4a14771c439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01a6cbf8-fc82-434b-934d-81e528493678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c87a2ef8-6f43-483b-9158-3928aed43482",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dee1d0b-3173-429b-a853-d6c7cc44c824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07739372-473a-4494-aeb2-e51576fa2222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae29a705-c781-4627-a2b8-190a3c02e07a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dcf96e5c-4ae6-4228-aad7-b4d78e9ce221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbad58dd-841d-44f1-910e-75a56dbfd63d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c6f10ed-9478-490e-9c94-bdbd40c78763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "135f85ba-1718-4656-97d0-f917dc7b54a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba7c6796-d651-4ec4-b6f7-f7ab764f8472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75ae6859-349f-415c-bc85-f421af047ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f13831-553d-4154-a482-cdeb85851955",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937a72c9-c8aa-4dd7-8501-6f1089ea3260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a7f2047-73bd-4b68-a5b0-f89705859dcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b9406c-d852-4f81-9dfd-ab78135085e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6b1f908-7160-4d31-9b5a-c35dc83fa61b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e915c5d2-4d17-4eb1-be84-00d3a186a62c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe264c22-4016-4855-838d-bf0fe399a7ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f883ed2d-5305-41bb-968d-5a239534cb3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14748027-f3c0-47f8-8c49-4383ec11b30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "361f19b2-8ede-4b94-b78f-9ff804cb3de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b4dda88-8263-44b8-89be-ec3d4261a99a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc3a338-8664-462d-9d4a-f27d6f7ad596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cb1bc46-be0b-46a6-aea5-2491236bf9c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a092d22c-d24e-4f81-ac44-8ee5ce904623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4a09dfb-4acd-4b57-9c02-0a13a90039bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd8e13a-b704-42f0-b796-b920192d2613",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1b9618-8e88-4b04-89bc-cfc369ebe1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b8ba5de-7467-4ebd-bef0-a57775b32db6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a90843-1591-43bd-9753-154ac0932108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f7d1661-d5d2-4bd6-9fdc-81a185032649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6957b135-901f-4451-aa42-0539d37774ab",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb7136f-7cca-4a22-97ee-8d8eab6e8cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90886fab-e50f-45a7-ae19-62524d263958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f17083b4-91b6-460c-a814-a21853a59537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a76e07c9-2fce-457c-9dd8-8aef479af42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d39cf25-2ecd-43a7-942c-be09dfe085b8",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b50167-1189-4c8c-89ca-66a6298ad4c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eb20074-1d22-4b82-9fe8-8c53d33144f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1339576-6ea8-4cca-ab04-1340709bb8e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4cbe84b2-8ae9-4029-bf4e-72c2917fb24d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ad1c41-58d1-4b59-9ef1-b864b2fccf82",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0b7698-cf1c-47b3-b08c-659438ca4139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa507890-0d55-4109-9c7e-6da9ef2a39bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2714568d-e218-4c58-ac13-fad3dd4b8c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fc121ce-c5e3-4a8b-9f7f-5a6a0b15d00e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077869f8-bd02-4116-9ee0-70954e7625c2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9923021-be88-433e-af76-eea19cd3b0ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc3ef552-c546-4ea5-971f-aad53d383487"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb6e2ea-d364-4364-8cd6-796c38c9e3be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "100ab96e-85cb-4c99-842b-509dd2af99de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8f3c98-7a84-4e0b-a9ff-68d732bfc898",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f1f1a4-fed8-40e2-bd9f-e00f4e24a3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0199142-34e2-43a9-bcd6-038c0e5169ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b81d5ed-f1e3-4c64-be2b-023915ce3156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1edf0e56-215d-403a-8613-560b01039fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec5d7e09-552d-485b-8da3-adcf460d3164",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a80a5d-8da5-4fff-8696-d7fc1b7a50a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e1d0b20-6a10-4c91-ad8c-524ab670e92c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecae3600-35f0-4f3a-b762-bcee5885dc85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93d4ded8-dffa-4d3f-82f4-c59ece22a1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaf31382-884b-4b07-a86b-ddc771744fe9",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda4da01-18ac-4992-8a98-2fef0d543f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf1c6f11-5c30-4254-9999-3b13efe21f1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222f4aa5-b2b9-4be3-938f-75605f564bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef0b6551-25ce-4a35-b987-8e24fdfb8f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "decfbfaa-5540-4ac3-a7b0-f9c206c0b9f7",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb23675-8459-4fc6-865e-f40b6480339b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e80046f-6129-43df-96c9-1fd1009aec10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c8ae96-0d2d-41bf-8d25-a47f4d879ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33c7e17f-c46e-41d1-a72c-1f47e3d576f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872e5ab1-dbc7-4800-b7b5-83aa8666d9bf",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2705935b-e5c8-4e9f-8c89-d63de98cb9ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bea19640-46ed-4a15-b3a5-cd8c2f5c2486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72d52f92-00d3-4bec-8821-a97990211875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "268448db-1e38-430b-bea0-09a94b880e17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38610a86-e761-4e4f-b5e0-687f32459a0d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40f9ffb-e739-40b9-a23a-e32c0323d32e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdc00460-d3ce-4220-973a-3c03c1bbf128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "270950b8-5ae0-40a1-a95f-cc74bce9fdb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39fecb18-87d4-4eb6-aeaf-c5e4eecdad83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b484aa5c-f06d-4988-82cf-946d58b2b25e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87319fc9-e605-4e5f-a6ba-d55f28387aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e94879-6319-4d83-bede-43a3ae1dbfde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47cb28af-5697-42c2-9dd1-eb10a04166e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "56ea16f4-3e11-48d7-a8b0-d61c7f21c151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4beb6bd-534e-48f7-8352-814de117dba1",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0951afd0-0d1d-44a9-8f52-e6b7e75ffe1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c62e9505-80df-40f4-897b-5346d9e520ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21175c03-ca70-448f-9585-34ae9cbb2226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1895ef72-14c9-44d1-83c1-ea194c100703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3fbe2d9-8193-4522-bb57-6c2a6953ff9a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5240bf16-09a5-40f2-bbcb-fb14a60045e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a0a3599-5ace-4d78-bd48-71d0bf760023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6330c6c7-3997-4f7e-b220-205585742e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e74fdef0-4bf9-4d4a-83a4-83afb8ef3847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d62b58-4b69-4f89-b0f3-7fcf4009f20d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d98086-b3cf-4a56-a4be-2bf1e231dd16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8770d5af-1b0d-417e-9707-eddcdd6986ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72df78a6-b7f5-4053-bba1-c0c2c6dd0a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fd91cc7-9f01-4d3a-b9bd-645affef874a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35fb1273-c9ce-4b8b-b001-91e1cd8fcff3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c080c224-f532-4ec9-898d-0e9e33ba7b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bd1a7c7-93cc-4cc2-a724-036626312ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f97956-2884-4ef9-a485-bb203b7ea2c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c284dfb5-cb20-49a3-a07b-8b834b5ae1ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27f66eeb-9976-4d98-82ad-a28892ff1eba",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6954f76-2b9c-45e5-a680-5a179ed63b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88aed680-9f00-4aca-869d-dffa487fa73a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2579c32-56c7-4d8c-bcb6-5c28a0f0cb82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9b6763ea-8cc3-4014-80fc-4af5408b7d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c78eafa6-320f-43e1-b69d-a918f5376ceb",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d08ef06-bf9c-4166-a6e6-ba222a1fad36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aae0a2d-d61c-4356-8278-f50a2607a1ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e70d4d-6802-42a8-9149-f7b97cc9fec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "77c1bd3c-2954-4b3e-a44f-7bb57e39239a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edff81ef-5858-47cc-9702-e3b6b33e709e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48dcac7-26d8-48a8-99eb-f6a07bd47f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f60c6a-278d-4e33-bb2a-021bcea26046"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52352d7-f694-4bef-9b6f-3328013d24fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "200d5df4-32b1-43fd-b5a1-9b604dae6c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01cc1eb9-86fe-4bbb-8428-3a8fc2765cf6",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "896dc327-c32e-4dc8-93ca-3ab7f588340e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "066e4ad1-5f53-443f-aa2d-3de1bd4e6bbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c936b745-cb98-49fd-be1c-48f4dbb2c140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4b59fb0-3db4-40cf-b889-68ad26db94be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa50d57-a0f6-434f-a304-8175423cb81f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77562d19-8279-4cfd-b62f-ee66452661a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090142f9-03c6-4485-9e97-123795529db6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc00d6d6-6b57-475d-aea0-6ef2b07eb070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f3c607-c147-4c77-994d-437c26a62ff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86fbc6b4-bb2d-4ca7-bf45-d4b468157287",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58efb912-ab03-40f3-b88a-305e8ade0255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3832e03a-0f02-4d2c-a2f7-b9a912d185e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589abd21-d3e3-4d4d-a653-bce31c439182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b59b6a2-e3d2-44cb-95f6-f57080bdbdd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5510b700-4f0e-4f03-9f33-533c7aa01020",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5729923c-aaf7-4923-9750-0661779b26a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8461f71a-b293-4ed2-924b-b521669d9d4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1fec786-b8bd-43eb-98aa-0152b450a468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "073733a7-8f08-4313-bc10-f24cb352dd49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5c5ad6-7367-4349-b537-80018778d779",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac86859a-ace0-4055-bae5-5820987efcbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7101546d-f6fb-44ca-9631-dbd576129923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c92cf1e7-5ba1-42c4-8136-9423c00c9513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "18b96f16-190e-4427-a03e-2eb958e4cee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c206ac1-b972-4417-8556-f39f215ceba0",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a8628de-c330-41a9-9301-283308602709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33fab658-2d91-4751-bd6c-040a74692024"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36becfb9-4e64-44ab-b338-c54fd2184dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "97f88c05-8ea7-456a-9ff4-d5d6d8b2b3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c358ea5-cb8c-4466-92b6-405e7a2ff34d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "609252c1-21a1-48da-a8e9-c8a10d889320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d318d1b6-fb70-41b4-8d10-95b54454b427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74b794b-e442-45be-86d1-6fdd65d00e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d2cddd6-e83c-47ea-a763-e88d0543c5f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd3ba148-fca7-41af-ab24-1dc33f34cb48",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be3056e1-6215-4cb5-9749-5961b12d6c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "204760c7-6e81-4589-b5d0-48bac216539a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4a6854-681e-40b6-b017-26d450c9d1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "01108749-1e3b-4c0e-91d7-a3acc87ace19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a5be40a-ed50-4051-b6b1-b1bada2132e3",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2e363e-82d9-49ea-b3b1-2dbc37b73256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f82afa2-9bdf-41dc-84c5-6702c236d34a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07820657-01b9-4301-b71b-c9caa165f965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "408bae5e-a03e-4cc5-8182-82eff889bf3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc001f9-2f3a-48a3-badc-d3eb68d15774",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ab70de-d0fa-4d7a-badc-759c87d0be99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1743de7-c4f0-43fd-a9db-4f8c53814f71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b42f27-1af8-47f5-9ef7-f8db19f5cd56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "85b3b784-f442-4b9a-a78e-1457f8ea1f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad5a18d-5d1a-4a88-b84e-7bd79800b668",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed0412a-16f3-4ec4-8292-2521eaf720e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb6f54e0-7b8a-481f-93fb-b0a6f0e1575c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e04a18-6bd9-4b90-9e8b-97c9c3ea1583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "82108901-d698-45fd-86e6-bc89894e86f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f7acb7c-47c6-4eda-a646-bc4bb8ffbe89",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbfa1b90-406d-4714-a064-3ae6ee9be476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb9fc02-8270-47cc-af3b-acd44d832ce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e764d6-3c79-4ea4-ad7b-8726ab2ed880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4a5a749-24e8-42cf-aac2-c8963eabceba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7650476-3ef1-4f58-8b88-40170eef1850",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad5d841-5cd2-4ddc-ab2e-5439592a3f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "446b42f6-f2de-4585-9ee2-774a07b4bb91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8737bc-9f34-4e4a-b4f8-e8d70725ffad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "02a4b474-c9dc-48ff-9c47-5eb4e9b35c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cea89ae-df28-466f-8120-65edd5f00f6f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b942e095-75f8-4744-bd90-addcc7b923d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6d75b44-b4a8-4dc6-bd28-fbd13b5f642b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0a5931-510d-48a5-9d0d-b55de7f3e9d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c7f89a4-4cfc-4db5-a415-a4720a09b321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f996b5-2575-4aa7-b378-8ffc76e624c6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c345eb8-05fe-49f1-a75e-75f478ac5beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47cff72e-e70d-4c3d-a9c7-f819f5a29d68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8151ac-66d8-486e-be8b-49cef35a533f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae864baf-fc9f-4b49-9a64-176ab18a1752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b14f38-70e3-4280-b76e-5eaefa54c1af",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "430fc64f-ee9e-4d4a-9a57-b0849ccd928d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e134d667-a28e-4920-9e1b-1a0b27d969da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78405688-1b67-4941-a515-6a476b82e82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c774b7b-c67f-4f29-a831-17605e5306c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b207096-ceed-4d88-835a-64b110e505b3",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "787f8b16-4abf-4ae4-81cc-73a9e42c7098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9003f86-9c60-4559-aa68-5879b8e08575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f44b721c-4c89-430f-be14-029486a6bb02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "333f65e3-1f81-40fe-931e-47ed029988c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29107ff0-caf6-41b4-90f2-d29f5ce86b60",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b617f9e-3be0-43e6-a80c-2a5c2766c0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cafb00d0-2532-4329-a0c6-5dec272f659a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7b5882-7a4e-41db-93fd-8b7e9a36f350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0935d353-e2d8-440d-88f2-9b6eb8f88241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05cd071f-ea7d-40b6-9447-92e72d2d5eae",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "056114cf-6489-4896-b578-44293617f604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6f95d30-77f7-400f-9cce-b60f52dbb307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a81999-6141-4b4b-b7c9-b96881eb3a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b62010c8-db6c-4f30-8998-38126403b4ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b71d07-2c66-4fb9-a569-6b924fc32499",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbde41f2-960b-463a-a940-35977ac1fec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9869170-9505-444f-8df0-0c597c945adb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f3ffa9-f38e-4af4-93f9-d6680bfbe318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b46b287-560b-4af7-883c-a19a5336eafc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661b5b5f-36ef-47ed-8e2e-f45b7afe8acb",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28741a2c-2014-4fc5-b6e2-28597a039311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a26ace39-dd35-423f-bffb-52814d405fef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ea290e-12e5-4bf7-9c9c-9744cb2848b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c0428c1-ccfc-4454-8ced-2787f95b63da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde2e16d-4aef-405b-b7e6-80906545183d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5afda03e-beca-4ef6-bfa6-c14c4694e96e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50cfcd08-86a0-4810-8fc2-8488a5b99a18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763f43e9-3fff-4fd8-8712-757e684fbb29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7196e14-2820-473e-b29f-3530af63e522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410ee015-1fa1-4d17-a3ad-d53964ae759a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad68b4b9-a620-4dcf-99d9-1ca3204b725d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58db3d7d-9723-4b37-8e15-481491390457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d33ccf2-deb3-4515-b513-bd6a2bf13867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dab19b38-88d0-4155-b146-d0c50a7f4296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b3f728-8998-4b5f-a758-a35f889b4b7f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f645ee59-8e8b-440c-a387-57bce037e49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d7d1d9d-3352-42c0-a8d8-e835cb461c92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecee576d-09fe-4a2a-8b2d-2ccc94516ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "467fe6f3-34f6-42b4-8d6b-ef5b14b51d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b6ca496-a579-48b5-b409-fe44830601fe",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f6a0d45-285a-497e-8b70-3ab21a097ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ae2f670-4960-4021-bde6-df0420c30b83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3f805b-e8b4-4202-a880-b383360a47d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "48286530-098a-4ea9-98a4-883f0579a5a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b92b7be-33b8-4d6a-88ac-47754cdece27",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "557095ce-be1c-4572-87eb-024df0940fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b1f24bc-7e03-4cce-9384-bf34abde51b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5639043-df42-4991-a29d-772f1084bce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f389c268-da7d-431c-b2f4-a6138853e803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7897be48-b4dc-4cc6-92cc-4c3ad7471d10",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06462327-4f23-4c1c-b2e7-7a4b982f0e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47cf6b82-1b20-4354-b86f-eecb944af55a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42d8b4b-c431-45a5-822b-c0e9b25fd1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0e446b5-52f1-4dbc-9762-c05fd4d4145c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88ce57a-e943-4a4f-9df0-9b55c7086d4a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "942ea507-00cc-44b7-bda1-297949d70687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82346c8d-1132-411e-a9b5-cd9d2edd9915"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e0326aa-7432-4528-9824-755ec0932920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "516635ec-5cf4-47e6-81fa-1dc76caa23c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52fa0a29-3a1e-4ddd-a521-7bb6b5988b33",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb3dcb6-b659-4b4f-8c9c-707fbe3be12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e071a304-b85a-47f7-bf84-4ba677ef84e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09b9b02-b94f-4cb4-bc58-31116539edbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42de7914-b637-4da3-b177-1fd79c46162c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b95bed-799d-4cd5-9b3f-b244892db1ab",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f4156b6-9b24-48f9-b584-73901b9ce20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2909fb75-439b-4b2a-9714-db1b968acc59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "559b410e-0a78-4629-a917-83f1cf4b60ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0af2a15-e3b6-4715-aab0-4a490246f4c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460f0997-ab08-4a33-aa64-e0cfe1207d78",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8561e8da-b356-47f7-981e-358a2c101acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "317560d2-096a-4f26-a970-11e7f6f02059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf32ade-b40a-43d7-94dc-01554c658b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "37ec56ca-3c12-4c13-b662-1d0c253a79a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72067901-7086-45b7-a012-b464baa1aa38",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1914de9-baf3-4ae1-b018-6a41085896ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3207e24e-3b13-44e1-995d-67c20756b327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afbd5e2d-05af-4b8f-bf60-fdde446f003e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "254d708e-d4c5-4737-95f2-f5d09acae015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03066de2-ddd8-4065-98eb-cfc107b6a2e6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf326c2d-6218-4335-839c-548c41c6f9e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edab55e4-0619-4d09-8ba8-f18870220950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e32dfc7-3653-4b92-8129-c37583c6611a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "af562b3c-eeee-4607-bed5-5fe4b994c8b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7036e9a5-a6ea-478e-91bc-d66dc70a9dbe",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b323acaf-11dc-48f2-982e-39e73267cbc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f45258cf-aea8-4690-a007-fec17f9127dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "933dee2a-fe79-46fe-894a-c5fceb70c7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5865210f-f857-42a7-a591-69cd5bbed220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f4d3513-7de7-4516-8927-dc2f4f8b0706",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38757060-773e-4a57-b9b3-bb44d0593f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97764e83-57c0-4953-80ab-024ef9beafb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03355a8c-338e-4543-8be7-6488b2a71f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8089b21e-5665-4c95-bc3c-410e174a5c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa636fc-41a2-4c72-8724-831a4269684d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8965dab4-5245-49fa-a83c-16c9f11398a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e82c7796-fc95-490e-8e9a-8ca4d4d36f02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf6f3cf-afde-428e-afba-2029965810e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b84528e7-7186-4b10-a758-5d1e266486cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77167a49-84bb-4f57-9899-3550173e02a2",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a9f8d95-18ca-45b7-be9e-25c4f9a009d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "428cf6c3-2c43-429a-bdc6-9a7989e5aeb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba64123-2284-4b59-979d-8ba125d72b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3156b75a-a4b8-4960-ad6d-da3b2cf705ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8836d88-7f3f-4275-a4f2-8943421927d6",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82977bc7-355e-41d4-9227-cdf68e008673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e049bb1b-032c-40aa-bba8-7bf9fe3556cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa2cfa6-92f0-4ba0-a3d8-a3365da50d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5bb0336-16f4-43dd-aba9-a7884e27809f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e709493-503f-439c-8c95-053936f5f904",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c00f7c-da06-4711-a31f-245253420b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d61fc46-e9fd-4856-a570-3428efa9ce8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70888412-09d7-4bf9-a1e8-1b140c63b9fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83058450-1c45-4e88-a5b2-9495eb820cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "937a3c70-6474-45f6-a40e-8ba049d33214",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ba4a98-41e9-4764-93ee-3013057930df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf89ff84-086f-464e-85b1-74d7418cdc49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a225f6fd-9d1c-4b9b-b091-67587fd3b93c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d332626-976f-43bd-9e02-44247bf9d005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67a4e4f-8254-4191-b7f1-a92b39a3ddba",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "086f33c2-9999-4d85-8c9b-e447f8f0e227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9a3e732-2529-4830-acee-3b35efd7d796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d75ec3c2-3478-4418-a56b-5d5fe16e5cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "41f9e5fc-3fb1-49ef-82cd-df3b43004a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a251a1-d6ff-42df-92a9-4bd9e893dd7c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c8b61c-752b-4dd6-80d6-7b7719d21194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a962c04e-1e4d-4890-a806-51a9a0334cd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d33ec8-3e2d-43c5-946a-97c74a8b5b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c9d91d7a-4d09-4aa7-914b-0fb37f283fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd77dad3-66db-4e63-92b7-c3a54dd8d706",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a82bcbd-3fec-4718-a2a8-829f850918ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49792758-7ee5-4ed4-9217-71d47c36edaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00336123-e943-476c-a1c1-f12dbb2e5060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "136ab7b9-2ed0-488b-88df-523d6256e837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7931d61f-e21b-41cd-9adf-fc07d13ded90",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b31de7a4-5387-4f63-9df0-d3d141b63f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2f50b0e-d932-4e11-b242-a94271566e6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf77384-3ab8-45a7-8856-4dea9d894742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "45908f49-c843-43d8-a8be-43f3bda5da9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b9e5e7-f890-4355-9b03-adbfb61d7544",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ceaabf8-32c1-4a1b-8141-fa89c1b9dd5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9e69985-9ff8-403b-b8af-c3adfaf2a5b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4e0d73-2c29-4e21-90b6-2740645136a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56edde37-4f88-49a9-b9d6-e18e3ea8167a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4223f0ab-bde6-488c-996c-1308360d20ca",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "427d0591-35b7-4bd8-b297-f905e78144ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3febe706-45c5-4515-be60-8de135b6939f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7883123-7a39-4a4f-a93e-813173152efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad4bd415-7aed-46a9-b129-a5c6dd8e046e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256c89f1-416b-4efb-94f6-f0e079df291d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63111790-0e90-4cdf-b30f-bf23065eef4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e74b1ea0-c1d8-4a9a-9802-fe35b3feb9d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec2f59c8-ab60-4f31-9823-7530e2f0f927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "419b666a-8356-49be-844c-d400e39fe64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bec8fde-2379-45cd-922b-fa3cef3d3e7b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4afe49e8-86b7-4f18-a04e-b656b1df646a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d02a550-d6ec-4e21-a6e5-ec3643b34594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09427421-d91d-4fa0-81b5-fe11e744898c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6512b04b-3c40-4c9c-839c-9d536b4b6524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e9dc4d4-bcd9-42f3-9534-362f437f4143",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "295abe46-ad8d-4b1e-829b-43d70ac1ccb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3009cd7e-0447-4691-889b-95a59f96bcab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c0b154-4eac-4746-8c3c-2bbfd7b043ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "567ab7d3-84bf-42c3-88d4-be663c1b9172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "312bfffc-7c7a-4181-8874-64a42f4738b2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0411cc6d-a525-4cab-b5a4-8fed5838f9aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4bd2151-9f6e-4565-9090-27039a1abf19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7416dc-79f2-4ae2-b552-e9e906888d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b14ed387-f142-42a5-a457-7a70a1c0053a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a51b879c-3118-415f-9086-a310bc1a1c79",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "565848c0-2635-45ec-b819-e1f9664ac47c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "378cb764-9813-4a40-9dad-6cfa7c5f7892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd17b7af-ff3b-4a44-a811-d42df24e47b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b28aff8-20f8-4b51-9c4b-53fcfa6bc6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500a650d-daaf-4d01-8afd-0e5a6385c359",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba9b2c5-095c-431a-b501-1ff15c7441ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9b68874-0ffa-4fb1-9f45-259692084f34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77961b4b-d4e1-4507-b0bc-fd76d4f1f013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3283a1a5-b49a-41a3-9fa4-fbde44e5a437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ef38df-c7c0-48b9-9933-ba42b986c75d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2cb24e0-ae26-4420-ad29-db542dede1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77197b5a-8d97-4bec-9694-9e1acb02ae72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb1638ef-6813-4d8a-a1cb-54eb0411dea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "83374792-7c45-43f3-957f-4bcfce17666e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce014e5-ed42-4681-bad8-6bb34788e895",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "690bb29e-e08d-4b80-a307-3bf7d8d8530c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d06e77f6-269f-4fe0-9c2c-f19363207c65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "485b4903-1214-4bbd-97d7-52f3a935d9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed2b93bb-3f73-49c7-9af7-dcb22e01c2ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9dce8ef-558f-41c7-a08f-f4c8b60baad8",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ae6468-992b-41a8-b5da-0f610d9434fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebeef2f2-8ef6-44b1-90de-283f61b345d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ab96a2-0469-45df-8070-f17cc41cb54c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a1de9504-a653-4e10-b09a-53e55acc903c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99f704a-699f-4ca6-94e0-00a6076b3316",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e963094-e918-4429-b6e6-38079fdae828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d633cf2-ce5f-4585-bd7e-d40905e35fa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb99df62-794f-4701-8ed2-914978cff875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "48f65f34-e0d8-4c98-b272-bedd5e77a8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe0d4c99-2bfa-49eb-8a75-ff6c3ea0f3cb",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e62777-0888-47d4-930b-1185a9bff99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "962bd727-65d0-4041-a56e-45f213fa30c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d8d74e3-7657-4fdc-a434-40ed3b0dfd25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cee4c52a-b71a-45d1-bb89-0654e35e4c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "900d6225-16a1-4b52-83e3-26e0afe4e355",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75219104-698a-4eb7-8468-16795b86b604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1420b87d-ca1d-48f2-a9c1-3210ca209dba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b1bda2-e6c4-4194-ad0b-61331c5af48c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8145ff67-f76f-4fca-838a-0982ed04572b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f88c7fc2-88a8-4fa0-b666-239af8ce5f7d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf4e1614-89b1-44b1-b990-1f86bbacc4c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7855529-d169-40aa-b5b5-8474e114e1f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7c6c81-c27b-4277-adfe-7bfff2440d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "493ec046-5b4b-4394-9cfe-cf83952f8df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6113bd55-d4d1-424d-8245-7217b21480c1",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab7287c8-4b04-44cd-bbb4-27faed0da50f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fba18a1-00c3-494a-a40e-65584873d76f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e387b40c-32e5-4f94-9803-a83162e8e8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1646edb1-8c32-4289-9b23-e2bc9ff52895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4e35a7b-e815-4427-9f17-35ef3dde4d55",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62505dd0-2aee-40e7-8565-061981ff80a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb139c3-0dc0-468f-8b16-ae9034ecdaa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f585914c-be1e-4f79-9f3e-36f083b6b318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f180428e-a4e1-40dc-bd55-b03d5e433f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc516c0-3465-47d7-b5cc-ac94b0e1b53a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b86e20a-d32e-4413-9f3d-6101f8fd6c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa2cc6ee-1212-4449-937c-3de6a1622e2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7411568c-da95-46df-a6d0-c22d7356d9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a23bf9e2-82bb-41c7-83df-ddabd0067bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd104e44-e027-42f6-9b40-5bedbd838c37",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "034d8d89-4695-4f68-9ce9-bcb232b7b1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "725d69f4-d761-4ad0-b233-669342ff98fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42184b50-3200-4b05-b203-5f01f9be89e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c340d493-adc8-45e5-aa99-5c3cd6e37e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c476417f-9751-4c64-8b04-b127d09ce095",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60627ba-b5ad-42aa-92ee-4cd363be3953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4434a8c0-73f9-41b6-9b37-05b99e973381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68362a0b-0327-4605-b4d3-de71d48695a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0545a3c9-3a56-4f14-bc3c-0095c34d124f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1078b150-e4e4-430d-bed4-259f81c53771",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f13cfcc-b80b-4e90-b62a-af34ef880d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e45a28a1-6bfe-4993-ab2b-91fb29681688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2217cc3-b60d-49f4-be58-fd2799a6ac7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "355c294f-12c4-4f6c-a2b2-a24cefe34983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eabacdfc-1c28-4c46-8299-ca0aceddea05",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af196e3-d761-4ffe-9bca-f90b8e05defc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f84b29-9a56-4a5e-86d3-ad5a9e38e772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c95576-55b4-4e1e-8937-8685bb8fb39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3977f351-9796-4c89-88c3-a68a6f15aa16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31908076-140a-4eb6-94b9-1a0fea8344aa",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca8de8da-268b-472e-b2f2-c97fad668b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f93149f0-803b-400d-803a-6007a62be81d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a6abe56-4431-4b0a-a84b-b755bb602c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b033cd63-36a5-40ee-9330-878d4b730a85"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9a9bf5f9-5566-4330-b4a0-8efc340b7065",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "932584c5-7a45-4de9-aa3b-dc7fef73d8dd",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe66e37b-8bb3-465a-b9a6-e35e57a84a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aec634a7-9f00-4e55-86bb-473a665c12fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cdd98bb-1822-4792-8676-9bed15c9e7aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6972f3be-5c30-4eda-94f0-3e133fe84d04"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04ea052e-1bd0-4f2b-a790-d0ffffa9863c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18c9261a-8dd8-492e-9c64-302498126040"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a8f8773-a14c-4d3a-a37c-2f33237a4f8e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56810cc8-9960-4042-90c6-6bb8abe58c96"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4fa48581-9af6-4aa4-a84e-1055a33e1166",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6dd57020-34c8-4f05-a077-838d6716e580"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7cf21a6d-d623-4ace-8bc6-c8479ef0cdcc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "67a266d4-232d-415d-a8fd-92472a35e633"
                }
              }
            ]
          },
          {
            "id": "4b663f5b-f671-46bb-a5bf-8feb1447c04b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3b289ee6-160b-4aea-bc84-25cc252da540",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "ad1b3b95-10c4-418b-98e7-c19042c796c4",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f71edce-a7d1-423e-ac70-7b6b67f22833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "234405e1-87af-45c2-a95b-f50fe7d42f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4db0b0-f44a-4da6-b6d3-b2768fdaf497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c622a72-b2a1-460f-889c-1bf16acd78e6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3d51c067-b503-4edf-a962-7fba4d0ca5e0",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8814c137-542a-4412-a300-7619f18edf8f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6d1b6f4a-c630-4217-a689-e61aeb3d6728"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45687e54-70f8-4e95-86c0-4d4ecfec9892",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "02349b21-8382-4831-85c0-ccc46654566e"
                    }
                  }
                ]
              },
              {
                "id": "5af053ad-23f2-4291-896c-8d88b5e30b77",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e519455d-860f-4e01-a596-d7a5928196a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e6deb0c-ff66-4ff0-aba6-73b24bb8b6d1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20c6faae-45ab-4686-a6d3-8f0d4b6c277d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0270a0d5-8435-46d8-9410-ab760197400d"
                    }
                  }
                ]
              },
              {
                "id": "910813a6-1170-4e79-a285-56a189eda0b1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f7d3a55-1c3a-49ec-95d9-f2198204c6b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9cb04945-3df5-4afe-a86b-c01a03663101"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a92e165-59ed-44e7-b0b2-a3b9841cd458",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4f22fbd4-d237-40f1-aea6-e1bdd603cc5d"
                    }
                  }
                ]
              },
              {
                "id": "e20bb285-9440-4e66-8faf-450a1de5eedd",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af2802b4-b816-4cfe-8113-8da973571a83",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2ed85092-bbcb-4bab-992c-143582adc059"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e27c8dbb-b463-49e3-b9f1-8e073d7d9110",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "15302b2e-0005-4e34-bcb6-79e1c5ca6fc5"
                    }
                  }
                ]
              },
              {
                "id": "291817e7-5299-43b4-8474-bdf8c1c6e513",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "45288b13-865a-46a8-800b-1c0101904f42",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5f37d84a-2c98-499f-bbd3-4583b0a0b61c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96a79a7a-9d7e-4062-b87c-29c7e58ce97d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7d5b2d22-de89-459f-af1a-3c04e5604d7a"
                    }
                  }
                ]
              },
              {
                "id": "9250b798-e82b-41bf-8d52-85211f946074",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "112fd911-f5a7-469c-808d-b9a303c1f2a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c7bd79a1-5eca-4ebd-918a-838dff753503"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "61a8aceb-1f11-4b02-8f98-c6f463967369",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c8b2c7b5-0dbc-4ec9-bf47-c7a724f7b9f7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ce49a840-d4fe-4038-a35b-cd1656dfe3c5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1e037729-fb0a-44dd-aca7-cd9a675b4153"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8583757c-0c55-4f18-b088-cacba9f4bdd7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "87bbabc5-ae92-4a5f-9859-d65c3e5989ef"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a623f93f-83b2-45de-a118-94b874a8aec8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "71dc239a-57a6-4954-a795-7c44448d2651"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea031c14-bf5b-4677-99e9-6931622e6443",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "69965ccd-6b59-45c3-a4b9-f1eeb497acab"
            }
          }
        ]
      },
      {
        "id": "20ed6538-e521-4cf9-bb7a-e456d1cb2648",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2eb5eb04-ff74-487e-b4b3-64b76d05c675",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c23efe01-04dd-42f9-9a34-b9dfbcb5003f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f7b5f9ee-d518-4979-b2ad-4586d994bd44",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe0bd0c-40af-4210-b54a-f9384b1592e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c19e9da8-0e70-46fb-bbcb-a136bc1cc3e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3726f48-deb7-4883-9338-9689786e4b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b9fab21-c266-4a5f-9ff6-2329c1664627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e609a05-a4b9-45c0-9ca6-d0b82ae317f5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9abda445-ea96-4cf4-b015-9d006086e528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eefa8dad-79e2-4e6a-b4fa-cd8b30f6fdb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3b1d8c-a9d9-4755-928d-1e94e4fa693e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8878fb6-e0ff-4fb6-8894-c9bfeafaaf17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c54e7c68-3013-4037-aa5c-0a317abf4664",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c37d333-fa14-4924-bcf6-954d39c6ad33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e15d43-b2de-418e-a7d5-ccf99e33e62e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bfc699a-0584-4a9f-aa2e-9bb79d5decd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a5c9111-f3b7-4156-b5e9-50af0ae7aceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ae64d3-9353-4f13-a008-086cf7e19e1f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf01bb3-75e1-46d6-8091-ce35b08b5294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1416ed98-16df-45f8-a45e-283c73d4d0ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135a5af5-1a4a-4859-b686-0e8a56650e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dba39fe3-5f20-4049-9b48-638b49ad8c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47862bbd-fbcb-4091-ba38-8225a68b3a99",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f619ad-1c93-4ab1-a33f-f4349a86ddc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52030e9f-736a-4557-af52-6dc2030b7e0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49617d76-0080-431e-bb6e-49c24a7b5dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "32dea678-fb1f-48de-8c93-6840467d411e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3b2461-ec39-406b-aa54-12ac6b783354",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8beb2344-112d-494a-afa7-ac5eedc0fd1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "417c650c-62c1-484b-82d0-5bb5ada7117a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95efeed3-ef1f-43f3-9b6c-bae860e5f980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbfc8793-0efe-4c2f-b038-fcba02772f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7765818e-841d-4c13-b554-b47d1349322c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51bc39bc-d205-470a-9263-e23376411f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1a4e387-ea2c-4b8e-b79f-f2ff237b2b17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0231173e-9dbc-4e59-aa71-65597cdb896a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "22b48086-ebcb-47a0-94e5-3dfe8cd62508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6412d2fc-4b03-4bbd-a840-05aa1dd3f40b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49eb88dd-5eaf-4ed5-9873-6691ca9018e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eca75eb9-b3e5-49b6-8573-43e33a0ff759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f6c417-8145-4a15-ad95-01d280c84659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cb2bcff-74f4-43c3-ad7f-b61c8c91b3f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b82249-fe24-4f8f-8205-807c38b0bf89",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c729004-938b-41aa-b7ce-3683a7ba6a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f1a0966-47f8-47a3-bb37-b061b5caac0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ce405e-c920-48ea-9ecf-adf25c9b18b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9c9d4fb-8343-463f-a74f-da9531a4d8bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66a886f-6c8a-4a9e-85a7-79e53f28fa97",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d36cab6-b70c-45e0-95c9-f420bdc4588a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e31f6263-d9b7-449f-a257-35ee56c6b6aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d5c69e8-a285-4b1b-af7d-722034d2b514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a1afc67-9af4-4e03-ac50-e57bb2b7323d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad799c9-a290-4a45-b280-ca36afb2f55d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83558321-c273-450b-a802-00311af3f0ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e1f5ec5-194f-40a7-9a14-8b46f74d93d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e2804a-52a9-4aaa-8acc-4c99ececf436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "89da5ded-80c6-40e1-b5e9-0ee19fe74f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1edbe91b-ea07-45bf-8b11-bd78ec4e83b0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "900edc6d-a326-44ca-9ead-0ddb964ab391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b09b269-6d1b-4aca-bf31-3ff822f91f4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eabd6ddb-ce2d-4da9-9841-ff99b8ee0f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6d2ebb09-62ff-433c-961b-c1713368cd6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213c3e5f-4015-43dc-8ff9-d0e5b58679c3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73bec654-0023-4044-b131-5c1dd369969c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df0599e1-b50a-4b3e-859e-36da50b2e404"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee9d113-938f-416e-af09-d6dfb085437f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "51ed9e3a-8ccd-4486-84c3-3488a86f1944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68db101-ed17-4c25-a9a7-7930d4253627",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f542c62-67a3-482d-9d0e-8056f07c91e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a614f235-d0db-447f-a6f8-ce8eaf2016cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d68514ef-88ca-494f-a83a-f2eff7453b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "03dcb215-4525-437e-bc07-8fa989f58d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "306a7f4a-f167-48f8-aabf-231886ed66d8",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e6bed9-d65a-4ef5-9d44-2e6fe4cb2af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eca833c4-9f90-4cea-91ba-e3c9cf316aff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ce8c02-f2dc-4cb0-9e6d-6ace73f233ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "256d66f0-b084-4a97-b510-508a4af9d285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d8cbe3-54e5-4f12-a59b-5be2c4d25e48",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d544f5b6-b81d-4cf9-b149-925caf512f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93ad7605-3379-4c4e-9b94-f218331a7819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc1316f-3f92-4913-a483-0f0556a1d7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a84918b-f074-4816-8128-ebe43ca5be38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9d5295-8fab-49d0-9490-1ef940483a4c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6e2e70-3ba8-4d0f-8f49-f2d011b06dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8e5122c-39d5-46c4-b9f6-cf2ce53a7cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828c349a-3a95-4dca-9887-a91a117bdec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2352134-a468-41b9-ae39-413aeadab83a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db581c4-3a0b-4336-957c-6e0f8bf8886c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3811b98-75e1-4a7c-8e6c-392362ed62ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73d1b9aa-cc80-454c-9520-f25cb7e604ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90318d0e-8ce8-4be1-aa35-a3549eac4517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "001cf411-9878-4670-9f11-f4351c29e67b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94fa895f-fe39-4b21-8780-254fe246197c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ad0dc1-af56-4e46-8371-80fdd99c65cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9570f41d-841c-4d50-b438-69430665e7d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84107ffe-8a70-438f-8a0c-87004a4049e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fb5cac8-b5aa-4996-9f7c-686038071a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f7444fa-4771-4258-aa08-8dc45b05e6fc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "850dc31a-7d4c-4751-b90e-ae281c87a9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c287653d-811c-41bb-9ed3-8731f68f431e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8534c2e5-319b-43fe-a485-b08cae8d971c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d58d7ba-ef60-462f-8c23-bf9d47466d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61af74b-c6a1-4b0d-b508-6fe3651fd273",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0330174-3eb1-4b98-9f7c-dc2db9990ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c102106-e458-4ca1-8989-c1f83b0efc13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f438b8b-3882-474d-ba77-9ab39655d511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe04e0c8-9302-4c76-81b0-97a4f255175d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca1f3fbe-af8e-47b6-af0e-180a00d6ea9e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1487cfcd-c7bf-4738-83bb-09ce9ff51e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c08cdb3-d423-4d1c-95ee-af4b1ea5fb02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef5c11af-00fc-4782-a9a1-5fb4bd80ed14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0398700-c46e-4a26-af3b-8c278fa94e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06557eec-a487-4e5f-b515-c579611f3d32",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce295b60-e0de-4c26-9a5a-8af85ede2ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf4aa52-c4bb-44ea-a8b4-0fb5bbe9b408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e837b4a-b41d-4f7b-8712-7395bf17374a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbd1836d-3e3a-4bf5-9f47-33a15a0da863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ba38dc-fe26-4a8d-9e24-27dc1adc6b6c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "074a66d1-d06b-418a-9b42-94fe2c75b38c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "285dc7c8-af00-4e68-b6c8-12d6357131b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e20706-6039-4d51-bac1-c3a4e70ddcb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a9e04ba-1bc4-4cf4-92c9-fa58f41869cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cbc445b-9b69-4cb9-95da-1ecce1babdaf",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce215bda-63f3-4035-81cd-4ea90cc0d639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc4b8f32-c63d-45fe-9cec-f695e121c383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e3b8cc-3955-4550-8710-e5fa69e019f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53f378dc-e071-49d0-ad54-144772be951d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6fc38fd-04a6-430d-9466-d80dd46b5883",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "921c06f7-83ad-4da2-97cd-c128a5ba3666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20f028ef-9f7a-411f-a340-fc03e1f58227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb799074-df9a-4b3c-9dae-b83052d3cd76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9407b990-c159-4de2-88fe-a522f5539e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c7c8603-940f-4417-a54d-71ddd3cf4b62",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8183378d-4b7b-4048-a9d7-b82724555f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de5cce65-71de-4628-9785-a3290d86621a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc2bbf4-e8ab-41d8-9b65-1fd2c96d09d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e77d0d06-d0dc-49c5-8474-7ebd3aecb2bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25241ed-3f0c-4c2b-a8af-4fe1de031c55",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06b2a8a-f93e-4c83-94b3-2ffdd574f057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0aafccd-d29a-4e9b-8faf-db22a7b51568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ab8e5e-318d-41bd-abfe-0f1c723b7c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd728a7e-4bfb-419f-a3bf-83e2aaa512cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8488a4d-36f2-4636-9b1d-3bffe95f84d5",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9932a496-05d4-4291-851c-697749f1d12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "548c5b2d-eee6-489b-8c7e-2bd9c55a1d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08b6538-1ae3-43be-b67e-232508b5b81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "efbbcec8-cf9e-4960-9f34-f86e85b43359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9726c376-1247-4504-9e0f-68edcbc41039",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2163148d-ec7a-4317-8275-fe9f7e8308e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e0b3f09-24f1-4ba5-8afe-32c823cb477a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1e7443-4b84-4fb7-ac0a-4c3df39c9e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab085c43-0736-45c8-9964-edbb8edf66c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d8daae-7766-4690-bb11-607cf8c646fa",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6417cb5-b90e-4c9e-a5ec-849458bd303a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3bf4919-0e0c-4883-a170-afcf4a476dc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24897f33-5f5a-407d-96bd-c499c86f130f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9464c593-f1b6-49e1-9a60-4babbb0688fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e1003f-bd5d-409d-8944-8445b054ba2c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb5555c-83ab-4f83-a019-9044e83db0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2b62ba4-d62d-4db1-8c7b-08e35b47753c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f688885c-434e-472a-8045-37951a8d6360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8825698-111a-4e7e-98a2-4416f546ff88"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "255bfeee-1ab1-4396-8607-597466ce4259",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9dfba84f-9ab1-4bad-8848-c408e25b91e3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10aabf44-c1a7-4bf7-a7ad-34d6093e583b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7a3b4efe-b709-4a0d-807f-33bcbca4442a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c020d850-63cd-4188-af2d-9b879718dd8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9aff11b-8ea5-40ec-966d-61a1a1f9292e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02bc1474-2920-465e-8c2b-f37518b0012e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ade69f42-b4bf-47e8-8256-01bd173b9714"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "34226f94-b518-4d48-b943-05d029776af9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec1408fa-f33f-4d0c-b369-dbfa1d5f8887"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fcf0a835-240c-4e78-bc99-a2386d097a1a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8673e7d2-855d-4603-90ca-758d2a779e66"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0212c59b-2d30-4cb9-87e4-4d8ec9ed5921",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d51ddb11-81aa-48f8-9451-2900dff32325"
            }
          }
        ]
      },
      {
        "id": "98b5f488-0273-4e51-8dba-cb7da85ab458",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "324e5ff6-c6d8-40c5-87e9-21b0e72cce82",
            "name": "Negative Testing",
            "item": [
              {
                "id": "42dcb5e7-5220-4d22-a017-7b751a53407e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f5967864-796f-446f-b881-81377c5f60d8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e31a4c-7320-4940-9693-8c5fe7662953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "052f34ed-27b3-400d-8aea-6bce0d905947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05eec15-fc7f-4b60-96fb-bdb70ee2e375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2529e5dd-8ebe-45ab-9ccb-3411740248c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c7d5996-f728-45ed-9354-7566f0dbebb8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46ed1cc-3e49-46a4-866d-b54da63c02f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fa6e5c0-5f67-4335-878d-40c1dbfd3ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b46e9b0-d732-4ea7-a3b5-46b7a68b8b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a36594b0-82a2-4882-8d2a-1a2f6db74f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693a1332-c506-4be1-ab5a-f38ef0e1f4e5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc4066b-2322-461e-813c-f9dce31b03b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d69c90-2b52-47f5-900c-bf5f6ef865df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f34b036d-390f-443e-acdf-f0a154ddea05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3945f9e3-8d6d-4701-98cf-1168db6a8f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20ca5b93-a3c0-40d0-9c67-9534df0a720b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3450c4-fb34-4c6e-89c2-1484a5d65be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "708f19dc-2a2a-4f93-8c12-9c84a36ccf72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486c8498-c872-4549-84d1-476370a2b944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "21e9edd6-44e1-4ca6-a8e8-b725d9aca7b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171ab896-50b1-48c6-b2f7-c309e8892d1d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71fe140-e173-4c76-acfa-763ff8461f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69495be3-15c4-46e5-904a-a5fee4e5d748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "551d50e9-72c8-4b7d-9a6d-343ee88c2223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42305fa8-f5db-4048-82d4-22dd171a6965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "464d8f3a-d10a-4736-b478-e2b581db6bb1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e3901d-83b7-4ab2-aeb2-10eee311b43b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "462c9835-56e1-418c-a673-d66666b23a8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b346a46d-f5fb-4674-b80d-179a32ee6751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8766d258-b25f-4d64-b603-1ed318111830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "930803a6-e4d7-425a-88c4-a1b3ca8cf787",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe37f0ae-78dc-4ad5-9052-1feccfa53d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f788a07-c3be-49f3-a69c-8a63298899b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41454ee0-2982-4c65-b471-dec165f78953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0370a97b-b49f-49cb-bcd0-692555dfb764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d3135b3-a18d-4716-8eb7-b6539db56bb6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ae3ec1-e0fa-4df1-8472-02400bede135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a42655c-1210-406f-909c-e616459da7f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714b803b-0ff0-4ae1-8b2e-7c8409466497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec1b512f-78ff-408c-88a6-9d236dc9cf81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd4f90cc-1fc3-4b71-86ad-ab2c67c87467",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "862453af-7283-41ff-aeeb-46a37878b20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc69e88c-e228-481d-b626-619561854af5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7917e217-30b3-4f21-be3f-5d5c029278eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebc09987-f624-4f1e-a6ab-eec5a91e909e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbaa9fa2-4c6c-4d20-b6e7-03c5c3e684de",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d18570-3acd-4343-a2f8-a5d3ef25c2b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e398d2-bc15-40d4-8a42-62d1068d3488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f741247-ee1c-4ba9-937a-f5eda95f629c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ded4da7-7f04-409c-bb2a-a7f45ab927e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b395ba-09e7-4a9a-97c7-4583fb60e273",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4595b4b5-f0ad-468d-aeb5-5a47c4364d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4ec811e-6ad8-4698-944b-e9e763e35761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb29ddc-5dc7-44ad-b369-58e42bdeedf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ee521433-68ca-43d7-b34a-0cfb4d30308d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fdb48df-6c74-4e92-8b8d-28b761a4f451",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14aa010e-7f29-4125-bad5-436be23d2cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0faba60-aa6b-448b-b8e7-a77ec0d69fe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be469b86-dbd0-4b23-bdc0-b79bacb8f317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65df8182-3659-4177-8130-117dc908fde2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4210f82e-b678-44af-a2a8-bc9d3247d792",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2c38a7-d6ec-44b4-bf56-adab19f3a053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbc89a73-24fb-47f3-b7c0-c72093b8190e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e667f8cb-1671-4e76-9f91-e9f8e32bda99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b158e40-c729-485a-9f28-66054520b8f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3bcc98-0159-4f9c-9511-68fde0ec57f2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73cc256b-768c-4a76-b270-e4827ac09a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98a08bc4-0f71-4fb3-b61c-33b2a330cabc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ea75fc-2332-4a15-8d6b-dac25711d5f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0391c086-aa48-4c97-91cb-c9f15c613224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e49b1dd2-8340-4e98-94a2-f674c5caf008",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a36ca1a-896a-4e27-bd26-36363752c76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71ab1a4b-925a-4843-9a03-36bb72b52996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5e612e-2989-4137-bec7-5208516c5b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7046a9c1-c588-4e54-bb59-7f731ca453d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d962e47d-de74-4fb5-b8dc-689f07a4b78e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ef6de5-c56f-4372-b651-acf346eff3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adc53e6a-7185-42e0-ba52-025f83959101"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b22b75-1ca3-49ec-a669-9225e9d31ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d3ce261-6b87-4d4a-8168-4b5df8c4e3dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c84c5fb9-654a-4dc3-b151-7c5dc135b39c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3320a3-89e3-4750-b7d1-ea149b8c1466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b246092-14b9-498d-ba5b-1562b70d4f65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ede7008-0261-459d-988f-542240840fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "58b049ae-7102-4ca2-a6a2-2232da1fd9d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94770f2b-5e77-49fb-82a4-3760c2b4532b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "595d392c-e187-4226-a237-d4e450d034d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f6e7c62-0ac2-404b-b647-b49a720e1a18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b997ae-cdb1-45a0-8d42-20eb45dd148f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "77a2ca58-f6e9-4372-bb70-74fd7b32dccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b3aa7b-23b2-435c-92a6-487bf0e89b32",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb3042b-a565-4400-9b31-bd42826667b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f00842fe-72c9-4c45-acb3-57236287a4ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ef211d-7d51-4d76-9d05-5c46ac7f112c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb8f2a8f-3370-4916-970b-f5c1022cceca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f21a2ea-9731-499f-b211-70802d297cf4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe59a16-fa8d-4aa0-8d4d-df8078171be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72488f06-ca08-4245-9510-5c772694a839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28cc9691-9f2a-4025-89c2-6ebb7867923f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fab8d5c-e62a-43d4-968e-d36e7145df1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0eccb7-5b98-46b5-b510-0a8c5f39a7f7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1cbe52-ae33-463c-ac57-a10e12148c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8729cd5-8c3d-4b3c-8d2e-c83e36c949d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "306c4652-d0a0-4091-8680-a2ee77f75644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad370f1a-ee31-412d-9a84-dcea3047fc06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cee9a5a-36e2-47d8-b022-739def19d90c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5500828f-cec6-4e22-b22e-206a970eb126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "855d829e-2a76-4555-9d3e-71477156541e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ef4434-c571-40c6-9d40-12df3f17e9ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1611f241-60ad-4da3-af42-9545bd330e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4250d53-dfb6-4451-bc49-c281101e4bf2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a056e86c-cbd5-40d7-99b6-fb4ff5a3e976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "420df5ca-06c4-487c-9dca-a2ba7e36c9e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67eee4f7-a6e7-4b43-925a-dedd2330424d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "198f7307-f92c-4d44-9602-7e49260a43ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca55a257-8ef2-441d-a4af-17cd79156a94",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a1889b3-a254-4226-880b-4a048d822099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2a66a3-29aa-4989-a854-735b52f30aa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "814cc711-2ddc-4dbd-bb6b-22270e7d36da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5018831f-9ac2-4d85-87be-371716824741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3790fdd8-0d54-4e98-8007-6555bba32da1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9972b9-32ff-4ea7-8bba-f17f60f0c846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb7dc6b-e4ff-414c-868f-3578333bf9d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f9b321-c3de-458f-a80f-3d5acd355d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d1da8a0-3de7-406d-ae8d-7adfdccb2f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a5074c-5903-4c4b-9af9-c0a24590c63b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c33210b-eabc-4577-9f49-861b2b1cc9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "930d7264-46f8-4030-960e-e0fb850dd71e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7c4c5a-17f4-4dc8-b239-2c06305577f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fa9d434-272e-4c6b-bd3c-98cd64f79954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef9c9577-5705-4114-bd7b-bb086e044ea6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e623501d-9783-4772-9ef4-21e494c6d08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dbd53b1-fa2f-4c47-93f6-a2919b3dbd02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a039e7b-e456-4919-82af-e7173e5448b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6919ecd8-4caa-44b3-b471-3e4386837b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6918ee70-562f-4b85-be2c-87fe325ae3a4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72cca91e-b59d-4123-9e43-1d690b38a54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beb5f389-b45f-4b61-a7d9-8360437eb881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14ef1d2-a169-4cdc-948c-1dd983c46642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45ed28d3-1afc-445d-b18d-a4abc1dfacc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d90cba40-40bf-4ec9-a200-bb65e9c45af1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ba6cbb-effe-467b-85a8-9810e973dde0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "029eb2f4-391e-4775-85c8-4d20fd0dbf1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d08b8fcb-333e-4b21-96a7-db281f18cf2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87f0bb9a-2f8a-42dc-8ad2-83a374969559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60be259e-d2de-4794-a7b5-6a149b307085",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2847da80-afc9-48b5-94df-d9d93c2fa412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "610038b4-1b02-476b-a80b-935d91edc1d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5958012-78b7-4495-b084-96150d6b573f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53fa644a-ed41-4dbc-b316-c5e8d3508951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d81ce2f1-384c-43ee-81fe-8a742025aac8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea0cad6a-68ff-4b23-aa7d-4b73f027e8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3db0f38-51c2-4b31-b252-ff7794b7557b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a02aac6c-f955-4244-9e01-413e60f105fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3a9df4d-0d0d-4158-b652-7bfdfe368ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15619aa6-fd04-451c-85bd-c6af1b38bd0d",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d063892a-f466-486e-8874-e94dec98fcfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16f185b6-02bd-4fbe-9f1b-a918a0c3b3bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65254153-fcbb-490c-b216-5b76aba08431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a90c92d-249b-42f3-a4cf-89b2a693a136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6450a26d-2e5e-4c9c-9f77-d895eb41c6e1",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15109f07-5013-4f67-96d3-a93fd2da46a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b8a3613-6f9d-4a95-a710-5befc0a56c8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc847877-efc2-4106-80b5-b33cedc5ae73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e99f298-9c6e-40a9-ae48-7ee649db0edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce14100-2f5c-4bf1-9b2d-2879bcd828e4",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452d9ddf-4741-490e-bec8-bea2e112729a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f990513-2456-4cfe-b275-98bfc53fb21e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae063991-6976-4cde-b397-920cf6e3061c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddcfe4b9-a97f-4df1-b529-6f81124a84d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fa8c8b5-1fbf-4b59-9550-ba8afb30122a",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "105462ec-cc35-40fa-b697-5912a948b455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19dd9888-ceea-4aa4-af2b-33527a3f6ba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7332cae0-c2b4-4e0a-b360-09585650e851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "302e384d-8b02-4231-b489-dbcf06774cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61043c2-8f0b-4a0f-a257-dded4977dee1",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e6dc085-291a-4b00-be6c-0c8eac8c9737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c6debd-ae2b-4571-a8d6-6e6f6508c958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c40b51b-3ce8-476a-884b-e9cc390cc193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74dcb576-2258-40b4-9fef-d4b31693dfdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2f377a-09c8-47b0-b795-151ca310672e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "670ddbcf-25f7-4d82-a0a3-2042673a6916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26272c29-5372-4832-99c8-87ff704a0d8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff20ce61-06d5-441f-950f-3e1d18c4d173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a821d4a-2e0b-4f9d-8795-1d7102a69ca6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1e5773c6-ffb4-4e15-b2ca-0a0e15cfa39f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2aa74989-790a-41a5-a502-c02cbe5c205b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd93580-1f42-49e4-b3d3-82fc63241db9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "10a25715-db91-4ba9-b99a-53d0b932fac4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9167be-a7af-47d7-ba4f-bdf0f8220b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "879456b6-3a2a-4ba6-9971-84f43918fefd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a045138-09a8-4118-a1fe-597837719293",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe8c9800-b5cb-40d1-9c0a-11d8aa3b9239"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e611ba4e-0c3e-4231-956e-6de28a225895",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43c2cfda-404f-42f7-b4a8-e5135322366d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "90f4a6e5-fc5f-462e-ae66-b084820aac1a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0cf5e837-e843-410d-9375-0a1087957207"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "56c4adcc-a784-4319-937a-254006804ae8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "815e4fd7-083f-4c6a-826a-9f4f0e1d9f32"
            }
          }
        ]
      },
      {
        "id": "cf93e3b3-519f-4d6e-bec6-ebabd34cce66",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4e56ca97-0b63-4b13-8163-6db4d70a12d8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cd0ff951-73f1-4e13-9b3e-c18c5a34d928",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4147ecdf-c707-4d0f-8d4a-ce3cf0c9d0c3",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9756942d-4336-4bbd-b525-e0ee5d829e57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "505ba0b6-f123-47ca-9fb6-4c7f280bc9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41490b96-4af3-43fd-a973-c325f6237c76",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b9cbd9-6c44-4546-96dc-bb0d00a4e4cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b44b18-0d45-47fd-ae0a-0bd292a03edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1475e106-1685-4f76-9301-abe633c75cfa",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33555b5-e2ce-42fe-941f-b30081e73eb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d38eec2-af97-42be-998c-b552e3e6b44d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63dfc8f-c885-40f4-aa21-3cb09689fca2",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5b37b0-77c2-4eb0-86c7-2963b564b2c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "124ce8c5-858b-4247-b979-2933986180c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89603b77-0f47-4131-bffc-192000a3f86f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db6442e-802f-4302-853d-04c97922b086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04266261-9ac5-433d-a861-34de932e8a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d16e60-b911-4897-a9ad-a3b55ef86a7b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8591d5-832f-4ad6-a8cb-2b0a35073129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8241bf79-3758-4230-a287-c7f66d6ffc4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9185ead6-7b0d-4f95-bc5d-e917347eedc8",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fdd3622-0ac2-4696-895c-884c27b24e9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bb3d451-5e86-4397-82ed-cd5c582187a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a42d1650-6118-442a-b741-176ad1fc7a33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "131e253b-2803-4719-bd08-940eca5ca8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac7e349-b98b-435d-a0b7-f18701266f5b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95486a1c-722d-4c4a-ba45-8614a1075c55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a773a40d-f9e7-4524-b7df-50131f7b3f5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6652c4-a7c2-433c-89bb-5e3061b6e265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02e61d87-6a67-455e-a71f-2f0a71d8eec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46a00e6a-f508-4781-9a85-167273c972f7",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b63a08e-eeda-48c8-b838-fd37ad13f959",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f292193-41fb-4d4d-a5a2-e8a1c39cca51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7da9b0b-9860-4b1c-af4e-a10fffbc91fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "616eda39-270a-48e8-adcf-8227f0bc8e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0bc563d-1b75-4a3b-ae1b-90d257f7605a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c306f4-f3e6-40ee-a849-ca1ee80a7112",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e91cc99-d4fc-4291-91c8-7ccc4697905b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4028f079-613f-4ed9-8186-a16b941c8e6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "611b791b-7ea1-4ea9-b808-83d68b09f6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719f8191-6b05-4eec-b13d-73efe3bf3721",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72d01c70-af3b-4177-9879-eb5533f4aa34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a067e5c9-e4a5-4c35-b9a4-80666ac309cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90fc03ee-7ccc-460d-a5da-8324f7c49d8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "945f64f7-2de6-4b3c-b0af-99fa7d9b6f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d693e2-9677-4096-8c20-5abcf0fa95bf",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c601c866-d0e9-4141-bded-ec85a717b13b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8786071e-82f8-4a57-b670-98bd88ffc5cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaae24ca-fa71-4932-a31a-eb1731f19e23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eff28c4-e956-4ac2-9937-c63b0f4f77df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe1a5fd1-41d2-439d-bf5d-a4c32757bff9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c4be70e-09a9-46a2-bd93-713467c07022",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63cb63bc-91cd-478c-aae0-b7fef81727ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8a1493-35b2-41d1-88ac-85ffa9ab5237",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dfa8151-457a-41bb-a449-3630df546fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251b632b-dc76-4bc4-b9a6-dbb1df5b9f37",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da4785ef-e022-4912-a02a-c09c8be932dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93e89230-ce73-4a3e-9e95-e693e5b63ecd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "121d575e-1232-4ff3-9344-a94d5b4d0837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1025899f-1ca9-460b-b2c5-98b11edd89e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0001ca-3538-412b-8bde-57715c270c60",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f200a3c9-44fb-4d16-9acb-e4a32b6059c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c36453ac-d491-4b28-8b6a-a9d5e753bca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef51453-bae5-4c48-be82-9e5321033fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ccedb77-b1df-44b8-a18a-16cd0fba01c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b6de0a-3141-425c-b606-1ab2aa50a551",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ad8245-4ca7-417f-9b99-0974d37f9939",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8b5f3aa-550f-4b76-b66f-63922511ad5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce67c01-49d0-479f-add2-cfc94532946a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d0675ac-4b82-48ae-8dcf-ce0230cb788c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e92b05e-48d5-4381-a3e7-23f8d5059c6d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86cf30d0-4f70-447e-8ee9-bf2e3c68a928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e292efc8-557d-471a-9a0c-649cfc011704"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c335ae-ba1c-4313-aaff-0acd9687ff76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10907d77-fd30-4451-9818-38fd15874b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db8557d-5da9-4a4e-a6de-d90e73bb1a66",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03983b1c-91f9-4c00-9881-3e42cc17f0dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ea048d5-9ed6-47c3-a48d-da3f4a5e828e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed46812b-bd80-4f83-a603-2083bc76da0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8511fd99-206a-476a-99e1-816d46ba3c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f47fc4-11af-468d-8904-a88572257c51",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18275a36-ed04-4993-bee1-8fad7294bb7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91b1bed8-0d45-4bec-be56-e78bfcfde283"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d400b6-34c7-46ac-a746-5f366acad737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "359169ff-1a52-4c42-80ac-b3197c39504b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33171032-91f9-428f-bf03-7844d42e67ad",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "364883e9-ab08-478e-84ca-1dda07fc5e60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deacb142-d4e9-4180-9183-f1ab00a6ba65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b62f296-c33c-40bc-ac60-a005c74b92cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ceee6cc-7592-4af4-bf7e-9fedf20e375f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da3f177-d921-416d-aa05-e3d04c0c98b4",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3cc18e-41e1-4945-b17d-dbe098ac49a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3f1b37c-e317-4cae-a2aa-62a59d87f888"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43619797-fedd-477c-ac71-c6f6efef0afb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e53e4d1-d7f2-40e8-85c2-0716444fdd54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "787d502a-9f21-4140-8347-ab0da6dc5464",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5271388e-85a3-47e8-95fd-cdd069d69c73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7afc2f53-3c69-462a-a65a-424b88462536"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e696e4-b814-483d-af2c-35b4ce6ccde5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0095970-8cad-4ccb-9a7e-6b0d8c480865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83aecd28-d319-47eb-8e1d-d22270e6a430",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202aa77f-a0bf-4887-89d2-cc86b2b900f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35f72f1d-befb-4dd7-a6a8-63b6e2f1fb2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b4b751-d926-4e39-b834-4e195e87aba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b23309-6f57-4de3-b203-1fb4eb9f4652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb946a7f-2a3d-42db-872f-71d4ce5ff10b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6857637-4f82-4e24-972e-cbf48a9158a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "118bc1eb-fd63-4700-a6cd-b0d2ade50f83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "496b1a0b-2fae-49a5-9c1b-638c6e98bc14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fb3cb87-5c49-4ddc-af44-14ad435c646a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e81214-f66b-46d9-855e-b1a2f9a5a692",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d5af7d-ffa7-4114-a329-ba3e6ede943a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89a2c5e6-565e-4b8e-bf1f-e7276e42329c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ca4ead-03fd-4be0-914f-49e105f5c83f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9aba129-fce0-46c2-9a5b-b17f664038d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d28d519-8c45-40a0-85a4-aec0062be361",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c323bf-7b5a-40b7-b54d-47ca8212be96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74ff3055-ffcd-421e-8cba-a09a0f8a852e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec0ddfc-b5b9-4f02-9385-5c3f4813e436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f465756-a067-4e7a-b285-b3d5c976dfb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2bb960c-d089-4933-a39e-962c23dac135",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ee8797-63a1-4053-baa8-35a0aac8ac2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30d74446-4da3-4a30-b70e-927a5b51c76b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3633daa-a513-4f2d-ae8a-92a32dd1b748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ece8699-10f3-4b97-a59e-93cf7e43403a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158b80b0-0e0a-4dc8-aede-9e47fa67a814",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f698bd9-6714-451d-ba05-68e2466259d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3586f53d-ef18-47d5-b295-f50708768b0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6888acb-980a-4590-a65d-368fe513adc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e99de3ac-8dbc-45ac-9329-202cf7d8b813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c358e8c0-b9aa-4e86-b0b2-0549f19ba3fb",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "203c8698-ddb2-4525-bf8c-d6636be0cf69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e23fb3e6-b1cb-4104-9444-22e08443f408"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e234fe-0bc9-4f7c-b6e5-f00fd2b1e4b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a76c24d-d20f-4b39-98d8-fd228bc0f21f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356d81e4-bdd0-4c16-aa44-aa9a0484bd7b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff44fb6-4ce7-4ca6-bc96-ec445482040a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a28d0eb1-994b-4794-8828-f09a36acc2fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a887f261-ab0a-44ec-a2c4-92549d8507b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b94ef47c-f313-407d-82f9-a169c12b5556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe0c5083-dc89-4f4b-ade2-57f7df23562e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "701690d8-4e80-46df-95a9-1ed9d19b1a89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b56cab40-4229-4b4c-a66e-499df1efcf9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e18988-6bd8-484e-a041-97926874b023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b828ca18-38df-4067-9a2b-5d9437c449e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c010778-c76e-43c1-aaa7-bd4553c48edb",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c2f7d0-db7e-4c38-b454-69a44c78fc62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa3bfbef-d03a-4a4e-bf72-ef8de74bc28a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52d6dab-3227-45c8-9dd7-f84b59ac05ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db5a60ad-5d8c-496a-98e8-b34bfa435602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a91840-5dfb-4ed4-9dae-ddd5463e7bcf",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a96935e-f1a1-405b-a091-5e64484b546d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a2ef096-3b33-4b13-98e8-875450f384a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e7b1bc-3be4-4627-91ab-7440fbbe3b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8753e1f-a8f6-492e-bfbc-c5ccef73fdbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e0676f-0732-45a3-aefe-231ffa6b006e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd46a089-a4ee-4533-a4f0-c2d661bac921",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a37f35cd-5105-4419-83d0-79b4c4996e09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4bf71bc-b751-4f29-bd86-2200d998be08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84714add-5c9a-44dd-a16a-e63bcce3378e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87fd1786-25b5-4a04-8c3c-419d7c3736d5",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14f68a0-4a67-4de3-acb7-d6c2b7884a2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50a6414e-cd75-436b-8af4-8f1f73b126ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af854cdd-4e3f-43e0-b673-71490b9cb308",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50ebf5cf-c9b7-494c-809b-bafcc15d71de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a40091-28eb-469a-8f04-7b8805791f0d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7add9572-b6ed-4fdb-b544-a1011d6562cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b462910a-7be6-4512-9190-d80a2b6c30cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db574da7-bed5-4990-ae5e-fe50c1095e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e2c79d5-e178-42d6-a3f5-f7bc97c26959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba64b9d8-6e39-4b8c-bc97-6d534c2222d1",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac17d0f-a202-475a-9e68-db805d73be88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a78fbec6-b55d-498e-afe6-5d8c0598ed97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "467d6d44-e3d0-402f-b7f6-8230606add8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00362e5b-bb1b-4317-80cb-20de248b0afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe11c926-9c35-4b69-b95a-0c6b6ceae8a7",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29509b80-0916-45b9-877d-d21f75fc054b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c3a355e-cb7d-4fac-adbd-04f72fc7f7c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "759e3818-3991-4193-bffc-444b29ae728d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f184159e-ee62-4b0d-b6e0-49a08984b2d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6e6dd7-6efc-4ff7-8b40-9aa54b7fe4ea",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73001d9-f98d-4fdd-85a9-5bbbf07b7055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90723af5-1150-4ac6-8357-43a00fab98b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24f0842-3b61-40fe-9e7a-e75d40568270",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f1f81d7-a48d-402a-9422-fd3e74dabfbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e32a4ddc-9e8a-4c6a-b7a3-13bd3025fe39",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b728c6-8543-4063-8760-8a6e269a13f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf9a67f-838c-4c61-a6aa-c192dc347b18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ef0f25b-d4b8-4e7f-b697-41fdfc3657e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0f3c5bc-029b-4528-bc68-ed6bbe3f1cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185ae9c7-aac6-458b-b513-66c1cea239b4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca59d8cf-51b2-4cc6-9043-c5602edb3a2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cc8f5c9-b7ba-410a-83dd-15210a4bee76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ab1547-bd27-42c9-99ee-96ee34830476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4492aa95-71c8-44b3-a3be-be78af4e1e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b9b2090-1fa8-406d-a86f-3be8196242d5",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1782934-c749-43b5-972d-c36750cfe8f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73462aaa-71dc-4fb3-903d-3b1f6636a0fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e06828-7838-4821-bd5d-e20b3d0bd493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15ce9444-b72e-4b1a-8903-ebb829749ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112b95d2-0d91-4e25-b3e3-8ca690fdf2e3",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae83d4e-9ebb-4a8d-8fbd-641465b839c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d969ff02-688b-465e-a4c7-a4e1a7c575cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af127bb9-26ef-4451-8351-a715d857678f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7be256e-9828-4efb-a1a8-ad498404a592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6ecb00-c0c6-4a4d-89fe-2063b6042c35",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78b9372-de05-4b61-b149-067d6b49e302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4db4870-7177-4d21-ba22-728005b2ee46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce93e507-76c2-489b-8837-52bae81ba923",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72c5e15a-afc6-4ac5-8a7e-dffbde05b0ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6734a3f-8f84-4d49-b909-055551b98b35",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad9adddc-d2d8-4a30-8925-040e56f26498",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "280099aa-0969-46d8-8f99-bd40e894599b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98386889-bf62-46be-9c18-3dcce6023b37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10032b3e-c0a2-41ee-b62d-af3a54fd2357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590229e3-904e-4f37-8fc2-22b49eb7252a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "313a4a08-74f8-479a-85b0-55c3892c48a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "591c32d6-f347-4823-88e4-10cedec6f366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5927ec5-437d-46ca-96ca-635303e98b62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f89d8aa-9f7f-49d9-8b2f-ecba5f450aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454b8384-8911-4d50-8298-6a19561ac880",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31481377-f735-4f8a-b50d-33317525d1e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48c5fbea-5d43-44bb-98a3-c5dbe8d38907"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe5c5f6-908c-498d-9ecc-1e81b94cd8f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b02229b9-98bf-41bd-b266-25116ec57b93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e1b744-e181-4834-9a5d-d4904af4fbfb",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0c828a-6dca-4feb-b3b6-aa3e6488b6c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9ac168d-966d-4780-8afc-ba6fe5af96a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7190d469-74c6-4810-883c-3c7ea835d18e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7a63e7b-1d69-4ea9-b970-659f74f4c7e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed960dd2-db9e-4acb-9223-00f6d1b71ab8",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b35bec02-ed2c-4fd6-832a-90cf93796396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69a70846-cb5e-47a5-be28-f37d5bdbb38f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ef3770-34a3-4502-8f29-9d25bcd56068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73b5adb0-b1ad-4701-b8b9-1508e7f49f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad2a690-b526-49c7-b0cb-4ffcc6541dd8",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901b6f1b-ab98-4767-88e8-d59a7f3343b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3417bd2b-1b74-43cc-a384-8630cea8212f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb159bc-16ab-493d-b173-aa196a2408cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84bd9ab6-4451-4972-88d6-0623c2234550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368816fb-d390-4add-953e-76277ffaf455",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c64261-8555-46a8-b74c-ea5f43a84c4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d49ec8d7-4206-4d4f-be12-26087ad3f29d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "196f20a2-ac06-400a-a8b1-59f7aee46946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbd247c5-b129-48bf-9489-78280a86927e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f4e7aa3-26d9-423f-8dcb-acc6a9d48310",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97becc7c-56d6-429f-a64c-32cf8a0e4b78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fce82ed9-0f5f-4338-8212-9d76dad290c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a7b07b-bb82-41fe-bb22-b31039f4cd75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e27dcca5-8a9b-4c4d-88d7-0f140a33ea89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df60130d-b85a-487b-8d2e-b3bd40cc6cef",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9def3271-1f4c-4ee2-b7af-fc5e5d3ea876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5b0a4ce-e884-4cb5-8f58-3d64cc589115"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec68285-ab40-400d-84e0-624fc883f3a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d9e6465-46ab-4c60-ae7b-abbdbe56d0fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4885cc6-e499-45d7-aa85-f9a044c43d48",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc04291f-948d-4cff-b7b4-3b0b5393ecd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9d81dc1-fa73-499a-801c-3b8eaf83916f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1ef6ca-3d8e-4d8f-a253-4c9dd407908a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce8deff7-91c0-4771-8d88-43d6b8aa94f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c4ceba8-6b04-4bd7-b022-04820f9e2a1b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad7ecf5-91a0-4fcd-be6e-0dd2c8920548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b10f942-7702-4424-983c-322c8d3fd464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f6e62c9-06ba-452b-827e-c4c48258250a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75d438c2-d3fc-44f8-af15-e26174bd4a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897e9121-8542-4d38-be23-251c42e12d54",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40bcad70-e308-45bb-9a8d-5e12b7105559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6114452-0ab2-4c2f-95e7-b6c3747596f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0fd354b-e081-40a4-881c-70bc8be878da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30ebcf7a-12e2-4423-ad8d-b6c455795016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4780bdd3-2141-438d-8cf2-7dc2fb4855a3",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b22ad98-8132-4107-8905-e316eb09dbe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6bfa452-39b9-4188-b35f-ef56881e943d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6fb6518-b456-4185-a35f-79ac9904147b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "450dbc79-d4d6-4232-9fea-1917f9b29c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02014c6-2f38-40c8-8786-bc029ad9f835",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37568e54-f8b8-4ef0-bb3f-277e96300df0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d10e9d9-a326-4570-9934-8d130bfd04ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "339ece97-0986-42bf-bf13-9746b95c11dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60aad67e-6e7b-4668-9670-c8474e9c5641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a863963-f3d0-489f-9d24-8e6cd832ebbb",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "333878b3-3f29-4eea-aa18-4d2718e10524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60b3b24a-49ef-4221-b35f-9f9fde964911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c904a4-29c8-40f7-b9a4-801b5d663cc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76870e3e-dc01-4a29-bc32-6de45e1defaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b55f36-7d78-4c81-bd6b-b67966894fe5",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5fd3b19-115e-4702-847e-bd6d8e340502",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "169f2504-5b33-448b-a194-42d306bf4feb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "915b9f2a-d621-4972-a2c5-665b1e10ec8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "750805b7-31c4-43f3-8db9-f3c4ae1bad35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "210ebccf-d460-41c7-a257-8fd54c7656c4",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab155a0-1218-4c22-886a-a7e2926b25d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "081358ea-97ad-4d9f-85a4-03b1a43af3f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59236013-053b-441a-89bd-dc8bfaa4a8d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ca3fc86-96d7-424d-a8b3-d8d17f7e94da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84310346-280a-44d2-bfbe-cc56f2a1ebc0",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5053856c-d175-4e91-a3d8-4d39b8a66e66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d795ded8-f006-4483-9d73-a23c2a73e2f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae667df-fd5f-486d-9263-bd7aeb491ebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83abd694-eb04-4dc2-b779-b92fa84b95ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be589fa-c87e-4e77-8ead-de14db382cf2",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc539302-f1de-409f-a15f-28276335decd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bdb16d2-f3e0-49a7-9a53-df39c8920049"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb6e9bf-5392-43bd-aa5b-153ad82690a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da0b9a74-9303-4c0b-bd0a-f83ba0da5f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72595176-139e-4fe4-93d9-9f485b69c9bf",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "795e67ca-8e97-4e86-8793-cecbcb57b788",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d30783e-cd07-43c6-af7b-627ed8ce248e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9bea2c-5b59-4504-b3b9-b1a5c8648004",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c47d5efe-d6a1-4faf-8073-09d6cf81383f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5494be9-1ec1-4bd0-a85c-11e76b0760be",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ca2e34-9f17-4365-8449-de7e5b5c593d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e7fb657-aaa1-40bd-b9a5-cee5e0e300d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a6301b-0ed1-447f-b50b-247489841d32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8beb0d73-9839-4a2d-8a53-a52d965175ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f9202a-39ae-4248-a6cc-5a84ef5675e8",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349f9ea2-12be-4aac-b5fe-37f954d0a3dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa7a8f52-be87-430c-a031-282b75eb2e33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e44eff51-fe95-4ea4-b8db-43fbb5c8cd36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "849f8f2f-5f6f-41d0-8e9f-3949d9881903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4e9a38-b9ba-467f-a649-aada9439ecc7",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923eb2f9-c6ca-4bc9-8ddb-4dcf99871fc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce43e9b0-3d24-4404-9572-1e68b0a7f671"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a003e1-7017-4d79-8153-50d503fd05e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dba0b28-097f-40f6-91a0-867e531c2cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41bb675e-e188-4ccb-809f-1863c13a3e38",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f962c79e-7e74-4f27-8ee6-7c90ef28f52f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fe44491-de56-4981-a2cc-91870fd19ae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c235c4f3-6105-4c05-98b2-48d5f3d0a4d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c3e2af5-6e4c-4cfa-9ada-f47b228b9998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f951fd-26b6-4cdb-9660-35c208d51ffe",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cacdd68-b422-412d-9708-c5f5443fc979",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4eb01efc-efdc-42d1-b834-90941fa9e066"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed67b5f7-e052-4674-ba2c-a273d5daa387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08314818-7b38-4954-932a-54717bfac7a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37cdb5cc-099d-4d0d-8c9c-f26550df6ce5",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f233119-5b24-445a-ada4-ac4b068f1905",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1af8fa9b-6cb1-407f-9933-2b63e46b8d02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7ff9ea-9116-47f6-97fd-95e770dc8c24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de5fa2ff-7997-4d2c-8b7d-ab110828156b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f3368f-731e-4d2c-8ed8-c9a0bc576507",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cdfb0d4-e3f7-456b-9858-e181eb704758",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b1a5cc2-3f4a-44fe-98f2-6fc837923a68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4258f27e-3963-4d40-b54d-3bda5d6764e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e92d357e-805e-4ecc-acff-81b1588557ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17cdc5a3-26cd-4170-97b3-f33a53100a31",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a36e0c6e-cdb0-4506-ab0c-683f3e76054b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a1aa048-1127-469b-bd67-32ca6bac6d13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b67105-4768-4272-922d-65cb33788d3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4585cef5-5a70-4fa0-9cbb-f36cba93a19b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "668773e2-3e53-4af8-a26c-348b401549c2",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e34847-347e-44eb-b3f1-2c89d8f0945b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a890fb8-0cea-435d-89e9-4fb6fdb41560"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d85fb4fd-e773-4a71-a5f9-6636dd687a27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82113cc2-696f-488f-b7d9-a214982ac39a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd94c76-bf45-43f3-8fcb-3c7e9a60cbf5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c57ff4-356b-412d-ad9a-0d0078968b24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a05ae46a-378c-409c-8ea7-a1e6ca1d8dac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5186b4a4-258a-42c3-80e0-a73d04f715f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab4cf34-f233-4c0f-86cf-ff578549ea5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7408615-178d-4ae2-afd3-6f58d620d9ca",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc5fd34d-fa13-48d7-9ea0-7cf30ac450d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb8d6a81-adeb-4895-bec6-573af36f389e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e38ac4-094d-48c0-888c-496033ecc16d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "037cee60-9071-48c4-9d7e-17dff6a59007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3cea6f7-d014-479b-83ab-1054da86e13b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a548a8-db89-4c3a-8507-fcc48cde3369",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5aeb76e-951b-4783-9556-8335b2d2d56b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86878334-867c-4f57-9831-0466fd7660ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86eddc83-f2e7-4bf9-8793-94d7366f5c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50042aff-b2bc-43ba-aad3-753b100396bd",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36f9418-e055-4276-b433-0a7ed50113d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d724ab0b-bb00-45a9-977d-c2de5871fc8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f320fc-01fb-43b8-9db7-caa56765c7d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75d07f72-e797-4f93-bda9-a12c846d63c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e1160e-6efd-43d2-9fbb-3dc71bb9b017",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0429bb89-4e4a-4f18-8cf6-9d419843298e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa127521-9681-4007-b571-35694e9034e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23910479-60e8-4b9c-b9b1-b40e582b6882",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42f576cd-0df7-4e17-ac3b-bb4d79513588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc218916-2ff5-41de-abae-5dd8570cf3cf",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89665da6-b0b6-4b01-be77-7d06495b94f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c8936ee-fd90-4f3c-ab5e-4b000511ebfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc671411-ff1b-4423-8a12-958a99f3b7d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97af0ec8-6596-4986-b7b9-c3025c618258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e8fe698-7a39-486f-bf98-bb1f029fd6ed",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e51882ce-c835-4ae5-895b-e6f3754a1ce7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd047ade-ec32-445d-924a-57581e46514d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a66fee-8c85-4a17-98d7-9df94bdaef78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "470c15e8-9ff8-4cf6-900c-8f97674bacaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ead6d9c-0449-48ec-9d03-a781cfb47130",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750007b0-bbb8-41a9-992e-4a6b138f891f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76267218-1f5f-4607-a04e-c4af043e7dcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae3cdc22-8b8c-46c4-850f-4f1d54c8d244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c61683bc-8dd1-4abd-9277-4f18c2cb06b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e170ec-85be-485d-acf7-a745a724935e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e99eb0f-a066-4c14-a4ca-4ff8ade8a2dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5658ea6c-4efc-493b-bb0d-e168a317098f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90f85c7-df7a-4764-8cba-daf25ac2e34f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85ee1b4b-0120-4090-b51c-21d9f826f829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dccbbb64-3022-48d2-8aa7-3bde94438653",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de576fae-3dc9-4dfb-94c8-a95beabf0ae7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bada87a-6855-4f3e-a61f-fa7d5c9011ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9c987e-dd8d-44bb-bd6c-5d094008a5ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4d71956-72dd-4143-a9ab-e39107f03b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d46d11-4688-4648-b87c-9ace8409474b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d3a6a6-1033-47c0-b122-9b971017ae08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "857016be-81a3-4d5e-80fa-18677ee27f24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b54e48-f892-427a-9da9-2c714b535a7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bc18ff9-9d7b-4c1a-b024-7b2698d3536f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc27ea27-a2a5-4d4a-b6be-1be5b8bfae75",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1dbf13f-723d-4566-a536-31133847f2bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b73e920e-6d60-4109-8990-ca7e7ecc3862"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a90ee29-ea0d-4185-a472-c212acb70f59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aced204-d24e-4734-8e58-d330fced6547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0547904-5d40-4407-a62d-4e0dac0de381",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f887f266-01fd-49a1-b45d-05e1ebcb4105",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a65312a4-4a17-4278-8200-baa328673624"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5235ffb8-77da-4eb1-9115-55477802a5ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56eb5310-e208-4f0e-bcfb-dae6353d4175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434a0eb4-7363-4e57-a1b9-9ecb5895d9b8",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a131020-9568-4898-87a5-cabafcdda6b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e54d7d2-ac96-4daa-bdf0-c31b7190e22c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34b22be-7926-446f-99d4-0d01877c7aee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c864565-8803-4ee1-91d6-96dff0399c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e46c87-02f3-4db5-b806-9f435d0a0517",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b6a4b9-717c-439a-8152-4c188bc22039",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc0df2d1-ae36-43b2-a68e-e44820dd976b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddcb0988-8d6f-4238-8c2f-e3204a87c351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1660e89-45c9-478e-abfb-61fe8cc9b82f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "701f9eaa-c67a-4be4-abf0-f087a95ec3f3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13fbf82-90cc-4748-b140-d7953811ec2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c333496a-b003-40ce-8050-e9e36659879a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c547aa0b-22f6-4f1d-a594-3cce6fb40e93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d850c11-7ea7-4410-996e-c6cc772864ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf77592-38b4-4e45-9274-787d1d782f0f",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bea1f737-59a7-4424-bcba-3e95f6046a86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73799050-68f8-4cc4-8ab6-e13e48ad8c36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c45c325c-87f9-4b10-8f4c-c4e7b7ca477a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f4d5fa8-b3eb-41e0-ba94-402c3d20c20d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff952e3-d31c-456e-bb27-312d8ea3ddae",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "994e9f1f-3d3e-418e-9ccd-85d61ffceb35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad39ffea-2986-4f21-9342-66f5bd97b7fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a28a92-46bc-4e8e-930c-1cc8de999698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e784d8a4-9e99-4f6c-84f8-fc67de6bf9d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776ef3b0-0fec-4d75-ac4f-96224fa3e8dc",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc4e0d2-caae-47be-9167-3e76fc56b96e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dfb61b6-9a3c-4642-aeb1-876d663ff685"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be2bd00-e3de-4975-8a41-9b7e64a327ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "710a3278-5e4c-43e9-a04d-253110cb8c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea09b45f-585a-438c-a481-d4a8b640676e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ce0a6a-384d-4e4d-a85d-1d24943835ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22ef8543-9767-4793-ad2e-9c69c55cffe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8027e87d-ee8d-48da-a1c0-7d2c4f596d32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d500b826-bafc-4439-bae5-1c5b015a7065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f4a16c-d9b9-4ba2-8c70-1bd42ebd8a0f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc0c331-3de5-4d40-9d29-f0d929f52f7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce97fa83-38ab-42f2-962a-5f8608098536"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ef024e-aad4-469e-962b-b4461a28548e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68e52c8b-e543-4124-871b-0d74b1a86e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883224d4-cc2a-439c-b0fa-80ad6b37dcc6",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eee7997-7ecb-419e-91b5-7c43ec41cec4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f44b1d85-8664-46dc-9fa5-c963388ec437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c40402b-e365-43de-93e7-36c54e145e20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49936747-ce43-4237-b9b9-10d235032771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cef203d-8061-4265-960c-78658aa1f3d0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f25849-9785-491a-a0fb-af870d180dcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d31568a1-eecc-4eb5-9090-3e66169efad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c033f46a-3c5e-42b7-aa77-b0c12f149293",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a1053f6-76de-4498-b68d-5eb936bb3232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5a7ce2-17f4-4505-8f17-9e74da753ac8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215750fa-4c5b-4f76-8006-1aa29037fafd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "accb361f-8f40-4185-91e7-fd915a4f9991"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0791e2d2-2c07-4b3b-a98a-7b11ab4c619b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2ad42a0-1de3-474a-88f8-89ecab675e3f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a376d8f-b481-46de-93fe-7f7bbca924fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c03a57e8-499a-42f4-9aaa-9b4cb5f2e434"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e0b3895-3cfe-4f6e-96db-3cfbced6b68b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ba9efab4-45ea-450f-9df0-f6cfdd901212"
                    }
                  }
                ]
              },
              {
                "id": "f2a7e015-5c2c-4800-9b8b-1f53501377e5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b8c35c20-910d-4ba1-b9bd-f478d1510f51",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35a8e2d-d9b1-431a-8573-acfc310e43c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b775c949-7ec8-4f70-8c4a-a473badec6c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "817b6a36-9056-4ac9-8a56-d9c399ce739e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c449d7ea-d59d-450d-99b3-33bfb921c1f8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a42ad214-6776-4830-b6ce-c34306db1258",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93369f2c-5810-4aa6-9a50-e5c82d48f05c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "785a4b7d-3e67-48f9-ab26-3db96f546442",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f80e8f2-3d53-483b-8145-fdfcb1bb6bdd"
                    }
                  }
                ]
              },
              {
                "id": "e1ca86d6-ff4c-469f-a6ee-4803869566a8",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "7dc8ff93-5e77-49e6-9c3e-562aeb8c49d2",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8614ebe7-576b-41dc-b5e7-26851ce79a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "c1b6263b-0c30-444f-b7ac-9032db3f49f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b07f4b0-dea8-4d25-a1ce-2292680d96a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ce7c78e-f992-4ead-b8ef-9de99dbb8c5b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ec5f3b52-e7a5-4470-bd26-39bf599c59ce",
            "name": "Positive Testing",
            "item": [
              {
                "id": "779cf45c-712e-45f3-b117-399d177eed98",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a9d5c75-3245-42a3-ba55-4dca37b3ae33",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ebc7a4ee-de99-4995-a42d-5f0843c0aa73"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7faa1117-6b89-41ab-b1f0-600cbf2d426e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "938a843d-5cff-477d-a4a0-3d4f44ae6864"
                    }
                  }
                ]
              },
              {
                "id": "ad179ca2-ce17-44a3-9cc8-5bf2bc0ac139",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e34c135-1258-486e-bfc4-dfe404b7e641",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "dda8d6a2-4175-4f5c-9715-d119ce5e690e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a45870e3-0065-401f-95a6-adb1951ec850",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25fe6adb-90d3-41a8-93a7-12eefb1caf74"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "235c856d-c085-4d14-bd47-ae48369b98d7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2e296574-aaf1-4352-bfc6-aab639615b22"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "56e196e8-ee2f-4071-8f19-cb4b372a82a1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "96175301-762d-47d9-a87c-8cf739a87120"
            }
          }
        ]
      },
      {
        "id": "89fc99c7-7262-4bd6-81a1-700de650c54d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ff3fa15e-7a0f-4f49-b860-51f827ccd74c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "363314a4-fbab-4cfa-9216-f44249628edf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fb66e2b3-b300-4ac1-b87c-10e13bc32072",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f882087f-093a-49af-aa7f-9ef9cab2f76b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "30f09b83-8acb-465a-b704-c96aa5e264fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "351e1002-cc79-41bf-9acb-8ff158016e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ecdbea71-04e0-4edd-b4f3-7e2de3acbb35"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1649d993-4468-4796-ae35-bafd0ac9b591",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ab726f4-e429-4a94-85b7-7a7457042271"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "840023b7-91e5-4650-9bd4-06a277678449",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b0fe518-10b0-42d7-8849-c3de7510b5db"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "93a3beee-0792-41bb-a77f-d79c432672d2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "226cb304-16f1-4f91-9843-3d7f1c90d033"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e4c211c1-2ac6-4cd0-ba8d-5a504cddc081",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5b4e53b-e065-4348-a0b5-0f961c1e7e35"
            }
          }
        ]
      },
      {
        "id": "c62560dd-8961-4f33-ae14-7b9c538536ce",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f6ea6e2a-0eda-4c30-9e1b-c0965e3c0e69",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d68436e0-7a04-46ff-9a6e-40399b4440a0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d10ac4d2-edb2-414a-9b58-0e161aef8f1d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b90d57-76cc-453f-9af1-a0578bc35b6d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75e88a62-a3f4-4ce9-93d0-f62cf230624f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e056aa0-36e6-4b10-bc4f-bfc4428d8152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b9b5fbee-8483-42ff-b864-3427b277c260"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87ea6a6e-7a53-4c51-8f94-6344f924e0f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "30491d39-7399-4d8a-bda2-9c0f7dbfcce5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "10ef1a9d-7084-45f7-8db0-72225410f285",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5ab46d4-b1a4-49c6-88f0-00189584fe37"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0c7927c-6dca-4762-bbe0-cf6ac18470a1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b80be96d-f856-495d-8e18-80f0fe161599"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b22b773f-1052-421e-9a66-a3e1e0c129f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e02af967-848f-4eb2-b103-4c93853c36f7"
            }
          }
        ]
      },
      {
        "id": "e0961e8c-45c1-4b68-a4e0-aa09ce7204bc",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6cef5ba4-920b-4668-ac7b-1f71f585c0e7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f6d3e807-cac8-46d5-887d-abad4cafd67a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a08429ca-5d84-4d09-82d5-6bade1ee5d43",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459e06d7-6d8d-41b1-b58a-7758b3859f19",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bcdb884-2a27-41c0-b5c1-a9bfc420ce41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b12be76-4265-4b2d-86b2-d0179a5a3694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7a4e002-6f53-4657-b55c-a72ae4f10d65"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52c466e4-ba90-4f8b-b7d7-c53e955b2ddb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24a373fd-9718-4aa9-9e26-9c2b8f150422"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf424ac6-7c76-4e37-915a-b9aee3f96f4e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df5db846-8514-42f0-8f99-06ad0bc21a95"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5cd366bb-764c-4267-9d52-b5c0f7670923",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8c99b7a9-8aa8-4a15-8edc-62f4e013fbb3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bac100ad-7f32-49c4-9906-a8d6bada4da8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "04cc394f-e4bc-420b-8acf-be71c2105234"
            }
          }
        ]
      },
      {
        "id": "552d8ef4-2e85-47c6-8eba-4af2adf2a82e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "18fe2816-a687-497f-af2a-c927cde5b025",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4bbe9782-be7c-4d1a-a480-cbdcf943c6e8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "bfd4e5bb-bc6f-4079-9bdf-065ab22d9715",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9279d39-6724-48d5-bf1d-909ecbf74d70",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fa0426d0-a573-4a2f-b255-28f7e1438532",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 105.56491228070173,
      "responseMin": 20,
      "responseMax": 654,
      "responseSd": 74.11494271578592,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1704587983634,
      "completed": 1704588023175
    },
    "executions": [
      {
        "id": "4c0faab3-b6b6-4690-9dae-ee729f8860bc",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "cace6c79-4632-4b5e-a260-b2ac70029a1b",
          "httpRequestId": "6b98cad7-e457-4cd4-8938-7ff09e90648d"
        },
        "item": {
          "id": "4c0faab3-b6b6-4690-9dae-ee729f8860bc",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "706da1b2-8dde-451d-a050-78fade80c3dd",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 0
        }
      },
      {
        "id": "012b3c9c-dcb7-43cf-bc76-5a05104be0ed",
        "cursor": {
          "ref": "701ccafa-4634-4a3f-b05f-61406e5f6ba9",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0ecd8370-4de1-4bd0-a91a-eaab82fc3951"
        },
        "item": {
          "id": "012b3c9c-dcb7-43cf-bc76-5a05104be0ed",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "43fd20b4-4e27-400b-8f89-93ce7226ee09",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "d0df47dc-d574-4702-85b6-1bba3dde08f1",
        "cursor": {
          "ref": "cc179d1c-a087-4c3c-96e2-408b1523c02c",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d5036ed3-4fc3-48b0-8e99-a0a0966239eb"
        },
        "item": {
          "id": "d0df47dc-d574-4702-85b6-1bba3dde08f1",
          "name": "did_json"
        },
        "response": {
          "id": "909b2f61-7e39-44b0-9644-d62decdb02c3",
          "status": "OK",
          "code": 200,
          "responseTime": 422,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363add2f-aa65-48f3-ae94-3830726ccae5",
        "cursor": {
          "ref": "04582998-dae5-4202-b9b6-5e65abedb9aa",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "437830b6-216b-438e-87e6-e492db9e4aa9"
        },
        "item": {
          "id": "363add2f-aa65-48f3-ae94-3830726ccae5",
          "name": "did:invalid"
        },
        "response": {
          "id": "043ca803-0f12-4a65-9528-8502c84d0182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363add2f-aa65-48f3-ae94-3830726ccae5",
        "cursor": {
          "ref": "04582998-dae5-4202-b9b6-5e65abedb9aa",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "437830b6-216b-438e-87e6-e492db9e4aa9"
        },
        "item": {
          "id": "363add2f-aa65-48f3-ae94-3830726ccae5",
          "name": "did:invalid"
        },
        "response": {
          "id": "043ca803-0f12-4a65-9528-8502c84d0182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e806293-9256-463f-8867-51df29dafaa6",
        "cursor": {
          "ref": "73135db1-236c-4851-a146-27af81c5f2a2",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "01c474f5-0e5b-4b58-8dff-99cbc39a5356"
        },
        "item": {
          "id": "2e806293-9256-463f-8867-51df29dafaa6",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6cb85acd-df96-44e5-b8c7-e4e0b17e8683",
          "status": "Not Found",
          "code": 404,
          "responseTime": 134,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6a8d20-10db-4f95-8b2b-94253444e226",
        "cursor": {
          "ref": "f362678c-7e99-469b-b44d-1e0f1bf4c736",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f182fc97-0be0-48dc-912d-dffba7701dff"
        },
        "item": {
          "id": "8c6a8d20-10db-4f95-8b2b-94253444e226",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "1dbf6775-c6f3-4e70-b807-028391d96b1a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 86,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73969624-c85e-40e7-8666-ad8c53226609",
        "cursor": {
          "ref": "6837e723-76e3-4af7-9a68-84b51a800295",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bac2c102-af55-4a8f-b7a8-99954aeb40de"
        },
        "item": {
          "id": "73969624-c85e-40e7-8666-ad8c53226609",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "90d3599b-ca81-4f75-ab48-2f928d5281f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3d2e5a-e4cf-43f7-bad5-775de721c5a6",
        "cursor": {
          "ref": "5db47d2c-c731-452a-8148-e0a4c94e7c18",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7906504b-b448-4549-a721-2a3f04a10bbf"
        },
        "item": {
          "id": "5b3d2e5a-e4cf-43f7-bad5-775de721c5a6",
          "name": "identifiers"
        },
        "response": {
          "id": "4ae9d583-3c4c-43be-9775-31ddac216fb1",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0caf111-05b5-4a2c-8963-4d6dce25142d",
        "cursor": {
          "ref": "504574df-6ed0-4f14-bd3a-2a13bc70fbbf",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "be6d5f16-d6a8-4d52-8d8b-ae77e8e9f182"
        },
        "item": {
          "id": "a0caf111-05b5-4a2c-8963-4d6dce25142d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b9b5e148-c404-44ca-b0c9-d524b5516793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c87a2ef8-6f43-483b-9158-3928aed43482",
        "cursor": {
          "ref": "1b461066-5114-4039-a682-7dc7ef8867d2",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f9edf528-4b6c-43c9-9412-20ae337943c9"
        },
        "item": {
          "id": "c87a2ef8-6f43-483b-9158-3928aed43482",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1948e343-a6d5-43fb-a8ab-5897cdf7a285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbad58dd-841d-44f1-910e-75a56dbfd63d",
        "cursor": {
          "ref": "3a285702-cdde-4aca-bc38-974f25c00298",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3ef9e032-24d0-4b6f-a7e3-ea47dcde44c2"
        },
        "item": {
          "id": "fbad58dd-841d-44f1-910e-75a56dbfd63d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "270f1f66-7f1c-42cd-ae2a-bf82c2daf37b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f13831-553d-4154-a482-cdeb85851955",
        "cursor": {
          "ref": "5b0cf5b9-a099-412b-941f-36aa330768ef",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "788f9bcf-390d-4850-80eb-7c6441da2d85"
        },
        "item": {
          "id": "67f13831-553d-4154-a482-cdeb85851955",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "199f6eee-93a5-4adb-8320-73552d3b1da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e915c5d2-4d17-4eb1-be84-00d3a186a62c",
        "cursor": {
          "ref": "91c9dde6-5d63-43c8-b69c-e1828f3e1698",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fce789bf-e601-4927-9885-c3b0865b503b"
        },
        "item": {
          "id": "e915c5d2-4d17-4eb1-be84-00d3a186a62c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "457c3e77-fa0d-461a-8e40-47b49674bbad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b4dda88-8263-44b8-89be-ec3d4261a99a",
        "cursor": {
          "ref": "051e2571-5147-4dd7-a0be-6697c19626da",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a674e573-9fba-4245-b6a9-bb7b0a19a1aa"
        },
        "item": {
          "id": "4b4dda88-8263-44b8-89be-ec3d4261a99a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0ee0fc75-d5f5-40e8-b83c-41012df2f7a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd8e13a-b704-42f0-b796-b920192d2613",
        "cursor": {
          "ref": "6528811b-1e58-46fa-aab8-339ee9faeaa1",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "dd515bb4-279e-46cd-8645-d0fc26af6273"
        },
        "item": {
          "id": "3fd8e13a-b704-42f0-b796-b920192d2613",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4300915f-7f01-4846-bb17-2e6150ef81e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6957b135-901f-4451-aa42-0539d37774ab",
        "cursor": {
          "ref": "83c8b3e5-66ba-486b-a5dc-1c39e6497df3",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "91a089f3-eb3d-402d-abd9-295d935253e5"
        },
        "item": {
          "id": "6957b135-901f-4451-aa42-0539d37774ab",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "261b1abe-bcbc-4458-82be-96ac898ecfad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d39cf25-2ecd-43a7-942c-be09dfe085b8",
        "cursor": {
          "ref": "0011929b-2441-4afc-8576-efe13f4da2d9",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0df22c16-2dbf-485a-a71c-906c25debe30"
        },
        "item": {
          "id": "6d39cf25-2ecd-43a7-942c-be09dfe085b8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4b0e18e4-c227-4ade-9a3a-e3454840a089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ad1c41-58d1-4b59-9ef1-b864b2fccf82",
        "cursor": {
          "ref": "dc201d14-2b07-41cb-a057-1a39aa75ac62",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "75fad758-8a92-4c81-b8d9-d54db1bfceaf"
        },
        "item": {
          "id": "09ad1c41-58d1-4b59-9ef1-b864b2fccf82",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "ed0289d7-5f35-4191-aa4a-b15e3a7e00a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077869f8-bd02-4116-9ee0-70954e7625c2",
        "cursor": {
          "ref": "48e45ff1-fb04-46c2-a9c4-af609dcf28c1",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a4cf5c2f-b468-4355-a23e-1f37cae2fb5e"
        },
        "item": {
          "id": "077869f8-bd02-4116-9ee0-70954e7625c2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c219873c-9199-4e56-aa3c-6cded37d71fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8f3c98-7a84-4e0b-a9ff-68d732bfc898",
        "cursor": {
          "ref": "14b7347b-9776-4517-a491-e9c45df273e5",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c0199710-de5a-407f-8425-e612b6d6399d"
        },
        "item": {
          "id": "5f8f3c98-7a84-4e0b-a9ff-68d732bfc898",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a649b847-1168-4398-b2e1-98115aaab4af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec5d7e09-552d-485b-8da3-adcf460d3164",
        "cursor": {
          "ref": "a99327a7-ffb7-408f-9c68-f6f9ab46d78d",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2bcd6f88-c6cb-4a61-99ac-e93f3dee3cea"
        },
        "item": {
          "id": "ec5d7e09-552d-485b-8da3-adcf460d3164",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0c597c5a-1f5f-4cd3-80ac-98e55c53f980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaf31382-884b-4b07-a86b-ddc771744fe9",
        "cursor": {
          "ref": "0580dcdd-964c-4eda-83e5-7f55a0dc0cb2",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4bd7be4b-d6b9-47f1-a519-a25af696d601"
        },
        "item": {
          "id": "eaf31382-884b-4b07-a86b-ddc771744fe9",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8fb4b757-6344-4e8b-805a-31acb174b98a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "decfbfaa-5540-4ac3-a7b0-f9c206c0b9f7",
        "cursor": {
          "ref": "122762fd-a802-454f-a2a5-fc8222e537d2",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e1ac6095-9bf4-4cd5-b17c-9195cea9a090"
        },
        "item": {
          "id": "decfbfaa-5540-4ac3-a7b0-f9c206c0b9f7",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4e5bde7b-bfa6-49c8-a8e5-cfa9b4a75a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872e5ab1-dbc7-4800-b7b5-83aa8666d9bf",
        "cursor": {
          "ref": "605938ab-5f08-4dce-b2ac-ee4050519396",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "eea700bf-b2d8-48ec-824c-2c992d5b124c"
        },
        "item": {
          "id": "872e5ab1-dbc7-4800-b7b5-83aa8666d9bf",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b1d1191d-a7c1-4356-8fad-a55e83e0dede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38610a86-e761-4e4f-b5e0-687f32459a0d",
        "cursor": {
          "ref": "9b0e3970-a719-45dd-90a0-086309046359",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6d2da765-d5fa-42b5-bedd-f8abc810fe2a"
        },
        "item": {
          "id": "38610a86-e761-4e4f-b5e0-687f32459a0d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c787e5cb-aa48-4cc0-bb71-a7424b7771e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b484aa5c-f06d-4988-82cf-946d58b2b25e",
        "cursor": {
          "ref": "fbcbecb0-f258-4f87-be6e-3594a06b5af8",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3deb9326-3a95-4411-b813-d62a12c92106"
        },
        "item": {
          "id": "b484aa5c-f06d-4988-82cf-946d58b2b25e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f7a563b0-ef41-4996-991d-ddceaa5c1fe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4beb6bd-534e-48f7-8352-814de117dba1",
        "cursor": {
          "ref": "3719db92-cf97-43d1-99c7-2bd9d6182cdf",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7cd51078-52b6-430d-9f1d-ed3a72ec11e5"
        },
        "item": {
          "id": "a4beb6bd-534e-48f7-8352-814de117dba1",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f7b9ce81-7026-46a3-b96d-6c60d73da039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3fbe2d9-8193-4522-bb57-6c2a6953ff9a",
        "cursor": {
          "ref": "60d4e45d-a2d4-4532-b429-d1df3ee02375",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "368f47c2-30b4-4637-a003-81f0b9553a39"
        },
        "item": {
          "id": "f3fbe2d9-8193-4522-bb57-6c2a6953ff9a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b616de0d-40ee-4d2f-94c5-0d820578379e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87d62b58-4b69-4f89-b0f3-7fcf4009f20d",
        "cursor": {
          "ref": "cf1f1984-0b67-4a5f-aa95-fd33c82bd5ac",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9d5aa79a-e6dc-4a2c-8958-a6d1c21c1fbc"
        },
        "item": {
          "id": "87d62b58-4b69-4f89-b0f3-7fcf4009f20d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2bd710fb-00af-4eb3-b25a-19badb2fd964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35fb1273-c9ce-4b8b-b001-91e1cd8fcff3",
        "cursor": {
          "ref": "a2749cc7-4c1b-4fd7-9b84-04b5dac3efa3",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b7a546e2-7990-4a3f-835e-c87bf08712b5"
        },
        "item": {
          "id": "35fb1273-c9ce-4b8b-b001-91e1cd8fcff3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b8c4f207-b42b-4872-8bf1-7d56495d45e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27f66eeb-9976-4d98-82ad-a28892ff1eba",
        "cursor": {
          "ref": "63476ce9-e111-436c-9444-07e496c9efd6",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "795e1198-6b93-4e6f-8170-8e55caf0ef40"
        },
        "item": {
          "id": "27f66eeb-9976-4d98-82ad-a28892ff1eba",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1213ff0c-8f6c-4eb4-b0b8-9e9b027cf21d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c78eafa6-320f-43e1-b69d-a918f5376ceb",
        "cursor": {
          "ref": "ae53cdc8-bf59-4fa4-b01a-2e488efb088b",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f20613c1-436a-439f-96c6-4d623503f092"
        },
        "item": {
          "id": "c78eafa6-320f-43e1-b69d-a918f5376ceb",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "03373583-e38a-431e-830f-48cee9e6a340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edff81ef-5858-47cc-9702-e3b6b33e709e",
        "cursor": {
          "ref": "272b3627-2079-46bf-94df-57a1fa95373b",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4587719d-21a4-4e00-ac16-8115490bc1cb"
        },
        "item": {
          "id": "edff81ef-5858-47cc-9702-e3b6b33e709e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4d9554c7-b005-4b1a-81fc-13d49daaf60f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01cc1eb9-86fe-4bbb-8428-3a8fc2765cf6",
        "cursor": {
          "ref": "d67b1919-ff85-449f-a6f3-737625dc59f5",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "531b7fd1-597c-4224-9245-da72d7fa6000"
        },
        "item": {
          "id": "01cc1eb9-86fe-4bbb-8428-3a8fc2765cf6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "94e78413-34ae-4f5d-91da-d8fc03c78475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa50d57-a0f6-434f-a304-8175423cb81f",
        "cursor": {
          "ref": "6b575be6-c2ce-4e53-976d-93a575612007",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "5d368550-2d15-4fb8-8768-c148a90ab7ef"
        },
        "item": {
          "id": "1aa50d57-a0f6-434f-a304-8175423cb81f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "43b69e35-9015-460a-b8f6-5f6bd438343c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86fbc6b4-bb2d-4ca7-bf45-d4b468157287",
        "cursor": {
          "ref": "8915968b-5df8-4f5d-98bd-7eefdcdb74de",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d3c12315-c897-4503-9368-c2a008abfefa"
        },
        "item": {
          "id": "86fbc6b4-bb2d-4ca7-bf45-d4b468157287",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "6ffa1ccb-44b0-42b9-83b0-dfb0e454515f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5510b700-4f0e-4f03-9f33-533c7aa01020",
        "cursor": {
          "ref": "57aa309d-00c4-4924-ba11-61cae6e09fef",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7cd43137-b0a6-4c81-8245-0e999f6a0cad"
        },
        "item": {
          "id": "5510b700-4f0e-4f03-9f33-533c7aa01020",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e21bbcff-6a1c-4646-b0bf-89116da50e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5c5ad6-7367-4349-b537-80018778d779",
        "cursor": {
          "ref": "ada9e272-0f37-4338-b797-4df654c19509",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d6070385-d7cd-4b58-9ff0-499bc0761fea"
        },
        "item": {
          "id": "2a5c5ad6-7367-4349-b537-80018778d779",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "14114a1c-d8a1-4e21-879a-e3d7ece1e014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c206ac1-b972-4417-8556-f39f215ceba0",
        "cursor": {
          "ref": "dd5082a5-6af3-4525-901d-c78010c270bf",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4b3dee35-fb1c-4791-99f0-719804e022d0"
        },
        "item": {
          "id": "8c206ac1-b972-4417-8556-f39f215ceba0",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9669b503-ad5e-4ed6-96c8-a07234e24e63",
          "status": "Created",
          "code": 201,
          "responseTime": 654,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "1c358ea5-cb8c-4466-92b6-405e7a2ff34d",
        "cursor": {
          "ref": "5bd41d57-7930-4ab4-942b-aba139826987",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "be1dd203-62ec-45c5-8d2a-b1e87ab9210b"
        },
        "item": {
          "id": "1c358ea5-cb8c-4466-92b6-405e7a2ff34d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "3cdb0cbe-e7c4-4331-8dc9-7a17d00b87cc",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "cd3ba148-fca7-41af-ab24-1dc33f34cb48",
        "cursor": {
          "ref": "48bf3110-b3ba-4156-aa27-c9572f6fc619",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "88209238-873c-4afd-ad8e-be25af14b96e"
        },
        "item": {
          "id": "cd3ba148-fca7-41af-ab24-1dc33f34cb48",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "616c7e25-492c-4960-84b8-4307d05eabcb",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "1a5be40a-ed50-4051-b6b1-b1bada2132e3",
        "cursor": {
          "ref": "ed87c4cf-f7a7-4229-bfeb-5e512a22429f",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "27f35d61-47f9-4091-8e3b-46991558aa6e"
        },
        "item": {
          "id": "1a5be40a-ed50-4051-b6b1-b1bada2132e3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9b41db13-3345-440d-916d-8960d76842c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc001f9-2f3a-48a3-badc-d3eb68d15774",
        "cursor": {
          "ref": "6e554dab-bb8f-4b10-a86a-40cd43b40484",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "425db586-076b-43a3-bbdb-f30f54969531"
        },
        "item": {
          "id": "7bc001f9-2f3a-48a3-badc-d3eb68d15774",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "5950116b-f66d-4783-83ca-d8fc5eaae0e2",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "7ad5a18d-5d1a-4a88-b84e-7bd79800b668",
        "cursor": {
          "ref": "fdf22213-6a45-4957-9ab8-df1c462586a9",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d8d5ee5b-f69e-45b0-ae58-75c09dc89fa4"
        },
        "item": {
          "id": "7ad5a18d-5d1a-4a88-b84e-7bd79800b668",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "12295a31-8f4d-4a82-bf37-1ac23af188f4",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6f7acb7c-47c6-4eda-a646-bc4bb8ffbe89",
        "cursor": {
          "ref": "b8f1feb8-5144-4651-bc0e-d981379098c1",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b37970fd-16f3-41e0-870d-f8953da211f5"
        },
        "item": {
          "id": "6f7acb7c-47c6-4eda-a646-bc4bb8ffbe89",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e0e135cf-b7ae-41d5-8af9-601ca01cfbef",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a7650476-3ef1-4f58-8b88-40170eef1850",
        "cursor": {
          "ref": "1a96e01e-3214-4fad-8b91-39d57c952531",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "17d46a36-36be-41f8-8c2f-4f01cd9a8720"
        },
        "item": {
          "id": "a7650476-3ef1-4f58-8b88-40170eef1850",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "7d202be9-df7d-4bd3-9a97-8867545e47fa",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "7cea89ae-df28-466f-8120-65edd5f00f6f",
        "cursor": {
          "ref": "e67607b8-2fe3-4233-923d-60d0c258639e",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b0a28b55-fcb2-4f4d-b04f-be1eefa2355c"
        },
        "item": {
          "id": "7cea89ae-df28-466f-8120-65edd5f00f6f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "925f0a8d-0df8-473e-9334-b069c2564efa",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "84f996b5-2575-4aa7-b378-8ffc76e624c6",
        "cursor": {
          "ref": "2a4dab20-1e10-470f-a043-0027fcbd563b",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "56984d34-6e29-4b25-bd23-c6ac687311e8"
        },
        "item": {
          "id": "84f996b5-2575-4aa7-b378-8ffc76e624c6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ffc24b81-ba4a-4f37-87fb-aa8a341f0074",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e7b14f38-70e3-4280-b76e-5eaefa54c1af",
        "cursor": {
          "ref": "a9cf8d0b-a1b4-4da3-9688-2d7ca5a6393c",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2ccb1a8e-4973-484f-a845-dbea739791b1"
        },
        "item": {
          "id": "e7b14f38-70e3-4280-b76e-5eaefa54c1af",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d371b103-2973-47ec-81e2-07f5c033ab48",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "1b207096-ceed-4d88-835a-64b110e505b3",
        "cursor": {
          "ref": "f9adc420-38e3-490e-b623-b72c1dee488e",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "bcd2da0e-52e9-40f8-9e11-8250b6a72645"
        },
        "item": {
          "id": "1b207096-ceed-4d88-835a-64b110e505b3",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d4332507-66a0-42de-a2e6-3903d096781e",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "29107ff0-caf6-41b4-90f2-d29f5ce86b60",
        "cursor": {
          "ref": "6e38afa0-29b6-47d9-8f67-2c3d27b18616",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7f30792b-0767-4c1b-9a38-9c09200f3344"
        },
        "item": {
          "id": "29107ff0-caf6-41b4-90f2-d29f5ce86b60",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5b913dc9-0cf6-4f85-83f5-68946a7cdf6a",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "05cd071f-ea7d-40b6-9447-92e72d2d5eae",
        "cursor": {
          "ref": "d3fbaf87-d617-423f-8771-38d4e3a9ed95",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4c4f9022-ea7e-4883-b7da-e5925eb84303"
        },
        "item": {
          "id": "05cd071f-ea7d-40b6-9447-92e72d2d5eae",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "76bbf96f-f396-4c38-bb26-863b68ca9625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b71d07-2c66-4fb9-a569-6b924fc32499",
        "cursor": {
          "ref": "152b1b23-0a2d-4a5f-954a-dcb00fba78b5",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "220d44d0-aee2-435b-934b-349198c790d9"
        },
        "item": {
          "id": "66b71d07-2c66-4fb9-a569-6b924fc32499",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "981ea619-a00e-4cca-9ca2-5c40f31658f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "661b5b5f-36ef-47ed-8e2e-f45b7afe8acb",
        "cursor": {
          "ref": "e8418407-82fa-4a4b-80db-4f927e6c257d",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "af1d1240-13d0-4b8e-a965-94e67c38ac57"
        },
        "item": {
          "id": "661b5b5f-36ef-47ed-8e2e-f45b7afe8acb",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9ba0f236-808f-4bd9-a541-11f40a7e6da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bde2e16d-4aef-405b-b7e6-80906545183d",
        "cursor": {
          "ref": "139ae23a-e698-4d59-8a55-2ed74ba8534c",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "707ed45c-4ca7-453c-88aa-56f663b816da"
        },
        "item": {
          "id": "bde2e16d-4aef-405b-b7e6-80906545183d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "2fc5a583-734d-45ca-ab21-e2af2a278b79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410ee015-1fa1-4d17-a3ad-d53964ae759a",
        "cursor": {
          "ref": "291635eb-8a3c-4370-908b-c4f9e07ac196",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "31a9b270-82d6-4217-9271-f70ef48742b3"
        },
        "item": {
          "id": "410ee015-1fa1-4d17-a3ad-d53964ae759a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5de10776-e6aa-4cec-9faf-ffe6e36a2b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b3f728-8998-4b5f-a758-a35f889b4b7f",
        "cursor": {
          "ref": "48637e82-6e69-439c-ba22-7caeb289ec72",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6147ade1-3d13-438b-8dff-3c5e5d7eed89"
        },
        "item": {
          "id": "93b3f728-8998-4b5f-a758-a35f889b4b7f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "63a803ae-f9cf-493f-a65b-f6d49206639f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b6ca496-a579-48b5-b409-fe44830601fe",
        "cursor": {
          "ref": "9ee6734c-9285-46ad-a238-9bb61f0b7e80",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0ecd2398-bad3-4e13-97b5-6f4f27dd1cfb"
        },
        "item": {
          "id": "3b6ca496-a579-48b5-b409-fe44830601fe",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "73454899-6b0a-45a6-bcf1-5dfdd89c32ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b92b7be-33b8-4d6a-88ac-47754cdece27",
        "cursor": {
          "ref": "21acba93-c020-4aee-ab4d-41dd49c010df",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c3289305-a77d-45bc-9d33-730ca350f227"
        },
        "item": {
          "id": "2b92b7be-33b8-4d6a-88ac-47754cdece27",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2262915b-7143-4a53-87ca-f3a8b939a893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7897be48-b4dc-4cc6-92cc-4c3ad7471d10",
        "cursor": {
          "ref": "a35f85de-a651-4d1a-8fc8-bbe8ae9f66e5",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ae647dcd-67a5-4a39-9a4b-08b2ea4405fe"
        },
        "item": {
          "id": "7897be48-b4dc-4cc6-92cc-4c3ad7471d10",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0dfb7077-df14-403f-b843-034555af391b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c88ce57a-e943-4a4f-9df0-9b55c7086d4a",
        "cursor": {
          "ref": "9eca2d86-0740-498b-a89e-030c9ee38ffb",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "349a1b30-313f-4bb1-a3d0-23bd1674c700"
        },
        "item": {
          "id": "c88ce57a-e943-4a4f-9df0-9b55c7086d4a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9637e496-389d-46b3-b64f-e7c2f4383722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52fa0a29-3a1e-4ddd-a521-7bb6b5988b33",
        "cursor": {
          "ref": "26da0933-a89c-4455-8b43-e54128f6ac87",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "e4f700e6-5e83-475c-8f50-5a575075560c"
        },
        "item": {
          "id": "52fa0a29-3a1e-4ddd-a521-7bb6b5988b33",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9995bc53-0d6c-4f1b-86de-83b03377d8bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b95bed-799d-4cd5-9b3f-b244892db1ab",
        "cursor": {
          "ref": "8ad6eec5-d46f-47ef-ae0c-46552edf3ca2",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "879ea0b3-f461-468c-854f-ee0a3891e266"
        },
        "item": {
          "id": "f9b95bed-799d-4cd5-9b3f-b244892db1ab",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "cd85464a-c391-409f-8a10-a7311b46013f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "460f0997-ab08-4a33-aa64-e0cfe1207d78",
        "cursor": {
          "ref": "1fa1108c-cd6c-4a98-8834-b4154046cee6",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "aea05c4c-432c-4817-be76-5bf13b374bb4"
        },
        "item": {
          "id": "460f0997-ab08-4a33-aa64-e0cfe1207d78",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7ac0e407-3183-4df2-9cab-65b3c0358a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72067901-7086-45b7-a012-b464baa1aa38",
        "cursor": {
          "ref": "39def1fe-00da-4684-a99c-8702a59a5fb6",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "eb64a87c-80f9-488e-b65c-b0c1512ab4ad"
        },
        "item": {
          "id": "72067901-7086-45b7-a012-b464baa1aa38",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c50693fc-4fed-452e-9fc1-011ca35ffe2b",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "03066de2-ddd8-4065-98eb-cfc107b6a2e6",
        "cursor": {
          "ref": "e59edc8b-62e1-48d0-a4f4-cf6517d01abb",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0d266d48-9674-463b-ab04-f7dff66d0173"
        },
        "item": {
          "id": "03066de2-ddd8-4065-98eb-cfc107b6a2e6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d8e7d5d2-c9df-47e6-97a0-f0a563ad4998",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "7036e9a5-a6ea-478e-91bc-d66dc70a9dbe",
        "cursor": {
          "ref": "e1be3164-d36d-41f4-9094-667c92b3bc8f",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "89adcd39-5fa2-463c-a984-66d8d63f82b7"
        },
        "item": {
          "id": "7036e9a5-a6ea-478e-91bc-d66dc70a9dbe",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1cb99e8e-ab77-4e82-9c4f-4db6bb2bf909",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "1f4d3513-7de7-4516-8927-dc2f4f8b0706",
        "cursor": {
          "ref": "9f52f778-5428-4b31-9622-3dd38aaf5808",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a0d54f7d-faad-4375-9502-0e76ebbcf237"
        },
        "item": {
          "id": "1f4d3513-7de7-4516-8927-dc2f4f8b0706",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "73109e60-6bf0-464d-ae4a-dbb1238d7697",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "eaa636fc-41a2-4c72-8724-831a4269684d",
        "cursor": {
          "ref": "f5ffdc39-5f95-4e97-9fb5-174643b099aa",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "0ed46c3a-d17f-403f-8e8f-bf254eab6517"
        },
        "item": {
          "id": "eaa636fc-41a2-4c72-8724-831a4269684d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7480d788-cf33-431c-b25a-dd8c07d075f1",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "77167a49-84bb-4f57-9899-3550173e02a2",
        "cursor": {
          "ref": "a295251b-5f32-4a32-ade0-c3e0b6930ad2",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9a7f42d3-6e0b-4ccc-917b-f5eec8212271"
        },
        "item": {
          "id": "77167a49-84bb-4f57-9899-3550173e02a2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "90334bf4-aa1e-4263-b85f-04f8d9b3744d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8836d88-7f3f-4275-a4f2-8943421927d6",
        "cursor": {
          "ref": "62c92709-eee7-475e-81bf-e5bce155a571",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f9af3835-d129-45e9-914a-58823369343b"
        },
        "item": {
          "id": "f8836d88-7f3f-4275-a4f2-8943421927d6",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7a035749-c3e8-4e03-9e63-a74d014141e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e709493-503f-439c-8c95-053936f5f904",
        "cursor": {
          "ref": "481250f0-b3ba-4dd5-be04-747ae5dd1496",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5262cf90-1191-4761-a498-1b1bca1c495f"
        },
        "item": {
          "id": "3e709493-503f-439c-8c95-053936f5f904",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5ef88f80-57c6-4e4f-8a35-6e66d13ffbcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "937a3c70-6474-45f6-a40e-8ba049d33214",
        "cursor": {
          "ref": "6c685f34-bc33-4084-b074-5d9ac2344103",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4c43f93b-d1cd-464d-95e6-bac675dec480"
        },
        "item": {
          "id": "937a3c70-6474-45f6-a40e-8ba049d33214",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ce51263a-4a34-470f-869a-7833297ff2fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a67a4e4f-8254-4191-b7f1-a92b39a3ddba",
        "cursor": {
          "ref": "537b744d-b9d6-4b49-8598-b0a0c3432d75",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "bc5889a9-d833-4832-b065-874479a2631b"
        },
        "item": {
          "id": "a67a4e4f-8254-4191-b7f1-a92b39a3ddba",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ef9a2632-7ae3-48c6-863d-019dd70f1e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a251a1-d6ff-42df-92a9-4bd9e893dd7c",
        "cursor": {
          "ref": "95805417-927f-4e40-a74a-4e5f66cb9e9b",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "44833812-4423-4da2-bcd7-02ef7faba165"
        },
        "item": {
          "id": "e4a251a1-d6ff-42df-92a9-4bd9e893dd7c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "503a40fc-c9c0-4340-a78e-f42e81caeba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd77dad3-66db-4e63-92b7-c3a54dd8d706",
        "cursor": {
          "ref": "d632889b-43e5-4190-ab44-b1cd6633bf7b",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "91c7852c-3971-466c-8137-48d57b91c82c"
        },
        "item": {
          "id": "bd77dad3-66db-4e63-92b7-c3a54dd8d706",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "75842ef5-fcd1-46bb-a1b9-be4572a1085e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7931d61f-e21b-41cd-9adf-fc07d13ded90",
        "cursor": {
          "ref": "22c944ac-7018-4635-b051-c54f51c60c00",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "6f2526d7-ad22-4664-8135-74c2665914ca"
        },
        "item": {
          "id": "7931d61f-e21b-41cd-9adf-fc07d13ded90",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "bc1b1a4e-e760-42b7-9940-de4cae78cde7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b9e5e7-f890-4355-9b03-adbfb61d7544",
        "cursor": {
          "ref": "f51b8f74-52ab-46ea-97ad-4d7fdd019220",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "678441e6-5342-4692-adb7-d2a97d32f9f5"
        },
        "item": {
          "id": "42b9e5e7-f890-4355-9b03-adbfb61d7544",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3c6f7d73-5d09-4a5b-81f6-d058a44d0774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4223f0ab-bde6-488c-996c-1308360d20ca",
        "cursor": {
          "ref": "830c7d18-c0d7-485f-a124-4dfe73df9cca",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2bcfea29-1ff0-488d-9dec-aa2ff4823400"
        },
        "item": {
          "id": "4223f0ab-bde6-488c-996c-1308360d20ca",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "2900bc51-c058-4c2a-a45b-bec75b9573da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256c89f1-416b-4efb-94f6-f0e079df291d",
        "cursor": {
          "ref": "0a41090c-e090-426a-8f06-f8cfc75cc33f",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d80b20be-bfe1-4472-ba9d-0d477cc633ff"
        },
        "item": {
          "id": "256c89f1-416b-4efb-94f6-f0e079df291d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "29eb00a5-3ff6-4308-930e-e87bf37e8fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bec8fde-2379-45cd-922b-fa3cef3d3e7b",
        "cursor": {
          "ref": "5861d501-1d46-452f-a5d8-9ea6cc6d3148",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6a2bda9c-f160-48e1-b44e-2760c8361b83"
        },
        "item": {
          "id": "2bec8fde-2379-45cd-922b-fa3cef3d3e7b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f4a70417-5c4d-485c-901d-473e3da402bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e9dc4d4-bcd9-42f3-9534-362f437f4143",
        "cursor": {
          "ref": "89954289-dde7-497e-ac0b-9bedf1e8a95c",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ffdb886c-a056-4e43-af58-094e34393add"
        },
        "item": {
          "id": "0e9dc4d4-bcd9-42f3-9534-362f437f4143",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d3f307e1-87e0-4ea0-8a2d-3313a5506482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "312bfffc-7c7a-4181-8874-64a42f4738b2",
        "cursor": {
          "ref": "920d660d-b583-401a-add6-567bc3142826",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0d0f1cf8-6dec-4b37-a7d6-55385da7c3ac"
        },
        "item": {
          "id": "312bfffc-7c7a-4181-8874-64a42f4738b2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9db226e6-189f-423e-a905-b579eff39761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a51b879c-3118-415f-9086-a310bc1a1c79",
        "cursor": {
          "ref": "6be3c587-2ada-43c4-bd34-428bfc18f649",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "7d5c9ce4-d19e-4529-b579-26715330a0ee"
        },
        "item": {
          "id": "a51b879c-3118-415f-9086-a310bc1a1c79",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "af3feea9-aa65-4967-8c69-d1331ab0a155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "500a650d-daaf-4d01-8afd-0e5a6385c359",
        "cursor": {
          "ref": "9ce1152f-0ff6-469d-ba2b-b42e27da7741",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "84b79d48-09c8-486f-af51-b1e824c394d2"
        },
        "item": {
          "id": "500a650d-daaf-4d01-8afd-0e5a6385c359",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "2a124787-75ca-48d0-bd5b-7c80c3b05be2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ef38df-c7c0-48b9-9933-ba42b986c75d",
        "cursor": {
          "ref": "779ade3c-63cb-4523-b2b4-7d956f53b70f",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "16c059b1-c799-4c75-b330-4e2912900272"
        },
        "item": {
          "id": "e6ef38df-c7c0-48b9-9933-ba42b986c75d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a8894d4b-2c64-47c8-85b7-aafa321e8427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce014e5-ed42-4681-bad8-6bb34788e895",
        "cursor": {
          "ref": "6914ee95-3e7c-4b12-b3c6-13de1eb2fdd4",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "fe4422f8-eeb0-4af8-8a8d-6faa1c0b380f"
        },
        "item": {
          "id": "8ce014e5-ed42-4681-bad8-6bb34788e895",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "fc476b15-4e06-475a-a6c3-30bd387e0e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9dce8ef-558f-41c7-a08f-f4c8b60baad8",
        "cursor": {
          "ref": "4705c3b3-0afb-48a4-918a-9f39478fd37d",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "98772771-e683-4fb5-89c6-7922f779338d"
        },
        "item": {
          "id": "c9dce8ef-558f-41c7-a08f-f4c8b60baad8",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "cc0f6e2b-f078-4662-8dd2-5936ffede34f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e99f704a-699f-4ca6-94e0-00a6076b3316",
        "cursor": {
          "ref": "82e068eb-bf31-4092-9c09-361d6fccf910",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "143a8a88-a748-4f9b-8a45-eabb2e9cb10c"
        },
        "item": {
          "id": "e99f704a-699f-4ca6-94e0-00a6076b3316",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "961725e9-7ecd-4122-8b1b-869cb3e11f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0d4c99-2bfa-49eb-8a75-ff6c3ea0f3cb",
        "cursor": {
          "ref": "9dc7e596-5b15-46ba-903a-873450684fed",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "bf34073b-28ac-4de4-87a0-14f6305ddb66"
        },
        "item": {
          "id": "fe0d4c99-2bfa-49eb-8a75-ff6c3ea0f3cb",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "57bca0db-6902-4ba9-9d57-467839190259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "900d6225-16a1-4b52-83e3-26e0afe4e355",
        "cursor": {
          "ref": "af1ad4fe-c835-4b3c-bead-58a09269f0e0",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "587e5d4a-ac83-439d-b3ff-c82c848a8e10"
        },
        "item": {
          "id": "900d6225-16a1-4b52-83e3-26e0afe4e355",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "91f93cfa-fefc-4433-87ef-397a600dd039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f88c7fc2-88a8-4fa0-b666-239af8ce5f7d",
        "cursor": {
          "ref": "e652b0e6-1fbe-43d1-8f3e-97215847039a",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "20452893-6674-4aa3-a398-d5cacecf4b88"
        },
        "item": {
          "id": "f88c7fc2-88a8-4fa0-b666-239af8ce5f7d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "837e80bf-b797-4134-902b-8f010ddb117c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6113bd55-d4d1-424d-8245-7217b21480c1",
        "cursor": {
          "ref": "6ea148f5-cfb0-4ae0-83c6-11563f8a741b",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3eb0298c-5587-4456-a603-bc8b3dff41da"
        },
        "item": {
          "id": "6113bd55-d4d1-424d-8245-7217b21480c1",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b82a3fae-4a7e-4915-a915-cddd38c89a3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4e35a7b-e815-4427-9f17-35ef3dde4d55",
        "cursor": {
          "ref": "0cd167fb-62ae-4bd0-b587-c390d9b98041",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f385d127-c992-4a5e-bbd1-61c2952466da"
        },
        "item": {
          "id": "e4e35a7b-e815-4427-9f17-35ef3dde4d55",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e3339710-0a92-454a-9ab2-71ff479ddf1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfc516c0-3465-47d7-b5cc-ac94b0e1b53a",
        "cursor": {
          "ref": "fe380987-dc89-4788-852e-f8deb6b659ff",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a6cb3c99-3476-4287-aea1-01c93c55ab76"
        },
        "item": {
          "id": "bfc516c0-3465-47d7-b5cc-ac94b0e1b53a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d1339d5a-dd50-4624-a432-c095a607a4d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd104e44-e027-42f6-9b40-5bedbd838c37",
        "cursor": {
          "ref": "8bd66388-0039-4573-b9fa-2b46716935e1",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6e6df3f2-e85d-4c29-b94b-38d79ac666be"
        },
        "item": {
          "id": "fd104e44-e027-42f6-9b40-5bedbd838c37",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "321dec5f-50f6-4478-8e69-8502264671b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c476417f-9751-4c64-8b04-b127d09ce095",
        "cursor": {
          "ref": "eebd0ebc-889b-42dd-90bf-7b65c4424ab3",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3fc16012-34a5-47ce-99a8-a7f8fefaa7da"
        },
        "item": {
          "id": "c476417f-9751-4c64-8b04-b127d09ce095",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5eb4fd3c-1ddd-4d7c-95e0-60b559a24625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1078b150-e4e4-430d-bed4-259f81c53771",
        "cursor": {
          "ref": "756b96ff-522b-4ed6-a151-191ca967f42b",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "aa25a0cd-b7d6-4ac7-b317-2076191fc00d"
        },
        "item": {
          "id": "1078b150-e4e4-430d-bed4-259f81c53771",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f1901e7d-39ec-4f81-bff2-b9113aab895b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eabacdfc-1c28-4c46-8299-ca0aceddea05",
        "cursor": {
          "ref": "6f618ad3-69fd-436b-a0b0-032da960897d",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "95aac4e2-ab13-44dd-b761-78882232b036"
        },
        "item": {
          "id": "eabacdfc-1c28-4c46-8299-ca0aceddea05",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f1a6442d-cbd4-4170-83e6-9e3ac743f604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31908076-140a-4eb6-94b9-1a0fea8344aa",
        "cursor": {
          "ref": "5a0213de-998f-4aac-8d9d-c442aee4e1a8",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0af5c619-7a61-49d9-9438-e4ddca3c5048"
        },
        "item": {
          "id": "31908076-140a-4eb6-94b9-1a0fea8344aa",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "9ffa5fd8-abb9-4527-b580-79ab7df9e684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932584c5-7a45-4de9-aa3b-dc7fef73d8dd",
        "cursor": {
          "ref": "153aebd8-fbc4-49f0-8aa4-1d1e7d2f2553",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b5b86b40-0979-44d9-88a3-bd1b894bf854"
        },
        "item": {
          "id": "932584c5-7a45-4de9-aa3b-dc7fef73d8dd",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "25ed6036-fe80-47f7-a088-b577eab3b4b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1b3b95-10c4-418b-98e7-c19042c796c4",
        "cursor": {
          "ref": "c651186d-6c2d-47ba-a23f-1e0ed70b7156",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e0da0674-5e24-41df-ae09-1eee4ce4ebc6"
        },
        "item": {
          "id": "ad1b3b95-10c4-418b-98e7-c19042c796c4",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "189c71b4-5f15-4eb2-bc5c-53fe61d6ec67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "3d51c067-b503-4edf-a962-7fba4d0ca5e0",
        "cursor": {
          "ref": "f50e7cc4-ad82-4a53-bac7-fda50ac2f1b1",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f811b8fb-d7f3-45a2-b46d-e666527e158e"
        },
        "item": {
          "id": "3d51c067-b503-4edf-a962-7fba4d0ca5e0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "2600548a-936b-4c76-a87b-bce9db762beb",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af053ad-23f2-4291-896c-8d88b5e30b77",
        "cursor": {
          "ref": "862c48d2-884e-43b1-aa01-7f5301e29a7e",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "db62a152-3b01-454e-8de5-b20e23432090"
        },
        "item": {
          "id": "5af053ad-23f2-4291-896c-8d88b5e30b77",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "a3967a02-652a-4ed0-8b84-b44ee595ab4a",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "910813a6-1170-4e79-a285-56a189eda0b1",
        "cursor": {
          "ref": "e6562613-64f4-40b2-96dd-57f7de37d638",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "8d447c35-aaad-4c0a-9b40-e273de0616c9"
        },
        "item": {
          "id": "910813a6-1170-4e79-a285-56a189eda0b1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "51a9278f-2b65-4417-ac3e-6b8648d9e9bd",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20bb285-9440-4e66-8faf-450a1de5eedd",
        "cursor": {
          "ref": "cb9e77b1-278d-4d01-909b-392fd4edb0b1",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3e3d24ee-c5ee-4392-958b-fa70d1ae280d"
        },
        "item": {
          "id": "e20bb285-9440-4e66-8faf-450a1de5eedd",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b9fb56b1-afab-4d94-b79e-3c8f0d72cc4c",
          "status": "Created",
          "code": 201,
          "responseTime": 339,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "291817e7-5299-43b4-8474-bdf8c1c6e513",
        "cursor": {
          "ref": "d6b556a5-e37a-43b7-9d82-9e6713deb2f7",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "39b646a3-c5c5-4349-a273-4fb784959c7d"
        },
        "item": {
          "id": "291817e7-5299-43b4-8474-bdf8c1c6e513",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1b934cea-1d0b-4115-a1a5-b32fb5a03f4d",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-07T00:40:01.882Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-07T00:40:01.882Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "9250b798-e82b-41bf-8d52-85211f946074",
        "cursor": {
          "ref": "cc350be7-5f8c-4065-b8e5-7572c472183b",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f6e09a63-3667-4552-95ca-c4f60c7d4466"
        },
        "item": {
          "id": "9250b798-e82b-41bf-8d52-85211f946074",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c032bbc4-26c9-4af3-97a8-2254f064e096",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7b5f9ee-d518-4979-b2ad-4586d994bd44",
        "cursor": {
          "ref": "1dd4cf2a-2d37-4d2f-ba1b-4f2ff543fee1",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8819d4ae-c89a-45e5-9578-06afbf7767ba"
        },
        "item": {
          "id": "f7b5f9ee-d518-4979-b2ad-4586d994bd44",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "932d3d07-ce22-439b-9d34-8c005fb934d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e609a05-a4b9-45c0-9ca6-d0b82ae317f5",
        "cursor": {
          "ref": "fddcfd3d-594c-4d47-8dfa-893c22144a6c",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "61c46da7-9e39-4a91-a507-6dc3cfa77938"
        },
        "item": {
          "id": "7e609a05-a4b9-45c0-9ca6-d0b82ae317f5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "03414208-a40d-4040-8b2b-37433b180c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c54e7c68-3013-4037-aa5c-0a317abf4664",
        "cursor": {
          "ref": "11c13da8-1acf-4ec3-bc6e-85e4e84eca01",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2b3eb2b3-1729-4830-aa3e-6bea5e32de11"
        },
        "item": {
          "id": "c54e7c68-3013-4037-aa5c-0a317abf4664",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "31ebced6-0327-4bc1-90e6-f5bd30ee7944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ae64d3-9353-4f13-a008-086cf7e19e1f",
        "cursor": {
          "ref": "e318be10-bbaa-497a-92bc-fd5850f7fbee",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "69b49340-6f09-4611-a3d3-ae7b50294153"
        },
        "item": {
          "id": "f5ae64d3-9353-4f13-a008-086cf7e19e1f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c4a6ecb7-dce0-41d4-9d35-348adf6f91af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47862bbd-fbcb-4091-ba38-8225a68b3a99",
        "cursor": {
          "ref": "ca23b65b-7048-4ea8-a8b6-714a1141e014",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c4dd8b87-6f04-435e-893c-3c647dcfb6fe"
        },
        "item": {
          "id": "47862bbd-fbcb-4091-ba38-8225a68b3a99",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "37de417a-d350-4013-a626-54f6667a6d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3b2461-ec39-406b-aa54-12ac6b783354",
        "cursor": {
          "ref": "db810464-28fa-451d-8327-ca4a29ea8560",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "98f73943-5b19-4dd2-8f5a-965ab0ee816d"
        },
        "item": {
          "id": "fc3b2461-ec39-406b-aa54-12ac6b783354",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3615dba8-cd59-4915-88d8-e15565f76e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7765818e-841d-4c13-b554-b47d1349322c",
        "cursor": {
          "ref": "9083ce80-9fad-41c7-b392-62483983ac92",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "24843623-f3f1-4544-8a06-6bf5c97926b8"
        },
        "item": {
          "id": "7765818e-841d-4c13-b554-b47d1349322c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1e380961-22fd-48cd-8aed-943fc51677a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6412d2fc-4b03-4bbd-a840-05aa1dd3f40b",
        "cursor": {
          "ref": "007bee2e-3c0a-45ed-8714-5afa6f7661ca",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e29f9e46-1d6d-4c74-80c8-9f126f703c90"
        },
        "item": {
          "id": "6412d2fc-4b03-4bbd-a840-05aa1dd3f40b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6f49cf41-ada0-4df8-8f52-454b4d2702ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50b82249-fe24-4f8f-8205-807c38b0bf89",
        "cursor": {
          "ref": "404bbb4c-0139-4e4b-8f73-07076f9f18fb",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "396e5d8c-c7e8-4c75-ad92-0f7d97a74601"
        },
        "item": {
          "id": "50b82249-fe24-4f8f-8205-807c38b0bf89",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b1333eae-76c7-4bb6-a6ac-993a88801a3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66a886f-6c8a-4a9e-85a7-79e53f28fa97",
        "cursor": {
          "ref": "8e8b6998-d0db-49f5-998a-4fa2931016e8",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "80b07a5a-a838-4d6c-a542-7406e5be00b7"
        },
        "item": {
          "id": "f66a886f-6c8a-4a9e-85a7-79e53f28fa97",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b3c24208-871b-436f-8125-706101d49f12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ad799c9-a290-4a45-b280-ca36afb2f55d",
        "cursor": {
          "ref": "ab7e815e-bfd0-42fc-875e-47aed5e13655",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d25cdcb0-ab71-40b4-a668-a02ce05689e3"
        },
        "item": {
          "id": "9ad799c9-a290-4a45-b280-ca36afb2f55d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "32894cb0-69a7-452f-94be-7ca8a3700d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1edbe91b-ea07-45bf-8b11-bd78ec4e83b0",
        "cursor": {
          "ref": "3c372a1a-8fd7-4e4e-9767-3e24583b53fa",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "95b6b891-1c7d-48c6-bba1-ea178bcdeff0"
        },
        "item": {
          "id": "1edbe91b-ea07-45bf-8b11-bd78ec4e83b0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "94bdb483-c006-44fd-b93f-88e7563d7c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213c3e5f-4015-43dc-8ff9-d0e5b58679c3",
        "cursor": {
          "ref": "425f7cbb-c16a-4663-a422-555e0dda70f2",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "eeac07fd-a5e2-4fdf-9e75-6d12fd882788"
        },
        "item": {
          "id": "213c3e5f-4015-43dc-8ff9-d0e5b58679c3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ed2f21fc-db31-403b-91ac-7439159af84e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d68db101-ed17-4c25-a9a7-7930d4253627",
        "cursor": {
          "ref": "2e3a1f2a-a455-4e86-a1d7-ccf7a105e88a",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3eefe39b-1a30-4b67-8ec1-c835df60ae16"
        },
        "item": {
          "id": "d68db101-ed17-4c25-a9a7-7930d4253627",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ce8dedd2-cbc5-4172-95db-83819cbef604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "306a7f4a-f167-48f8-aabf-231886ed66d8",
        "cursor": {
          "ref": "27d0e250-065a-4e08-9716-fb3a789570d7",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "78635edf-1657-4f2b-ad86-ebdb24944602"
        },
        "item": {
          "id": "306a7f4a-f167-48f8-aabf-231886ed66d8",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "038a9cdc-afef-4e92-8cec-c11f984f2194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4d8cbe3-54e5-4f12-a59b-5be2c4d25e48",
        "cursor": {
          "ref": "c0a70e6c-0bce-4b78-a713-da035e5afc59",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "12403973-f61a-4b79-8c37-57e156fb3cd8"
        },
        "item": {
          "id": "f4d8cbe3-54e5-4f12-a59b-5be2c4d25e48",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5f2be4d7-bf53-44f4-afd4-f4127f5c1b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f9d5295-8fab-49d0-9490-1ef940483a4c",
        "cursor": {
          "ref": "ae1c7eed-3951-48b7-b7b3-00c22fb14d72",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "87624ecd-2533-4d96-9d3e-09fa26649208"
        },
        "item": {
          "id": "7f9d5295-8fab-49d0-9490-1ef940483a4c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3785b556-16b5-429b-942f-f04ff0c18c9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1db581c4-3a0b-4336-957c-6e0f8bf8886c",
        "cursor": {
          "ref": "efb6686a-311a-4699-a6ab-c7074b12f71e",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "95726d81-6bfc-4f42-ada7-b674fa20dd5b"
        },
        "item": {
          "id": "1db581c4-3a0b-4336-957c-6e0f8bf8886c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "89a70f14-ef82-4e2a-a496-c07686a18882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94fa895f-fe39-4b21-8780-254fe246197c",
        "cursor": {
          "ref": "7376c9bc-c8b0-4777-87b2-547f49e05a4f",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7b3603d4-8879-4cb3-a6da-8bfbc4e5ceb1"
        },
        "item": {
          "id": "94fa895f-fe39-4b21-8780-254fe246197c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a6165c36-3bc9-472e-8553-8679608fc7a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f7444fa-4771-4258-aa08-8dc45b05e6fc",
        "cursor": {
          "ref": "1ed62ffe-3484-486b-825a-f1bff88a50bf",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "673619cb-d215-464e-a079-9400174a8f15"
        },
        "item": {
          "id": "1f7444fa-4771-4258-aa08-8dc45b05e6fc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "44efb11c-4b0e-4f73-8cff-79ccd3ee7c0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61af74b-c6a1-4b0d-b508-6fe3651fd273",
        "cursor": {
          "ref": "a4dc8658-7766-4bc8-b0c1-984e5e324573",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "27682da7-7bbe-4201-8e1d-69e737754f48"
        },
        "item": {
          "id": "f61af74b-c6a1-4b0d-b508-6fe3651fd273",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0794a1e1-0cea-4d3b-a75d-c512dbefce0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca1f3fbe-af8e-47b6-af0e-180a00d6ea9e",
        "cursor": {
          "ref": "476405a8-72c4-4b35-883a-034a6638b8ce",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "deeb16d0-1e25-4f2d-90b5-bd6ccc2c56b1"
        },
        "item": {
          "id": "ca1f3fbe-af8e-47b6-af0e-180a00d6ea9e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ae88b02b-5ecc-4f4a-b460-93c52a82ce50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06557eec-a487-4e5f-b515-c579611f3d32",
        "cursor": {
          "ref": "cd4422bb-6852-4866-b01d-14bf86ce7f9f",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d69f3d9b-f885-4470-be71-98505c0dc179"
        },
        "item": {
          "id": "06557eec-a487-4e5f-b515-c579611f3d32",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b84913d5-e78d-49df-9836-e2b4a01d9eaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9ba38dc-fe26-4a8d-9e24-27dc1adc6b6c",
        "cursor": {
          "ref": "e5df692b-de71-420f-9da7-53fb35b03bbd",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6a1a0a71-8b7d-48ae-bc1b-80f156069879"
        },
        "item": {
          "id": "d9ba38dc-fe26-4a8d-9e24-27dc1adc6b6c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "cadb9d06-99dc-40f3-9ba7-b65c0f4292d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cbc445b-9b69-4cb9-95da-1ecce1babdaf",
        "cursor": {
          "ref": "4529eef3-c10d-47cb-8077-c38e4cee5884",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "eacf9226-2465-49dd-a54b-a700864fb8cb"
        },
        "item": {
          "id": "0cbc445b-9b69-4cb9-95da-1ecce1babdaf",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ef629b10-4ad6-44fa-b094-e04539ba5483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6fc38fd-04a6-430d-9466-d80dd46b5883",
        "cursor": {
          "ref": "2af8b9b8-87a2-4309-9ea8-b6d5c74f75fb",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "bc1698a3-c76f-41f0-bb46-a64fa6aace22"
        },
        "item": {
          "id": "a6fc38fd-04a6-430d-9466-d80dd46b5883",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "812040b1-83a3-45c9-a88d-ca37b4eb71a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c7c8603-940f-4417-a54d-71ddd3cf4b62",
        "cursor": {
          "ref": "301ed4db-e713-46cb-9ded-04b2e2a0d711",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b478d551-f4e1-4f5b-812e-fcc695b5a3a8"
        },
        "item": {
          "id": "6c7c8603-940f-4417-a54d-71ddd3cf4b62",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "77492c6a-298a-49dd-a667-7527c6ba5f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25241ed-3f0c-4c2b-a8af-4fe1de031c55",
        "cursor": {
          "ref": "f308631e-ddab-4eb8-9935-2f2084d7a269",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "6979925b-0ac9-4c3c-a087-174ddc05de36"
        },
        "item": {
          "id": "d25241ed-3f0c-4c2b-a8af-4fe1de031c55",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "75ee8039-a572-46f4-8f22-f24837ccae72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8488a4d-36f2-4636-9b1d-3bffe95f84d5",
        "cursor": {
          "ref": "21648709-2643-4554-8e8c-d089689e5d01",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d89b92a3-eb55-4d86-9cae-cdc565e08134"
        },
        "item": {
          "id": "c8488a4d-36f2-4636-9b1d-3bffe95f84d5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f62d11cd-4cd6-44ea-b027-6ef9314edadd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9726c376-1247-4504-9e0f-68edcbc41039",
        "cursor": {
          "ref": "d5103a19-2434-4a78-9736-66456f1d6562",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3bfad0fd-27fb-4881-b4fc-0f7c6043143a"
        },
        "item": {
          "id": "9726c376-1247-4504-9e0f-68edcbc41039",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6401fe55-4418-49dc-9fde-a8a0c2c5af60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d8daae-7766-4690-bb11-607cf8c646fa",
        "cursor": {
          "ref": "99d527e1-5626-44ba-984f-0e91e1e0db87",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a25cfa6d-d4cc-4e1c-93bc-3f22dcd69377"
        },
        "item": {
          "id": "99d8daae-7766-4690-bb11-607cf8c646fa",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a2d3fabb-a1df-45df-a588-9ab41887d51c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0e1003f-bd5d-409d-8944-8445b054ba2c",
        "cursor": {
          "ref": "33feb236-d060-4aa1-904d-59548b6935d2",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "88a9238b-5fc1-4de6-987e-2e0527caa35c"
        },
        "item": {
          "id": "b0e1003f-bd5d-409d-8944-8445b054ba2c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b5ba7444-c533-4b4a-af62-502658219d25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dfba84f-9ab1-4bad-8848-c408e25b91e3",
        "cursor": {
          "ref": "31bccc79-6642-4dbb-b7da-a6a200fa9ef9",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "eaf35ab2-cd09-4b6e-ae22-40bd7b0a3fe9"
        },
        "item": {
          "id": "9dfba84f-9ab1-4bad-8848-c408e25b91e3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d451119d-ceea-4f0d-a369-399f05f80180",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5967864-796f-446f-b881-81377c5f60d8",
        "cursor": {
          "ref": "29db16d5-73b2-4b75-8df1-203bf62eaa01",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c332c054-bfef-402c-8b8c-c7d3eb6e1e4e"
        },
        "item": {
          "id": "f5967864-796f-446f-b881-81377c5f60d8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "268d40ca-f1ac-454d-a6f4-c3e37df5f371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c7d5996-f728-45ed-9354-7566f0dbebb8",
        "cursor": {
          "ref": "af5d158d-bb41-4ec6-b032-c8106fbd2ee5",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "58a6b441-55e4-473d-ab8e-0371c40a4110"
        },
        "item": {
          "id": "6c7d5996-f728-45ed-9354-7566f0dbebb8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a5a670ad-9ee1-4a29-a016-5a6edd5555d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "693a1332-c506-4be1-ab5a-f38ef0e1f4e5",
        "cursor": {
          "ref": "669d89d1-00de-4c07-9016-5ef5fff9b333",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6b077e16-39f2-41fd-af13-08f24cdf78e6"
        },
        "item": {
          "id": "693a1332-c506-4be1-ab5a-f38ef0e1f4e5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d45a37b9-6762-4ade-8015-2993077c9b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20ca5b93-a3c0-40d0-9c67-9534df0a720b",
        "cursor": {
          "ref": "1b7e0080-9e8f-459a-8c8d-34ade0f64462",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0c5658b8-c432-416f-98b1-a204f6613212"
        },
        "item": {
          "id": "20ca5b93-a3c0-40d0-9c67-9534df0a720b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "58840ee1-0f1f-4307-a468-ae8de9879bba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171ab896-50b1-48c6-b2f7-c309e8892d1d",
        "cursor": {
          "ref": "f9b3c881-5f23-4c15-9c07-3d7992852f51",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "30538154-25f5-4b8d-8b0a-1084b1ef6484"
        },
        "item": {
          "id": "171ab896-50b1-48c6-b2f7-c309e8892d1d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2131aec1-1eef-4972-8358-53f9ddb0fa6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "464d8f3a-d10a-4736-b478-e2b581db6bb1",
        "cursor": {
          "ref": "c96a5cd2-6008-4397-9a8c-9e9350ce8e54",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f13001b0-29ac-48da-9b70-ddacdaf03859"
        },
        "item": {
          "id": "464d8f3a-d10a-4736-b478-e2b581db6bb1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1e962d41-4097-4e3d-9d5b-9f3a54b7452f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "930803a6-e4d7-425a-88c4-a1b3ca8cf787",
        "cursor": {
          "ref": "0b6a03da-10dd-4202-815f-e6ff977d0652",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "554b5aeb-3107-4671-8920-56d1a1f5fb1e"
        },
        "item": {
          "id": "930803a6-e4d7-425a-88c4-a1b3ca8cf787",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "fcdcf25e-8c6f-490a-9e49-4a571071ca51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d3135b3-a18d-4716-8eb7-b6539db56bb6",
        "cursor": {
          "ref": "c20b6f65-885b-41ea-823b-eedfa8731a1e",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5598ba6c-8a10-434a-abe1-398706700dc9"
        },
        "item": {
          "id": "7d3135b3-a18d-4716-8eb7-b6539db56bb6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3171626d-05cb-472e-adbd-4e0c4a50cc85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd4f90cc-1fc3-4b71-86ad-ab2c67c87467",
        "cursor": {
          "ref": "04e637ef-7d8a-4cc9-8bf2-2c47571dadb7",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f1a0721b-a1e3-4c03-9135-036b5dea73a2"
        },
        "item": {
          "id": "fd4f90cc-1fc3-4b71-86ad-ab2c67c87467",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "22958b8b-94a0-40b8-9e78-03db5a485f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbaa9fa2-4c6c-4d20-b6e7-03c5c3e684de",
        "cursor": {
          "ref": "b1d93945-7ae0-41ea-b82b-02c44c7e55ee",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c4400cea-1f8a-4760-ba16-dfb1a89be89a"
        },
        "item": {
          "id": "bbaa9fa2-4c6c-4d20-b6e7-03c5c3e684de",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e58d32b3-0631-4cd5-947e-87ab2fe9ae1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b395ba-09e7-4a9a-97c7-4583fb60e273",
        "cursor": {
          "ref": "a414e849-ac8c-4caa-9d78-41e055132ff9",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "303d21e7-09a1-4d1d-a022-de734a53247b"
        },
        "item": {
          "id": "62b395ba-09e7-4a9a-97c7-4583fb60e273",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6271dd1f-a625-4c9a-a527-9e7e700d3f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fdb48df-6c74-4e92-8b8d-28b761a4f451",
        "cursor": {
          "ref": "6ae19dc1-c598-41f8-a625-90a00bad7bf9",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f9f8597d-ac3f-4f3f-b365-759ad2fadac7"
        },
        "item": {
          "id": "1fdb48df-6c74-4e92-8b8d-28b761a4f451",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1d549eff-5a57-4397-bada-afc1bfd6e65e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4210f82e-b678-44af-a2a8-bc9d3247d792",
        "cursor": {
          "ref": "624367e3-71a9-49e6-9a7e-5ba93a73cd29",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c244cf90-bf66-4a80-b065-186e6d21e473"
        },
        "item": {
          "id": "4210f82e-b678-44af-a2a8-bc9d3247d792",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "83d0d2c3-0e6b-448c-ad4d-6cc0da7daaaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de3bcc98-0159-4f9c-9511-68fde0ec57f2",
        "cursor": {
          "ref": "eb018935-5133-45f0-8ea1-3bc42d4b3a7d",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "df2c6852-8163-4a1b-bc33-c3591cf9c36d"
        },
        "item": {
          "id": "de3bcc98-0159-4f9c-9511-68fde0ec57f2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a7ac77e4-b39c-4ae3-86f3-8cb60da619e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e49b1dd2-8340-4e98-94a2-f674c5caf008",
        "cursor": {
          "ref": "2e7e0ed1-1f05-4f70-8ea5-176530f50761",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d306a60d-1ba3-40bb-b70b-c4e1d48c0c6f"
        },
        "item": {
          "id": "e49b1dd2-8340-4e98-94a2-f674c5caf008",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9e819685-9010-4c11-9d0d-01f18276ff47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d962e47d-de74-4fb5-b8dc-689f07a4b78e",
        "cursor": {
          "ref": "2cb63365-48d7-4164-9a04-a810b222f8e2",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b6a38e21-de31-4b18-9b08-1d767446ff52"
        },
        "item": {
          "id": "d962e47d-de74-4fb5-b8dc-689f07a4b78e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "17130137-4a45-4d2d-ab25-878a10d3648f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c84c5fb9-654a-4dc3-b151-7c5dc135b39c",
        "cursor": {
          "ref": "b8a25a46-9788-4a78-bf20-d136ff0f3faa",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d6ea18f2-5837-404c-94f1-8c8d3ce98312"
        },
        "item": {
          "id": "c84c5fb9-654a-4dc3-b151-7c5dc135b39c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "48bc479c-b04f-472f-bdfb-717b8d52ec64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94770f2b-5e77-49fb-82a4-3760c2b4532b",
        "cursor": {
          "ref": "4fbe9b1e-f6c2-45b0-9731-36bc0b486d38",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c6006e9a-24da-47cc-94f5-647dca606f7c"
        },
        "item": {
          "id": "94770f2b-5e77-49fb-82a4-3760c2b4532b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "51452463-4c7b-4bcd-9d32-8a1a5cba0b51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b3aa7b-23b2-435c-92a6-487bf0e89b32",
        "cursor": {
          "ref": "b91ab588-9f76-46c4-ad03-2b2f72ffe93f",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "71439426-5899-420a-9d4b-42d3f4694fce"
        },
        "item": {
          "id": "05b3aa7b-23b2-435c-92a6-487bf0e89b32",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9150de24-28e1-469e-8750-cb38259ba770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f21a2ea-9731-499f-b211-70802d297cf4",
        "cursor": {
          "ref": "6e84255c-51de-4d73-a61f-0ed1ba69b24c",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "76b4dfa8-8b84-473b-a85f-d3ddc02dc5f9"
        },
        "item": {
          "id": "4f21a2ea-9731-499f-b211-70802d297cf4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ccf71d57-72b5-4c90-97ad-bbf87a4a17f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d0eccb7-5b98-46b5-b510-0a8c5f39a7f7",
        "cursor": {
          "ref": "11f176f7-a472-48a8-abf2-a25c5d783d44",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3d85178c-ad64-4221-abdb-4e0039a4c8bd"
        },
        "item": {
          "id": "2d0eccb7-5b98-46b5-b510-0a8c5f39a7f7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "93ebedf1-9fd3-41d7-8a7e-33f5e454d80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cee9a5a-36e2-47d8-b022-739def19d90c",
        "cursor": {
          "ref": "246cddc7-1c3c-4d59-a5a2-68412e9880bd",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "abf1eec2-ca05-448b-ada9-15b8d5dbe2a0"
        },
        "item": {
          "id": "4cee9a5a-36e2-47d8-b022-739def19d90c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3e262bcc-12fd-40db-8e73-579cf42eec61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4250d53-dfb6-4451-bc49-c281101e4bf2",
        "cursor": {
          "ref": "724bc43d-7544-4962-b9ce-9430d4a06be1",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "bf6d93a0-0ef9-4096-bd4a-435d21c0e966"
        },
        "item": {
          "id": "d4250d53-dfb6-4451-bc49-c281101e4bf2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "093b72e4-2f4d-4e18-8be8-1003de37be13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca55a257-8ef2-441d-a4af-17cd79156a94",
        "cursor": {
          "ref": "1cb197b5-4930-4baa-b2ce-4c82a0597a35",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3e4db45f-7cc5-4a74-8314-602d7f81f57b"
        },
        "item": {
          "id": "ca55a257-8ef2-441d-a4af-17cd79156a94",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ee673b74-ff20-46ed-8a6f-012ecf9a62f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3790fdd8-0d54-4e98-8007-6555bba32da1",
        "cursor": {
          "ref": "24861e95-0868-49c6-89a8-3801bac7aabd",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ca68a781-44c7-40e5-9106-27c1c1d57f50"
        },
        "item": {
          "id": "3790fdd8-0d54-4e98-8007-6555bba32da1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3532e20a-5cbc-4f00-8af5-ab799a86cf24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a5074c-5903-4c4b-9af9-c0a24590c63b",
        "cursor": {
          "ref": "b6733ab7-bc76-4a2d-ac07-434b4ea210ee",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "bd48ab23-83e9-48a7-80db-efb9054da60a"
        },
        "item": {
          "id": "05a5074c-5903-4c4b-9af9-c0a24590c63b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "43fdd2d3-9762-477f-a4ff-000ef44a3aad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef9c9577-5705-4114-bd7b-bb086e044ea6",
        "cursor": {
          "ref": "f996c360-77b9-485d-bb56-7377f886e632",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "35c4cc61-8b64-4e89-8763-30cc6a931a58"
        },
        "item": {
          "id": "ef9c9577-5705-4114-bd7b-bb086e044ea6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3ec94e5d-e9d6-4556-afb2-cfc59e6df6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6918ee70-562f-4b85-be2c-87fe325ae3a4",
        "cursor": {
          "ref": "03ac33ed-de4c-4d91-be7c-e7f615584358",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b5cb7848-0315-41cd-a6c7-eae9ee84eeb2"
        },
        "item": {
          "id": "6918ee70-562f-4b85-be2c-87fe325ae3a4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5331a4b8-abec-42c8-bcba-45e8e3eb79ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d90cba40-40bf-4ec9-a200-bb65e9c45af1",
        "cursor": {
          "ref": "854531eb-01a1-478b-b820-5a51c945743f",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "0a16fb9a-2171-4c5a-895d-a6056bea8b03"
        },
        "item": {
          "id": "d90cba40-40bf-4ec9-a200-bb65e9c45af1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "69935bc5-14ea-4ee6-bf89-fb5c7ebd894f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60be259e-d2de-4794-a7b5-6a149b307085",
        "cursor": {
          "ref": "c632c2ec-1c7e-4f3b-8a18-2830084d188a",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "634027f4-e5c2-4932-bb49-18bfc2f3f58d"
        },
        "item": {
          "id": "60be259e-d2de-4794-a7b5-6a149b307085",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1e496848-a562-40ee-afd8-a049b7de0e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d81ce2f1-384c-43ee-81fe-8a742025aac8",
        "cursor": {
          "ref": "60f95e1e-5829-449c-be01-dcfe344c0dd5",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9875b811-711a-4146-b416-c8f4a8eb568f"
        },
        "item": {
          "id": "d81ce2f1-384c-43ee-81fe-8a742025aac8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8c926dc1-8169-4e3a-88c0-8544187c477e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15619aa6-fd04-451c-85bd-c6af1b38bd0d",
        "cursor": {
          "ref": "b27a11b5-e1eb-470c-be88-541eca479bab",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ccf22631-066b-45a0-8b63-2ff6565222bb"
        },
        "item": {
          "id": "15619aa6-fd04-451c-85bd-c6af1b38bd0d",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ef78a168-a1e8-4f4b-9547-dd39f383e8af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6450a26d-2e5e-4c9c-9f77-d895eb41c6e1",
        "cursor": {
          "ref": "14698c01-d74a-4726-8896-9ca3b4030ccd",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "104117a9-3c8d-4d96-9dbd-5915f3d85c17"
        },
        "item": {
          "id": "6450a26d-2e5e-4c9c-9f77-d895eb41c6e1",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "982dfeaf-3f6b-4ee6-ae84-b858620b4bff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce14100-2f5c-4bf1-9b2d-2879bcd828e4",
        "cursor": {
          "ref": "c73c305c-1ae9-4391-a279-d78bee3c7c2b",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ee7051b9-e249-4b1b-8597-98c16dfe0178"
        },
        "item": {
          "id": "2ce14100-2f5c-4bf1-9b2d-2879bcd828e4",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "6153a1ca-26e6-4432-a759-37dee61a2c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fa8c8b5-1fbf-4b59-9550-ba8afb30122a",
        "cursor": {
          "ref": "4e535d10-0d07-4739-ba21-ebf145c62ebf",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f64a02ec-ef46-45f2-bc73-f224c9590a0d"
        },
        "item": {
          "id": "0fa8c8b5-1fbf-4b59-9550-ba8afb30122a",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "9525a54e-9122-4918-a0a8-1731e11a2027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61043c2-8f0b-4a0f-a257-dded4977dee1",
        "cursor": {
          "ref": "9b7fd337-e1cc-4ba4-b186-d2076cb36ac8",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "202fc040-387b-4114-b719-5caf5f7354ad"
        },
        "item": {
          "id": "f61043c2-8f0b-4a0f-a257-dded4977dee1",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "59adf585-7a5e-48e8-91e7-197f3fa5a44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c2f377a-09c8-47b0-b795-151ca310672e",
        "cursor": {
          "ref": "b7bbef12-5610-4c01-a192-801de721e611",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "0e40b212-d19d-44d8-883e-de200bec774d"
        },
        "item": {
          "id": "0c2f377a-09c8-47b0-b795-151ca310672e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "b6162a42-c025-4ecb-b03b-7c58dbef514e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa74989-790a-41a5-a502-c02cbe5c205b",
        "cursor": {
          "ref": "4817f8e2-6a89-489d-8088-a1e9e8316f41",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c49a8166-689d-4811-a750-d1c8bf46cdee"
        },
        "item": {
          "id": "2aa74989-790a-41a5-a502-c02cbe5c205b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "965b413a-5dc1-4e48-a111-68acf6afcf4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4147ecdf-c707-4d0f-8d4a-ce3cf0c9d0c3",
        "cursor": {
          "ref": "158c5488-2df0-4c99-8aa2-cbf87dd39126",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8d12f859-9817-4e27-8145-3587bc6c4b36"
        },
        "item": {
          "id": "4147ecdf-c707-4d0f-8d4a-ce3cf0c9d0c3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "fba17eaf-0eb3-462e-9a23-d3bc5d27c7ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41490b96-4af3-43fd-a973-c325f6237c76",
        "cursor": {
          "ref": "27d40b02-e720-4d48-9f66-8630055a6251",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9a98d3c6-eef0-4a00-b94a-5dd7451a3a1f"
        },
        "item": {
          "id": "41490b96-4af3-43fd-a973-c325f6237c76",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b351c03a-f1b1-44ad-9b31-9dff6c7d1756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1475e106-1685-4f76-9301-abe633c75cfa",
        "cursor": {
          "ref": "2058a029-b65c-4834-b0ae-75d43361ed7d",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "34e1a1d8-3406-463c-ad2a-2aab17510c9e"
        },
        "item": {
          "id": "1475e106-1685-4f76-9301-abe633c75cfa",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1f340218-7070-4802-a1dd-15714a05143e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d63dfc8f-c885-40f4-aa21-3cb09689fca2",
        "cursor": {
          "ref": "d9160b25-0e8e-4709-9812-5e301d714c94",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "48d3f28f-d962-49d3-9d3c-bd2ca3d8bd11"
        },
        "item": {
          "id": "d63dfc8f-c885-40f4-aa21-3cb09689fca2",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "3e5203f0-b4c1-4dd3-a18f-30b964abe695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89603b77-0f47-4131-bffc-192000a3f86f",
        "cursor": {
          "ref": "3251f516-0d4b-45f4-b5d4-3a17496e1fa2",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "004e02df-f0ce-42b6-9387-98efe8452811"
        },
        "item": {
          "id": "89603b77-0f47-4131-bffc-192000a3f86f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2ae2ce47-7d08-4408-8422-e3c93b1d8284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d16e60-b911-4897-a9ad-a3b55ef86a7b",
        "cursor": {
          "ref": "608bc764-cc73-4472-acc5-5c0f20ec3de8",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "4ec48d52-7a90-4e05-a1ee-e02d0eae83de"
        },
        "item": {
          "id": "00d16e60-b911-4897-a9ad-a3b55ef86a7b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1a5b0a95-5750-4f2e-a2e2-de802a78c835",
          "status": "OK",
          "code": 200,
          "responseTime": 165,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "9185ead6-7b0d-4f95-bc5d-e917347eedc8",
        "cursor": {
          "ref": "41ef9ab3-0447-4707-9184-2893be20c81f",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "0da94aca-54b6-4b41-a023-06f46aab4362"
        },
        "item": {
          "id": "9185ead6-7b0d-4f95-bc5d-e917347eedc8",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "bb9a744a-c071-40c1-b5c9-cbb8149dcd3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac7e349-b98b-435d-a0b7-f18701266f5b",
        "cursor": {
          "ref": "386e3648-d62f-4e1c-91e8-1eff1197ce25",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5eca477e-8e52-4b15-8565-3a4339f1b459"
        },
        "item": {
          "id": "fac7e349-b98b-435d-a0b7-f18701266f5b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8b137419-3ec2-498e-828a-1bef647af7cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a00e6a-f508-4781-9a85-167273c972f7",
        "cursor": {
          "ref": "a01f83b4-62cc-49e6-810d-bed0c1214589",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "760c53b2-9405-44a3-9d0a-6c5b33ecb465"
        },
        "item": {
          "id": "46a00e6a-f508-4781-9a85-167273c972f7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "2ee21ce7-bf19-43f2-b991-f7db2421035f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0bc563d-1b75-4a3b-ae1b-90d257f7605a",
        "cursor": {
          "ref": "d75e8474-1c9f-4858-b522-ac7bcdb990af",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "bcac5182-8244-4715-bc79-c5a97e6c7933"
        },
        "item": {
          "id": "c0bc563d-1b75-4a3b-ae1b-90d257f7605a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4384182a-61fa-485a-9a1c-85dbd36180d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719f8191-6b05-4eec-b13d-73efe3bf3721",
        "cursor": {
          "ref": "16c8bd80-7baf-471b-88ff-3417d89cec69",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a23b8b08-c093-4b3b-b285-38caf63530ea"
        },
        "item": {
          "id": "719f8191-6b05-4eec-b13d-73efe3bf3721",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9f997bc6-5ac8-45c3-8248-ef11c1a152fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01d693e2-9677-4096-8c20-5abcf0fa95bf",
        "cursor": {
          "ref": "93e62e68-e78b-448f-9855-55da9db470f2",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f8f0a23d-1dbd-4af8-bbc4-e1c62243d0d1"
        },
        "item": {
          "id": "01d693e2-9677-4096-8c20-5abcf0fa95bf",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "eb751e10-03d1-4977-8f6a-fa0ecec109ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe1a5fd1-41d2-439d-bf5d-a4c32757bff9",
        "cursor": {
          "ref": "62edb2a8-c7dc-40f2-bda6-f733ed4d708f",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "87dee25f-2ed7-4705-a46d-2e44b48b80c6"
        },
        "item": {
          "id": "fe1a5fd1-41d2-439d-bf5d-a4c32757bff9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a0263d89-7ddd-4313-bec4-a6365277c693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251b632b-dc76-4bc4-b9a6-dbb1df5b9f37",
        "cursor": {
          "ref": "1130c536-61a2-4e3e-b2bd-20711274b4f3",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "24d0a437-9763-46bc-a5e7-ec4a7e944ea9"
        },
        "item": {
          "id": "251b632b-dc76-4bc4-b9a6-dbb1df5b9f37",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e9803b7f-5d20-4164-bdd8-b08a3365b882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0001ca-3538-412b-8bde-57715c270c60",
        "cursor": {
          "ref": "c2123727-5993-43d5-aae8-f6b211d971cf",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8495536b-a352-4260-ab4d-d6c8f5d1b38f"
        },
        "item": {
          "id": "6c0001ca-3538-412b-8bde-57715c270c60",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d77d747a-f914-4c42-bed0-cba69c7df1ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b6de0a-3141-425c-b606-1ab2aa50a551",
        "cursor": {
          "ref": "ea2cfbdc-7644-4c16-93c8-cadac3463f3e",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7aa77ac2-839d-4f74-8db9-ac65de533f5f"
        },
        "item": {
          "id": "46b6de0a-3141-425c-b606-1ab2aa50a551",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c72c6b2e-8a85-441c-8a8f-dc6c1835e253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e92b05e-48d5-4381-a3e7-23f8d5059c6d",
        "cursor": {
          "ref": "070e6f93-f273-4108-b312-39a7da5bb863",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4d8e5540-5506-4c2b-8d67-f1e941443c3a"
        },
        "item": {
          "id": "4e92b05e-48d5-4381-a3e7-23f8d5059c6d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d27ba55e-d7b9-4454-9ad7-a3b930643805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db8557d-5da9-4a4e-a6de-d90e73bb1a66",
        "cursor": {
          "ref": "a5b69f12-c837-4eec-9f71-8e46f2c6b3f9",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "cdf3784f-145a-447f-b8a0-b36084384c9c"
        },
        "item": {
          "id": "5db8557d-5da9-4a4e-a6de-d90e73bb1a66",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "17a35d4b-bebb-48a2-ac03-2fb811794640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f47fc4-11af-468d-8904-a88572257c51",
        "cursor": {
          "ref": "3bdd7552-4202-4e08-860f-808ad6d1ee9f",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ddda0fa2-a90d-408f-81ca-121a9f1b4e84"
        },
        "item": {
          "id": "d8f47fc4-11af-468d-8904-a88572257c51",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "63890bdd-7a70-4981-b247-2f1c3711f2ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33171032-91f9-428f-bf03-7844d42e67ad",
        "cursor": {
          "ref": "8da0129b-8438-4c5f-8515-44a9d9e80e0e",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "08d15492-e27a-4105-abd0-81be91c6ad75"
        },
        "item": {
          "id": "33171032-91f9-428f-bf03-7844d42e67ad",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7db963e1-8aae-4995-a504-e09c03d53d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da3f177-d921-416d-aa05-e3d04c0c98b4",
        "cursor": {
          "ref": "c51796b8-2bae-4e3b-903f-554f9d5fefa1",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "025f1aea-d0ec-402a-ab51-8a5f75f6909d"
        },
        "item": {
          "id": "1da3f177-d921-416d-aa05-e3d04c0c98b4",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c470b77f-660d-4354-85ed-d2c9e59c1ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "787d502a-9f21-4140-8347-ab0da6dc5464",
        "cursor": {
          "ref": "81bc50e9-9805-40ff-8966-24e14a1d6839",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "51cccbb7-502d-403f-a5f9-05c4e10ba928"
        },
        "item": {
          "id": "787d502a-9f21-4140-8347-ab0da6dc5464",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2eba35cb-d983-4fac-88f5-9b4ae37e4068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83aecd28-d319-47eb-8e1d-d22270e6a430",
        "cursor": {
          "ref": "ae053389-3e46-4867-a66f-7e210ef07679",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "4d63e006-96bd-40fa-8457-e3605c65462d"
        },
        "item": {
          "id": "83aecd28-d319-47eb-8e1d-d22270e6a430",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b19634f0-8a4f-4680-949f-620f91235a41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb946a7f-2a3d-42db-872f-71d4ce5ff10b",
        "cursor": {
          "ref": "0b9d1ed4-44c9-4b15-9451-bfaee00f4a88",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ad711610-46ae-493e-92ff-bcdc986f08ca"
        },
        "item": {
          "id": "fb946a7f-2a3d-42db-872f-71d4ce5ff10b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7b1bacb5-8b70-4bec-bb6c-1b84aba6326e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e81214-f66b-46d9-855e-b1a2f9a5a692",
        "cursor": {
          "ref": "db0ea294-01bd-45d2-854e-64cb759fe220",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "85ded41f-32ea-4691-80d2-ce65702744c5"
        },
        "item": {
          "id": "71e81214-f66b-46d9-855e-b1a2f9a5a692",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ddd1b3df-b482-4659-99e9-3f676cc8bcba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d28d519-8c45-40a0-85a4-aec0062be361",
        "cursor": {
          "ref": "f140ea3a-e5a0-4561-a0b0-7c73aab04b95",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "24feac20-2852-4ef7-b9cb-61721d7e6750"
        },
        "item": {
          "id": "0d28d519-8c45-40a0-85a4-aec0062be361",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d3a248a9-7186-4e7b-b47f-62ec7b41d8f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2bb960c-d089-4933-a39e-962c23dac135",
        "cursor": {
          "ref": "8a4bb307-b113-4fe6-bfc3-f87bb0cb04ee",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "44cb1796-4c15-4ee9-a025-05c26edaa6e4"
        },
        "item": {
          "id": "c2bb960c-d089-4933-a39e-962c23dac135",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b544295e-26fc-49ac-bd4d-dc042e3bdc30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "158b80b0-0e0a-4dc8-aede-9e47fa67a814",
        "cursor": {
          "ref": "5d8eee84-6fd8-4995-b143-c67b8da94581",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "18bb7dbc-10c5-46cf-9af0-ebb1a01f3b01"
        },
        "item": {
          "id": "158b80b0-0e0a-4dc8-aede-9e47fa67a814",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f862b11d-9d13-46f1-85a5-69a5e9dbb30f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c358e8c0-b9aa-4e86-b0b2-0549f19ba3fb",
        "cursor": {
          "ref": "f99a600f-371f-4db0-885a-5561e88a7cce",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3355418b-980e-4e2a-9634-2529841ad47f"
        },
        "item": {
          "id": "c358e8c0-b9aa-4e86-b0b2-0549f19ba3fb",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "2dc2f33b-ca66-40b2-b5c1-e676f7ceb507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356d81e4-bdd0-4c16-aa44-aa9a0484bd7b",
        "cursor": {
          "ref": "cde73800-599e-46d1-b5a5-caf45e57f7c9",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e58c5378-af12-448b-8de2-d3b66f2188f0"
        },
        "item": {
          "id": "356d81e4-bdd0-4c16-aa44-aa9a0484bd7b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "50a5af26-353c-4ebd-b83c-0bc54182d22c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0c5083-dc89-4f4b-ade2-57f7df23562e",
        "cursor": {
          "ref": "30fd2d16-975b-4d70-8c64-39c181b8422a",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d9031489-811e-43c5-a204-cd59499acc53"
        },
        "item": {
          "id": "fe0c5083-dc89-4f4b-ade2-57f7df23562e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "11cccb22-3f5e-41c1-9655-f3371e3cdfe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c010778-c76e-43c1-aaa7-bd4553c48edb",
        "cursor": {
          "ref": "4e846e2e-ea15-4234-9c9f-82081787474d",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c6f34f43-c443-48aa-836c-64b749b26255"
        },
        "item": {
          "id": "3c010778-c76e-43c1-aaa7-bd4553c48edb",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b52a597c-8fa8-49b1-b2cc-e6748a3a4690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a91840-5dfb-4ed4-9dae-ddd5463e7bcf",
        "cursor": {
          "ref": "98e926a2-1264-46b3-aa5e-13215a0a0222",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "528de767-4e02-4042-b6d8-0fef8307af2c"
        },
        "item": {
          "id": "f0a91840-5dfb-4ed4-9dae-ddd5463e7bcf",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2d702c40-750a-4377-8f8a-1cb994e3a13e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e0676f-0732-45a3-aefe-231ffa6b006e",
        "cursor": {
          "ref": "8b9f5d15-26b6-4004-8a43-e54f015f33b1",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "cc1b1b4a-e177-4d70-92f4-ba1ef02dbb16"
        },
        "item": {
          "id": "66e0676f-0732-45a3-aefe-231ffa6b006e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e3cbcdac-4e39-43f0-8bac-2cfb15921616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87fd1786-25b5-4a04-8c3c-419d7c3736d5",
        "cursor": {
          "ref": "8468a2b0-e220-427b-9687-47e06b4e517e",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f7c1a023-23c6-455f-b1a2-eab7d647cc10"
        },
        "item": {
          "id": "87fd1786-25b5-4a04-8c3c-419d7c3736d5",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "dead4c54-ac55-41eb-bb1a-36a36da6a74a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a40091-28eb-469a-8f04-7b8805791f0d",
        "cursor": {
          "ref": "6356680a-a90b-488c-8dd9-ceca0d4de7f2",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "bae818f1-dd87-4509-8ee7-9b8731fcd288"
        },
        "item": {
          "id": "81a40091-28eb-469a-8f04-7b8805791f0d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e03a126b-0ccd-4594-afae-d606cccc6a84",
          "status": "OK",
          "code": 200,
          "responseTime": 172,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "ba64b9d8-6e39-4b8c-bc97-6d534c2222d1",
        "cursor": {
          "ref": "07ed1150-15dd-416e-ba49-4ae24048dbc1",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "958e7485-2dbb-4cf1-ad03-e8bad0cc8930"
        },
        "item": {
          "id": "ba64b9d8-6e39-4b8c-bc97-6d534c2222d1",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ca09aba4-c424-46c8-8568-5ccf7c780a72",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "fe11c926-9c35-4b69-b95a-0c6b6ceae8a7",
        "cursor": {
          "ref": "be509e9d-dac5-4608-943d-f765c140d938",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f500e822-edab-454b-850c-f1577f0f72d6"
        },
        "item": {
          "id": "fe11c926-9c35-4b69-b95a-0c6b6ceae8a7",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "73d4b7a8-c1a2-4201-bbe5-3bf9c5639081",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "8a6e6dd7-6efc-4ff7-8b40-9aa54b7fe4ea",
        "cursor": {
          "ref": "47b1fce0-0afe-43aa-b75a-d5cedb2c7ed8",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ec352333-e8d6-4a40-893d-76eab37efe1b"
        },
        "item": {
          "id": "8a6e6dd7-6efc-4ff7-8b40-9aa54b7fe4ea",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c4837809-0b27-46cb-b565-6b4c61118afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e32a4ddc-9e8a-4c6a-b7a3-13bd3025fe39",
        "cursor": {
          "ref": "ceaae2d5-a03f-4957-a7fe-f7abbdc08002",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e686895d-517b-4d67-a257-ace431d90ac7"
        },
        "item": {
          "id": "e32a4ddc-9e8a-4c6a-b7a3-13bd3025fe39",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7b3a3378-6580-4800-9fa4-b83699bff2c8",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "185ae9c7-aac6-458b-b513-66c1cea239b4",
        "cursor": {
          "ref": "2965e4b6-bdbc-47ba-bb06-aea218349bca",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "af082d32-0c14-44d1-929e-abef767c8b68"
        },
        "item": {
          "id": "185ae9c7-aac6-458b-b513-66c1cea239b4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "014c34c5-697c-4a57-9a01-9cc6c168ac87",
          "status": "OK",
          "code": 200,
          "responseTime": 166,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "4b9b2090-1fa8-406d-a86f-3be8196242d5",
        "cursor": {
          "ref": "b63457aa-7505-4cb6-a1cc-c80d60d8a3e0",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7e7bb846-d487-4129-8d7c-f7ff8dfb4194"
        },
        "item": {
          "id": "4b9b2090-1fa8-406d-a86f-3be8196242d5",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c51e75ed-01ff-4d22-a332-35f8457403df",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "112b95d2-0d91-4e25-b3e3-8ca690fdf2e3",
        "cursor": {
          "ref": "49e8f1cf-d24f-42fc-8e6a-9a53d1f2862d",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d03129e1-bc55-4766-8d5c-9e28710e217a"
        },
        "item": {
          "id": "112b95d2-0d91-4e25-b3e3-8ca690fdf2e3",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d6dd1e1d-efab-4c06-b269-acd8acb1d945",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "5f6ecb00-c0c6-4a4d-89fe-2063b6042c35",
        "cursor": {
          "ref": "9c085b74-2b66-44cd-94ae-f726d626c1d8",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "57a5d6c0-0d00-4cd6-82f6-6cc4c4ee7e13"
        },
        "item": {
          "id": "5f6ecb00-c0c6-4a4d-89fe-2063b6042c35",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "bb5e6a0f-1bc8-4df6-9bc5-51906e3bbdca",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "a6734a3f-8f84-4d49-b909-055551b98b35",
        "cursor": {
          "ref": "ddf1da31-9bfa-4379-8572-4aaef5d1619f",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5b9d396a-3d92-479b-84c2-14529c50525c"
        },
        "item": {
          "id": "a6734a3f-8f84-4d49-b909-055551b98b35",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0c8e4e6d-398e-4895-873e-996310230b09",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "590229e3-904e-4f37-8fc2-22b49eb7252a",
        "cursor": {
          "ref": "d72b3e65-cd43-49bb-befa-90548195aff9",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "701b5f38-4ee8-4223-8e76-e58326810675"
        },
        "item": {
          "id": "590229e3-904e-4f37-8fc2-22b49eb7252a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "4e70ec36-5830-45fc-a5b0-274cabc32621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "454b8384-8911-4d50-8298-6a19561ac880",
        "cursor": {
          "ref": "4225673a-b489-426b-a366-db7eef9bf0bf",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e29096c7-8e53-4358-8fa3-8bdf7fb1818b"
        },
        "item": {
          "id": "454b8384-8911-4d50-8298-6a19561ac880",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "158ce5ae-5383-4b2c-be31-83544bfb6c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e1b744-e181-4834-9a5d-d4904af4fbfb",
        "cursor": {
          "ref": "7053881d-5e96-4fdb-87ac-b3317cdf302a",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f459a776-6bc7-45c6-ba03-25903c9a32bb"
        },
        "item": {
          "id": "10e1b744-e181-4834-9a5d-d4904af4fbfb",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8b0d5254-d2f8-49af-b3fa-32a6de3701c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed960dd2-db9e-4acb-9223-00f6d1b71ab8",
        "cursor": {
          "ref": "9780e80a-4b82-4002-ab92-4a07570770c3",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a9f28f71-4f2c-4020-bf55-639c9ffa0189"
        },
        "item": {
          "id": "ed960dd2-db9e-4acb-9223-00f6d1b71ab8",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "cf4d5649-cea0-4468-855f-6cfc619e74af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad2a690-b526-49c7-b0cb-4ffcc6541dd8",
        "cursor": {
          "ref": "85f9c6ed-d8ce-4459-8a73-40b834db2c15",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8c754ab1-3b93-4239-bc42-0873162b2df4"
        },
        "item": {
          "id": "fad2a690-b526-49c7-b0cb-4ffcc6541dd8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "81fc59c6-dfe6-471a-af20-2247903a33a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "368816fb-d390-4add-953e-76277ffaf455",
        "cursor": {
          "ref": "ccc4f1e5-47fa-4b85-ace6-e657b650064d",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0141e2fa-8f9f-45b8-accd-d90280a83fc1"
        },
        "item": {
          "id": "368816fb-d390-4add-953e-76277ffaf455",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c1e6d1d4-d6fc-4fa1-8ee9-c0fa83cf098e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f4e7aa3-26d9-423f-8dcb-acc6a9d48310",
        "cursor": {
          "ref": "ebdef7ee-14e9-4213-9a58-7fd29f935a24",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3db06270-3b3f-434a-98d0-e4b113f43c09"
        },
        "item": {
          "id": "3f4e7aa3-26d9-423f-8dcb-acc6a9d48310",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "3f3849c7-d66c-47e6-8484-ab7dc8d88ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df60130d-b85a-487b-8d2e-b3bd40cc6cef",
        "cursor": {
          "ref": "cd9f7637-5e2f-46cb-ae29-3457ae1ebc21",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "2e9e9deb-4584-43dc-9b5f-f50b0a2fb70a"
        },
        "item": {
          "id": "df60130d-b85a-487b-8d2e-b3bd40cc6cef",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c36a3f61-cd28-4b08-9b38-1589f8ca3bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4885cc6-e499-45d7-aa85-f9a044c43d48",
        "cursor": {
          "ref": "cf8ee1de-cbad-45ac-8ed9-80fe49b3ed84",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "065fa906-5fe3-4722-a927-32270d7f56c6"
        },
        "item": {
          "id": "d4885cc6-e499-45d7-aa85-f9a044c43d48",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ef0ee78b-ea70-4ba2-9134-4debd3560145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c4ceba8-6b04-4bd7-b022-04820f9e2a1b",
        "cursor": {
          "ref": "5662b503-6112-46b8-91a9-e98f98af45da",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "93691843-ef9c-4f45-b760-255b867820bd"
        },
        "item": {
          "id": "8c4ceba8-6b04-4bd7-b022-04820f9e2a1b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e845f206-48bf-4577-9317-52a6ad4f629e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "897e9121-8542-4d38-be23-251c42e12d54",
        "cursor": {
          "ref": "a99ee7b7-61ac-463b-a877-c93ba149b6a4",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "becc38a7-977b-47ae-9def-998371a8372f"
        },
        "item": {
          "id": "897e9121-8542-4d38-be23-251c42e12d54",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "218ce158-a973-4245-b2ac-115ccb117424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4780bdd3-2141-438d-8cf2-7dc2fb4855a3",
        "cursor": {
          "ref": "69b356f1-879f-4a7f-9a64-6147727328a4",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "facbb705-6d9b-406b-9690-37efad2d8b54"
        },
        "item": {
          "id": "4780bdd3-2141-438d-8cf2-7dc2fb4855a3",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "35e85c1c-4304-4ede-b034-484ff6f15d78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02014c6-2f38-40c8-8786-bc029ad9f835",
        "cursor": {
          "ref": "2dcda320-b64f-4674-b2cc-1f0902e9fd4d",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "dd7f0700-af8d-46a7-9110-318afa95b0ca"
        },
        "item": {
          "id": "b02014c6-2f38-40c8-8786-bc029ad9f835",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "886f1c22-a513-4869-ac7a-ab476f541f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a863963-f3d0-489f-9d24-8e6cd832ebbb",
        "cursor": {
          "ref": "1d2cb237-39c7-4f20-8ae2-6b497e47ab2b",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d05df5c6-d8b2-47df-8f11-64174d4d45e2"
        },
        "item": {
          "id": "2a863963-f3d0-489f-9d24-8e6cd832ebbb",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e136e073-fc18-4804-a61a-d6bb51e01373",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "89b55f36-7d78-4c81-bd6b-b67966894fe5",
        "cursor": {
          "ref": "cd7e01c7-2aaf-4ea7-98f6-3b0ca9cd47c5",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "519dc753-28b4-49a6-a097-7380dfb08bef"
        },
        "item": {
          "id": "89b55f36-7d78-4c81-bd6b-b67966894fe5",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "03adb395-88af-47fc-a978-e4174ed0dfcf",
          "status": "OK",
          "code": 200,
          "responseTime": 173,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "210ebccf-d460-41c7-a257-8fd54c7656c4",
        "cursor": {
          "ref": "3f5f42e1-52c3-484e-9355-24f26813eff0",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9e4a7529-5ebf-416e-9a35-cac968d7ec6c"
        },
        "item": {
          "id": "210ebccf-d460-41c7-a257-8fd54c7656c4",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "63dfb490-be2d-44bb-aec3-9aa56ef627af",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "84310346-280a-44d2-bfbe-cc56f2a1ebc0",
        "cursor": {
          "ref": "ce2c579c-f656-450d-8c6b-c69b59524796",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "faeb0367-0035-4107-80c0-2c4a68a423c9"
        },
        "item": {
          "id": "84310346-280a-44d2-bfbe-cc56f2a1ebc0",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3367f1e1-b9ef-4f9a-ac40-314f7a4156d9",
          "status": "OK",
          "code": 200,
          "responseTime": 162,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "2be589fa-c87e-4e77-8ead-de14db382cf2",
        "cursor": {
          "ref": "8232f7f4-5e94-4901-b318-fab735048a33",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "38f6af62-0717-455b-8895-8cf3ec545f15"
        },
        "item": {
          "id": "2be589fa-c87e-4e77-8ead-de14db382cf2",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "10ab349a-a2c8-4e98-bb6e-2b035bb8886a",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "72595176-139e-4fe4-93d9-9f485b69c9bf",
        "cursor": {
          "ref": "63a1b659-2df1-4d9b-aed5-5115cd86d042",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "be5a23e2-b338-46d6-95f7-f305c4d3ac9f"
        },
        "item": {
          "id": "72595176-139e-4fe4-93d9-9f485b69c9bf",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "4232c17c-e88b-4eff-b053-ada6e6e1fff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5494be9-1ec1-4bd0-a85c-11e76b0760be",
        "cursor": {
          "ref": "6fbc453d-be40-4215-9fa9-6ce1806c5803",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "336e8689-7343-40bc-9bdd-321e685edaf7"
        },
        "item": {
          "id": "a5494be9-1ec1-4bd0-a85c-11e76b0760be",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "31eb88c3-bc0d-4535-b0d3-f1aef8c0ea3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09f9202a-39ae-4248-a6cc-5a84ef5675e8",
        "cursor": {
          "ref": "7ecf653d-02e7-493b-9ff3-66b68cf7414c",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0ab5a77b-4daa-484e-b107-48e31ce37d2f"
        },
        "item": {
          "id": "09f9202a-39ae-4248-a6cc-5a84ef5675e8",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "0e87d000-10c7-4a9b-8dd1-e018ed5f2b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4e9a38-b9ba-467f-a649-aada9439ecc7",
        "cursor": {
          "ref": "77a677ce-c78e-4012-9dc7-d92d866792ad",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "06f3a7e5-eefe-4bcc-8a37-aedfda21a240"
        },
        "item": {
          "id": "df4e9a38-b9ba-467f-a649-aada9439ecc7",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "241885f3-199e-4ef4-8d0b-7260a3b146d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41bb675e-e188-4ccb-809f-1863c13a3e38",
        "cursor": {
          "ref": "ff5a133c-0a39-48ac-ab07-68a669cc0e54",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6702fb78-b738-42ed-969c-e5e65af48d7f"
        },
        "item": {
          "id": "41bb675e-e188-4ccb-809f-1863c13a3e38",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "eb4fd62a-ad7a-46ce-bd61-faa240b92213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2f951fd-26b6-4cdb-9660-35c208d51ffe",
        "cursor": {
          "ref": "21b1ca46-997d-4e4e-bb74-2793258b5b33",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "660ea67e-e5f8-4b3a-9ce0-b82a19acf804"
        },
        "item": {
          "id": "b2f951fd-26b6-4cdb-9660-35c208d51ffe",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "67df77d2-e1de-4bac-a465-1969de209c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37cdb5cc-099d-4d0d-8c9c-f26550df6ce5",
        "cursor": {
          "ref": "9af52db2-8c03-49eb-a3ea-762ed2f95ab9",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b909dd33-6550-48fa-8d5e-f6f99b3a2fbd"
        },
        "item": {
          "id": "37cdb5cc-099d-4d0d-8c9c-f26550df6ce5",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "22c9bca1-3209-404e-b204-07fbe50860ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f3368f-731e-4d2c-8ed8-c9a0bc576507",
        "cursor": {
          "ref": "3aababb4-e4e4-45e2-843b-46ed3847e2fe",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "bd871175-2567-46ec-812f-dfec944a456e"
        },
        "item": {
          "id": "68f3368f-731e-4d2c-8ed8-c9a0bc576507",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "fa0ea298-e812-42f7-8fb2-fd262ed3f1d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17cdc5a3-26cd-4170-97b3-f33a53100a31",
        "cursor": {
          "ref": "740f21fe-3582-4212-bf75-62f1faffa12a",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "84a72cfa-948e-43c0-b0ca-a0717aa5f273"
        },
        "item": {
          "id": "17cdc5a3-26cd-4170-97b3-f33a53100a31",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e0dd6512-f2df-4290-bbf8-7a64c669ff0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "668773e2-3e53-4af8-a26c-348b401549c2",
        "cursor": {
          "ref": "944d6072-f504-479c-9f1e-b1278f4a9f73",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "f2942b35-7863-4d79-98b3-b55ece6bb949"
        },
        "item": {
          "id": "668773e2-3e53-4af8-a26c-348b401549c2",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "71e4a63b-d635-4951-b13f-7598ddcb2e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd94c76-bf45-43f3-8fcb-3c7e9a60cbf5",
        "cursor": {
          "ref": "e40c1bb1-5373-47af-a4a3-6e61d94eb30f",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "3682aa49-f888-4864-9372-f0d412e316ff"
        },
        "item": {
          "id": "2fd94c76-bf45-43f3-8fcb-3c7e9a60cbf5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "1a322ef8-cf00-4862-9121-f634eda014ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7408615-178d-4ae2-afd3-6f58d620d9ca",
        "cursor": {
          "ref": "4bad37e5-4358-49b1-96d9-4de7cac6ef5a",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "085ce812-ee57-4250-afb5-9a9d0f8ecb6f"
        },
        "item": {
          "id": "c7408615-178d-4ae2-afd3-6f58d620d9ca",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "184f1633-9bbf-4392-bd89-c20743e589bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3cea6f7-d014-479b-83ab-1054da86e13b",
        "cursor": {
          "ref": "a3e2f809-bd9a-4276-b59b-ec35fddc74ce",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "af2ca301-27d5-4ab8-a216-879274136ecf"
        },
        "item": {
          "id": "e3cea6f7-d014-479b-83ab-1054da86e13b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "670de508-b675-4f54-834f-6af8a5203672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50042aff-b2bc-43ba-aad3-753b100396bd",
        "cursor": {
          "ref": "761b458d-ee7c-41ac-9577-8bbb49a92997",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "cd35eb3f-bc27-4b36-940b-de2424158065"
        },
        "item": {
          "id": "50042aff-b2bc-43ba-aad3-753b100396bd",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3388c96b-1dfa-4b56-8c14-2a736295061a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e1160e-6efd-43d2-9fbb-3dc71bb9b017",
        "cursor": {
          "ref": "97f9a053-d600-43d5-9241-60351d7eb13b",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "36852eb6-1803-4ab3-87fc-6ffb14f289d8"
        },
        "item": {
          "id": "32e1160e-6efd-43d2-9fbb-3dc71bb9b017",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "75e46b0a-b42c-499a-80fa-a0272fb5a54a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc218916-2ff5-41de-abae-5dd8570cf3cf",
        "cursor": {
          "ref": "250d5a52-0bfb-47b8-87fb-a3bca6eabe4b",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "73733707-f5e2-4f8a-be6b-ffc3726df65f"
        },
        "item": {
          "id": "dc218916-2ff5-41de-abae-5dd8570cf3cf",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c5f6b53d-ce3e-494f-beff-4ec5da08eb90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e8fe698-7a39-486f-bf98-bb1f029fd6ed",
        "cursor": {
          "ref": "7916da20-1099-437f-8115-5df8863aa481",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "98aa8fb6-a95f-42c1-b872-51deef70941c"
        },
        "item": {
          "id": "5e8fe698-7a39-486f-bf98-bb1f029fd6ed",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b2869cf2-e510-44e1-b92f-6d835f30c829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ead6d9c-0449-48ec-9d03-a781cfb47130",
        "cursor": {
          "ref": "32b37988-11cd-482b-9346-d41a18e66bc7",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "521a2106-4ada-4d1e-9a68-fe7cf311c68f"
        },
        "item": {
          "id": "0ead6d9c-0449-48ec-9d03-a781cfb47130",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "306aea67-b731-4595-a196-2e4fc586087a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2e170ec-85be-485d-acf7-a745a724935e",
        "cursor": {
          "ref": "92986276-ae3e-46b8-a822-89e316c876fc",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "3e5a3716-d7db-40c5-9a84-73664a8471ec"
        },
        "item": {
          "id": "d2e170ec-85be-485d-acf7-a745a724935e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "8e5e5fdb-327f-4723-8de7-43c8637a20d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dccbbb64-3022-48d2-8aa7-3bde94438653",
        "cursor": {
          "ref": "00a140e7-9ae0-4045-926d-f4c2c156cc98",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "59d19738-2d28-46bb-8a80-4385473f23c3"
        },
        "item": {
          "id": "dccbbb64-3022-48d2-8aa7-3bde94438653",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b0f7aa4b-39d6-4579-b27d-18071bff8a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d46d11-4688-4648-b87c-9ace8409474b",
        "cursor": {
          "ref": "e4686e2c-d71c-43f2-991a-9d88daf0275f",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "6d4c39f8-270b-48f0-9d8b-c7c46544f66f"
        },
        "item": {
          "id": "17d46d11-4688-4648-b87c-9ace8409474b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a6c72194-aa1b-4805-885e-3febf81a8f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc27ea27-a2a5-4d4a-b6be-1be5b8bfae75",
        "cursor": {
          "ref": "ff8c4505-8a61-4166-ad0f-ccb688f8c12b",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "b1360c73-0896-41ad-88de-c841ce08a12e"
        },
        "item": {
          "id": "bc27ea27-a2a5-4d4a-b6be-1be5b8bfae75",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "3bb41272-891c-40ca-8678-40f4935adb9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0547904-5d40-4407-a62d-4e0dac0de381",
        "cursor": {
          "ref": "66cbecb0-bafb-49a7-814e-32e5aabc69d5",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "7f994a3e-3b4f-43b0-8768-d1a86f66bc65"
        },
        "item": {
          "id": "a0547904-5d40-4407-a62d-4e0dac0de381",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "73eb309f-cad9-444e-b8ad-6923da04f8da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "434a0eb4-7363-4e57-a1b9-9ecb5895d9b8",
        "cursor": {
          "ref": "8fdd5d07-dc70-4bc5-a10a-3bdc94c6eccd",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "f1234084-c305-4269-b9bb-8b69a6916766"
        },
        "item": {
          "id": "434a0eb4-7363-4e57-a1b9-9ecb5895d9b8",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "aa4c5dc5-2677-4c7b-94a1-f5dadae9832d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e46c87-02f3-4db5-b806-9f435d0a0517",
        "cursor": {
          "ref": "5c7d6b2e-73f5-449d-a5c0-49422efdbcde",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "d0860024-f0a6-4e5c-bad2-54fe1aad86d8"
        },
        "item": {
          "id": "85e46c87-02f3-4db5-b806-9f435d0a0517",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "533283cb-e5f8-428f-a4fe-e6026afa12e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "701f9eaa-c67a-4be4-abf0-f087a95ec3f3",
        "cursor": {
          "ref": "78eba48d-b91f-40b7-878e-1a6d2705dc97",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "12b32377-b091-4854-81eb-b68016e4419f"
        },
        "item": {
          "id": "701f9eaa-c67a-4be4-abf0-f087a95ec3f3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9caed2dd-d3ca-49ef-8f66-09b2777a3df5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf77592-38b4-4e45-9274-787d1d782f0f",
        "cursor": {
          "ref": "48d19bf5-c898-404d-9579-e4f010a65040",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "ec5b5db7-5d90-4312-b2b7-a25b553ae88b"
        },
        "item": {
          "id": "abf77592-38b4-4e45-9274-787d1d782f0f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a17553ca-6fcc-450f-a4c0-8dc658d0239f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff952e3-d31c-456e-bb27-312d8ea3ddae",
        "cursor": {
          "ref": "2168bc2c-f3e6-4b98-a2be-a9a00b99f2df",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "004baedf-c7ee-4f98-9aad-785c7a41b881"
        },
        "item": {
          "id": "2ff952e3-d31c-456e-bb27-312d8ea3ddae",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c1b69eb3-3b40-4d45-884f-03b0a7365154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776ef3b0-0fec-4d75-ac4f-96224fa3e8dc",
        "cursor": {
          "ref": "6181681c-50b3-4296-b689-2f4cb07f01f4",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "2d189952-a3b0-49ce-988d-0358fc8c5eec"
        },
        "item": {
          "id": "776ef3b0-0fec-4d75-ac4f-96224fa3e8dc",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6d942f84-ada1-462c-9804-44e0b424bc3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea09b45f-585a-438c-a481-d4a8b640676e",
        "cursor": {
          "ref": "08664eb3-f915-4499-9416-340f6d7b048b",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "530c2b07-be02-45b9-8906-b3d46a6b7879"
        },
        "item": {
          "id": "ea09b45f-585a-438c-a481-d4a8b640676e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "fc4ead92-e5cc-47dc-a54d-430352d87320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f4a16c-d9b9-4ba2-8c70-1bd42ebd8a0f",
        "cursor": {
          "ref": "aebbb5cf-dbfc-4806-8f72-78fda0268d23",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "bd85e7e9-6c95-469e-8c08-1df736613367"
        },
        "item": {
          "id": "b0f4a16c-d9b9-4ba2-8c70-1bd42ebd8a0f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "25b4a99a-bca7-4808-9dad-ca8ec990d815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883224d4-cc2a-439c-b0fa-80ad6b37dcc6",
        "cursor": {
          "ref": "7fc0ff5d-894b-4c4f-a859-5ac665dc3ed3",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "3065896b-b8c6-44ad-b01c-3c1ea36652f2"
        },
        "item": {
          "id": "883224d4-cc2a-439c-b0fa-80ad6b37dcc6",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "873b5406-64d8-4dd0-a960-7136f016df55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cef203d-8061-4265-960c-78658aa1f3d0",
        "cursor": {
          "ref": "7677dcf5-f935-430f-a7c7-5790f0e86a79",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "80cf314a-49f7-45b0-86b3-0f2e645e11db"
        },
        "item": {
          "id": "0cef203d-8061-4265-960c-78658aa1f3d0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7b9fbc70-13b3-4be7-8235-3c95ae7b11cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a5a7ce2-17f4-4505-8f17-9e74da753ac8",
        "cursor": {
          "ref": "7684b5f4-5573-41c6-8d88-858ee5956d49",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "f7ceda3a-28a5-417b-aebd-66a339fc7d18"
        },
        "item": {
          "id": "8a5a7ce2-17f4-4505-8f17-9e74da753ac8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "fd5a63ee-69f0-464e-90c9-c286e6384203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c35c20-910d-4ba1-b9bd-f478d1510f51",
        "cursor": {
          "ref": "cac9d1f9-74f7-4a42-95d0-ed7de7535e20",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "17fe1061-acb0-4fca-bef7-4f0cc73baea1"
        },
        "item": {
          "id": "b8c35c20-910d-4ba1-b9bd-f478d1510f51",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f94e2297-7b03-4093-b73e-c6ecf7314d1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc8ff93-5e77-49e6-9c3e-562aeb8c49d2",
        "cursor": {
          "ref": "aab1a177-02d2-4041-8deb-10c61810e9cb",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "92c5b86b-8bad-4829-9273-07da81f134e8"
        },
        "item": {
          "id": "7dc8ff93-5e77-49e6-9c3e-562aeb8c49d2",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5cc823e3-5b89-4113-a548-14089f798c6f",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "779cf45c-712e-45f3-b117-399d177eed98",
        "cursor": {
          "ref": "881030a0-4507-41f7-a7ff-2e42622aa5d6",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "0b1f7aaa-b621-42ed-9bce-490969db8aef"
        },
        "item": {
          "id": "779cf45c-712e-45f3-b117-399d177eed98",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3ec295de-89ab-4f37-8079-a6837425555a",
          "status": "OK",
          "code": 200,
          "responseTime": 181,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad179ca2-ce17-44a3-9cc8-5bf2bc0ac139",
        "cursor": {
          "ref": "09feec85-b090-4acd-97dc-a9b049529c97",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "6ce53d10-0116-4f50-bce2-7baaf0f992d2"
        },
        "item": {
          "id": "ad179ca2-ce17-44a3-9cc8-5bf2bc0ac139",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d5c12758-0480-4ed7-9004-8ef4bcff8e5a",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb66e2b3-b300-4ac1-b87c-10e13bc32072",
        "cursor": {
          "ref": "87c0c748-8dbd-4444-bb36-a80f813e149f",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b4541765-0b71-4b8c-9ba1-702461cc942a"
        },
        "item": {
          "id": "fb66e2b3-b300-4ac1-b87c-10e13bc32072",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2a4be13c-d458-433e-8a40-87d9cd40fd5c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb66e2b3-b300-4ac1-b87c-10e13bc32072",
        "cursor": {
          "ref": "87c0c748-8dbd-4444-bb36-a80f813e149f",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b4541765-0b71-4b8c-9ba1-702461cc942a"
        },
        "item": {
          "id": "fb66e2b3-b300-4ac1-b87c-10e13bc32072",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2a4be13c-d458-433e-8a40-87d9cd40fd5c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d10ac4d2-edb2-414a-9b58-0e161aef8f1d",
        "cursor": {
          "ref": "9ba04392-d2f4-4d63-b262-f38d26206f70",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "5d085e83-fd67-4d2c-ad4b-a08d0ebc075a"
        },
        "item": {
          "id": "d10ac4d2-edb2-414a-9b58-0e161aef8f1d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e9e72f39-e0a4-4d6e-ad41-f534e8571196",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08429ca-5d84-4d09-82d5-6bade1ee5d43",
        "cursor": {
          "ref": "dd728a51-a9b8-4a5c-99be-5c5338860b59",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "75612f72-aaa8-4728-a612-1f5b02b31404"
        },
        "item": {
          "id": "a08429ca-5d84-4d09-82d5-6bade1ee5d43",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "48a9160a-0580-40ee-baf2-487d60c772d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}