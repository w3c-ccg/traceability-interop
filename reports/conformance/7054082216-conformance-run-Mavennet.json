{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "645b168a-fdc1-4042-83a7-aba73bed012a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "24ef5385-c5db-46f2-93f5-3dae143633b7",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "257aef31-cebd-4dab-b592-834ef2d619a5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "93e11e74-b944-4932-a1cf-fa6809f57a17"
                }
              }
            ]
          },
          {
            "id": "fa984488-3bfd-4788-8a39-d5a7dc51f3a5",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3a5501cb-d9c2-406a-8268-a673ff6cad8a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c42de6cd-5881-4b0a-a5be-21a70adb73b4"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5882d08d-4a7f-435a-8deb-f12a46ad352f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "df0d44e6-c42f-4e92-a482-aaaba5c285e6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ad4b7d36-660b-4226-9133-c5d11329c69e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "41bbd779-2f00-4572-8d21-eb182c8dd203",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dfd42da2-9a06-41c2-8f9d-a87afa8afb56"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "81aae1aa-2cf2-453c-b8d8-bb86a14437c8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b8c6e191-0dda-488a-a1c9-5f73cf896646"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dc0071d3-56b9-4d28-bc38-157bb1edb725",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7d90e120-7000-471c-a051-ef47ef71a481"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f3f72d29-e04a-4d4d-b274-92dc65232672",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "37072b7c-5916-4a2c-bef5-e57b64da087a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "64d9f250-97ac-4879-96d6-51c5a054e771",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "408c8bb3-7518-4257-b13a-af3e73e5db36"
            }
          }
        ]
      },
      {
        "id": "334f7acf-c97b-4485-8ca7-5e1a2a3ead5b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "13a16bdd-c0cb-4478-86b2-5e42a91596b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "23de00fb-3db2-4e4d-bc89-f2396f1af22e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "34302a48-3dc2-4beb-a018-4c1c4bccef73",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f93aa2-6c02-4ba1-8d63-ed566b299fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1b3dc76-dbe6-4822-bad5-adaa415f611a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf6ca0b-fa6c-488c-b8ce-b45fcec763f6",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79f3a55-531e-4d32-8d30-3784b1e2f379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1902e8be-f1cd-4ff9-aeaa-88cb867cc615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e744936d-cd6a-42b5-87ac-b5adc5e02469",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ccfd9b3-6c0c-4e3d-a77c-5ac9876e8a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "180f5376-5add-4ec8-bf3f-9128c31af0ff"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "de4f4007-a012-4552-9d61-6941315ac012",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2ce7afef-cd27-4fc4-a3e2-b99d16faccb7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73de923d-634a-423e-ae08-da51338ea15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e87f92f3-f663-4d6f-b6a1-99bc79ca21fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1920f2f-39dd-4906-840d-4f72847262cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8717c5c4-2bd5-4c98-bb0a-e7740dbd359b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "49d3b3cd-58b1-4b48-90af-39180b54d12d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9c080888-858d-4d68-b95e-089755156efd",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "adde5df7-b668-464d-8e30-4e3f96de3b64",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ebdf7df9-fbdf-448b-8528-e7b2a35e8364"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7f4d0f6d-235e-46ac-84bb-2bd7ce87005a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "09e8e2ae-6649-4720-bde2-51de89c4da3c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "45712794-3a34-4bfa-90fa-ea03ae005b51",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "549af0b3-90c7-4b53-b456-6e84344ef948"
            }
          }
        ]
      },
      {
        "id": "bb8069d8-a01e-435c-bb6c-904c1c1992ac",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9c7afeda-11cf-4a6c-88a1-7a5fee044149",
            "name": "Negative Testing",
            "item": [
              {
                "id": "462e7f09-25ec-4ded-a244-1b1713d2acdd",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "34702882-972d-4164-be93-19335bbc246b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7606608-6751-431b-bc80-cb91cfc5ed9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe6fe0b0-7c84-44d2-bd4f-2837929b82fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b91fb1-5b3f-4167-bbf9-98d1b8d991d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96ab6484-acaf-4add-92e2-c032e49df322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af1d439-e7fe-4a48-a1c9-76ce79a15759",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d95b11dd-6807-4c81-859c-37a229a2cf71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb8b1ea7-51bb-4094-9097-d8805967390c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a8282a-7807-4af5-8b68-cd553a6982f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2bdd487-d469-4d1b-b5ce-43e3482269ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54481eaf-bd8d-471c-a0ea-916c70f0f173",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e0e0cc-d4ea-4d56-9bd8-3fb7e8db57a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4afc2141-dd02-4bd7-bfae-322eb9be7225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4b765f-233d-4fc0-9ff9-a00156009605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01da9056-cc47-47b0-a711-036befd60b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab106a13-3efe-4e2f-8fb2-70858bfcc9c0",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d76325a-bc58-418a-bc75-8147b02086b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a5b6c61-b510-4c4f-b199-05ceaad230f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc56bfb-b60b-4c1d-9dc3-2b9491f895d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f167c06-fca2-496f-8a5c-865e7f44219c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc0fca96-2dcf-424d-a860-8d4b3b37be7e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e765e789-784d-4c09-bacb-19c3bea4ccd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a2460ab-2598-4e61-a777-b5a54d3e6e78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc43788-ac80-45db-9bfd-d333f282a636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "975a4b79-2ff7-401c-adf4-e20e6ad54668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab1051a-1336-47c9-8f97-2e7ddfee25e6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57df8f11-194c-4072-b12c-d41b615dea37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b8bc975-9bf8-4856-8c01-ee72ecd39049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4499109d-2db9-4935-a4fe-f353a6652912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3cbafc7e-818e-4725-a201-d23e440f13ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3c81fa1-415c-49de-9919-50f5dd65fa4b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "873a4048-76b0-4185-90fa-048f12838533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b369353-1270-4849-b9a1-48ab5c263a8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def465c2-9c06-48a3-b6d1-4a3e93e17afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "503c0fb3-a610-4632-bf7b-656e3296748d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7410d09a-9702-4228-8b49-5681d7b0347c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03869327-6b61-4357-a541-bbb4f81935a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baba0d0e-99cf-46f5-a867-aa880372467c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36fdc5d-a8b3-4524-9a9d-09c20562e2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8980f565-0845-4997-b70a-324d6a3b023a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa41668c-2818-437d-a861-1c5d95896ffb",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f87da5-855c-4768-aa3f-9aa3faa714d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6cd4fef-971b-4cc5-960d-33a4c4b88d5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42510c45-00cb-4e02-8e2e-e7ac9538b78f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1531f06a-35af-48fb-aea0-15d6cc902bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4ec498-cc43-49cf-a16b-99c4fb431043",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f57872e9-1e95-4ae4-87cc-70dc0c8453f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdfc3f72-ed0d-4ac0-98d4-3cf9da2ffc54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7060d576-972b-4107-bcc5-235704e73fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb56a5e3-5ece-4740-86af-183b9d7731d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c86139a6-1fde-4a32-9a80-b0f3f92ee3dc",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fad65ec-c492-4602-bece-1a9c94b5bdd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3379a8a-3a9f-4ae4-8c63-f70c6646eaf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a06a09ee-90ce-4541-97a1-e6b5d4f0c964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94f54dac-1275-488b-b0bf-015e787110a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee2b59d-e4b3-4ce5-b7ee-b537ac62ecd8",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb60c1f8-4746-4d61-864e-29d8b22b6bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36480828-7436-425a-88ca-aadef97822b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9eef0f5-19b7-481f-bdf8-d7bd8569fe86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "351abbd7-06bf-45ee-b804-987744b4db75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08e3175-899b-44cc-8e1e-e190d9cf3534",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1a90cc-8de5-4750-b115-57c81a3430b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbd7aff3-655d-483f-8d85-c992513f74a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73e9c6e-c136-4012-96b3-c19a7f5935d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f365d8d-1049-436c-816a-d783f7600b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f21041c-cd6e-4972-bb81-275dcb7284ff",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612846a0-ba77-481c-8022-bc6c01f63570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12ab7afd-7cea-419b-87ed-e56068a55710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191c6c44-b016-4e7f-8fd7-31c951b646d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff67e7b4-e8e5-462c-b2b3-bb63db79f7c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a0f88a-89de-4b4c-acaf-1027444a8cc0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "994a2648-4d99-4f67-8b0e-233293fdc1ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c2b1e35-5cd4-4b0c-9442-2eeffa6c4337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5095b02d-dc8d-4ea6-a36c-145a92bc486f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb8e6dba-6ced-4812-94f2-025792a8dfd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d36092-cc48-4db7-92c2-6784e5d915b5",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99cc0a0c-5021-4633-9624-7fa57b078df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e543b39e-1879-49e7-9b51-65a01ae88834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5598594-f656-4d32-8cdb-2f7132128942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a01956d9-109a-4482-a52d-b863a5f2931e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec9d99f7-fd4e-4084-af2e-bf1bc4d4bb5b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cded786b-bffc-4362-8037-57c915a730c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7db0650-6c4a-4613-a29d-61b38b8fdcb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b63f9e7-9ae5-4aad-8df0-d62c677a0cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10c3a3eb-130f-4edb-bb1c-450c2f1fec1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92467706-223a-48cf-834c-6c606e653ecb",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfadb493-e2b8-44ea-b729-4c11b98a3171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00e311df-71f9-4174-86cd-64dd26f63fb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f2fb0a-c68d-481b-bab2-be2cb875ad24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "789b798e-037c-43a6-a0e5-102b234c1a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0a6440-e931-416e-af65-44cfe0a6972f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "731b128b-933e-4712-a9c5-3240a6007bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f3b60d3-b159-402e-af39-d47c3cef756d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26853453-b5fb-48d9-9b76-0d969d1b847b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "01287b78-2688-4da7-9b85-bfbfc75fc01c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e8deff-b8e5-4c29-a3ec-8643e1429544",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1da4e42-3d94-4ab8-b9ea-a8f8237b045d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faec4d8d-8597-44a3-8d3f-19daae6d5439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a42557-8e32-4f53-bf6a-e7126a15f5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b2573d8-a474-4aa0-8505-ed81836ca131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cfd31d7-e0ab-4ef8-a33a-f298a3eca299",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2b00cb-cb46-412e-b593-beeacd44cd40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b59d439-22b4-4143-a6aa-115becc4ebc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c97fa9-1a2d-4295-bf34-dd0c252945bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f88a958b-30cc-4b5d-9f1b-0bc36e4a096c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832c0b31-6fe1-4827-bea3-44b454bc4c71",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8cc4d57-2c37-4d31-b1bd-4529d420c73d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92a267ab-d558-4603-8017-e71c718f2138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da781a14-8d7d-417e-87de-3310cf3c910e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5bc9e8c5-dc9f-4e96-a0f8-2337756e1f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6667b6c-62b9-46f1-aec8-33d32022e217",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "595cf0d3-7938-46d5-ae04-2273ce1de7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "732f4483-3cdc-4815-a7a3-949a3f017073"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db46f6b3-f611-4771-b290-4a877333b55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "78fdd19b-2625-4a56-917d-8560fe64657a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcbc227c-e08f-4464-b82f-f0f11004ae49",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33267dae-c5ff-4695-ab3b-a3e27b16e518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14a983e4-50ec-4e2f-9e7a-9738e7ac3fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973b6d7c-aa22-4f3b-aca5-5777af4fdfc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "46758ec3-62ee-44f0-bc8f-d2874e96d4d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf3abb5-e95f-4b0e-b3a4-a4c2ad40ec9c",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a298ff7-ffc1-4ed9-8da6-8eded2be9304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f2307b-777b-4177-a9e7-e6c90238c1c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c8f5cf-5e9b-4391-9bfc-4a9d2264f79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a86858f-fc4a-4afd-8c19-fec8c8357b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9ab081-b0c5-4e95-8090-bf9479ec435f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7cfcac-d411-4c03-bf96-9919bbd2d702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8950f63-a864-4476-a363-9e62aa20bfe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "296aebd2-dd9e-460e-8fb8-b74d3206c4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "65b4fbb7-a564-4d4c-9b2c-dbc4333b701d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ef427f-5df8-4661-89bc-47b5f02d25b3",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6e49ec-a085-4474-9b21-3a60d24fb23f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d9f1c91-4ce4-4862-a1d5-9331d7114319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12329091-a9b3-4780-8d19-114e0c79f356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "906f4e73-ef1e-4f55-afd5-5d976fad1514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "886a0c7a-02b8-4dff-b238-357e2db9037f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90d65bf-5e82-4527-9c5c-00b465390f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c60506e1-794b-4655-a957-bce4d0b681f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04dfb38-b1e0-48bf-bfbd-1949433c8967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "995716e3-ffe7-46ee-b3a5-6a16c54fa940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcdd1c7a-93e3-4ae4-9c9c-a2bf8be3bae1",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f553656d-0c17-4c17-8e58-8807877645ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "008498a5-86df-46fd-b989-39b617542a58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41e3ae0-59b2-4782-bb58-f0b5230385c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b63834b-e682-485b-89ec-df5dc3c2cd85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c852912-ec04-4b69-8acb-956d23a3ba04",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "633da468-0d1b-46e9-9578-2e046d9c0407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "550a0d8b-471f-4b81-890a-ada095ccdb58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd6b4fb-ad6f-47b3-97d0-a403d99359fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc2a85bf-52e2-4734-81a5-ac01df3f5932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af19daf-6b19-4712-87f2-67b3a422ea8e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ba25660-48ec-4d7a-8288-76842799617e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17412ca9-2934-4ede-a838-f095fd24b6b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab67100-fc43-4a66-ab7e-76b788cbbe80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1398b4fc-5642-4858-aa4d-0ead68f3bb07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4df821e-7b57-4d42-8914-eff1074d5293",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f4d17b-f021-4e3f-9622-346ec1b74f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78a84288-adef-4e41-80e4-5bc5a21675bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ede3a6-8ee0-4a6c-8a1f-0b895005c632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56dfa194-1c66-447d-bb73-2b950552ee28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5762c494-f7e3-4d73-b6e2-405eafd14de4",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d778dd-be2e-4210-818a-0bf37b687bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c59b6bb6-009a-45c3-99fc-3e8b78b9c142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ede3d9a-6d16-4948-aa3c-89cec1cf6caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "258eaa00-ffc9-40aa-8b2f-c071055c0aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6c58f6-32bb-4736-8497-b5d4e54ef635",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff78342-0a3b-415e-9178-b3bbdcedb484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cedcd299-31c0-494d-ba91-4111a728637d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a72b0d5-2627-49b1-b253-76cb9e529236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e1272b7-241f-478a-94c3-99aab731ece9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4e4c89-f4c6-4307-9609-d27561482509",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc86442-0bd9-4abe-87a4-9a45cbea572f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05b6a8ff-fcdd-4a82-865e-27d43b36f386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3081383c-1123-4a68-b121-71e7b4991a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "611d57ff-9647-4fba-a0cb-8317d649636e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84c2d3f-e976-4b7f-b57b-bce332c9db34",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0754f298-b1f5-4021-8e69-2a23300d04e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f91c1e6-a7cf-4709-9bc5-1dededf1aa46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3458bab-5219-48d0-bc47-6429205e0df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "31efc463-7279-4d9f-9cd2-2ab8b75d3586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38094e2e-557f-479f-b487-9bfd7b623f57",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c54b6b6-3d3a-49eb-b0c4-e75e56416a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be145c37-af00-40f2-b95f-b43d71b06bdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94b14871-d545-4390-8f7d-4d36ddddb05f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd0c6184-52bc-4d8d-9319-6bdf3f78ad39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "525760f4-f21f-4224-b73b-da6efbc1e598",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c852665-c74f-4676-ac9c-fd8eb33f1c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cab42496-5d5f-4cbe-97bc-9fed5168c5cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e08ea77-c5c9-4530-adf8-6878ea19f6e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c095926-1a3f-43b0-abb9-7e9fccbee5fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365332ea-1051-4784-b682-c80c7949a1e5",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf527979-3720-4427-8eff-c310721420b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd0f50bf-5353-4470-ada9-710dbf3a32fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf265b1b-7630-4866-82a9-95c029e1b69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "df642dd9-8b7e-4cdb-a0af-163df759f04a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d7ad15e-abc7-421d-b117-f6e6b3877d37",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18308a36-09eb-42b5-a339-f6bf5566112e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "591701eb-d907-4ca4-a341-1d7c77cb0e09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce5211d-2c4e-49a1-8701-6dc812548b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee2dfc0e-f98f-4d6f-832d-c757439906e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a9ed701-784c-4960-b84a-52e5817dd6cb",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "649e7cff-5d63-4f30-8e90-4e9b4349e66a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82e062ee-867c-4959-9240-33d38c4909a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830f285c-d78a-4559-9b54-859cdd09e005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f915f47-d48f-420b-8427-bf926f5e57ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32253648-5113-4a3a-93dd-ebb2cfc91ccd",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec566ef5-28f3-4e85-a41b-68a7caae0925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07898eec-5248-4fe9-b4cd-aad732bb3a66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67989939-882b-43c1-b1ac-ab950047a78c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "ad013ba7-1140-4653-b225-950f4d0b4800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea40ce96-cb16-44ef-827d-c27f05f65805",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca592cfa-69c4-48bd-8ce2-90c877fcb2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4476180d-0d1c-4497-9f88-528ab42da9be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f06b51a-bfe5-4299-8088-f76cb035c32d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "211d0678-3c17-464a-8288-f0a410093f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7f025a-6223-4bce-bf60-feef9c47ead1",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2617e20e-adeb-4cfe-a684-15006018084b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "140583b2-b2a6-4ed6-ac83-cecd73ba4974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c6c276c-e35e-4254-8125-560f388ea3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "4af17255-5a82-4ae6-838d-17f9318399c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f81be6-2a5b-4ebb-9ce6-78741a96286b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e04e23d-1b7f-4b7b-ada9-300b522b6047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5a3d493-c85b-4ff8-8c4a-d260effdfc32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4062520-6cf4-4c4f-93b6-c658f910eaf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "33c78404-23a0-43b0-b8a6-0d7f357ce311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38518c15-1bbf-433a-9589-c56d204a0616",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c310a690-0559-4d9c-b3b9-12f5975ff55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b4f74ec-bc99-401e-936a-dd82e48ffea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ddbcdd-2165-4702-a4b1-55f7efce4404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "72d60c0e-6a6c-434f-afaa-2859fade049b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f86dba-80b1-49d9-be67-a22fd71e7829",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be3fc708-c1a0-4a26-9f78-0c389f9b80ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "265777f3-b285-4439-945e-a7df50a5a280"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33897adf-b82c-4e8f-bdf6-d8327bd725f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a77e573-4ca3-40f4-930b-8e1d0b586bf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b46b561e-17ca-4a70-a5ed-11f355d0c5a4",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbee7939-59ce-41a0-9e90-79279e8d5e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89a49d31-9908-4416-bb49-81d7f21ef968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef54a1c-b598-40a3-8a00-8bd060505457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "56bca398-4088-4f84-b1d6-3dc7cd716fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b5ad85-d583-4999-9282-f9ca7e8fad3b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c2b70a-5d8b-4e26-9778-8f9bd44f74d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af01995b-69b9-4e93-a2c2-324b1832fcbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d74ca7-a0bc-4043-9e32-a289ebb578a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "36d14a40-480e-4d4e-be1f-d47f0ac1476e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23041f78-42ae-478d-8c9e-53c2b596b886",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe90303-eb87-44ae-a4a1-834c80f6cf38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f8d0db7-be0d-4f7e-a1a0-1f8d4c75e636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dbe50c4-bfa6-4904-9844-7f6316f014b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fe57d8f6-fc9f-4c84-8e25-5da7619ecef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9efa6b8-4fcd-47ee-9767-5171e2e0a3cf",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b62f960-8eed-4d38-a875-6ddeaf6d6494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be76d0a-0ec2-490e-ae0a-e2280199b76d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4e38d78-f8c2-49fd-b042-1533aee37244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5ddbb30-d634-48be-ad06-30551ee759b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953f317c-2e75-4497-94ad-35525f0220f0",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a40bf08c-e659-44f1-ab33-bee44ddce454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a5a31c2-0f16-4c68-bbaf-9959fc5a9716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f80021-047a-421d-ba96-70a2ebe1d35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "551decbe-c860-40df-88f3-cbe8cdb67d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10f30d5e-4e67-4661-8199-9654385a783c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d7ca73-a2ab-4908-8350-8cff8efca596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea3247f7-3278-4679-a75c-136a7ac8d45d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74d6077-1d6a-4ecf-81b8-9c0728f864ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "569fde81-3ef0-4a2b-b782-acb2098635b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5fe5ecf-bbf4-4ebe-ad53-7c7ede7cf286",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b08705-e268-4eb0-9f52-300c68003393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0cc3825-1956-49ff-ac38-5f5c33005133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b86defc3-3d35-4f61-8f29-300d51a19faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c780d3c-0412-4078-917b-f198cc1f3452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7068d0b-cc9d-4306-a63c-c8415f380119",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf31072-9c7f-4f49-9b1e-be071b46abce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8cb6ed0-5f1d-473b-85b6-d63367e87c11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e29be97-4f30-4648-b222-5b146c17a8f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f5a9bd5-ebf7-4ebd-ace9-530d1874bdae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a57ebf3-2d0f-4b61-90e3-f5a95fed8782",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "594e869b-be79-4ede-a128-1c58e8e4d167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6273fc8a-e3e8-45fa-920d-d0e71b5a6c00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aac60e83-ffa4-4fdf-97e5-4d8441ab1657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "52064d4c-13eb-41e5-80c8-b8d8516e71c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a753da-cec3-4596-a823-6bdec42a2961",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c0586f-e777-457a-b2c7-b527760ea3d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f87279c-2cd8-46df-b52c-e07c47374faf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e994759-4d4e-4489-834b-ac1e452e9162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a9dc093-558d-413c-9092-17aadb408b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "900c0210-7f24-4d03-aabb-89d6d1ed3e85",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "567ce613-18eb-4223-a19f-904193873aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9e5b7a0-b887-4e35-b32b-189c9414abad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be60b28-be02-4079-9cfd-219092275385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7573abd2-66c9-4f0f-a084-4bf99cc09790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7faa085-899e-4c6f-bea0-bf27538a1cfb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10dd0aca-6834-425b-85a2-37c1de1baeb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4669356c-137c-432b-9850-5058f8cb1496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "080046e5-82e8-41f7-a540-de30635abffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6188e8de-d4fb-424c-b749-d06fda1cbace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bf7dcc7-92a0-40fc-b63f-9e3bf6379814",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f8fed4-5588-4be3-9dde-8543ecdf8f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1976357d-84e8-4979-af3f-07e680bd1118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f444002-1c69-4038-b8eb-9a53dd0c10a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b038c07-73b8-4a7d-a5a8-682518dc108d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "249d5a96-4334-4588-a4be-ba2d13224c35",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d3d3d7b-e726-4274-82a6-9f13fb91f418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf11dae0-7b21-41fe-bd2c-3fc974e03487"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1034e20-88f9-4788-a71e-fdfc81a33b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f74e61e9-c883-4c5a-8e59-f953a7125e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e56fa038-c0eb-4a79-b3fc-ea03e1e883fc",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a237adf9-75db-47db-be1f-b0c8aaf2885b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5480d0e8-78a8-4637-b9e2-c1e2762550ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3968f2d6-8d27-47c7-9f27-d9bf7f2f4492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "15e13ea8-a558-4776-a1e2-0877ef3da08a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98577a01-96a4-4b44-b850-03eeb86afb30",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2df0159-993c-47a4-a441-46a5b4d2d1b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66ccb318-56e2-4f2c-990a-1d38caea43b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "759d2bf5-e853-49b5-89a5-85427a8ef02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4241720f-0812-49ae-9b36-ae888df63bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7184460c-d69f-4b88-b7c7-8624df951046",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d673dd3d-20a0-4d32-88c4-fe95fa0a682b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e96dae3-915e-4e14-aa16-eebb1501ecbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e135f8cf-f61b-467e-80c8-495c5f55bddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "16c31a09-0eb9-4721-b037-54d4e8259269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6dd40ba-c844-40c0-862f-81e536038e92",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4128ab8e-e866-499c-abef-d78b93176dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5be5e93e-b16b-4f76-a867-a68f71ad93e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e1aaa9-6cef-451a-9dee-3a1e1e1ab2c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "438464f2-3c2b-4d71-9d25-814c513f7c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2bb5134-6734-46e9-a909-7620c8d2bb41",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f11ee392-095b-429e-a604-3022a1b2ce72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3de4be2a-0e7d-47c5-8b0e-703afdb6d3f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f1684fc-2a31-4727-923f-0cbb3e3aba02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75d98bf4-0aae-4b0c-b409-1a4832797b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd98673-b20d-451a-a670-2efd1da3bb6b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "324d8ea3-4891-4520-8826-3a220f101f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca5ea927-be0a-44d8-ae92-66af6782afc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0547fc89-750e-444f-be9c-e0b543718ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7d8d8b7f-93bd-4ff8-ad18-115b91aee0bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5d354f4-dbcc-49fb-a8e4-b66777a35fcc",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dfa3820-0ea0-4494-ae75-a3a6c365f0c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ee3db72-1021-4e0d-b2fa-11a731f07061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc739a0-5f5c-444c-bfbb-ea4651cf264e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "79529cd9-1e69-4315-8283-d28fcf55e8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e463f9-f8bd-4b13-8ba3-2522726678d5",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe32744c-d9d0-4ae8-8d98-b31a17375f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "003a9c72-1dcb-4092-a0c4-d05292d7303a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92717d3-0b13-4eee-9139-0eecd4f6934c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "80b26e93-f9b2-45ea-8dfb-32c25881ba82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8896c65a-40da-45c9-82b3-d09f16e2b5f8",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "012f6d8e-b8a7-4d0f-be2b-941e5faaf7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85dab1ff-3722-41e9-905a-a566f6420259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34164c0b-fb63-45be-811f-1f10e236d6db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "963ac73d-57ea-4d4e-bdf7-6bd02f30d5b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f64e6919-fad2-43bb-999c-1b0eb02630ec",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a29a651-7d34-4d61-ad40-6455488699ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c93b0a98-b9ce-42eb-865b-fb7e6e36ec7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd54e986-e564-445b-9d77-908aa10914e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "846cdb47-a796-4fc4-aa6d-d7797fb6557b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd83f355-f840-4d1c-8058-6172adceb193",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a0c222-21c1-417c-9d44-fa365ab9188e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76ad275c-54a0-4631-97e3-3b831429144b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d7bb0d-347b-4c51-bb6b-7ffca35ae772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54d32976-107f-4596-938b-d5f42f0c4aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7942d0d-4aae-45df-aef3-7baab85c4cb6",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a303d8-6211-4f1d-a6aa-cf5b46f0ed26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f9909fc-14b7-4e3c-95a9-ff7d14656eef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1793f8-9b6e-4bea-80f9-2eec92a9cc88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbcdc9ae-0bb0-45dc-a410-c1fa0275d40b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75ae77b2-1816-4e5e-b039-e18e1f182850",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f1b608-cfaa-4efc-a8a1-461ad8658c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf5f3e5-9c42-471d-9412-c720cf8c299e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "442c2abb-b3df-426c-a5ab-38f8b23975fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5034fd61-eaed-4e3b-a7cb-81a5145c0215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f49399-ef28-49eb-8faa-12f93219e163",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f0b1f2d-1b63-401a-b9b7-33c5d2f1d764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c09a94e-efa0-4e3b-b197-ba78d4e98020"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c488e1f3-d02f-4c83-9e1e-ad7da0eeadb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "62f6b409-b45b-483b-8a98-e6eed40c7b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e252a3f6-d84a-46e2-8528-ce676b68bb45",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6756b2b5-449a-450c-b823-2595e92b8351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bd6e6e3-9e23-4bd2-a731-fd16a2753322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66c8e4a-4b41-41f6-a408-9765f37c7330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a6759b0-7c05-408f-97b4-7029f646b785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7e0392-048e-4e7a-81e8-2a165fc36c8a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b627d8e-52bc-4248-8dea-a845565ae507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0c4371f-5b82-4a7c-9116-8fa3e0ce5731"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8fcacaa-c402-4363-b6fe-b433a6694574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6253f42a-ad7a-467a-bf0e-7f399ac81297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a01eb2b4-193f-4dd0-8e4a-cff8aa1ef68f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9aadc44-b675-440a-a3ad-ef6cb85bd288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2d0b708-d4db-4fc7-b128-1609bae0b639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ced8b8f-cd26-41cb-96f5-6fff2338eaec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b96b534e-744c-497e-a6d6-af468aef5fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cbb0b53-961c-4362-9ec5-1a216a23c3ba",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ba0f1c-5b2f-419d-9a21-1db110beaa44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4d54316-91f4-4c79-a0a9-ad7a1dde0118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4650db90-5124-4081-9eb2-764d78f93966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fed530b2-6a97-4935-80cd-a932719755d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b488d355-eef0-4655-b4d5-e5d459ce1927",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b76899d9-d41c-429d-a4cd-dc93f5b28949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f4c00d2-aa6f-4b09-97b8-ac8a7967f671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e75216-5830-498a-92ac-5dbd651a1992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "14b4207f-0860-4343-b254-ad232f1cb092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2452bc1a-fc6c-42e0-8a9a-6e19680526d0",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb54423-d262-4a51-9523-fcfc0de509cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07a06de1-a86a-475d-906a-1fd9b4d90e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd63255c-8cce-4a4a-9354-13bf6886c848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "75dd4f54-c283-4806-96c6-79980fa1a157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a49f9cc-a3ff-46f9-97d0-7cb76ad60526",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb71060-8777-4e2e-a719-bf0e4e734354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9606a779-159e-47cd-b7f8-0b50dc70875b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c016894-a707-4f13-bee2-e8d939c805d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d76177d2-1ea8-4f84-b35e-5c0d884f689d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741308fd-905c-457a-a639-641ed37a754c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "841ebcc5-f369-4ece-a9c8-2d678e1faa83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12235db8-2da6-425f-aad6-1d6fca2e4e9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd97f934-5684-4419-bbbf-8379b48dfd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1470ab6b-9e18-49a3-aa33-ed67fec2ae61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b999f45f-8e18-4645-9b08-19829e592314",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "444345d6-cc13-4965-945c-ac4087fad8f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee34f230-6f54-4ce4-a3aa-c65e1936c29d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9630d8a2-3049-4bbd-90e7-2a83616de6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b014aaf-3c6f-4261-84fa-63997ddc9f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f35a5c41-bf63-45bc-9264-420f85e0a3b3",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00cabd87-0fc1-422b-90c0-12a828de7f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6788a065-9539-4922-a975-a43d6aebb26a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5599c07b-41d3-4125-933a-640b5e4e007b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0adbf369-b372-450e-bb2c-7425e2e278f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e96719-e46f-4d1c-aa42-7fe4f28ac2e0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4ea359-c169-4db6-beda-b2a33876d120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8646100a-5e49-4d39-8f2c-c652fb3e7d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434f6fe6-d18b-47b5-9f1c-20d55645fa1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9592bb29-474a-4b8b-8c0e-566d77ea728a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0864b0-6111-4906-afc6-ac42fb9fa51d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d028319-9cdc-473c-9d0c-b3718c069560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2474afcd-36f6-44a0-9281-e3dadc31afa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf0f7d0-fce8-4e17-9130-e90128b0dbf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5435908-bf3f-4879-901f-12e665070708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535742eb-2504-41a3-971b-891c2dafecd4",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bfdfa07-310a-4f9d-ba9a-a02e7d7d17ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37e0d6e9-9131-4618-87ff-7ea12ff790d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e43445-6280-4cbf-9b8f-6b11c033cc1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "71ca8024-4512-42d4-a4c7-1d6b8e1b4c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f640046d-0361-402c-8fc7-1d749b9f78b4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c10f5c30-00ed-4aec-8ea8-a663bb82b219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c125d760-f4d7-4767-8a53-2bdbd1330533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41fbfd4-e999-4ee6-934c-3fb418027731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e4a6e45-2432-4dfa-b871-58f92334c610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d34d93b2-316c-4e97-98d8-85e6158deece",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac009a3-c128-4a30-8293-f29bb645c1c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4769cb7-de7c-4398-b897-5520934c73cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "522558df-e29a-453d-828b-ab6387e54d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1036a69-2a56-4854-843f-67c519f95f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a17f02-c485-46f9-ab1a-aa6998f15206",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5cb25b6-de58-4ced-b1b5-e34dd33e5706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1408f664-a1ae-4169-bc96-0bbb091a3807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de35358-4e94-4fe4-8b10-07f0a0235407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a25668b6-75a1-4496-b04f-82d02f2b3d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad6d0939-4917-4b51-be72-04031afe2e55",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "438db73a-602e-43c5-92ff-7cc28f16a15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a8f9ba39-4994-4ead-9a71-47084b8993de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8627622f-4ec5-4b94-82c8-604e3f082cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "eaa091ef-61bb-4cfd-aab9-4f5d32864fc2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cd65de0a-f8c5-4e35-9223-2c21f1e81f2e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "405d2d57-39be-4c40-95bc-76f77544bfd0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3742473-b9a1-4882-a67d-35e5651c7cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "369a273f-a529-4b58-9cfc-efef2ef598cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1580c8-407f-4484-bc6b-ed73bf38b58e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3153f558-d067-45d1-8de6-4c00becc182e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "759862a4-778c-4023-82e9-cecf33f16374",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "133d75b2-7e75-405f-a886-4bafb1ea3cb5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "38c7c471-b8de-41e0-9978-f9d9bbb1d1fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e920af7-5ae0-4a5e-a69b-d9517c6b8727"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4cc4a8e9-fcca-4233-b1f2-bb539d8c7a5b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0043355a-3ffd-4e7b-a686-462ec238f36c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9b720a51-8b02-458c-8b62-a0ae239e1356",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4dcb5817-cba3-4981-8199-60e3efcbaa13"
                }
              }
            ]
          },
          {
            "id": "9f7ecd70-b633-4e11-9d54-3fe8ffd5ed44",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cc65a52c-74e9-4c07-85de-acf78209daef",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "994ff92e-3fdf-4f62-9d3f-46335596d691",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6a69d2-26fe-4eb9-bd06-f901bb0aaa08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "55e8fcf3-56c4-4b12-82de-d1955b22f677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf688b0-d536-44f7-95db-a6ac3f96f4a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a4fe986-b0c2-4b24-9a4f-607a178d410f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9f1bf873-bb2a-47e1-aa01-d6793fb6bca5",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "970f9a62-e2fe-44b6-abe0-5602dd948688",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "30a6dc05-f1c1-42ba-8124-33dbe7c2da27"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd2075cb-1db7-4ae3-9ea3-4b28337c93b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d5f64dc8-e463-4e12-9b4e-3e3f4ea0789e"
                    }
                  }
                ]
              },
              {
                "id": "f3727e4f-ad24-4164-a01f-ba8f506d662a",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "184eaec9-4053-4d93-a979-301beacc1c81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "37fd5a9e-6de4-41ea-a797-47ddded57fb5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7de6d1d9-4b85-44ce-9bfd-f74f7c480ddf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2a9342df-ba7a-4e8d-97d2-89de02344c7a"
                    }
                  }
                ]
              },
              {
                "id": "8aa883f2-cb4e-49b7-8e0d-d235e412e99d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec1cf7c9-6ea0-4bd8-ab70-30f7c0d84e7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c7de16c9-335e-4689-b419-cbc2504ade24"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d24ef1f-5925-4bc4-9749-284ad8e447a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6e8f41ec-aa59-44b9-97a8-e75b9319f6b8"
                    }
                  }
                ]
              },
              {
                "id": "b904dec7-3b3c-4461-9bdf-e7f110b6f915",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "37c4c090-e8bc-4e07-894c-7fd53553d6cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "77e8c65f-ac64-4dbd-a9fd-b52a2573bcd6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c3c54a1-d6c8-4b98-adb8-c4043325c039",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "72668970-9fc5-4335-8d9b-8bc32ddb109f"
                    }
                  }
                ]
              },
              {
                "id": "abc4fadd-20be-40d1-ab79-90f4c9d8adb4",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "470feee8-5108-4168-a46e-aada12448f79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4785bb28-3482-4da1-a031-8fef4eedd2d6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1bf2d9f4-ee3d-4e15-9174-fa2587f1fd05",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a14cffab-f06a-4e77-9e7b-81018875b9b9"
                    }
                  }
                ]
              },
              {
                "id": "a57e8dae-c3b2-4993-9649-da32d29670b0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9576ebd9-3678-41a7-88a6-3079970e6844",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ff95a89-80d3-462e-b899-4bee3f251ac4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d14e393-8f19-4580-bced-73220b4119d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f2537fe4-eca3-45eb-a123-7d68bb5d7535"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f345a8ea-31f5-4fad-87e9-45239f666e5c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "04542519-f240-4a49-9f49-82e5df567186"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "98e47e73-5033-439c-94de-dd1167e3471c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f0a7f097-15f1-4de4-842a-afddace1ca8a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "53ef51c0-0967-4654-83c2-573238104ff1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3d6523b7-5a4e-49b5-b6ee-3b3cb08c325b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eaf43be6-3701-43cc-8cd2-34da51665f0f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "62f85cff-51fd-4259-8857-9382901761be"
            }
          }
        ]
      },
      {
        "id": "7a064a5a-1a65-4563-ae34-d94902d65825",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0fb88ec1-b38c-4896-9b58-7b12e061c4cc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "98d44bb3-47dc-4079-ad72-6c786529c6d1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "18e6aad0-96e6-4e45-b5b2-82a1a6dbed81",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee34db6-6842-47f7-98a9-fd00397174df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ae05193-2953-42c8-8b4e-aef722e54249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913f83bf-69a7-41cc-9b19-636e9ba13df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "15b4e54d-7b65-45ff-bb42-435a06cb7469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc229b9-7d0f-4bf0-82ac-8a6b8e3c69a9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee3dce0-7288-43cd-b9b1-34970217a14e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5349d0df-f814-4268-aa01-47d4f58780d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74eedf7-4f37-46f6-ba98-78ea4e435d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "332cafcf-acee-43d5-a817-815566413d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a340f82d-769a-4e59-ab0a-32faadb680ce",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "823813f6-a595-4f75-98ff-1ee7e2a95a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d20d444-596c-43cb-960e-0571078f2840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e7f153-e4f8-4544-8246-cd44ccd99bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f0b5fdf-fd83-45ac-ac04-6ed4d68f1a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de79f61a-386d-4e13-a692-b5cf89adfacf",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31860686-2395-4ffd-b2e2-a0f5920aadab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0048b29d-94b0-4826-a98c-32dbb5e4e985"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07037b9e-6d01-4a68-9ee9-0b9bba45d8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2ddc1c7-6945-4477-bb4f-3a3b50822029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b72b884-f856-473b-b409-2b5b635f4fbc",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb85c467-5cd9-4140-8ab5-10c1bb889eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d82a4966-d679-4199-93e4-84ff2f41015a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24386293-c47a-488c-b13e-66449963999b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1da5a3e-b36c-407b-b8da-517bcfd4dd48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af7b6653-c07c-466b-a433-c58d98a7a1a8",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db57a4e0-5f60-4e09-919a-1d47d2e63150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0cd5f95-4c08-4b6d-b2e0-4aee3859384f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c18cae4-de7e-47e7-a37e-abd6f7227eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "95102b00-a6ae-4cf0-8730-dd9d6f7d4dad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9786e1b8-bd45-47fb-ae3e-00939f6bcce1",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75735a7c-383c-4425-8ef1-cb403a3cb177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "609da53f-df85-420e-8fc3-1feae04538db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4352c186-8fbc-4889-b18a-b97c9c8c8261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "71e9b2e6-e939-4e4f-8d74-36d718b5356f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b0feb2-4f63-4784-ad3d-cbb334076749",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d62aa9-9935-4745-a04d-1cdcf2f2568e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7276dd6a-5c76-4e8c-ac62-371ed6c54ce6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64fc18ec-4d2e-410b-b97d-45fad0ff6449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5770d7ad-cd5f-4873-b600-8580f5118ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410ab706-502f-48c1-8402-b05238d35814",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "535d08df-f2c5-46f7-9765-8c81a7a861db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86120542-4416-42b2-a1be-c2808602a3d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18573426-3ba0-412c-8f98-8325a8930b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "11434b05-d7f6-422c-8431-050c057339d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd52e2aa-9fd4-4de2-b88e-c1bb788b0208",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e4cffe-cd4b-4ac2-9620-a58ca4ed544c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21fc1c67-8f28-473a-9de8-4fe0755c1e66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5798692b-7187-4ef6-aa96-179b28d10bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2331b660-9052-4ff4-b159-ee6f80c4a0be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf340411-98f6-4946-ab01-23e8be9daad3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e6c7005-3e29-43dd-9213-70f14bedcfb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0952530-3c05-420e-9be8-feddd51bcc05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e483ce5-9744-4958-8961-cbe205caa8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "86fb9826-c542-4248-abe3-23959b7c9abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6222791b-c6de-4af5-95ee-892317383440",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6371bc2e-5218-4684-ab74-8e4554f13c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2cc32ba-5041-49a3-8872-c8b40c43b0c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e2d530-e116-4664-98b7-e8a6ac41a0d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "452de268-ac6c-4cd5-b652-aeb0cebf49eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f32efd-998b-4360-a7f1-6a9278e190d2",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2115d9a1-c856-4bd7-8bf3-227fcbf88dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87a7d959-db5e-4cde-85ee-9eb91c6be717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e33039-a60d-4201-8b62-ca7307a7dd4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "551deeb5-9615-446c-82e5-879492983868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fbdd372-82eb-4009-8389-07e3cfa1bc6c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74b28b2-e214-4ddc-a100-a12d451f5b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3cd1084-c173-4aa8-847d-cfba6b42414f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a551211d-6666-442c-93df-1b60dc2ba18b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc49a6ff-d5e6-4de5-b187-82b367585b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909acd8e-a651-444f-8818-0e85629626bd",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffef18e-849c-4eb1-b478-ff1ef2b3e77a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "001d5338-dd28-4de8-8532-243f401cd622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac6110b8-e4f9-438d-86d5-e0c697f2f5a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "49ab9c50-7546-4f00-b764-3fdb9e51b05e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba81735-b0a5-4b72-a82b-4183db2a72f1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e6828c-1aaa-4a4f-8722-7f9da73b33a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26c269c0-16b2-4012-ad78-f87163cbc86f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16a4640-1dc7-4470-9cd8-65304a29cdb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b1b5e70-936c-4e04-9f03-3590824d23f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c7bba8-3621-4386-99d9-f9988da86c3a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9b95d1-fdb7-46ae-a139-813fdf9bde27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b5cfad9-3cd0-4a43-bd22-89a9556bed11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f68109aa-bbd1-4532-b88c-c1e5be22a216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "914974d3-c6d1-4d53-b928-e24e8ffb15de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93279dd7-047f-43a5-a58d-346e70247ecc",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26603629-a0a7-4d06-9452-af967b03ddfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01cc5b2b-831f-479a-9b6c-59c824eab152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d4df2a-a078-41a2-b9a1-1b5e1add050c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b82b424-8b1d-482a-b0e3-f0f3324d6686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ccd894-aa10-4042-8a9c-fcb922903922",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed30138c-5527-440b-91db-68dc23a8daaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab19f749-4346-4f6f-844b-09065cd8ce3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d001db-8422-49a3-af0b-25137fe70d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5000b0cd-90fb-4649-8ba1-4973fc930f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41cd1432-4aa5-482c-a117-2a2d7931f5c8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dace2cf8-5778-4f72-abfd-d19470fb7a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7654b14a-586f-4f05-8631-9d39e4d56e51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5c70ac-382e-4b17-a094-ca509b03df3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f10dd9c-5b92-4da5-9a97-01d71f1cbe82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2475d887-ea7c-4426-b3e3-abd3cfcf4826",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f999eee5-07de-4d94-8b5a-127fd346ab9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d814e89c-046a-46bc-87c5-01d9be5e1b10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91ba169-eae6-40e7-8d14-a605e86643b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b1901ef-f185-4dd4-8eb9-e0aa978f2a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0cbb932-ba4d-410f-9993-a9815b1f96cb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "023bb0dd-376c-4c85-a617-96d18dcfea81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90076aab-d387-4078-b184-757b4d767198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1817a56-1762-44cf-a3b1-24428937c5c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ba0d4a9-91fd-4b60-88c7-23e5183714cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "105547a4-f51c-4713-a13a-2a11ec5814ee",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b76c82-fd71-4afb-bd69-d523c8dc0be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5425b801-04d0-4782-bd23-06e01a6e3708"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b66ae3-cc33-43ad-99fe-694414ced2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d11f891f-581c-493f-8e9d-92d136ab5e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab15515a-ea3f-4d0e-beda-5eeea8e3f02d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c7681b-6bc1-4252-b54f-df9089fb51d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78a28a20-acb6-4975-b574-b88034d5267e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497e5e0c-19fa-4d1e-93dd-e50ee36bd53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ef52506-7b22-4708-bea0-111fb9c7bdfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "109f67fc-4f24-44ce-a001-9d04583b37d5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b06f76-1451-445c-8fdc-2d41eee71b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e30238b6-6496-4756-b174-34e5902c0c53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c2b4f2-d47f-4014-980d-2a4860439e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bffe0219-6741-4b70-a3bf-9eb9ab42ecd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36792924-f67a-4c74-b62a-a6b92a418753",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b002e61-eae1-41e0-9763-34fc9245be27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "057bf0cc-6fea-4f52-9c84-5a9c95637ed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c1573ee-4f0d-4fc8-a7a0-9a658053d582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "452b615f-3783-451b-bbe6-8005857bd356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2143b1-cb36-4dfc-ae0e-9e546030a93c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c00f8563-c7aa-4299-8b11-9b544f889232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7378ad96-3d2a-4167-bb6d-b72a8e62357e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a9ec05-1b96-42f6-a7c8-02005cc1884c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01ea8e57-0bc9-428a-99a7-53135055d235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e839e30-e679-4b80-b17d-086b2b85f35b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "381b1b1b-d694-4223-9cdf-d22f6aaf93a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "499d6a06-90e3-4dee-b506-519275480725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99a1956-44de-43af-bb04-29048a074538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f754de3-0549-4893-9884-8479596be222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203fdc7a-d602-4517-87e5-0116a060781b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2a07e8-35c3-4313-84cf-99ad3e1720fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96e97439-3eb4-471b-9912-4d569ccdd0ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22229475-d74d-4388-b468-fa19ea07bcb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8ac057d-c435-491f-9cca-4fb2023d102b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed21e2cb-f913-411b-bb36-5dd9d20aa744",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb67d7b-5bb3-4b3d-b140-5932863097c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1318ad27-daa1-4c8c-959d-d82721d1f36d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ea78c9-9454-4cc9-93f7-ac86fda3dea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "404b94fb-3325-427f-a79a-2c6a2678128a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dade6212-622b-465c-9237-49bc361b69d8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ff7bcc-c5e9-4e2e-9c7f-52854aafdaa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e003d358-20d0-49ce-b8d5-4d66868eb947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d005b9-7cf4-4930-ab7c-5b383643f849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90634b67-d240-4407-9b8b-361841a03cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9349a9-b88f-492c-8948-ddb3e28e730a",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a01dcf95-e2a2-499a-8a01-4e15ad73a616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e19597a4-7cc7-4efe-82bc-33869ac6ebeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e93094-776a-43b0-92d4-cdc8846b777c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "769b85fa-bfc3-46bc-8985-855a3cd089e0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f37ce72f-a6bc-4087-baf7-a13427024ed3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ea6eaea5-9f65-4ad4-a8bc-d5ab8b9035dd",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61c00e3-d784-48e7-9843-e6878ca28b20",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c605e798-f31e-47c8-9506-0f2faf0cc72e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c8994c1-6113-4e73-ab59-8e1ca30976b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5a76fb9-dbba-4ea8-8dda-7b7b009adf8b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d041884-0d35-4e9e-b9c7-903571e4a650",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c82b0895-1c31-4264-9a56-94577b698ce0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8764212e-9c91-44dc-b145-d98d9ae14a1b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae68e0d2-9bed-4a82-bfc9-dc8316d9dc76"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a3ee286d-4a71-453a-a698-d726ccb959be",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c4419d6e-72d7-4a52-9c5f-7bc90e668553"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "429d62f1-02ec-4c76-b586-248e32cd941c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b9c6c887-a7fb-4dc3-b7ee-6d4cf519571b"
            }
          }
        ]
      },
      {
        "id": "45d59c56-5d9c-40e2-acd5-df8861fec30d",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "5aa52698-b46b-4466-a5e9-1d7d6f41a2cd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b1131ec8-7c3f-4d80-a9d7-5470e8c6b249",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c3c1f857-4e16-40e5-a233-5b57135cd934",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "669db096-1bdf-4276-8ae5-adfdd0a4e4b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e483534-75dd-4551-8558-54bc0085aa8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc3495a-621c-45a0-882a-404a3c626146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "57520e8d-0fc1-4fc2-84ee-2f5c6b2089af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f99607-6fa2-4c87-b57d-38f71dc89ab4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d6339f-d959-42ab-b615-ccf7401db62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4afcb7a-56d3-4537-9047-566ab18c4bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b410b95-261f-4e6c-baa6-bc9a10c7a1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "db1e8be9-c302-41a4-a0dd-13bdbe1ba34b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbbdf36c-0b4b-4866-86c9-5b520ed94fd1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddbe2ac8-67ab-4236-adc5-bc181256059a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4836a0ec-6041-4e3a-b786-066dfbe35a9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca4eb7a-236b-4607-8c45-2a273a581df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9a28471-6819-4df6-9deb-b756832828b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfdaf409-5f42-4bf2-b8fd-94197ed53283",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c779a80-dea2-45e9-80e8-f8db01614174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e908655-75df-4e9a-ac2b-7ab957268db8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e2df1e-ae75-479e-85cf-3f47ec85d64c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f418b128-3cae-41e3-945d-53036cd8401e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c621e70d-49c7-4afd-b9ac-f095c3af200b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e6132f-4786-4885-88fc-f237df3a56c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "877245f2-4355-417e-8dd2-18807bb81a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5bdebd8-0019-449f-8963-4bd60801cbff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e3db01-8fc0-43f0-b729-691c1fbc3646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d483e8ae-0da0-4b50-9ca3-3ee7226aa81c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "698968c3-4a5d-4afc-ad74-f69c4a897dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7c1cb23-8ae2-4d72-846e-60fc83113e07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a433cc1-c0ff-4634-92c3-1d9d4aaff88e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad48db05-eae4-4a20-a84b-f83fd9f829aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b47240ad-97ab-4469-886b-a622119d5225",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3331979-7cc0-4237-98ef-bbabc6b36290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a21a5f04-0e9b-43d3-9c77-ac2a4b39efbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0edb7d7-8618-42b6-8993-ae6bd4d7b698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ddd2b2c-850b-4f27-b864-ca09f983ee55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717a6c27-9292-410e-8e69-94250cb229e5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e583d4a-f954-4afd-8b78-80a85953cd60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d21086f-2c6c-420e-99e7-29ffdb4549a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f95e756-079e-4a68-89b9-ffde21fa68db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4624bee3-9db6-4245-80ec-0273969a69e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00cdceef-9967-4ea0-a4f1-31fb0dd91be5",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a86425-1f8c-4a19-8e6d-9bac5dc902b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f4e5448-6132-475e-8223-cbd134536216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53746382-7a07-4ca9-a071-b72441038141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d74ba98-e221-4d04-bcb8-2907ba721fa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b346ed-f28b-4ef5-98ab-402e0db7f70e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd52ad4-6a37-4c52-ad29-5c73ffa24a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14612270-e1cd-45be-a78b-72d91fb6841e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630e6538-fdcb-4522-a53d-e6a40f692a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "86ea30d7-dd59-472d-971a-1ec7590abebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd337e29-3d82-4db7-a2a3-cc29de3c2d7b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d8bb666-adea-4426-94e9-022363251ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19d09466-a354-436d-983e-576e9472c97d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eae04c7-3ca5-48bb-a9cd-42568fc46820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2945b7db-34f9-4cef-9b72-9951d069aa75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "007c865b-87c5-4d1e-b0fe-509262a5c663",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dad82d5-bd2c-4219-a060-8091cbc37f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b502b5a1-9c50-4ccb-84dd-b6deb07ff0c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52904bef-4b02-4846-818c-08c635883816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9b12080d-428b-4d58-9db9-e1c1c606e4f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08633920-b1e8-4d1e-be84-7f31af69966d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80420f14-b97e-49a0-9913-369cd159b1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67388fd4-6ce8-41d1-bb60-804f0f3b27b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10101f5-a70e-4df6-9ea4-17f28e6ad219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b12c4c9c-7668-4315-9c9a-fc8fcd92943f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d120946-53a4-416f-b701-99477df0a88c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b70cea-193d-47d0-918d-37b7b8836f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4df7933-e02e-4479-a567-e85d7464f2af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "570a0792-f734-44ef-b651-5855fb917b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "53698485-3508-48c4-afb4-f20ce19af50a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06317655-9c0d-4ed0-9bb9-94b2b06c1bec",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da86cb93-85d8-48f2-b8e2-623783832382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c09db90-4e56-4c02-9c1d-68ce359b3e4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa8f7656-d92a-4401-a225-c44a5d974956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e9f1abe-4c94-4542-ae3a-34ab3386dd8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c9b87b-3fd3-4e09-8c77-9d3e4e7d29dd",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84a415d-bbba-4139-bb6f-64127172eb9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12476c00-9500-43a5-a01a-c0403cd5b6d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1e06da-0488-47b2-a6bf-b8dad578da62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "555cca17-d76e-4af5-86e2-023f3df1fd39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d95d97b-6926-449b-85f6-f060bd45a1d7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6048aae-d715-4b1d-b5fb-e756dce00738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35d50181-8620-4b0f-99b5-5bb8dcf66c36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53a99a19-1525-494c-a1fe-891664943b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "79c1c5cc-833d-4a93-bd1e-89e53ba5a0fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cfee76f-495c-4a94-af0b-757c517d64b7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0b1be5-5eeb-448e-9b18-8682213348b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2346c43-4006-40a6-b44a-6ef173642c66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1afa18d2-efcb-4654-8fd9-37c90ddc7c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3edbf4d9-fca2-478c-8171-0fb9937a3fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c416c404-2513-46eb-95eb-56c6abd94f80",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09fb7cec-1e9b-4318-a95e-3b835a0d0098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3822491-760f-480d-a46a-47465a7d5a92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6cb43bd-55b6-45ad-af16-7ebc8b7c3c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c06ec7ca-9e8c-4828-aadb-987ae12bd62f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab932edb-1b2a-4806-b231-ee8b4bedf42b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a76d41-03dc-4e13-9d73-af86a6b3a11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d662214-3ddc-4f68-9fa3-ce4866543a78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a540f015-575a-4b2b-9656-a17aad0f6a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bcaff53-8226-4330-bb3b-66a6c0adea27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb9ac28-15b7-4415-87fd-9d22cf5239d4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c76018-a9f4-44ee-ac60-5df5bfd89ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abc2960b-29c8-4c51-be69-bfa61a90672e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df2a6e0-642d-432f-9ca2-53d6a7b92abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b353f9f-bbfc-4c8b-ad21-fb2a51c61626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56984df3-cc07-423a-99cd-6554ebe0953f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d3b6a3-61fa-44fb-a6a8-7075ab530295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a186d06a-4c03-4935-a13f-570c61ec574d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e03ed497-1f82-482f-a696-f288766dd9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6ca6a36-99e2-4681-93c8-48be2dadc04e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9b6703-771d-45df-b68b-f2fab63b9b7f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49caa247-ce20-47a6-a20b-e294fab6597a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c550e5b-19f9-4dd1-a03f-38b4ac0df30f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec502c1-9d05-4b96-91b3-976d0b51402c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d1146ec-cfd3-4529-bdbd-2f65523b6d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f69df775-f2de-4050-9865-98c7ff2576e0",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab42dba-6b90-447d-a21e-8ddf77cb9895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4412eb9-02ff-4c4b-a7b5-32f205fa5565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45578ec8-a53a-4953-93a2-d9b0ed6b481f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc8ac39b-1c6f-4b94-9636-2ec517c0e5c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31967e6-739a-41cd-aa91-12eefe756973",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f291886-5e17-4b3e-9770-bf1f5eb58ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3c9bf34-03ac-4002-a227-51a2bf0f249e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9026bcf1-2ba9-44bd-ac70-ac0fab98f371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40ae1425-8b85-4611-bf94-cb1bceb40720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60fcbb57-4e50-4f92-b38c-2a474daeaa05",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "232010d3-7d1e-4932-85fe-e1cc4972bfc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55f10688-0f23-4233-9768-89caaba0fb6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b4ed77-a2e0-4cd1-b35d-c29f9284e2ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b7d1cf9-fde2-4e16-8d1c-77ae86a019ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0050655-1b8f-4af4-b717-22bda1ebdfdb",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8f4735-e76e-4b18-b6ae-f86a919f4e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c51e0294-009b-486f-8611-78586df9d8e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b87df314-041b-4591-97c0-03281e86dac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f7bd1ac-642c-45d9-be13-2ae4ce005b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eead0f8a-5bf5-4677-bc3e-c61e35ce5ceb",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "191a5cba-7b29-4d2a-9e88-821b2eff44fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff08acb-13d8-461c-a33b-08b3c656bfe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b361da-4a35-482a-9e0f-acde7f1a099a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "212fed62-462d-4920-b33a-39c55af46d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8aae979-044a-4753-9cd2-0a535ac5f4a0",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1305a49-e3d1-40b9-8e9e-5da919b9a23f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efaa0b20-5551-4b5f-a4b8-35fdf8a0f3d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "906de2fc-6e2d-44c2-b77e-3f32bf36cf31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2845784-2a65-4000-bae1-7ea6a079efb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df6ae7fc-35e6-4cda-847b-ff10a6b4130b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e14a19-0fcd-49e0-aa86-4dd3a1026218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccf0beba-1851-4d0d-a5b1-774688685a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fae6101-b79b-4e34-b582-012454f2aee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71a95355-e409-40ba-9c6c-fb7873d484a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0766955a-311f-47e1-9ceb-33cfaa35a669",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "091dbaa9-add0-4581-9d55-ad9cddab647d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "206ce996-28cc-455f-9180-db4e7ee3a928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3561d92b-1403-4295-8781-3f604509ac1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4aacf046-25d0-4e3e-a5a4-273f8fcbde0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afeeef90-8888-495b-bf38-b2487a469e92",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d340ee5-76b5-4f66-9f46-69a40e7ceff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff50e4dc-70c0-4b35-a556-1bae68e7c47a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4098258e-b29b-4b62-b19b-c3820ab70fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "857e264b-6bbe-463c-9b84-9dad649f19b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01573921-9c1a-43f4-8950-48ffb281b85a",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f71dcc-78d2-44c9-9f8e-716cfb0dfab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcbf15c6-be67-4305-8d5f-0fbbab3c1a0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c718448d-78d8-4903-8a81-7f9feb5c0349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b68a4a92-3330-4586-b5b5-3b5bda35a61c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346bb60c-90be-4934-8075-3e20f1d7816e",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4733ef5b-a0f0-4271-9fc9-df335edd83d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa171d32-e864-4cee-83f4-cf1fef9afc24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e456dc-a284-4bea-b15c-4898428a5805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43f3cf89-9432-4820-9b2d-924e89e0517a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ce4c43-2697-487a-9dd0-d50349ea7029",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ab6008-0501-49a1-ae0d-b0acc7ecb049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88cad667-5011-4cea-8c77-5a5ea479613c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0b2bf9-e673-43ea-ad43-16a0f038d9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47f44d1e-e503-4962-b4f4-069aa06f2339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf210252-e499-491a-a93e-eb8a32951248",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b287b4fa-e54b-4425-af1c-f687284c39d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23af1fe3-81dc-4ca2-a98b-c7def1548928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf8af12-a64a-40e6-b63f-9c3702a1631f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61964e1b-6028-4451-885f-b53e397e1b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ee54e0-bdb5-4c8c-aac6-d6ccd336e4c8",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5df41ec-8ecc-4e70-8926-db2ec7423332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dfc640a-e096-4665-8dff-276102b65da8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0710e32a-dcf5-403b-a8a0-b1ea12930363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38f6186d-4b74-4271-83f3-9a264c3469c8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "17185aa1-777e-4946-b26a-36b5248a7cdb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0903ae6c-c35b-46b8-bc28-76f3e057caed",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c92091c-3653-4322-9b14-7bd68fa15037",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d0c46285-b875-4b83-b59e-7c13e648e29d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "840ec13a-004d-4cea-895d-f1dee8ab56ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d24f2049-36e9-41e6-9d29-0c66d4d1393c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c5b2d85-db0a-4772-87b7-c735c839f159",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f270d87-11ea-474c-8539-2db355b3d442"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "025663d8-c10c-40a8-a94c-51d8dce80da8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "369f9cd4-9600-43c6-87ff-40300cbb032b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f96d401-031e-4767-83ec-54765f6fd590",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "743b6f89-cb45-41b0-a977-64c9704fcee0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b5dea251-1718-4538-9329-4f56db931621",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8c6ef5d4-0feb-4372-adc5-78251f11b051"
            }
          }
        ]
      },
      {
        "id": "47c9f99c-8e3a-4880-811b-0c96cd9d9c2b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e249a262-fead-4182-acb4-feb5c209df76",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b74945a3-ebd4-4127-92fe-772c236204f1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3d7e9da1-6f15-4f19-9478-55fb983e1b9b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb2073d-5dcc-40c6-9378-dcd6c2d6e6b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d016908d-c619-44cb-a7b4-ecabdeeab332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19cd093e-d586-4d3e-ab25-9688eb036be8",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "589bc6cf-72a0-45a7-b4d7-cb5c303f48b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6ef8624-8a9f-4f04-b227-c8876ec140a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b50dd2-6c63-47f0-ae52-8fc074b1506e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9c6153-71f8-4980-a9f0-c4b4ace9c209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e8486d9-ec0f-4fad-a20b-bdfe755db698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab490a75-c208-41e3-b877-5f1b7db91a6d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74188048-0741-4581-8b47-635739b8d61b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cafd7734-6b56-4b05-90f6-e97ddb621a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89ae4a0-7c35-4e32-b9c2-16a0d9478011",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65902bea-775b-4e41-aaa1-41343d9ea513",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c95ada9-b269-4fd5-99d6-c0eda7f61e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c938c271-5f52-45c0-9e88-0b959c77a5b3",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c51287f-a7d1-43cd-9a4c-df91f48cb42c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8f355f8-c837-425d-8e94-c66c73d57150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c61a3c-637b-4e62-9cd3-4379da97ccea",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93ec7de-f261-4a84-ba74-eafd74680d09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6de84e00-af68-4230-a6c3-535f97307922"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10879ff4-5416-4f00-a377-43756413b682",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "609033af-6296-4706-9516-9158dc1604cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f866d3-f0be-4c7d-95a3-a5370b8524a5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05523991-7067-4e61-b1ee-9f5441b82003",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54360ea0-81c5-4392-b5ab-cb69c9b754a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c470896c-5803-4354-9bfd-838104140b93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61346852-c597-4e6c-aac2-dd11e15b46d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c41184-7ee3-460b-ac7a-2fd6700cd132",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed59c650-40cd-4911-8546-e7a2f84f6574",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39d3e5fc-a9ec-42f3-bead-4049a4a797fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc248998-2527-41d8-bc4d-f5b38df26a0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5012d582-ac7c-47bf-a085-68ccd22a99ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c507bd-c605-4ff4-b6e2-b29dc01b7035",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33f4515-f74f-445c-8aba-8ae47797efac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46140b18-97c3-41ac-8434-31b27fd8bdd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c55d37-5957-4220-8d12-c46f31af80a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf4d7ecf-9ff6-42e2-a578-bcf29e6d0e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e6e237-ec2a-4390-b226-c2a901bf842d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac9e616-3d5c-4e77-a2c1-60a36b28f6f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81470b39-572f-4722-9557-dc3230f77503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef72c6d-b8e6-4c45-afe5-04582b12d27c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "758a87e1-6605-4712-abde-3818e6193be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8941d230-d252-4e11-b458-889f282a5bd8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1252bfd-b8bb-4889-a42e-a1503a37b24c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6da261f-f4b9-4c30-8f16-7a5ccabcce2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed21fbf-c847-4f11-b545-44ae7d8e0e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1a026ba-5716-4de5-97f0-63024e762a01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa98c63f-e495-4bd1-87aa-6f7a1776b846",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af968186-8896-4314-9d01-6a8e67c7ccdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66b76957-9afe-4566-b68b-e03425d5e6f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca8cd9e-00c6-4152-880f-80ed580d0f1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "673a18eb-04bd-4de9-91c3-199e9e34b9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069d60c8-e768-44bf-b4c2-df841d85ca56",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd7dff0-4d81-4061-bfe6-82713d88acec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bc69e6f-fde2-49a7-bac5-5fb40ac8eb86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec2b562-9050-4b6e-964b-a241eab8fa86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7604e3c2-7989-4fa1-ba9c-8539cacbce9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4973ec17-8187-4b8b-9ad6-9d339570d23c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f7c78a-27dd-4fba-a44f-0431f64ca4a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dbf128d-3675-4394-a0b8-3a14e001a02c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "581f6660-51fe-4d37-8817-2e390efb49e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ec8dfcc-7387-4332-b894-3d7514db44c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704fe5bd-44a5-4a6b-ac45-447dca88a27b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b1884c-030f-4c11-a829-a262c1a14351",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22e6ecb7-eb1c-40db-9978-93e49f00c259"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e816009a-45c2-4f2a-a142-606ec90e9afb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10435909-9a0e-4069-b0ad-57a03329bbce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e84f3b-b7d8-4973-a966-5a5f1eea31ab",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c9e89e-d311-4169-8a64-574fd93e528a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84a4de74-fb9f-42db-ada1-b101d72ac036"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e82407-437f-4652-ae0a-8b41b5c9677c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99751ed5-86d2-45d0-b03f-7fb77802e642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f67779-afdc-4faf-a280-fb20eb9e8364",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ed3fe3-f157-4568-a0eb-e09c85c0aa44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "969ec48c-fb9e-4216-a7c3-206d5c938515"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e0783bd-baad-4ec6-97a0-95fc3e67f2fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37757e35-30d8-464c-931c-bb6948ccda68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77947372-edfe-46a8-b2f7-464c9aabc388",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0a1dc0-171e-488f-abe8-de316f1e3473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "994ce126-c24f-4729-b457-b0abc7e8d0ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e1af837-1acc-413b-a2cd-24d1ffa22c13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a77a73c-35c7-4d8a-b5fa-abc94702c042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12cf10e-a381-45e4-8cf4-3958824bdc7a",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "284e49cb-9a73-490b-8641-cb89b277379d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b01111f2-bbab-4f72-a4ab-d3d6c77dc2e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de51050-c242-48b3-86dc-c821b743ab0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c148a928-34f1-4969-815e-005301173550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4d753b-57f9-41c0-8bc0-dd4ffd56eb0b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0664d028-dd7b-4945-b956-d7e42c7aa864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3a6f648-f170-4c03-8fdf-5e88d7441b40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8235d610-1eb7-4c6a-b3da-deb55e59d4af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b0a1ec3-4c3c-430a-a19b-ad26be385c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2528e0c2-58e5-43f9-8e1c-c43bc8cc899c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c449f579-e32f-496a-ac44-3e069ce77db4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e204326-6f10-4db2-9563-a40abf332434"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e934028-b70d-48f5-bea1-23b419af26b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef34748d-b0c7-4ea1-ac04-a2deedd12eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a03ddb6-a6c4-4237-8c92-3a0778dacfba",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5af959-305e-45c3-a6cf-ca12e40d3188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f7947b2-a346-464c-a8f6-2bae57342fd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b69015d4-41fe-45d3-990f-82722f444bd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caeffbc0-f2b3-4387-96e5-de2285b9f190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86121a0-7ee3-4e42-85a4-0c765fe3a4e2",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b83a9347-4bb7-4904-b910-379f30b41500",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b8a453b-0834-45d0-b658-f2082840b5ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eda5218-28e4-4e11-94a2-56eff4338cc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a71f6b0-8959-4d8f-9a63-1eae017ffba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf0fcec8-7cbb-4d12-9344-6ada081fab3a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586beae6-beda-4bde-bdb0-08f6e5abcb12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40274f51-ea93-49d7-955c-d237936e81f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3a80b1-218f-45f0-802e-0ebd1d63139a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b17d09cf-faae-4df0-890b-26a4406d0471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51cfce70-e5e8-42c4-9980-81c9f710769b",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4557195-3663-44d3-9280-259973dd5add",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2515a45f-4276-40b3-bbe2-ffa9e2ad2237"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b8e5453-635d-492e-b63c-b69f87175f53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c13088cd-666e-49b2-860a-ca1736c5b190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d191b4-cd22-446b-9cc1-5f78adaba96c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "369c3cd6-e55e-4f54-9157-f8dc99fc9753",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90b4a547-9e69-436c-a9b6-fe975bb79bd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a76229-3727-401d-b3b2-9720de94ddf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fae699ba-af63-4f85-ba99-5ea2642c996b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7be5a41-dc11-4df4-8cc8-636f8ac810f2",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c16631-0700-4c67-9456-8f5992d40533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1cb14fe-4284-40af-842d-9c65150da280"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8526244b-6f6c-4319-8d7d-fcc5f942cc56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d776c935-61e5-4699-8cb1-1be907ba5930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8fad7d1-9d5b-41f3-943b-63d58b895f7e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d21c331-8427-44c7-8403-977615e7d1a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97698a15-1a2c-4c2a-ad5f-6e019c38399b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b26df602-4005-484e-98d4-7ce0247d1463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3898a61b-1a57-440d-9a2f-692ab00f6f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf5edf2-b591-4763-9221-9bbeb7360480",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5128393-b77c-4613-8b9b-4ef5ecbe19b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5c343b6-eddd-4758-8509-fceabeff97a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a796a70-a6b9-4f09-af3e-dbedb22961d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "858563dc-5482-4a67-8793-bdb939c84dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24151ad1-c99c-4747-9419-61df1450c382",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b60cd3-9dfe-419d-b1c9-6533855808d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a945c36-2fb1-4dca-a4e0-0964ffcbc655"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82597f3c-02eb-4981-bc9c-3c63342351e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da2076e7-8150-4f18-af48-47c3e5489c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb9e782-c454-4b2b-9265-f0cd71bfad4c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee9880e-8701-4091-b105-473a8781f96a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f3679f7-ee4c-49ba-b1b1-30bd3bd7b327"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "538967c5-c251-4fe6-9aa5-52a9f98421f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3ad2a79-3e79-41d3-8b03-691a8de17f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4862d032-a268-4c5e-920a-a53abb50e361",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ad9133-0ac2-4718-ad1f-32cb92b1b686",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70d8aba4-ca64-4518-938b-712a59d188a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69195eb-fdfb-4439-b847-386418c8d4c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "670d41b2-4a34-49bb-8161-ac1ea8bfcc8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fedc08d7-240f-4123-be47-90c9356e0fc9",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b52076b5-b910-4292-be21-a70a10ee113c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba4fef0f-43e6-4529-a2be-7a66ebd8cfaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a924b450-38b5-4811-a304-7d3a0fd1596f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "229f4736-d74b-467c-8dae-3da1ac124fc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f28e556-6879-4a96-8d97-d32441467d99",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995b07eb-ebc3-40f8-86bf-1b84d7baa07c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "651487ed-e5b6-4687-bbfc-edf839862b8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1d4ab0-c144-4bf6-9cd6-e071d898e0cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "370020cb-c3e1-4c52-b7d0-d4a02a72d6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79fb23b-aeed-4ebd-b52b-0a3658a4d250",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b902954d-56c2-4bfb-b3c2-53395cb5af11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "439366e9-055d-4983-85ca-0603db1c6bab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79bdb728-e894-461e-910d-20d233bd1a17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2cdd8d6-961d-4f08-8143-84d45bc27cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc81b18-79de-4266-89cc-915693d44694",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac20463-c9a5-43c0-baff-cf02eb2edee2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b12523f3-f293-4f82-bbe1-d30a272c5687"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbdb420f-6a60-40a6-9932-608de8db5677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b856486-1671-4685-8555-bbac4802f90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f83dc9b-8ad8-4835-b604-310965296523",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d0e12c-25ab-4f2f-a58c-35accde51b84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdd0c5a4-fffd-44cc-9080-c6c13a28525d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eaf526a-eb2a-4b64-b33b-248b7dd65c53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af68a324-943c-4b18-a50d-bd40bffea8fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237ef4f9-c1a1-4007-9c14-b836e7e45d15",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adc144b7-b81b-40c0-a8c2-3929e84e039f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2a5c70e-a599-46ed-96cf-096d1301a0de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7722031-f053-407f-ba19-020572a35dfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "079378fe-9564-46f7-bf18-f8783afd5904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f076fe7-d36b-450e-aeeb-e3721bbb5439",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc578b98-4ed0-4910-bb9e-acb6a5b4942d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69ae9235-ea0b-4fc4-b438-09cbcd3c98c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b836db0e-2489-4d6f-ac6f-253ab6eba57a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fd20c33-42d8-48b3-89ec-3fdd23ae7818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f43703b1-4a84-4ca4-afb6-d98693b8c321",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2343be-4e32-4939-ad4d-5bb72b347865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd12aa0b-db56-49ae-a2b1-a883f62b7bfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0926a0ff-4ea3-46eb-9550-adf80a081d49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8d89857-3b45-4023-a670-873a284a05ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4bfc59e-0dba-4250-a009-da20845a0342",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d035a9f1-4d1c-4e2c-9431-6de95b171f86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd214277-4875-4a67-a7f8-e48d38587228"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b8b09d6-a46e-4260-86e7-ead41496e1cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bf9fd95-4c05-4051-8c9b-79408279655c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cde73c4-0e40-49f2-b535-b3261ad066c9",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9f178c-8f30-452f-a8fe-7eb19f7cf4fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f18e41d0-b5db-4466-b914-89f3963a3ead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8e23be5-c436-4a4f-af73-7bc0b235cca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "395edc84-7a13-4d69-8791-e1d13db9fae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c95513-ab8b-4f20-bb75-17af48a006f1",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3287145-05f7-45cf-a213-b56b452e9e10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e532378e-8616-4ea8-8475-9a6456dfd578"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a3077f-3052-4b84-ad82-8d82a1041cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24cdf8cc-f3ea-4206-8258-7d3a07e09acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0dc45f-5afc-456e-bc09-e56026e53692",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00cc1c03-adde-4e70-9dda-30433a9a04da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c3ffb29-5b22-410d-bbd2-c6b558be9c93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7924d1fa-d47c-4865-bd5f-bf300a82bb31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62dd1b56-ce88-48b1-b175-b9fc6505cac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc45cea-bf08-43c7-9cf0-6d0f3421fca8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199655eb-8054-460f-a70b-b452e83c83c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fd7e1b1-6e45-43a0-9de3-ee330fb7a9b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "175fabfe-226c-4f1c-98df-f7916f2f0a84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b280a024-2c4e-47dd-a95a-d1d219f1871c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf56b4c-6b9b-4a80-92c1-1d879ccd936e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15913a8b-dea9-4e10-9e54-4da0ab9ba488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "564b527d-6ec4-4db6-aa85-38fa9f898288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "532cf756-9173-4dd5-8c11-9acdd32d9868",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e0be0fa-1447-46eb-87bb-09f868a85827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "266f6a83-5ef8-4d8c-a67b-9bec729a43f0",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca6eabb4-5a8f-47f3-bf44-8139becaa3b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea223016-8b18-4dd1-b20a-ffc33715091f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a042e2b4-1572-468c-a59f-39b32d77517d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da5e06a5-e253-48a6-8a6a-fdf1c948560d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7694a0-4f60-44a3-a440-a833f6322c92",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c54dbb0-5869-48e2-ba0e-6e728e79aab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "012b74ec-2752-4345-a0b9-ac9cbd1fe608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4fa5545-6cf4-44f7-80ee-dbc21626f936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95175371-a161-4ae5-b1b2-9926515416af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ffa8d0-7650-4848-9acc-7693c9712fc5",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbeab06d-c365-4cd6-aabb-0bca905e806a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "441d7a2d-b2af-46e2-af76-2b6ab4fa58ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e75b9b-cff0-43bf-ada1-f45d0dd73b47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f119107-1302-44c4-88a8-e5ef87985359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c192d7-d7b3-4deb-a4f6-60687adf1bc5",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae6af546-e1ef-4b01-ad6d-e3399e2a4450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c23ba3f-4814-4173-8b11-d138a5e75709"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae9656a-84ab-44f8-8d35-2de6f15066ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1756bf70-d193-4a8c-9a5a-03764b0bd8bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a86e81-e929-4b73-bf20-7c79cb758987",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2654cf5b-5aef-4628-b604-51133149b0ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "791272af-033b-4767-a59d-7869b44c794b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30649ea9-444b-48bb-a837-793d085808e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a43a827-7710-470c-a30a-e8dcd7d6ced9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "565a8e21-05b9-4522-afc2-898be8213a66",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a33119af-9096-429f-8fee-1f72a592e5ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98a8ef6f-ad8b-4423-b55d-da85d8b390ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b3ee041-43eb-4f80-a18b-07ff2fea2177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc6e1bc9-65a9-4cf6-aaa1-5878563b8288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa64209-9338-4e78-a78a-a4ddba6a5ab1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a6697f-3903-4814-bbc4-a31576d29d5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9841ae78-3b88-475c-a027-d320c75f416d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "344a0e84-b1d2-47cd-a291-5c5663c5e491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "196f7720-eb7d-49e5-b74c-7d7c330b32c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df33f42-1e4d-4478-b3d4-d13171ec813c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf56b2f1-3881-415f-bd23-1c0e2a961d12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34a9c30f-5315-4d33-92db-273cb8c57d51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce055e6-6899-4a26-b94e-7303e638601f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb043e5d-02b6-4778-9b7b-e9ac3f112f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2598ab55-85ab-4ad9-a04a-ec30128be85e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ee125b-2301-45be-be63-c24568897b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48cde024-b9b1-4a38-ae4b-cb1da3f2c267"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0a8165-e09b-46d5-a6cd-150ce4de78dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ffe998b-34cb-4499-bac8-56f016cd6316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d531d91a-5011-46b0-9b17-2a04c882da5a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd82a8c0-cf60-4ef0-b0c1-b4dc9d0c969d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6757638b-0714-4be5-bee8-0c6575a0ce96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d83f4c-64d2-4d03-ac6b-dad96b7f20b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "409b5c74-5edd-4a69-a4b1-1f8c44d7204c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "598e129b-4873-4ad0-a3b4-70d0196b2c71",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808d88ec-e7d6-412e-b592-c933b3c4bce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7616265-116e-4345-b13e-f1c5411987ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fdcbeed-c0b3-4e25-a5e2-522c02594e03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32bc73d2-d8af-4b2d-ab29-77eb8f8da952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3017eb-20ad-4ea2-bbda-81c247498b11",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732e28df-6281-43cd-accb-ff7b60bb284a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81f61102-51d2-4cca-86af-2f8b3ca0422c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1509bb2f-16cb-418a-9940-7ce22a1b9f28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01954857-b262-4317-ad6b-c2ccc4cec619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e7e39c-2dc2-4525-8541-37f5111b9224",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9953876c-771d-4b5e-b6fd-7ee9273a5ce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff768c1e-2637-4a09-8381-0918ac9d8a16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b42844-4ddc-4f95-b560-04f472367275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "060a5b33-1d8e-400f-bfee-ef1b2bd654e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77497e1f-10d5-4345-baed-1acc4614e82b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f643a7e-32df-41ab-ad4d-e888bc3f4383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbfff2c7-14a9-4f33-ae97-649579c63d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32495e5-23a5-4e35-ad4b-5104ca1a3fd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc09f632-66de-4741-ac34-156926227b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdce274d-8ccd-4b83-8239-1285bcbf1785",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9335fd4e-e953-4b8d-b529-68690ba4f0a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ccb5ad5-679b-45f8-8378-86b127f45d61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba387f99-34db-4c6c-8745-32c5ccea6333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0320bcd0-eb9b-4d5c-8a90-dfc1a559e80b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4f416d-2d7c-4cac-be39-5e044b1ffd08",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66ca217-2167-4efd-bff2-c258070798cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24657f40-1f35-43d7-bc66-4298e4f2eb4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29686583-507e-4b2e-bf8a-9867eb5bda48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6ba2913-93f6-4049-8076-a6f83857a6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d1cd63-ec80-4f54-84c2-64409edb79b3",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8daf1c4c-8cb7-4a73-9494-3f5c40c2106c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f19a5786-0f27-4294-afb1-0dd92cd257c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f8b6f49-0ebb-47d8-9f79-81141383b47f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74aa998c-7740-409c-9fc6-87e2c9e9e7e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b3a48f-8830-4cbd-9f32-668bd12ce33f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a16ce1c7-16da-4a7d-a246-7bfc539fda71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bed1d00-a12c-4b1b-b429-262ad009fb74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "882a80a1-19b9-4e15-8d46-f073a0421053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7844f06-98ea-4e31-8fb7-17b340629ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b98da5d-52d8-4241-99e6-44e7f232cdd1",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b80a633-71b1-4343-ae50-087aff3e8b13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2698d727-32e2-4a98-9ffb-502ca8bb1598"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e801dab-e546-492c-9771-960b7092f08e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72730ed8-6bcd-434c-9af9-d74618f2c1c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9debf3-d88c-4896-8353-02c929b4cbb3",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a337cf-5dbf-4453-9272-899b98c3709b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "925b4206-d082-451a-a0a3-6b2daa3190f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1231892-ab19-4e0f-8c2b-554ab178b9c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "795bf178-0cef-4cec-858b-1984c165d993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a4d31e-5d1b-4e09-b346-1823468c4de3",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15844d81-8aac-4004-9e8c-6d965226c6ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa7bf700-45be-4147-bae2-995326f7d446"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9429e7b9-57d2-400a-9643-4cd54933ccc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3509c898-5599-42a6-b477-ed3f2e3d42d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7821c7e7-409d-454f-b890-ff896ddf5a79",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "847957b2-a28f-4dec-b3a3-ebf4a4e2efc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ea6f7fc-c207-4d50-b64d-23164578e52d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0e3d18-54ff-488c-b74f-7dc06d841a61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "008b615f-2dc5-4b7b-8941-5123eabfd51e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1babd22-d33b-42d4-87d9-a95473f9b880",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696e9b8f-b31e-46bb-a17c-9a7b813a0917",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c5bd2af-60e3-4b19-99b3-3a9b5b322f40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a0eca6-44c9-4f75-965e-2b91407f5fc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ba593a2-8cd0-473b-8e39-28939e28b2f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de72b64e-6744-454b-bbb4-b29ee196f9cb",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07021bce-6cc9-4d9e-aa6a-f802c63de10d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34e45684-67b0-46b9-b65e-b3641cb0f8bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c011bdb-bbd8-4e15-a500-49f6dd783072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af31a1db-7178-4348-a0eb-7f7129406b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc47396-ed14-4182-aeab-efc0761ca1f8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532fabdc-83d1-4f3b-a5a7-adcc9c1d9f81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa85015b-15f5-465b-a545-6098d4ed764d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f559ed35-6c0d-4c34-b33c-afa075a6714b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb211892-9668-4ffc-99e3-1fb9ae1073b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6078f401-2f86-457e-914c-b862641d8a1c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9f49b2-e012-4381-b7de-03a54dfde88b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1510f05c-a79e-45f3-bc50-6928f43469bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc639c8-d132-4d8e-83a2-cf3d90bc4887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e445ece6-d71c-4fb7-a78c-8e2e4d5ca295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc42ae9d-afb9-4c90-b6a8-24389e1e36d8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ec5f7f-fc0c-4893-8bac-204b8b0dbf3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65dd1897-585e-4e9b-92d8-24e0fe14e3eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad93042a-b1c0-4187-8e90-e30e71ddff54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2636f992-ea99-4c06-a1ff-0478a97085ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3edaf9a7-bf24-4193-985b-2246807ec552",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daedd9fa-d7bd-48cc-b008-a59da0060458",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "930b8134-62fd-47e3-9a20-c0b7b32ffb6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a651e9-983b-4989-9e23-1d716fa7cc29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0228e7a-ed17-4b26-8eae-8d374aa8743c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af3729ff-47e4-4b8d-8597-492169572765",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14972afe-fcd5-4d2c-9a57-724f47480adc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8928e63a-df2b-4126-8fc8-49d3a8d0d711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f680da1c-1259-4092-bc37-f4325558aed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6775611-ae0b-41ff-aa69-15c4af672edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e73b550-b96c-4b7a-894f-7b4d20545744",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177a027e-6519-4a28-9372-5ecc200523bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb56b312-79e1-4fd7-8b96-055a3195893d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0696815d-03c8-4fa4-8259-b6985c146b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3895e8e-1531-48a8-a54b-65f14a8df30c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2898688-8d0b-4dec-8df1-9c341cd189ea",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e31ffb01-2742-4747-8375-6d731c576915",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc88585e-aa93-4516-82b3-c3e023523c75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0eb3469-a477-4ea1-80a7-db6b0bfea001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cc61b74-715d-4aad-8e6c-eadb6b449849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36a06a5-4556-4581-8bdc-58135c7b3534",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8968e34-444f-459e-aa30-4bdd3b1e8b68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f59ed6b1-344b-4d16-9299-3337e2c03ec5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27fed7e4-228f-401b-86fe-0796a990a534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23a5be8d-a1bf-41f6-bd1c-549256b03668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f913c4-d9d1-4df8-9f8b-3717f757b137",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca94f78-93a1-43df-a8be-d982fcdb3532",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd13ba7b-504c-4ab7-8f95-08b7720eb147"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc26e7e-7516-490e-abce-d690a1687f6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afcd7956-3e0d-4fad-9c62-f21bfebab92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3457008d-1cb3-44ae-8c81-13aae64ce577",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8841b12-d1b7-4d13-a004-301e9e978ac5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6de1da6c-1c9f-41e9-897a-f4c1bbc9850a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "000fcd72-0df6-4c8f-add3-0229c16cebad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdac5df7-6eac-4e9a-85b4-1bece4130ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d257e9e3-edb1-4a3d-bc9a-f2a2efd2d11d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52246109-28f4-4c7a-a611-8798d4890ac7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d58735cb-a35e-465f-afea-c308896bc0df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d88d0d-c325-48ae-a4c4-a4a2f8496253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae1fac1e-8d20-4d15-8281-093d235d6152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b7b9db1-72ca-4ae5-b2ce-65fcc3a54232",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0806542c-6e32-4adb-821b-066d2015b7f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13e972d5-9356-416c-b055-e334eb3db025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adab42c3-4a10-402a-ba90-25e41e458409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fb22fa4-4564-4af3-a8c6-eea95f565725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4054ab2e-e5f8-4825-85c5-151e08e1fe29",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e450d59-b3c7-4319-ac29-8ad3b4ab8c57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf2e2b56-e3bc-44a7-afda-0e18ad585ea5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f5599e9-a9c7-47be-9c87-fff1dbdd3803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30a749b1-620e-4a73-998e-012d77fd3ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d4c288-e3df-40fb-b4e5-6298b9792746",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba9288b-ffb1-4caa-b5f8-3c274436f68c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc44f978-ed0e-40a2-8e66-c0b562f0fdbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "282cea34-db07-415e-a109-6e7ee9905ede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4fd52ae-a6c4-4bf1-a127-b020e064986b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdfc8c2a-3755-4677-929b-a148ffeae080",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0c3f98-4094-46ab-adab-9e55cb9b4692",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb1eca95-7c78-4b23-8f45-b899219f070b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20dae7fb-c86b-44fd-adad-32e4f866f92c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "765c2633-7c73-4ffe-b5a1-29bcea6673cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2058b992-a8de-4ddf-9388-d28737ca89eb",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1772eca-2d09-4a7a-8dca-44a185b593e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3613e49-d444-47f5-95eb-2550f8753982"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ea85a1-1c54-4147-b0df-13712c731d1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbd650c5-e6fa-4aaa-a78f-c970ba4d92f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f24875c-9783-4089-89c4-c9bd70adc08a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54f0154-1709-4343-aad2-a9cbe47ebbd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "625db2a2-68ca-4722-a50f-9d70833c4343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42552ef5-8dba-4253-9a9c-2a8125d1eb5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bcc9c36-73f2-4e65-8379-e5a5f4ff900b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4802953-5671-4f27-b23d-f2bc19de0d40",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed6f748-3e29-48f0-b371-006a44bb6f54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36f82aca-d5ba-47a9-b6ca-cedddf00af32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2feb5efa-aff8-4d5f-890f-f9de2f3edb7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "351c26e7-3f0f-48ac-bde2-ad71b9d2a173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc84866-37ef-449f-ac41-edbb1a14aa56",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b751b38f-0f14-4de9-a41b-4d992f2da53c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d1912dc-50c5-400e-ab45-bf5ba9aba4e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "370f92e3-0bb5-4553-a398-dea54f0c83bc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feb5bac1-b539-4115-b8b4-3182c65776dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0973627-86ef-4454-b1a3-b6c9034d8a13",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f59bd5-8750-40d9-954b-c0ea3fcea58a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38c24803-96f7-4dd9-9820-247c1937b286"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dccbf59a-91e1-4e0d-8d36-efee6b81ce4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b81d008-affd-449b-b568-1a9ac4bf06fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd90e3c-10b1-4e61-8f52-5d2367ad6b83",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9eea680-736d-497f-9957-cc53323ebc20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb965800-3ebc-47c8-a0e8-4e7b31c0aed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "539425c0-517b-44d0-8597-5c29db3773f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "985b3d42-bb97-4be2-bcac-c51ec5df6992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e4e4e1-8a41-438c-b8fa-757cd9422f5d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ea14c5-cf63-44a7-ae26-48fe4ef3eca5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bff8d3dd-6fe3-43f0-8ec7-2687c1795c71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2950705e-70d6-4d05-ae58-0297556a675f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "144f6cca-e46d-4ba4-bf65-c64296047691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5715926-4101-4f7b-8920-f8fbf4e21959",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc734af-c622-462b-b912-19076ec44514",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e624ceb-4306-48d7-97d3-6be5e729290b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adef51bc-70e8-47ec-8a42-39dc729c2a79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66c330bc-6741-4ccd-b9bb-14badcc5011d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dfaeebf-0811-49a0-8835-52bbda630728",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7fa9e08-34a3-4fa2-870a-46bba72334ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3ac3e56-6831-4524-8e22-6153e99ad5c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08bab2cf-1f02-482c-af08-f997045d1970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5011ee6c-4eb0-4b80-8ff9-45e3575ab971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff10c6e8-1ca5-4897-810c-640f2a1de31d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "775f1efa-5659-445c-8be3-3689612cddd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9336ac46-05fe-4573-9e8f-75ac5d9242c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f96e7c8-c46e-4e1e-bbab-8923e06a431f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b551e60-2cf8-4f30-a8f8-0b08d5b1165c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77438e64-39d5-43ca-bc39-b845723cbe7a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c3d2c6-8430-4bd8-a2dc-66b93cac0512",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b50410ec-06b2-44a3-96c1-3c83b3100b50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee1281d-2962-4b48-afd2-586e8246fe1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "468ca6a1-bd85-48c8-ab4d-a0a5af832bbe"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8a8726b-255a-4efc-8685-2b5c39d9b266",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3b81c7b-53f8-4b87-89e3-c338b68774a3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "04943df4-d38b-45df-a075-b2242e56b59f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a7d01876-1f34-4ba4-bf76-6e438a219a49"
                    }
                  }
                ]
              },
              {
                "id": "792b4180-1141-458d-9eab-bb46192b2144",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b1563909-181f-4c43-9219-eb462b950411",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c468167-faad-49cc-a293-36db4f71c9ef",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ee9ddff7-f1db-448e-9844-e0192ceb042b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9018b6-c295-4701-9aa5-e8c4b474690c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af03a6bf-5ea7-4bb7-8b19-7fa27a1cc050"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32547cc9-bebb-44f5-8ea4-a6a204029ffa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1bb78657-80d0-4a0c-ac64-11bb0f458147"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "657c0046-deed-438c-b733-ee2d90c211b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef3e1fd2-af03-4e8c-a11f-faaa2344ac27"
                    }
                  }
                ]
              },
              {
                "id": "ffed13e4-e3dc-4f08-8880-fc07b185d9e2",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a776a10d-1e0d-4161-9f83-5dadcf881767",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a582ff4-95fe-4f4e-b61f-8d4cbe584dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "f0d9a57e-f4c4-4d88-9ccc-5b356224a4a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a90a5b1-0b77-44b2-9349-5a64128c6cc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ed479a-a968-49da-a7b5-439e4e270985"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b4ef9b23-270a-485a-be53-88b47e59e15e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "eae94217-3dc9-4e77-8c30-22d12669209f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cc64d78-6d89-455c-bb2e-8e20aeda1a45",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "46ba888b-51df-4052-921e-2a3cfaaea4db"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1fa493f5-1707-40ae-ab86-ad70c630e798",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5847f8b8-9ddb-42d5-a856-596377d44b47"
                    }
                  }
                ]
              },
              {
                "id": "5938dcb0-2d19-41fb-b732-7cb67f9c0e45",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e017aeaf-6a93-4873-877f-0dc98a127abb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cf7a4f91-e4d9-4efb-b17e-57e15475a33a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "024dadc2-1f59-4347-ac53-6c8be633cac0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "994403f0-bfc7-44c0-9920-7894f76a8c63"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "30ebcf53-967e-46dd-b723-1038867414b4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "fbbd47ad-9f26-4841-bdce-8dde262f4869"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d239e8f7-c84f-47b0-be87-aff117b4b0e1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3fd1f8ae-04a7-416e-a95f-4e00d3685d75"
            }
          }
        ]
      },
      {
        "id": "ee6cffb0-65bf-4069-8449-7f0afb0516e3",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "89e6f343-f727-4244-9aaf-28b509e57653",
            "name": "Negative Testing",
            "item": [
              {
                "id": "228d719f-0287-42cd-ad0a-905ed0e62c0f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f8c0ca94-07b4-4511-8f5f-d8516a18319c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769f524b-a5d4-4d75-a5fa-dddcbb3c7f52",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b80e67cd-d060-493c-9c47-419a6abb49c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ec3806-1609-49a7-a09d-72eee4415e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c406dcd0-6e31-4b15-aeb1-ee6aecbddc7d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d95c4b6-239b-43ac-9ea9-2c7c1769619d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0963c64-a534-42bf-b189-f3bf7e0be140"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e12ddc6d-3fcd-4751-9c7c-0f2beaa380bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "280c74bb-93dc-44f8-93cc-ee2e96fc3256"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "498701b8-d841-4e0e-841c-d38bd3d69ef1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "644580a5-904c-4772-8dc1-ebf70ccf5927"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1691ec33-3b13-4409-a457-9dd665c61683",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7168681c-1ec3-46e4-af76-c1e8fab6a89a"
            }
          }
        ]
      },
      {
        "id": "19331e99-fb8f-474e-8a16-c5bd029f00dd",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a2ad4d62-4188-4c30-adbf-f50d9b9fb748",
            "name": "Negative Testing",
            "item": [
              {
                "id": "06ed9aeb-814f-4865-b755-1166a13a11e4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e9ccc178-7ae8-4455-a201-cdc8b3878e9e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f25e3a-58e7-4465-ada8-391d48b98c77",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d07d87a-e85d-4480-994f-1c50b8ef3a11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "586b69e4-7a1c-42c6-be25-591e80090139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db8e6bd9-9c0f-45fa-843a-c6ec75479e37"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3a1207d-234a-47ef-aab6-89ab85a23c85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "871418cc-fff8-4227-8e94-4277260d686c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee5d1c7e-e524-487e-a91d-6fb672f7383e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32f66865-176b-4079-8607-c63e5c99f497"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c0c946d6-e2e4-4dda-a418-dccae0388899",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "71a7158a-c8cf-459b-88ee-d15431e804cd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9aba1112-4cf2-4791-84be-3e1ddb452479",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a98b7531-7ce8-4bab-962b-c74cd9ba3bc5"
            }
          }
        ]
      },
      {
        "id": "cd225847-b99c-409d-8e4a-2d58ceea154d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "88a44f18-e6a4-4a32-932a-ccc1dc527bae",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ef061257-4b53-4ac9-9865-6d556af9fb51",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bbf2796a-9166-439b-889d-be64d832a1dd",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa4c856-51fa-4ff3-a663-58ece9b5ce0d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00b35899-a637-4ead-932c-a30019cae9a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b80d79-59c0-4850-9c7b-6066dc3b2d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3ea8ce5-1a00-43e8-b113-c5ddb409aa58"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63516ee8-8b04-41ee-a21a-b2151b6900ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "913f45a2-7f49-4cc6-8ee0-9fcb5bdb69a3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "be8d96c3-9e1a-40ec-8f88-6ccf67c791cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce0e7a0b-ae5b-42c8-9fd0-192df0cd3cc0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "48ebfa14-334e-4d46-9493-2644fa1d22b3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8f958d0c-41ae-4066-b2dc-28cbeeeedb5f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "354cdd47-9bed-4443-88ee-0c07e523318b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0c8546e3-cde1-4fa4-b409-511f4ef15de6"
            }
          }
        ]
      },
      {
        "id": "2f0e38f8-0288-47b6-8751-001a85940fd4",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "96f3e8b0-c8a7-4644-9a1e-a4834c953256",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "035bd69f-2259-4fd6-a2fa-33048f0da1fd",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "be21c8ae-d2f5-4368-b449-39ff90cd0efa",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8cedfde2-ebe1-49e4-b9e4-3af66b3bd7df",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "39c015b8-3c9b-4ad4-807f-172f6ece213f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 103.53333333333333,
      "responseMin": 21,
      "responseMax": 571,
      "responseSd": 68.40972879753318,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1701391153530,
      "completed": 1701391193270
    },
    "executions": [
      {
        "id": "24ef5385-c5db-46f2-93f5-3dae143633b7",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a41edd96-2713-4fb9-8964-b575928799d8",
          "httpRequestId": "296b1bd3-1b34-480c-9935-24f0b48f629d"
        },
        "item": {
          "id": "24ef5385-c5db-46f2-93f5-3dae143633b7",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "cb8c035c-f5f0-4e7e-a680-62b922fb3381",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 0
        }
      },
      {
        "id": "fa984488-3bfd-4788-8a39-d5a7dc51f3a5",
        "cursor": {
          "ref": "d92177ec-8aa9-48fb-972e-41caa8b379e3",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cf17f88d-9a4c-4f32-ab40-692fae8b0917"
        },
        "item": {
          "id": "fa984488-3bfd-4788-8a39-d5a7dc51f3a5",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6fe63f96-27e3-4237-85b5-7140df23d305",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "ad4b7d36-660b-4226-9133-c5d11329c69e",
        "cursor": {
          "ref": "0d47c4d3-8e08-413c-ad47-0fe691242a20",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3b871754-587f-4627-8e78-c2328cc48a84"
        },
        "item": {
          "id": "ad4b7d36-660b-4226-9133-c5d11329c69e",
          "name": "did_json"
        },
        "response": {
          "id": "bf93c579-9aaa-4f2d-a192-06ed6ce44b50",
          "status": "OK",
          "code": 200,
          "responseTime": 464,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34302a48-3dc2-4beb-a018-4c1c4bccef73",
        "cursor": {
          "ref": "b51b4bb4-dbf5-43b9-a155-a9e9de8bc565",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7eae5888-22c3-4e8f-a8d2-130fd7308432"
        },
        "item": {
          "id": "34302a48-3dc2-4beb-a018-4c1c4bccef73",
          "name": "did:invalid"
        },
        "response": {
          "id": "ac13d0ac-caa6-43c5-9fe5-e5428248a62e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34302a48-3dc2-4beb-a018-4c1c4bccef73",
        "cursor": {
          "ref": "b51b4bb4-dbf5-43b9-a155-a9e9de8bc565",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7eae5888-22c3-4e8f-a8d2-130fd7308432"
        },
        "item": {
          "id": "34302a48-3dc2-4beb-a018-4c1c4bccef73",
          "name": "did:invalid"
        },
        "response": {
          "id": "ac13d0ac-caa6-43c5-9fe5-e5428248a62e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bf6ca0b-fa6c-488c-b8ce-b45fcec763f6",
        "cursor": {
          "ref": "1e3b41bf-a874-42fb-966c-523e4ffcddff",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6eee75c3-e755-4077-8cf7-e264e2e353e6"
        },
        "item": {
          "id": "0bf6ca0b-fa6c-488c-b8ce-b45fcec763f6",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7958ab0e-66ee-4860-bd6b-c68141fe3a18",
          "status": "Not Found",
          "code": 404,
          "responseTime": 202,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e744936d-cd6a-42b5-87ac-b5adc5e02469",
        "cursor": {
          "ref": "6d2c328f-53b7-4f1c-9fe9-cc143e7bdf2e",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "11f9bc43-4d2f-4354-af00-d1a7716bad13"
        },
        "item": {
          "id": "e744936d-cd6a-42b5-87ac-b5adc5e02469",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "719755c4-88d4-4191-8a05-83883383f6b9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 82,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce7afef-cd27-4fc4-a3e2-b99d16faccb7",
        "cursor": {
          "ref": "5c0b2126-7068-45b7-a046-bfa30e0ecc63",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "06f834a6-4f45-4c9d-a650-d70bea12dac8"
        },
        "item": {
          "id": "2ce7afef-cd27-4fc4-a3e2-b99d16faccb7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "5f8158ec-f5f9-49ce-a347-ad05f8198ac4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c080888-858d-4d68-b95e-089755156efd",
        "cursor": {
          "ref": "68a9511c-d069-4540-b8ff-d1c3abc35409",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9363ac12-662f-4b21-93ff-956940f12b05"
        },
        "item": {
          "id": "9c080888-858d-4d68-b95e-089755156efd",
          "name": "identifiers"
        },
        "response": {
          "id": "77f47347-17d1-4800-b83d-91cfa71929cf",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34702882-972d-4164-be93-19335bbc246b",
        "cursor": {
          "ref": "9b793bda-44ce-41a7-bc02-583cda51a425",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ab8cc2b1-a2b3-43ac-b2b3-0356a9296e52"
        },
        "item": {
          "id": "34702882-972d-4164-be93-19335bbc246b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7a5bbc95-5555-4c0f-b3ba-e032cbcc8d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af1d439-e7fe-4a48-a1c9-76ce79a15759",
        "cursor": {
          "ref": "584a2415-fe10-43ee-a2fe-c894bc7839b0",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3ad5285b-9c80-462a-ba6d-f4504758b812"
        },
        "item": {
          "id": "5af1d439-e7fe-4a48-a1c9-76ce79a15759",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "10dcc11e-f3ed-4e2f-829f-05a8d3a6a366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54481eaf-bd8d-471c-a0ea-916c70f0f173",
        "cursor": {
          "ref": "03720e3f-df3e-4694-9cfd-b6a76ee28695",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "61f2a9ba-126b-4d44-bda4-62cc51220ef3"
        },
        "item": {
          "id": "54481eaf-bd8d-471c-a0ea-916c70f0f173",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0d3c981d-810a-4014-9165-a017a427d84f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab106a13-3efe-4e2f-8fb2-70858bfcc9c0",
        "cursor": {
          "ref": "ea7befa1-15f8-4477-9a5e-623be02eac0c",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "321102ef-103d-4f5e-a0fa-511e285ec8b9"
        },
        "item": {
          "id": "ab106a13-3efe-4e2f-8fb2-70858bfcc9c0",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "16903b3e-a58e-421d-8ac8-40cb64b93514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc0fca96-2dcf-424d-a860-8d4b3b37be7e",
        "cursor": {
          "ref": "cce1a3c6-831d-4fd7-894f-c2d3030ddd57",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "24ade6a0-dc10-453b-a0a7-2b0bf3867a83"
        },
        "item": {
          "id": "dc0fca96-2dcf-424d-a860-8d4b3b37be7e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "956657c7-8200-4edd-8c4e-3f2ae031f621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab1051a-1336-47c9-8f97-2e7ddfee25e6",
        "cursor": {
          "ref": "5dc8e74c-0060-4330-8991-a139a2a6fdbf",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d1d5b2a3-e6c9-477c-89c4-5e164597e863"
        },
        "item": {
          "id": "6ab1051a-1336-47c9-8f97-2e7ddfee25e6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "dfaa45e8-5f80-4173-9daa-6371a2f2302b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3c81fa1-415c-49de-9919-50f5dd65fa4b",
        "cursor": {
          "ref": "eaf8af62-395d-435f-bfd9-8c9883b4cf37",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b6bbf64e-f380-46f2-b4e4-475dfd05afcf"
        },
        "item": {
          "id": "a3c81fa1-415c-49de-9919-50f5dd65fa4b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "960a615a-d041-4f76-9851-c4f29d204c4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7410d09a-9702-4228-8b49-5681d7b0347c",
        "cursor": {
          "ref": "cb4560da-4020-47ff-bfab-6cb47a7be059",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6265f53b-c3d6-4282-9f6e-2d52b4ea07d6"
        },
        "item": {
          "id": "7410d09a-9702-4228-8b49-5681d7b0347c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "770a158c-8616-4cd5-8eb8-1ade9f129d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa41668c-2818-437d-a861-1c5d95896ffb",
        "cursor": {
          "ref": "bf591674-57f1-4954-b588-ae810f1d2c50",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "89d9305c-5914-47f6-9541-88c72bc66d89"
        },
        "item": {
          "id": "aa41668c-2818-437d-a861-1c5d95896ffb",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "23e90b77-0149-44dc-8396-fce828901484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4ec498-cc43-49cf-a16b-99c4fb431043",
        "cursor": {
          "ref": "a421375a-ec53-4571-a4dc-cf6844ad4d9b",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5fc4da4e-bee2-4662-bf60-113a4089e3ca"
        },
        "item": {
          "id": "6d4ec498-cc43-49cf-a16b-99c4fb431043",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "86f962d9-f687-4eaf-ae69-aaa2cb2c4810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c86139a6-1fde-4a32-9a80-b0f3f92ee3dc",
        "cursor": {
          "ref": "9edf2646-17b2-49d4-968b-2dde0143222d",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7742c58f-9bec-4787-9f64-54692bd314d7"
        },
        "item": {
          "id": "c86139a6-1fde-4a32-9a80-b0f3f92ee3dc",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1f0685a2-c0df-4296-b149-a9b686c6965c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee2b59d-e4b3-4ce5-b7ee-b537ac62ecd8",
        "cursor": {
          "ref": "16c52c77-a002-476b-9e01-d60467a29fa9",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6736a82e-de04-4453-8497-6f0ad621e99e"
        },
        "item": {
          "id": "dee2b59d-e4b3-4ce5-b7ee-b537ac62ecd8",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "86ac3c89-531c-4f83-89c2-1dd8807ce669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08e3175-899b-44cc-8e1e-e190d9cf3534",
        "cursor": {
          "ref": "31c8b203-e7fc-46e1-af11-1f97c7537add",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "772dad4a-88be-41e3-a505-b88e6c04e813"
        },
        "item": {
          "id": "f08e3175-899b-44cc-8e1e-e190d9cf3534",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ace88e44-6de1-4bcc-a5ba-6cff84887f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f21041c-cd6e-4972-bb81-275dcb7284ff",
        "cursor": {
          "ref": "ea39fbcf-d710-46d5-8807-aa595482674b",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7d72f368-51b4-4989-9d9e-2713b136562c"
        },
        "item": {
          "id": "9f21041c-cd6e-4972-bb81-275dcb7284ff",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "7ca3a4d6-a886-4346-a303-f4990077cadf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a0f88a-89de-4b4c-acaf-1027444a8cc0",
        "cursor": {
          "ref": "d74daeba-5892-4105-a843-ca8902b910ac",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c79b663f-9e02-4e09-a6e1-9f891d3fa437"
        },
        "item": {
          "id": "d2a0f88a-89de-4b4c-acaf-1027444a8cc0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c4064740-6354-4f97-abce-4f1c58ba16b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d36092-cc48-4db7-92c2-6784e5d915b5",
        "cursor": {
          "ref": "ab9061fe-fb45-4842-9838-036bad4dfb02",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "956505aa-d2b4-41f3-b012-c81821ea6431"
        },
        "item": {
          "id": "71d36092-cc48-4db7-92c2-6784e5d915b5",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "25d93aee-7396-4492-8573-9b9b083a03dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec9d99f7-fd4e-4084-af2e-bf1bc4d4bb5b",
        "cursor": {
          "ref": "81bc8e86-43b8-488b-a7cd-a6aa9cacea3a",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0591f389-815f-43f5-be68-83820e5d0229"
        },
        "item": {
          "id": "ec9d99f7-fd4e-4084-af2e-bf1bc4d4bb5b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a516a5ba-7195-4008-8285-3a2886722228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92467706-223a-48cf-834c-6c606e653ecb",
        "cursor": {
          "ref": "a7b69ead-5d4c-46b6-bb1d-352b30d53d05",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ca51af65-402c-475a-a5cd-c7776cf14252"
        },
        "item": {
          "id": "92467706-223a-48cf-834c-6c606e653ecb",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "442e410b-2562-4ae6-99aa-03fe3f6d8545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0a6440-e931-416e-af65-44cfe0a6972f",
        "cursor": {
          "ref": "9b4c71a3-8bf8-4ead-bc24-2f7f7489fc04",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2e5d27e2-9358-40f7-b086-18e4e15a2cc8"
        },
        "item": {
          "id": "3d0a6440-e931-416e-af65-44cfe0a6972f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "350f4a6d-1b6e-4722-b976-b9a5726997bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e8deff-b8e5-4c29-a3ec-8643e1429544",
        "cursor": {
          "ref": "8d78c89d-56ad-464e-ac3c-f1ee65c66300",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7d984242-835d-4f4a-9794-40b67d87fdd4"
        },
        "item": {
          "id": "84e8deff-b8e5-4c29-a3ec-8643e1429544",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "61c432ec-38b4-4827-b7e9-9794c002a873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cfd31d7-e0ab-4ef8-a33a-f298a3eca299",
        "cursor": {
          "ref": "45ec8565-8ec0-4c1e-bf29-6b333662166e",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2a92684c-231c-4df1-b8ae-375eee8a23a2"
        },
        "item": {
          "id": "8cfd31d7-e0ab-4ef8-a33a-f298a3eca299",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "21a50377-f16f-4b12-9b54-3e86482afa2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832c0b31-6fe1-4827-bea3-44b454bc4c71",
        "cursor": {
          "ref": "656385e4-bbd5-4557-b6e8-b27e7c145cfa",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "63e35f2b-d236-431e-ada1-db093d303140"
        },
        "item": {
          "id": "832c0b31-6fe1-4827-bea3-44b454bc4c71",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c46168e2-21d0-429d-a159-5b87d118cf80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6667b6c-62b9-46f1-aec8-33d32022e217",
        "cursor": {
          "ref": "7a568c9e-ed39-46e2-a72c-7c5c1237251b",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8afc82a8-0e3d-4ba2-bc10-75779916ba37"
        },
        "item": {
          "id": "c6667b6c-62b9-46f1-aec8-33d32022e217",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2291b137-578b-41dd-b27c-2378b8f51aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcbc227c-e08f-4464-b82f-f0f11004ae49",
        "cursor": {
          "ref": "215f5677-b374-4040-8770-6c00f1c4262c",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "02b1eb77-f50d-4095-9bbd-e385f4ccdb67"
        },
        "item": {
          "id": "fcbc227c-e08f-4464-b82f-f0f11004ae49",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "bb9ff43b-ce82-46d1-9434-25f52f331b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf3abb5-e95f-4b0e-b3a4-a4c2ad40ec9c",
        "cursor": {
          "ref": "e63c0033-d062-405d-a922-092a5102be9a",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a65271fb-2809-4bc9-aa69-54aa5e7ed7bf"
        },
        "item": {
          "id": "8bf3abb5-e95f-4b0e-b3a4-a4c2ad40ec9c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "8fae0a25-b44f-4f5e-b9de-66eec6f02e3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a9ab081-b0c5-4e95-8090-bf9479ec435f",
        "cursor": {
          "ref": "19537dba-68e6-4d04-87cd-d09b26d2c9bb",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "3f8d00c4-6448-4454-836b-7922f75a4a53"
        },
        "item": {
          "id": "8a9ab081-b0c5-4e95-8090-bf9479ec435f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8a6e7aaa-9346-426b-8f19-5cc2ecb78d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ef427f-5df8-4661-89bc-47b5f02d25b3",
        "cursor": {
          "ref": "343449ec-1261-40f9-9cf4-69c817d5e518",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4284852f-3ccc-49a2-bc7c-48bd80881704"
        },
        "item": {
          "id": "97ef427f-5df8-4661-89bc-47b5f02d25b3",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4a2472c1-bcb4-4889-b347-adb4308fb044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "886a0c7a-02b8-4dff-b238-357e2db9037f",
        "cursor": {
          "ref": "69c3c5b8-65af-4e24-aa98-718a242f6902",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "5c3f94d4-d59f-40c3-851f-c86a9f410927"
        },
        "item": {
          "id": "886a0c7a-02b8-4dff-b238-357e2db9037f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a0390fa3-0418-4837-99e0-e0b0c9361098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcdd1c7a-93e3-4ae4-9c9c-a2bf8be3bae1",
        "cursor": {
          "ref": "f5207459-c86e-4b50-8536-38274807567a",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3521efd0-5b59-4a41-8b4e-91971f6c1ba5"
        },
        "item": {
          "id": "bcdd1c7a-93e3-4ae4-9c9c-a2bf8be3bae1",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6dd4655e-3bd8-4a05-b0e6-6e979f9ebd5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c852912-ec04-4b69-8acb-956d23a3ba04",
        "cursor": {
          "ref": "cb093610-0c98-48f9-bfe7-835fb9760a7b",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "35f6cf9f-106c-4fa3-af2f-a6214d184998"
        },
        "item": {
          "id": "8c852912-ec04-4b69-8acb-956d23a3ba04",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "fc2e9525-0178-4e29-8803-ca238bef02d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af19daf-6b19-4712-87f2-67b3a422ea8e",
        "cursor": {
          "ref": "8e290a9e-b9c4-4d81-b4b0-aa817d186fb0",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c4fc5214-6e0b-455b-ba92-c745da455995"
        },
        "item": {
          "id": "8af19daf-6b19-4712-87f2-67b3a422ea8e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "070e61f3-8ddf-4f3b-a7b0-3e1d11f225c4",
          "status": "Created",
          "code": 201,
          "responseTime": 571,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b4df821e-7b57-4d42-8914-eff1074d5293",
        "cursor": {
          "ref": "9088e13f-afaa-4726-800b-4c01a3ffb55c",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e6a8fd07-2f43-4b33-9c20-8d9d5dee94b2"
        },
        "item": {
          "id": "b4df821e-7b57-4d42-8914-eff1074d5293",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "fa0796ff-6462-4d8d-8017-7a22ce516674",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "5762c494-f7e3-4d73-b6e2-405eafd14de4",
        "cursor": {
          "ref": "becd7f3f-5b1b-4aef-b308-c705cc0cfa46",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f1c58454-6c94-4296-98e1-ef7c151301b2"
        },
        "item": {
          "id": "5762c494-f7e3-4d73-b6e2-405eafd14de4",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "400c3fea-e332-47e6-8bb6-60c4b43e215e",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "dd6c58f6-32bb-4736-8497-b5d4e54ef635",
        "cursor": {
          "ref": "599f558f-4d5a-4e84-a63d-6cf880472164",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f17b2570-1e14-4064-8d1b-d4325f6da693"
        },
        "item": {
          "id": "dd6c58f6-32bb-4736-8497-b5d4e54ef635",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "70ba81da-cf31-4625-a16e-825c59714904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b4e4c89-f4c6-4307-9609-d27561482509",
        "cursor": {
          "ref": "64232a42-0438-4d74-90e6-68ea2c9f67b0",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "bdc783f0-bb81-477b-9cfc-1fa6606030a6"
        },
        "item": {
          "id": "9b4e4c89-f4c6-4307-9609-d27561482509",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "29c4c1fb-c0a4-4909-8d9a-c8773f6866aa",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "f84c2d3f-e976-4b7f-b57b-bce332c9db34",
        "cursor": {
          "ref": "401c63c9-0ea1-465e-94e3-4469b0eb04cb",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7733aa2e-de31-430f-9184-940db2e1e554"
        },
        "item": {
          "id": "f84c2d3f-e976-4b7f-b57b-bce332c9db34",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "577b36d4-5db4-49e7-91b7-441f8e557d29",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "38094e2e-557f-479f-b487-9bfd7b623f57",
        "cursor": {
          "ref": "a2762e22-d478-4d6f-b4ac-6ba275f6a8c4",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "701218e0-d32e-426b-b0bb-481936499c79"
        },
        "item": {
          "id": "38094e2e-557f-479f-b487-9bfd7b623f57",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "fb13b6bf-3282-441c-bac9-64e918e7317f",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "525760f4-f21f-4224-b73b-da6efbc1e598",
        "cursor": {
          "ref": "ee21659f-fe7f-455d-8ff0-16c238840a91",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "88f3cc1c-dd79-4665-bb52-730b136000b3"
        },
        "item": {
          "id": "525760f4-f21f-4224-b73b-da6efbc1e598",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "9719fe41-d044-41a0-8b11-3d0e68e9a859",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "365332ea-1051-4784-b682-c80c7949a1e5",
        "cursor": {
          "ref": "4f24eccf-09b7-4067-9d83-c611e304b84b",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "23f49229-3129-4481-9597-fad1aa41c92b"
        },
        "item": {
          "id": "365332ea-1051-4784-b682-c80c7949a1e5",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "64b77a97-bea9-4eb7-a0cc-1791e051586b",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1d7ad15e-abc7-421d-b117-f6e6b3877d37",
        "cursor": {
          "ref": "a21b3779-cf2d-4038-bd00-1fb78736318c",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4e0d942e-783a-4807-8206-99d1fdc3fb8a"
        },
        "item": {
          "id": "1d7ad15e-abc7-421d-b117-f6e6b3877d37",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c43cca32-5e09-4376-bbb3-2972d693b6b0",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "4a9ed701-784c-4960-b84a-52e5817dd6cb",
        "cursor": {
          "ref": "8a61a3b9-01f4-475d-bac0-8fd5ec8fb2eb",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e7c8f484-bd7c-4e7d-8f3b-603916a36cb3"
        },
        "item": {
          "id": "4a9ed701-784c-4960-b84a-52e5817dd6cb",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "021edeb0-4c5d-47a7-ba75-bb8631eda87f",
          "status": "Created",
          "code": 201,
          "responseTime": 421,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "32253648-5113-4a3a-93dd-ebb2cfc91ccd",
        "cursor": {
          "ref": "acc59ada-019c-49db-bfd9-1bb2c8812a15",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b9e6aad9-6b16-4b18-89a2-1bea76011dc6"
        },
        "item": {
          "id": "32253648-5113-4a3a-93dd-ebb2cfc91ccd",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "499454cd-75d9-4279-98ff-135804447799",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "ea40ce96-cb16-44ef-827d-c27f05f65805",
        "cursor": {
          "ref": "0d84c544-4043-4559-b0ac-ea6f81af2279",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b3c22406-841c-46a6-bd4e-d0bea9979af8"
        },
        "item": {
          "id": "ea40ce96-cb16-44ef-827d-c27f05f65805",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c1eb9d98-b907-48e4-9dcb-8aae381d9354",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "2f7f025a-6223-4bce-bf60-feef9c47ead1",
        "cursor": {
          "ref": "1d2afeff-d283-4c0b-aeae-ebc696567225",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b3a3218a-5e92-4049-b0eb-df81efe1544e"
        },
        "item": {
          "id": "2f7f025a-6223-4bce-bf60-feef9c47ead1",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b3ad454a-7958-4bb6-b094-c45e3219afa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09f81be6-2a5b-4ebb-9ce6-78741a96286b",
        "cursor": {
          "ref": "23738739-f7c4-4b7a-a448-4a2fb496d520",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9d5ee9d9-dd68-4643-a580-d9e7414313aa"
        },
        "item": {
          "id": "09f81be6-2a5b-4ebb-9ce6-78741a96286b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "288e72de-5a2d-42af-8bc6-22a0db0d2f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38518c15-1bbf-433a-9589-c56d204a0616",
        "cursor": {
          "ref": "893329a4-b5f2-4544-9ff5-5c405d5eb0b4",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2a060108-9431-47ec-a911-64c6606cdc80"
        },
        "item": {
          "id": "38518c15-1bbf-433a-9589-c56d204a0616",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0b1fe90d-352e-446e-bb52-08a3df20c6a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f86dba-80b1-49d9-be67-a22fd71e7829",
        "cursor": {
          "ref": "69ebad57-6100-4447-ae0a-b278f9465ad3",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "33209d42-be9d-401c-9a5e-553416799cec"
        },
        "item": {
          "id": "13f86dba-80b1-49d9-be67-a22fd71e7829",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0f20bcf4-d267-4265-a28e-e98fdd2544e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46b561e-17ca-4a70-a5ed-11f355d0c5a4",
        "cursor": {
          "ref": "8856f676-6d55-427f-aff8-b6a958df3851",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a7d45937-5db1-4bf9-99f9-d05f9de5950a"
        },
        "item": {
          "id": "b46b561e-17ca-4a70-a5ed-11f355d0c5a4",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "05109a07-55f3-4ba7-9c0c-aaeb805eb318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b5ad85-d583-4999-9282-f9ca7e8fad3b",
        "cursor": {
          "ref": "f4fce63e-ea64-4089-9b4f-baa527ebe20d",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e164ad75-4c28-45fc-9c4a-5619331f3e48"
        },
        "item": {
          "id": "b2b5ad85-d583-4999-9282-f9ca7e8fad3b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "79a538f6-0309-4159-b14b-e729c7bfafb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23041f78-42ae-478d-8c9e-53c2b596b886",
        "cursor": {
          "ref": "a356af27-e6f6-47ef-8586-3b93e77d3044",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "159994a9-3c60-4d45-955a-9b08bbe32b3e"
        },
        "item": {
          "id": "23041f78-42ae-478d-8c9e-53c2b596b886",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6bc0a676-6008-4ae9-9f03-7cff8c1a60c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9efa6b8-4fcd-47ee-9767-5171e2e0a3cf",
        "cursor": {
          "ref": "ee9280d4-16f8-4c20-9bf8-6a47be688956",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ca67b44e-bc36-458b-8eb1-af9ac18b1244"
        },
        "item": {
          "id": "a9efa6b8-4fcd-47ee-9767-5171e2e0a3cf",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a95361d3-a346-42d3-9662-243ec23d6930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "953f317c-2e75-4497-94ad-35525f0220f0",
        "cursor": {
          "ref": "4a17ef00-ced4-41c9-adf6-8d93b6c45e8b",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0129eb4b-c3c7-4620-aaa2-ebe664e63b4b"
        },
        "item": {
          "id": "953f317c-2e75-4497-94ad-35525f0220f0",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c111bb94-0919-4316-b871-54668fda3bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f30d5e-4e67-4661-8199-9654385a783c",
        "cursor": {
          "ref": "be37168b-5d20-453c-82fb-3c29802a3661",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "25992d62-cc1d-491e-8e0c-e0c487129434"
        },
        "item": {
          "id": "10f30d5e-4e67-4661-8199-9654385a783c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "895952f4-5513-417e-812f-367740be97ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5fe5ecf-bbf4-4ebe-ad53-7c7ede7cf286",
        "cursor": {
          "ref": "62359ba6-3eed-45bc-b62d-d6189e1a74b0",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8301ea66-406d-4a7e-929c-cf7a3164a1a4"
        },
        "item": {
          "id": "a5fe5ecf-bbf4-4ebe-ad53-7c7ede7cf286",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "74f5c61f-e8c7-44fb-bcfc-b0f3475605d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7068d0b-cc9d-4306-a63c-c8415f380119",
        "cursor": {
          "ref": "12ccfcca-1917-4666-912e-c7f8d932bb37",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "1b714d10-2bf5-4d0d-95f7-9af2945b3048"
        },
        "item": {
          "id": "a7068d0b-cc9d-4306-a63c-c8415f380119",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "23977cda-32b6-438f-aaf0-99d2e687522d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a57ebf3-2d0f-4b61-90e3-f5a95fed8782",
        "cursor": {
          "ref": "99060a6b-a9c1-4f07-8b3f-f0556bf82c54",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0831aa85-6b2b-4947-bdea-c623a11f07ee"
        },
        "item": {
          "id": "9a57ebf3-2d0f-4b61-90e3-f5a95fed8782",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c8d16119-b15c-4519-a034-626bb51a75b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a753da-cec3-4596-a823-6bdec42a2961",
        "cursor": {
          "ref": "892875ee-5bb9-48fe-b3e6-dfa8d39ab5a6",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "47b9aeae-ee1e-40fc-83e7-38cac813ce95"
        },
        "item": {
          "id": "26a753da-cec3-4596-a823-6bdec42a2961",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "241684e9-2f65-4ed4-a2a0-61dfdbeaa53b",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "900c0210-7f24-4d03-aabb-89d6d1ed3e85",
        "cursor": {
          "ref": "439a05b2-ee14-4041-9f62-f95ff3b1f049",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "acfeabfa-671d-4f84-877f-e6a1b583e183"
        },
        "item": {
          "id": "900c0210-7f24-4d03-aabb-89d6d1ed3e85",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "6382bac8-7f7f-470a-b54a-2e96576b3f3c",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "a7faa085-899e-4c6f-bea0-bf27538a1cfb",
        "cursor": {
          "ref": "991ef5ec-1146-42ed-a6c2-71346bd9acb0",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "3dde6d3e-7ccd-4e5f-87fb-bd90f4340117"
        },
        "item": {
          "id": "a7faa085-899e-4c6f-bea0-bf27538a1cfb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "fa4bda15-55ce-485e-9f84-043b5cb708c4",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "1bf7dcc7-92a0-40fc-b63f-9e3bf6379814",
        "cursor": {
          "ref": "e88fa19b-93d3-4caf-9ba4-376a80e6962e",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "0aad7927-9a68-47f9-a90f-004553ae4adc"
        },
        "item": {
          "id": "1bf7dcc7-92a0-40fc-b63f-9e3bf6379814",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c6ac75a3-c049-49f4-8ed8-c0fa8cef21ea",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "249d5a96-4334-4588-a4be-ba2d13224c35",
        "cursor": {
          "ref": "18b01ce1-031d-4ba5-952d-edafcf8710eb",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "600fb241-26c1-4a84-b778-927208731421"
        },
        "item": {
          "id": "249d5a96-4334-4588-a4be-ba2d13224c35",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a23a465c-9c0a-4bbc-821b-8be606bc3a8f",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "e56fa038-c0eb-4a79-b3fc-ea03e1e883fc",
        "cursor": {
          "ref": "70893965-0312-41fa-bf65-9f4dd073103c",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f008ea80-086f-4719-9153-a0a0acb18e24"
        },
        "item": {
          "id": "e56fa038-c0eb-4a79-b3fc-ea03e1e883fc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d919d901-e496-4a27-b303-9aedbedfbaca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98577a01-96a4-4b44-b850-03eeb86afb30",
        "cursor": {
          "ref": "eb7283db-5bd1-4a66-8c0e-f8d86da8d192",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "1a11b57e-cdd9-42c3-a2d9-a168dd962544"
        },
        "item": {
          "id": "98577a01-96a4-4b44-b850-03eeb86afb30",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "df0b99a5-76f8-46b3-b78b-dd8df34ec5b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7184460c-d69f-4b88-b7c7-8624df951046",
        "cursor": {
          "ref": "8d9b2d67-8bc0-43cb-8ce1-5742679d328c",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d5de0e5f-474e-40d5-8010-ae24d1d14bcd"
        },
        "item": {
          "id": "7184460c-d69f-4b88-b7c7-8624df951046",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "aa310190-6bed-4a4b-be88-26f1f1f0576a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6dd40ba-c844-40c0-862f-81e536038e92",
        "cursor": {
          "ref": "48ccd690-61c6-438b-9e85-46b86d4a2c36",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ae1f23be-73ed-4657-888c-05d9ebd1645a"
        },
        "item": {
          "id": "c6dd40ba-c844-40c0-862f-81e536038e92",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ebb94287-08fb-4109-bfe8-e10af86bb3a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2bb5134-6734-46e9-a909-7620c8d2bb41",
        "cursor": {
          "ref": "17665f10-bd52-45e0-b114-cfeeafdd3e94",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "63bedbef-ac7e-43f1-a572-08c8ddbc74b5"
        },
        "item": {
          "id": "b2bb5134-6734-46e9-a909-7620c8d2bb41",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "fe14c6db-b81a-41de-9a1e-61a80466b006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd98673-b20d-451a-a670-2efd1da3bb6b",
        "cursor": {
          "ref": "4315cc62-f428-4683-bf2f-49aadce112a4",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "bf6ce04d-af06-4edb-80be-f1be05cf3fd2"
        },
        "item": {
          "id": "bbd98673-b20d-451a-a670-2efd1da3bb6b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4093ffe3-e5fb-4994-986f-1b486077ea72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5d354f4-dbcc-49fb-a8e4-b66777a35fcc",
        "cursor": {
          "ref": "1b8e157f-ca5d-4b01-90ef-a02d287063cd",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "221f445c-7aa2-46c6-8d5e-93a19470d04b"
        },
        "item": {
          "id": "a5d354f4-dbcc-49fb-a8e4-b66777a35fcc",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9d33bdb4-5ab9-45d1-8263-c09eb3946479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e463f9-f8bd-4b13-8ba3-2522726678d5",
        "cursor": {
          "ref": "5a39ac78-c2d0-4cf7-a2b8-952b5f5e120e",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7b37e89a-2907-4c68-ad6e-4e9613e92949"
        },
        "item": {
          "id": "c7e463f9-f8bd-4b13-8ba3-2522726678d5",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a2f9ae41-ec6c-45de-a5d9-d577a8728366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8896c65a-40da-45c9-82b3-d09f16e2b5f8",
        "cursor": {
          "ref": "f39ca207-eee0-45f6-a958-38eef97d4332",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "845392ba-7c08-46fb-a829-2465a2bb7eb8"
        },
        "item": {
          "id": "8896c65a-40da-45c9-82b3-d09f16e2b5f8",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "272c23f8-4b3a-49e7-aa17-2e74ed8bc31e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f64e6919-fad2-43bb-999c-1b0eb02630ec",
        "cursor": {
          "ref": "86b538e8-ffdd-4bac-819d-c0cb62c4b804",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "19947a54-d1a1-485d-8483-c6d3640fe9c2"
        },
        "item": {
          "id": "f64e6919-fad2-43bb-999c-1b0eb02630ec",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7db5cf62-3194-4c08-bd0e-796f99362760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd83f355-f840-4d1c-8058-6172adceb193",
        "cursor": {
          "ref": "c3b9db5e-c4c9-4d63-ae58-c54f7d45b952",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "96de7ca0-a789-46da-a252-0407d5508d97"
        },
        "item": {
          "id": "cd83f355-f840-4d1c-8058-6172adceb193",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5c225de3-f08c-4157-bc71-409f221a65b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7942d0d-4aae-45df-aef3-7baab85c4cb6",
        "cursor": {
          "ref": "cc3504e9-4ed4-4feb-9867-2ba9f9c40d50",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b734fb5b-b67e-4219-84b7-adafef9d700b"
        },
        "item": {
          "id": "c7942d0d-4aae-45df-aef3-7baab85c4cb6",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d4a26cab-7416-4278-8980-07bd7afea2ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75ae77b2-1816-4e5e-b039-e18e1f182850",
        "cursor": {
          "ref": "7b7974cb-3484-46e2-95b3-01bc360ea75f",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "38bf958a-c09f-4f9c-91de-48f3eff75d3d"
        },
        "item": {
          "id": "75ae77b2-1816-4e5e-b039-e18e1f182850",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "dfa5e9fe-3191-4087-8fb5-8a3e7db84a18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f49399-ef28-49eb-8faa-12f93219e163",
        "cursor": {
          "ref": "97e4e5bc-c4e1-424e-80c4-b6e307cf3da0",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0a2dc25f-00f8-4f80-9cb7-4b59594b34a1"
        },
        "item": {
          "id": "05f49399-ef28-49eb-8faa-12f93219e163",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c531cea3-d810-4268-90ce-e880073d0949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e252a3f6-d84a-46e2-8528-ce676b68bb45",
        "cursor": {
          "ref": "7516eb8e-10eb-40a3-9604-c505ecd62e42",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b639a3f2-2626-4bbd-ab89-c17dc871e4ae"
        },
        "item": {
          "id": "e252a3f6-d84a-46e2-8528-ce676b68bb45",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d886bd6f-3556-470e-a9cf-56ffbf62b0fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7e0392-048e-4e7a-81e8-2a165fc36c8a",
        "cursor": {
          "ref": "60358631-87f5-44d2-8ae2-f70ea861044f",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b966506a-b155-44e7-b696-77e93e1c1bae"
        },
        "item": {
          "id": "9e7e0392-048e-4e7a-81e8-2a165fc36c8a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ad25dbe5-99e1-44b3-b7ec-ad6428ec1bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a01eb2b4-193f-4dd0-8e4a-cff8aa1ef68f",
        "cursor": {
          "ref": "a24be1aa-4dd1-406b-a005-3f38ac2857c0",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5d9f2769-66fa-4b4e-8e40-a176bc067209"
        },
        "item": {
          "id": "a01eb2b4-193f-4dd0-8e4a-cff8aa1ef68f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d216624c-054c-4e8b-b1e2-8a8cb7fdd0d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cbb0b53-961c-4362-9ec5-1a216a23c3ba",
        "cursor": {
          "ref": "5da9f725-f488-4ef2-b1b2-67e33bc08a5c",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8df404e6-01cb-44f1-a15a-d7dcf2041c67"
        },
        "item": {
          "id": "1cbb0b53-961c-4362-9ec5-1a216a23c3ba",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "59e9052a-759b-4958-a95b-47059e0b1987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b488d355-eef0-4655-b4d5-e5d459ce1927",
        "cursor": {
          "ref": "b32f567a-a6f9-488d-83e6-678448a4e018",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "27a59ead-ad4a-4b02-9db5-1ce65cd24808"
        },
        "item": {
          "id": "b488d355-eef0-4655-b4d5-e5d459ce1927",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "3998e64c-eb23-48b5-9299-5e4df09fc7f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2452bc1a-fc6c-42e0-8a9a-6e19680526d0",
        "cursor": {
          "ref": "9282b6f1-78c1-43d5-9422-4cc576b1bbf3",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "83bdbd4c-824d-439f-9700-39b0d34580c2"
        },
        "item": {
          "id": "2452bc1a-fc6c-42e0-8a9a-6e19680526d0",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "8863f06c-d359-4749-85d7-bc7ef367a684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a49f9cc-a3ff-46f9-97d0-7cb76ad60526",
        "cursor": {
          "ref": "8d1c9aa3-3507-413f-bb23-17135fa31303",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c64e7d90-b08c-440d-85fa-c0032d73c80b"
        },
        "item": {
          "id": "1a49f9cc-a3ff-46f9-97d0-7cb76ad60526",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "92e5c688-cdd4-4ef1-8a18-d3f1443f2647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741308fd-905c-457a-a639-641ed37a754c",
        "cursor": {
          "ref": "607b0d9d-1c23-43d6-9995-3f05385ffe02",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3148f8d1-30c7-4bf3-8198-ad1448115b5e"
        },
        "item": {
          "id": "741308fd-905c-457a-a639-641ed37a754c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "58ade38f-9f50-4450-893a-786cc03ca09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b999f45f-8e18-4645-9b08-19829e592314",
        "cursor": {
          "ref": "dae8cabf-d741-46d5-804f-56d046fb0874",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b7ec91a0-ec0a-40a8-bde0-c2771d08f855"
        },
        "item": {
          "id": "b999f45f-8e18-4645-9b08-19829e592314",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c5bbaddc-3170-4d67-9986-af6db27493ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f35a5c41-bf63-45bc-9264-420f85e0a3b3",
        "cursor": {
          "ref": "ef176939-89ca-4a8c-9cd2-0eb554572a72",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d1608740-ee69-4f2f-850e-cc38f98ae472"
        },
        "item": {
          "id": "f35a5c41-bf63-45bc-9264-420f85e0a3b3",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "52c9aaad-44a9-41ef-9584-8088317556be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e96719-e46f-4d1c-aa42-7fe4f28ac2e0",
        "cursor": {
          "ref": "07dcfdf0-1038-45e0-b402-93784a556cc8",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4c9b04fa-db83-407c-a0ac-802d07ab2219"
        },
        "item": {
          "id": "d9e96719-e46f-4d1c-aa42-7fe4f28ac2e0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a26f0b2f-2f9a-47d4-84c5-782df1799f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba0864b0-6111-4906-afc6-ac42fb9fa51d",
        "cursor": {
          "ref": "9784c0ba-4a2c-448b-a392-7494c950b047",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e4857614-0e0e-47c8-9819-19d312ac2f2d"
        },
        "item": {
          "id": "ba0864b0-6111-4906-afc6-ac42fb9fa51d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e433d6ef-8c93-4395-bc7f-12a1da2e16dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535742eb-2504-41a3-971b-891c2dafecd4",
        "cursor": {
          "ref": "b1ef0725-9959-4dba-bf55-e27ccb1ae0b7",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "babb4a22-cd0b-4652-9bcd-41d7667678d2"
        },
        "item": {
          "id": "535742eb-2504-41a3-971b-891c2dafecd4",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "aac693a9-e1ca-439a-80cf-35c0d41e2c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f640046d-0361-402c-8fc7-1d749b9f78b4",
        "cursor": {
          "ref": "a70dd7c8-ff36-4bcc-af16-3064b2065578",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2a244acb-bd6b-4653-932a-8f3d9c5a477b"
        },
        "item": {
          "id": "f640046d-0361-402c-8fc7-1d749b9f78b4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7f2c0ca4-99fb-4c5e-811c-3ba55fc2eed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d34d93b2-316c-4e97-98d8-85e6158deece",
        "cursor": {
          "ref": "48ae74a3-2e57-4721-9920-19adf567e8b9",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e12f5698-589d-458d-8175-4bf46fc0486e"
        },
        "item": {
          "id": "d34d93b2-316c-4e97-98d8-85e6158deece",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c84929b0-21a5-41ed-9fff-fe5f4a73c88f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a17f02-c485-46f9-ab1a-aa6998f15206",
        "cursor": {
          "ref": "6eb7305c-2d82-48ce-b9a2-ce1f9d81cd28",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "bd5ebda0-ac93-46fd-8350-9cc555131b77"
        },
        "item": {
          "id": "96a17f02-c485-46f9-ab1a-aa6998f15206",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4135e9a9-dcf6-4334-9773-84a9351bc4bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad6d0939-4917-4b51-be72-04031afe2e55",
        "cursor": {
          "ref": "488c2221-2575-4124-836b-3369d74961ca",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6b949bac-4981-41cf-bb00-28c92e1048c9"
        },
        "item": {
          "id": "ad6d0939-4917-4b51-be72-04031afe2e55",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c3ea4a8a-a328-4825-b083-944d8fc4a847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "405d2d57-39be-4c40-95bc-76f77544bfd0",
        "cursor": {
          "ref": "a98ae4b9-3369-4309-b399-7a6399df8da7",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "134dfc36-ea5d-4aaf-ab9a-9a8bb872fc38"
        },
        "item": {
          "id": "405d2d57-39be-4c40-95bc-76f77544bfd0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0e791300-37ee-4b0e-b681-c591258f0234",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "994ff92e-3fdf-4f62-9d3f-46335596d691",
        "cursor": {
          "ref": "0646382d-d092-480d-8545-171266f3de24",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d30988b7-5f2a-450b-951a-4ca74affe807"
        },
        "item": {
          "id": "994ff92e-3fdf-4f62-9d3f-46335596d691",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "fb8600fe-13c4-4e58-b6f2-1764e6c816ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "9f1bf873-bb2a-47e1-aa01-d6793fb6bca5",
        "cursor": {
          "ref": "7d2130ce-f57d-45a7-9388-c5ffda48a7f9",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "907b6db7-4c2f-4089-84cb-88b6f926d096"
        },
        "item": {
          "id": "9f1bf873-bb2a-47e1-aa01-d6793fb6bca5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f378a690-c8de-418b-b16b-d214e361b738",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3727e4f-ad24-4164-a01f-ba8f506d662a",
        "cursor": {
          "ref": "c8f64c12-b486-4563-8588-d675c8854e58",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "db552912-1cbb-45ec-b08d-2e5981720739"
        },
        "item": {
          "id": "f3727e4f-ad24-4164-a01f-ba8f506d662a",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "3ed9d7d5-e95e-488d-866c-2b37c0bde45f",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa883f2-cb4e-49b7-8e0d-d235e412e99d",
        "cursor": {
          "ref": "f7feaa82-ae52-4190-a1b9-e2f37c9750dc",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "08c458dc-1642-4cf7-ae82-440b46d1e074"
        },
        "item": {
          "id": "8aa883f2-cb4e-49b7-8e0d-d235e412e99d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "458cb429-b704-4ea1-b078-980db57a17bc",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b904dec7-3b3c-4461-9bdf-e7f110b6f915",
        "cursor": {
          "ref": "01128fa4-26a3-4940-86f1-13e19bdb39eb",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "40d08cd5-deba-4618-a199-fc8d53481f31"
        },
        "item": {
          "id": "b904dec7-3b3c-4461-9bdf-e7f110b6f915",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "53cd8ef7-9eb5-412d-97e6-09b968ec1d2b",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc4fadd-20be-40d1-ab79-90f4c9d8adb4",
        "cursor": {
          "ref": "e57e3cbd-cb5f-450b-9dc6-0271d254c172",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "41b9841b-9f99-403f-a272-35e25ea01fcb"
        },
        "item": {
          "id": "abc4fadd-20be-40d1-ab79-90f4c9d8adb4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "43c10a30-a7b1-4608-839a-af842e00af73",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-01T00:39:31.840Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-01T00:39:31.840Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "a57e8dae-c3b2-4993-9649-da32d29670b0",
        "cursor": {
          "ref": "7aa86401-446f-487c-8b9b-d3bc5d094fa1",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0c3bebcc-c03a-4f4a-b47a-54fcb174fd8d"
        },
        "item": {
          "id": "a57e8dae-c3b2-4993-9649-da32d29670b0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8b998328-1391-457c-b3ee-5a71e1166f8b",
          "status": "Created",
          "code": 201,
          "responseTime": 437,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e6aad0-96e6-4e45-b5b2-82a1a6dbed81",
        "cursor": {
          "ref": "eab2a3ba-f628-48f7-917d-ee4ea5c6c7d6",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "74e9fd37-aa6f-4c05-b36e-41ba13a844c0"
        },
        "item": {
          "id": "18e6aad0-96e6-4e45-b5b2-82a1a6dbed81",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "75e5d040-bfd7-4bac-a1a4-85463453929e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc229b9-7d0f-4bf0-82ac-8a6b8e3c69a9",
        "cursor": {
          "ref": "5320ad09-1d69-41d4-b937-4e82aa747255",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5a008e41-51d2-46d0-b5d8-2ea41fd61de3"
        },
        "item": {
          "id": "ccc229b9-7d0f-4bf0-82ac-8a6b8e3c69a9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "29ef2a70-a888-4ec9-b586-b33171df1579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a340f82d-769a-4e59-ab0a-32faadb680ce",
        "cursor": {
          "ref": "06a3fbed-b68a-4c8b-9396-0a468aeab19f",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b414980b-f9c7-4b89-b603-31f8f185a0cb"
        },
        "item": {
          "id": "a340f82d-769a-4e59-ab0a-32faadb680ce",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b92302a6-641c-4659-ba92-12aa3908dee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de79f61a-386d-4e13-a692-b5cf89adfacf",
        "cursor": {
          "ref": "22f9d6dc-5280-4840-9612-b7be6bec16c6",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d022f1af-c23a-4df6-8835-b4e4077f1112"
        },
        "item": {
          "id": "de79f61a-386d-4e13-a692-b5cf89adfacf",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c121c8a1-f658-4f2f-a58a-284c0f466f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b72b884-f856-473b-b409-2b5b635f4fbc",
        "cursor": {
          "ref": "a0fc08ed-6f4d-4a08-acb5-bda7bcc827f5",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "31a6ec35-1e88-4eee-b016-5f9783c7ec30"
        },
        "item": {
          "id": "0b72b884-f856-473b-b409-2b5b635f4fbc",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f5ce8a2c-5f02-4e69-bb40-ee55f5505d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af7b6653-c07c-466b-a433-c58d98a7a1a8",
        "cursor": {
          "ref": "9022080e-f478-4c71-b357-fdb788ec2ff3",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "696ee474-03a7-4569-9df2-b60ff72824a7"
        },
        "item": {
          "id": "af7b6653-c07c-466b-a433-c58d98a7a1a8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8dbb1823-5323-40ac-aaab-09dcf3bc24ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9786e1b8-bd45-47fb-ae3e-00939f6bcce1",
        "cursor": {
          "ref": "8a5e6512-f7b4-4b4a-b7d6-93adc7f78b70",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "80b06129-57b2-4fb1-a6f9-9ef8b69cdcbc"
        },
        "item": {
          "id": "9786e1b8-bd45-47fb-ae3e-00939f6bcce1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "72436a10-e568-4017-a06c-dd8d1e518973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b0feb2-4f63-4784-ad3d-cbb334076749",
        "cursor": {
          "ref": "c19c583f-755e-4008-b5f3-8ed45e4e4923",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d8d0e0a6-ee0d-4300-90a9-3b15976ea5e2"
        },
        "item": {
          "id": "11b0feb2-4f63-4784-ad3d-cbb334076749",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2da35b10-468b-49ba-9a54-3b76e3249aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410ab706-502f-48c1-8402-b05238d35814",
        "cursor": {
          "ref": "887ff3d1-db2a-49db-9225-458eb8cd06a5",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "60beefab-e5a9-4ab2-a291-be34ea53a268"
        },
        "item": {
          "id": "410ab706-502f-48c1-8402-b05238d35814",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "13946ab0-5c7f-4bea-8233-46a8b04bcfa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd52e2aa-9fd4-4de2-b88e-c1bb788b0208",
        "cursor": {
          "ref": "de4a882e-b6bd-4e15-9d33-202f4a781f7c",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8175b48f-0881-4764-b2ad-94b664ba9523"
        },
        "item": {
          "id": "bd52e2aa-9fd4-4de2-b88e-c1bb788b0208",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d5a976de-a4ed-44f8-858b-cdf70a20b681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf340411-98f6-4946-ab01-23e8be9daad3",
        "cursor": {
          "ref": "04dba60e-dace-4b00-9f95-c9a6de45ebf4",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2cbc4118-c742-497a-843d-d4eac84fbb1d"
        },
        "item": {
          "id": "bf340411-98f6-4946-ab01-23e8be9daad3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "76476cf7-dfef-48e5-97cb-ea954b4dd2f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6222791b-c6de-4af5-95ee-892317383440",
        "cursor": {
          "ref": "3c731779-5e11-4b04-9d12-bb0bc169942a",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "68095585-7d7f-4d7a-aef2-8fefe203187a"
        },
        "item": {
          "id": "6222791b-c6de-4af5-95ee-892317383440",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d93323fb-ff17-4270-9685-f614b7391c4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f32efd-998b-4360-a7f1-6a9278e190d2",
        "cursor": {
          "ref": "fb3bbdc5-2d16-4a22-a906-583185f19610",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2b96031d-455a-4f44-9761-603e61f77919"
        },
        "item": {
          "id": "50f32efd-998b-4360-a7f1-6a9278e190d2",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "89cce0e9-8412-40ec-8fef-6da7b2e0b415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fbdd372-82eb-4009-8389-07e3cfa1bc6c",
        "cursor": {
          "ref": "8ba1a8eb-2716-4606-a9cb-fd529f689bdc",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "257ed998-7b7a-43a4-a6ba-8dc59ac87b45"
        },
        "item": {
          "id": "9fbdd372-82eb-4009-8389-07e3cfa1bc6c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6ee6956f-ed91-40bc-a876-79f8926dd058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909acd8e-a651-444f-8818-0e85629626bd",
        "cursor": {
          "ref": "8827ddc1-e6d5-404d-aec9-17d2f574561b",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a247ea2c-61e5-47f2-8e6d-72df6a79f1e1"
        },
        "item": {
          "id": "909acd8e-a651-444f-8818-0e85629626bd",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4012fc99-8320-4483-bfb9-92fb4289f5ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba81735-b0a5-4b72-a82b-4183db2a72f1",
        "cursor": {
          "ref": "d9b2c616-a179-4d94-b76b-42eaf159a41d",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "03a165db-d085-44ef-a13a-c1e1ba4212e8"
        },
        "item": {
          "id": "3ba81735-b0a5-4b72-a82b-4183db2a72f1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "58eb1d6b-0ebd-483d-9ee2-6ee68758dc4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c7bba8-3621-4386-99d9-f9988da86c3a",
        "cursor": {
          "ref": "8df4c05f-0f93-4f3f-9105-9b9949b9e0d2",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "510a95e2-cb67-4c6a-88ed-9c568d799c65"
        },
        "item": {
          "id": "80c7bba8-3621-4386-99d9-f9988da86c3a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "52743e5b-d562-4a5a-9349-5aa975557da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93279dd7-047f-43a5-a58d-346e70247ecc",
        "cursor": {
          "ref": "6fdb29fc-d726-46f2-bdfc-1a341c0169fa",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e88df693-20d0-470c-b7a9-49bdf09188d0"
        },
        "item": {
          "id": "93279dd7-047f-43a5-a58d-346e70247ecc",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "16edb098-8582-40db-8b62-9841c8d704a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ccd894-aa10-4042-8a9c-fcb922903922",
        "cursor": {
          "ref": "d362b8fc-2330-4a1c-8487-d7b2279b3585",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e4f7a82f-aa47-4684-9073-5782baa65208"
        },
        "item": {
          "id": "f5ccd894-aa10-4042-8a9c-fcb922903922",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "aabe54dd-25a5-4800-b949-44521c3d65e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41cd1432-4aa5-482c-a117-2a2d7931f5c8",
        "cursor": {
          "ref": "781e0750-7743-49a7-b01a-8ddd10ca7ab9",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "12229f9a-f7fa-4613-b4ba-f4cc19d8770d"
        },
        "item": {
          "id": "41cd1432-4aa5-482c-a117-2a2d7931f5c8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e147c2ea-33d8-4613-9e81-6d884376b1f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2475d887-ea7c-4426-b3e3-abd3cfcf4826",
        "cursor": {
          "ref": "27e3df18-6815-48b4-9d27-025765bbc05f",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "55035714-7a08-4252-b71d-f3ed6778a487"
        },
        "item": {
          "id": "2475d887-ea7c-4426-b3e3-abd3cfcf4826",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "161077fd-f741-4c8f-b32c-0b724832fdcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0cbb932-ba4d-410f-9993-a9815b1f96cb",
        "cursor": {
          "ref": "496f0b3c-b2ba-43a5-8693-2492ba47eb1b",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d9f75b84-e112-4c59-9119-ad230e5698eb"
        },
        "item": {
          "id": "d0cbb932-ba4d-410f-9993-a9815b1f96cb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9f892aa7-0257-4f77-bbb9-7103fd2c487d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "105547a4-f51c-4713-a13a-2a11ec5814ee",
        "cursor": {
          "ref": "46fd9620-6b99-4d7b-a62f-8fef44596c05",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "83d9cdc9-941c-4c09-ace8-b463a8909774"
        },
        "item": {
          "id": "105547a4-f51c-4713-a13a-2a11ec5814ee",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c5b0d307-c49d-42b4-85cd-81fd6bb087b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab15515a-ea3f-4d0e-beda-5eeea8e3f02d",
        "cursor": {
          "ref": "d9365fb7-70bd-4ff8-9b71-586cafd37708",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3430e39d-3bc6-4fa6-9caa-019ad7ce02c6"
        },
        "item": {
          "id": "ab15515a-ea3f-4d0e-beda-5eeea8e3f02d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0795ce50-2f9d-485e-9f44-ff23c80fdba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "109f67fc-4f24-44ce-a001-9d04583b37d5",
        "cursor": {
          "ref": "ddd8265c-8df0-4a42-9fab-31424241c5cc",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2dd9c37c-5503-4847-8c17-fcb2f080b8d9"
        },
        "item": {
          "id": "109f67fc-4f24-44ce-a001-9d04583b37d5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b43f525a-4258-4598-a254-179e89c80982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36792924-f67a-4c74-b62a-a6b92a418753",
        "cursor": {
          "ref": "77aaf8af-c0f1-46ec-94d0-2dab187322ff",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "8e1115a3-e7cd-4b3b-a160-7754d6af8b3f"
        },
        "item": {
          "id": "36792924-f67a-4c74-b62a-a6b92a418753",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "154c6eab-f891-4324-b1ec-cfc0de202c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f2143b1-cb36-4dfc-ae0e-9e546030a93c",
        "cursor": {
          "ref": "dae6e83f-d7de-4cc3-a539-86c7ff12774c",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "71d2afd0-8a8b-44f2-b0f1-31fde3c70d14"
        },
        "item": {
          "id": "7f2143b1-cb36-4dfc-ae0e-9e546030a93c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "01e73d17-1473-4b1d-85b0-6e1e24f3456d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e839e30-e679-4b80-b17d-086b2b85f35b",
        "cursor": {
          "ref": "d5643d44-b085-4d6e-b3f1-3365a7a2087c",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a23765c6-af21-4452-b39a-3625f5c17970"
        },
        "item": {
          "id": "4e839e30-e679-4b80-b17d-086b2b85f35b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "030dd529-678d-48c7-b01a-a1bab328c31b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203fdc7a-d602-4517-87e5-0116a060781b",
        "cursor": {
          "ref": "59986ab7-994c-44bd-8569-e8313e2e0da1",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2fae446e-826a-4347-8100-052fdf1003dc"
        },
        "item": {
          "id": "203fdc7a-d602-4517-87e5-0116a060781b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5e97452a-b5f1-441f-9892-812fe22bfc05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed21e2cb-f913-411b-bb36-5dd9d20aa744",
        "cursor": {
          "ref": "528381b9-440e-4ded-8c92-a7ed4c9f0697",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c6f89ce4-d7cb-4fbe-957e-886d53f1eb63"
        },
        "item": {
          "id": "ed21e2cb-f913-411b-bb36-5dd9d20aa744",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "791cf034-2ece-4c02-8e57-bcd37b2de690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dade6212-622b-465c-9237-49bc361b69d8",
        "cursor": {
          "ref": "c7a819be-7d1f-4fca-99f7-649c0cec0445",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f8f0ef3a-32cd-4cd1-9469-4d868287594c"
        },
        "item": {
          "id": "dade6212-622b-465c-9237-49bc361b69d8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0db13709-56c6-4c93-b0a6-19b0e80f6b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9349a9-b88f-492c-8948-ddb3e28e730a",
        "cursor": {
          "ref": "3bb180ed-55bb-4131-8e21-e78866afef6e",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c22ca29c-7121-4bfb-b9b6-7994ccf19761"
        },
        "item": {
          "id": "cb9349a9-b88f-492c-8948-ddb3e28e730a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "58de5292-7fb1-43e8-b4e5-2e5aeba242d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea6eaea5-9f65-4ad4-a8bc-d5ab8b9035dd",
        "cursor": {
          "ref": "921bd8e9-f0ee-4a1d-a47c-535a8c2e6cd5",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ca9b1ab3-e551-413c-9f05-23e5079b1009"
        },
        "item": {
          "id": "ea6eaea5-9f65-4ad4-a8bc-d5ab8b9035dd",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "67d6ceaa-b57c-439d-bc28-b59fbe437900",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c1f857-4e16-40e5-a233-5b57135cd934",
        "cursor": {
          "ref": "9ec2779a-a5c9-446e-ab75-25e550b1758c",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "63f8d983-39e2-40f7-9227-ef26eee4a8bc"
        },
        "item": {
          "id": "c3c1f857-4e16-40e5-a233-5b57135cd934",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8ece9827-9a63-451d-8f5d-52cf8beaf029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f99607-6fa2-4c87-b57d-38f71dc89ab4",
        "cursor": {
          "ref": "9f8fc006-9d00-4e21-9da8-bc4452b67029",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7703ec4a-d3e8-4f7b-9aa7-11adaaf748b0"
        },
        "item": {
          "id": "37f99607-6fa2-4c87-b57d-38f71dc89ab4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4faf9c5a-f9af-4a45-896c-e9e3e3b8030b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbbdf36c-0b4b-4866-86c9-5b520ed94fd1",
        "cursor": {
          "ref": "9c230f22-72e1-4e41-8e48-3cfa77e00f57",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "446cf187-b390-43a1-8ad3-5c440eb8fbad"
        },
        "item": {
          "id": "fbbdf36c-0b4b-4866-86c9-5b520ed94fd1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "31d2ce81-19c7-40af-a4a3-4929865b6f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfdaf409-5f42-4bf2-b8fd-94197ed53283",
        "cursor": {
          "ref": "be63bf28-f321-4a39-9899-486903eacf34",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6447ce0f-740b-47f0-b4f5-f1432d7ecc30"
        },
        "item": {
          "id": "bfdaf409-5f42-4bf2-b8fd-94197ed53283",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "14e24564-73af-44dc-bf9c-83747c4217bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c621e70d-49c7-4afd-b9ac-f095c3af200b",
        "cursor": {
          "ref": "119de5b6-c0b3-4256-bf4f-e210856d2bcb",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9ce86923-d489-4fe0-9d33-d670bc2da582"
        },
        "item": {
          "id": "c621e70d-49c7-4afd-b9ac-f095c3af200b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "47b56095-423a-48da-96ba-095dea65c722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d483e8ae-0da0-4b50-9ca3-3ee7226aa81c",
        "cursor": {
          "ref": "6fe5c642-8389-4d36-b5ad-a570a2a962d4",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4dd356fb-b5ac-414e-917e-064fa425978f"
        },
        "item": {
          "id": "d483e8ae-0da0-4b50-9ca3-3ee7226aa81c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "17c5f584-2753-43be-9397-519bae57baba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b47240ad-97ab-4469-886b-a622119d5225",
        "cursor": {
          "ref": "8a34f834-8b86-4690-9ffe-1263fb75021c",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a7ffcdaf-a9f1-490c-86b4-b8cc5fa968d0"
        },
        "item": {
          "id": "b47240ad-97ab-4469-886b-a622119d5225",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8d0115a1-c033-4027-adf6-fd71ba03cd82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717a6c27-9292-410e-8e69-94250cb229e5",
        "cursor": {
          "ref": "29a860d6-0540-43ce-8cc5-80b11a43a264",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e2a11607-003b-419c-b33d-8741cc12500f"
        },
        "item": {
          "id": "717a6c27-9292-410e-8e69-94250cb229e5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5d833c60-ddcd-4f1a-a672-bef197d61516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00cdceef-9967-4ea0-a4f1-31fb0dd91be5",
        "cursor": {
          "ref": "3d941c70-96ea-47dc-993e-0f4f670b2f86",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "42dc1594-6d58-4e63-ab8d-fcb8698d5ac9"
        },
        "item": {
          "id": "00cdceef-9967-4ea0-a4f1-31fb0dd91be5",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0ecc94b3-31d5-41a4-afa2-ca782c4dbbae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4b346ed-f28b-4ef5-98ab-402e0db7f70e",
        "cursor": {
          "ref": "f9b2dde6-27e4-45a4-8b65-3694cbe42dcf",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "26786a72-2bbf-46ed-acc9-36a6c58a0515"
        },
        "item": {
          "id": "f4b346ed-f28b-4ef5-98ab-402e0db7f70e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0014d51c-98a6-4d40-a2dc-bbc15adc08eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd337e29-3d82-4db7-a2a3-cc29de3c2d7b",
        "cursor": {
          "ref": "33183c88-886f-4575-a59b-24ab63dc2065",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "bee863dc-545b-4eee-96a6-04fb606ac4a6"
        },
        "item": {
          "id": "dd337e29-3d82-4db7-a2a3-cc29de3c2d7b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4f454b7a-1635-4e88-be99-7306878959cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "007c865b-87c5-4d1e-b0fe-509262a5c663",
        "cursor": {
          "ref": "482a7440-2059-4012-aaf2-8033c1751cd7",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8fef1850-6d77-4263-ba91-e80a3f2cdabc"
        },
        "item": {
          "id": "007c865b-87c5-4d1e-b0fe-509262a5c663",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "da177e78-9d3f-4e22-9833-4d6bcbc6d806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08633920-b1e8-4d1e-be84-7f31af69966d",
        "cursor": {
          "ref": "fef3a298-d585-4eef-bb66-dcb1e462f515",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "39b46813-834a-4ac5-8b10-b36ed06b150a"
        },
        "item": {
          "id": "08633920-b1e8-4d1e-be84-7f31af69966d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "534cc161-a1d4-47a6-801e-117efbeacb55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d120946-53a4-416f-b701-99477df0a88c",
        "cursor": {
          "ref": "237e4e88-10a7-4c9c-8640-dc827cea836f",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7cf01f49-af40-4f8f-8775-b030233b1687"
        },
        "item": {
          "id": "7d120946-53a4-416f-b701-99477df0a88c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c77701ad-d96a-4f0d-8149-78ddfce30d0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06317655-9c0d-4ed0-9bb9-94b2b06c1bec",
        "cursor": {
          "ref": "c12ad3e4-e9d5-465a-af5f-5ef3bea0ff84",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "98466d9f-e169-4c83-856d-6d6580a27c6c"
        },
        "item": {
          "id": "06317655-9c0d-4ed0-9bb9-94b2b06c1bec",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f1f98401-77a7-4b50-9f34-576a8992bbb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c9b87b-3fd3-4e09-8c77-9d3e4e7d29dd",
        "cursor": {
          "ref": "609c1e4c-d05c-4b68-bab8-6d80e9999477",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "290a79a2-c213-43bd-b83d-bf36db2a6708"
        },
        "item": {
          "id": "09c9b87b-3fd3-4e09-8c77-9d3e4e7d29dd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e8730fee-9307-48b5-98a6-7f0314f0ddab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d95d97b-6926-449b-85f6-f060bd45a1d7",
        "cursor": {
          "ref": "0b39119e-6754-4d40-bc71-d2c573e8cd82",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3478cad0-59f2-46fe-b0ea-a9e4333e4a9b"
        },
        "item": {
          "id": "0d95d97b-6926-449b-85f6-f060bd45a1d7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3fb67508-81d1-4f8a-8fd3-89d16ea2e521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cfee76f-495c-4a94-af0b-757c517d64b7",
        "cursor": {
          "ref": "6213d563-fc7e-47b6-bb66-22589633a35d",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "24e00182-5ddc-4a62-ab4f-56d6df4218f0"
        },
        "item": {
          "id": "0cfee76f-495c-4a94-af0b-757c517d64b7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5c5c5050-cd4b-4927-9a23-d7c4e4f6ac27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c416c404-2513-46eb-95eb-56c6abd94f80",
        "cursor": {
          "ref": "a301cc11-d232-461e-b3d5-ccc3818fa111",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6d5b421e-cf1a-406c-851e-63db179565f2"
        },
        "item": {
          "id": "c416c404-2513-46eb-95eb-56c6abd94f80",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "863b8c2c-9843-402e-900f-f592b2e91864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab932edb-1b2a-4806-b231-ee8b4bedf42b",
        "cursor": {
          "ref": "221ea460-8fdd-4900-9221-18e90b476218",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3916c0ea-1f47-4ca3-949b-4b95b74e0e67"
        },
        "item": {
          "id": "ab932edb-1b2a-4806-b231-ee8b4bedf42b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "76c33c42-7523-4746-815c-0b66ea573cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb9ac28-15b7-4415-87fd-9d22cf5239d4",
        "cursor": {
          "ref": "244553ee-516f-4e71-b58c-ddc8fdb32bb2",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "2b4fe364-fbc5-4b65-81dd-0fd1f307ce2a"
        },
        "item": {
          "id": "0bb9ac28-15b7-4415-87fd-9d22cf5239d4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c2296927-52dc-4c1c-9960-b3445b314573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56984df3-cc07-423a-99cd-6554ebe0953f",
        "cursor": {
          "ref": "414ad61b-0425-4768-bbfc-948fedc626d1",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "31ea9c4d-94d7-4559-8741-1131b0d8b68e"
        },
        "item": {
          "id": "56984df3-cc07-423a-99cd-6554ebe0953f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "65990d45-0983-49e5-bbbd-4cfefee57da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9b6703-771d-45df-b68b-f2fab63b9b7f",
        "cursor": {
          "ref": "8570a43d-f05a-4bf4-a148-2c45de7f885a",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f9f91140-8f18-4b25-a02e-9b6ff42b6b38"
        },
        "item": {
          "id": "7e9b6703-771d-45df-b68b-f2fab63b9b7f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1917b54b-819b-494a-b551-772cc1811497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69df775-f2de-4050-9865-98c7ff2576e0",
        "cursor": {
          "ref": "36f9b96a-9c7d-4840-ba39-fe781675c4c1",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d3cd52c2-312a-44fd-8ddb-ff8915e46426"
        },
        "item": {
          "id": "f69df775-f2de-4050-9865-98c7ff2576e0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "bcc7480e-c847-4ec6-840a-39e86d6dfcb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a31967e6-739a-41cd-aa91-12eefe756973",
        "cursor": {
          "ref": "b3d792a5-6f18-48c7-bc07-8c4b6c60d3c2",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c6c10d5d-aca1-4122-a5da-59de9386824c"
        },
        "item": {
          "id": "a31967e6-739a-41cd-aa91-12eefe756973",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1534dcbe-92ca-4e7b-a651-14c54adc7523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60fcbb57-4e50-4f92-b38c-2a474daeaa05",
        "cursor": {
          "ref": "30974e0f-8eca-4a35-9f22-1f33a59f8100",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a0a95309-b882-4c6e-98d1-881d758a8f73"
        },
        "item": {
          "id": "60fcbb57-4e50-4f92-b38c-2a474daeaa05",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e82e4f6e-1c7d-42b5-8f9b-b6bd900fa692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0050655-1b8f-4af4-b717-22bda1ebdfdb",
        "cursor": {
          "ref": "a8f7f13d-951b-4716-b38b-c7c2c8ab9d11",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ae1f6716-8e46-4013-aca7-6494ef567215"
        },
        "item": {
          "id": "b0050655-1b8f-4af4-b717-22bda1ebdfdb",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fbeca23a-2326-4d80-8082-ac621c3e141d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eead0f8a-5bf5-4677-bc3e-c61e35ce5ceb",
        "cursor": {
          "ref": "fc66eb13-3900-4b3b-a697-9045768106f6",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "97806133-01cc-4b23-828f-6c864f32a401"
        },
        "item": {
          "id": "eead0f8a-5bf5-4677-bc3e-c61e35ce5ceb",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "44ba7aad-bad2-49f2-a0b8-958a59a86697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8aae979-044a-4753-9cd2-0a535ac5f4a0",
        "cursor": {
          "ref": "c929b3ef-d8d0-4ea0-b39a-88c5482b0e9e",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3a43945f-4a33-45ae-92ec-478b64f92d9a"
        },
        "item": {
          "id": "f8aae979-044a-4753-9cd2-0a535ac5f4a0",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8a2c8bb3-fb52-4bec-aa14-986fbd2445e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df6ae7fc-35e6-4cda-847b-ff10a6b4130b",
        "cursor": {
          "ref": "877c6b2f-f320-4d9c-a9b7-f78dfe70160f",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "af3da06b-fc16-4300-a4b3-e89e7b0c6a4f"
        },
        "item": {
          "id": "df6ae7fc-35e6-4cda-847b-ff10a6b4130b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c8cba9bf-3565-42e2-be46-b4d235258a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0766955a-311f-47e1-9ceb-33cfaa35a669",
        "cursor": {
          "ref": "91b47870-2022-46d8-b30f-5f75afeb6f27",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "040f1307-9eda-4348-9b13-a70dd233fb7d"
        },
        "item": {
          "id": "0766955a-311f-47e1-9ceb-33cfaa35a669",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "fa581c0e-75cd-4776-b046-15fe829f0b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afeeef90-8888-495b-bf38-b2487a469e92",
        "cursor": {
          "ref": "0f5ba8ba-8c83-4dd7-814c-7481183bd6ae",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "49639382-fcf9-4d7e-90a0-0f76ae07ef13"
        },
        "item": {
          "id": "afeeef90-8888-495b-bf38-b2487a469e92",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "9a7f6034-4ef3-41f4-8825-8e2b2fd5d42d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01573921-9c1a-43f4-8950-48ffb281b85a",
        "cursor": {
          "ref": "0e510024-be3b-4609-ba8d-0c8a73885df3",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "deb18e4b-4863-4e31-97eb-fa3060cc87d2"
        },
        "item": {
          "id": "01573921-9c1a-43f4-8950-48ffb281b85a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "2eaa1552-073c-4dce-afae-c25c4a06ca31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346bb60c-90be-4934-8075-3e20f1d7816e",
        "cursor": {
          "ref": "42fff295-b98b-415d-82d5-eaca9aba6d7f",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c54120ab-8d12-4c28-9c81-adbe153cc93b"
        },
        "item": {
          "id": "346bb60c-90be-4934-8075-3e20f1d7816e",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "178a5f15-e7cb-45de-b3c9-09c7631735b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ce4c43-2697-487a-9dd0-d50349ea7029",
        "cursor": {
          "ref": "92046d4b-8de1-49bc-9d17-dc35635755d8",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "0399bc76-6162-4884-a317-87f1ebe0a9b5"
        },
        "item": {
          "id": "b2ce4c43-2697-487a-9dd0-d50349ea7029",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "cd90696e-e942-4cc3-91d9-e4045949bb5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf210252-e499-491a-a93e-eb8a32951248",
        "cursor": {
          "ref": "8a190bdb-b0e5-420a-b3c8-8537ed22e47f",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c185903f-a908-4c0e-863c-bc2190d480aa"
        },
        "item": {
          "id": "cf210252-e499-491a-a93e-eb8a32951248",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "bcdd4c91-948e-4e56-91bc-6d83a8f8f2b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7ee54e0-bdb5-4c8c-aac6-d6ccd336e4c8",
        "cursor": {
          "ref": "964bff68-8c85-4292-8af7-a2c009f5bfe1",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7d82a4f7-6596-495b-be61-247ff395f0a8"
        },
        "item": {
          "id": "d7ee54e0-bdb5-4c8c-aac6-d6ccd336e4c8",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "5f65beae-7ac9-4f55-8836-9f0935ff08b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0903ae6c-c35b-46b8-bc28-76f3e057caed",
        "cursor": {
          "ref": "82248c9b-186f-48f8-a2af-2d586db3d879",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d36e0a8d-7085-42aa-a0ba-13dc6cb068e0"
        },
        "item": {
          "id": "0903ae6c-c35b-46b8-bc28-76f3e057caed",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "402e8c4e-1f85-4ed3-b0b8-5441208be0f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d7e9da1-6f15-4f19-9478-55fb983e1b9b",
        "cursor": {
          "ref": "60dbfcd4-36a8-481e-af62-c3e0c8d005ba",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5d30cba4-b66a-4752-881a-cfccc9a8418e"
        },
        "item": {
          "id": "3d7e9da1-6f15-4f19-9478-55fb983e1b9b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4dc03ba1-62d1-4ec3-8bd5-f04da83d2abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19cd093e-d586-4d3e-ab25-9688eb036be8",
        "cursor": {
          "ref": "52ee752c-5e51-4486-8541-8b799f490aa2",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1f174b54-8128-4ff0-9c62-e2554f16c8eb"
        },
        "item": {
          "id": "19cd093e-d586-4d3e-ab25-9688eb036be8",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "aa394040-8748-4e99-a265-f8e6b842e259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b50dd2-6c63-47f0-ae52-8fc074b1506e",
        "cursor": {
          "ref": "d7da265b-4dc1-4eea-a404-10b7f9958750",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "569946dc-802a-48b2-893e-a735c920e3f9"
        },
        "item": {
          "id": "78b50dd2-6c63-47f0-ae52-8fc074b1506e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6e674594-f17b-4ac8-ac14-b010f1798ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab490a75-c208-41e3-b877-5f1b7db91a6d",
        "cursor": {
          "ref": "b95288b2-b67f-4b8e-bd0d-7e1ef9e53bec",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "6ce51126-dfeb-4c7a-a75c-fde36c477fe8"
        },
        "item": {
          "id": "ab490a75-c208-41e3-b877-5f1b7db91a6d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "8d9a214d-6032-46e7-90a6-ecbeb3e9dace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89ae4a0-7c35-4e32-b9c2-16a0d9478011",
        "cursor": {
          "ref": "bf2d06ba-6eb5-484c-b58e-fc4fce4ff76c",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7317e847-414f-4828-9c7c-7b3b4346a04b"
        },
        "item": {
          "id": "a89ae4a0-7c35-4e32-b9c2-16a0d9478011",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6eb603d4-42f7-45f1-9ffa-4553a6c515e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c938c271-5f52-45c0-9e88-0b959c77a5b3",
        "cursor": {
          "ref": "ad0e654f-ae4c-4921-9667-ae98128e21de",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "5c83c464-a77d-42ae-b3ba-484e1dd33d83"
        },
        "item": {
          "id": "c938c271-5f52-45c0-9e88-0b959c77a5b3",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "be3696c1-55cf-4d79-8765-d717c0bad547",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "46c61a3c-637b-4e62-9cd3-4379da97ccea",
        "cursor": {
          "ref": "9b3aaeca-521a-40a2-818c-bca3dec92a28",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "30d2584c-5fa3-48b8-ab09-23e486dfc182"
        },
        "item": {
          "id": "46c61a3c-637b-4e62-9cd3-4379da97ccea",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9b89ffea-20f4-41b7-a756-3fec750e3eed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f866d3-f0be-4c7d-95a3-a5370b8524a5",
        "cursor": {
          "ref": "035e4c7f-b01f-4372-a74d-5ff883a720a2",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "422b288f-19e9-4629-aae7-25533ac43161"
        },
        "item": {
          "id": "80f866d3-f0be-4c7d-95a3-a5370b8524a5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4f38c65e-5a3d-430c-af8a-5a18ce6a7f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c41184-7ee3-460b-ac7a-2fd6700cd132",
        "cursor": {
          "ref": "81cbcfd3-3251-4984-8fe3-265ed4aeed72",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "dc9574e5-29f5-4093-a401-008ca27c6b52"
        },
        "item": {
          "id": "23c41184-7ee3-460b-ac7a-2fd6700cd132",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1f9791ec-c2fb-4ff0-a914-6559d4279ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c507bd-c605-4ff4-b6e2-b29dc01b7035",
        "cursor": {
          "ref": "9dca5c67-8689-473d-935b-eb03f1e0c8ca",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "8cee26ed-83a7-4bea-ac3c-c896fae5239b"
        },
        "item": {
          "id": "44c507bd-c605-4ff4-b6e2-b29dc01b7035",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "66e39a7b-a659-40d2-8833-20cdc6bee063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e6e237-ec2a-4390-b226-c2a901bf842d",
        "cursor": {
          "ref": "2e215ed6-c5c5-4cb7-b6eb-c864dca90c56",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d80ee7d4-3bd4-4afe-a22a-4dca0dbfdcc5"
        },
        "item": {
          "id": "f8e6e237-ec2a-4390-b226-c2a901bf842d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a06cbbd6-421a-49d7-9047-0937ae617e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8941d230-d252-4e11-b458-889f282a5bd8",
        "cursor": {
          "ref": "fc414b6f-7fa9-45c2-a929-d64dda4eb4b5",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3ae47cdb-2ca3-4a60-adfc-fc7494268918"
        },
        "item": {
          "id": "8941d230-d252-4e11-b458-889f282a5bd8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "315ce26a-e609-4900-8f3d-bfdab4b7bc6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa98c63f-e495-4bd1-87aa-6f7a1776b846",
        "cursor": {
          "ref": "9ae4105b-fbb8-416d-a73c-739c3ac351b3",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "569d6586-130a-4f28-8ff9-fd0e53e51664"
        },
        "item": {
          "id": "fa98c63f-e495-4bd1-87aa-6f7a1776b846",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "c1b025a8-2a9c-4fbd-a472-0429ee450d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "069d60c8-e768-44bf-b4c2-df841d85ca56",
        "cursor": {
          "ref": "b82f3e90-cab7-42c3-b9a7-303c497150d3",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "00c23308-6823-40f4-ad35-8c577f2a76af"
        },
        "item": {
          "id": "069d60c8-e768-44bf-b4c2-df841d85ca56",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "6eccee38-b052-46cd-87cc-3f5febc8b52e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4973ec17-8187-4b8b-9ad6-9d339570d23c",
        "cursor": {
          "ref": "063f1693-cbb0-4fdb-9b0b-072b17db2f2f",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "95673c16-9d09-4479-905a-e1828d43cb14"
        },
        "item": {
          "id": "4973ec17-8187-4b8b-9ad6-9d339570d23c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a30d1505-9c90-4f1d-9cc2-de9a72bfd32c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704fe5bd-44a5-4a6b-ac45-447dca88a27b",
        "cursor": {
          "ref": "b399204a-c8e6-4c80-b4e1-8758c786d283",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "53a0f63e-27f9-43bc-9157-bed0fc35eb0c"
        },
        "item": {
          "id": "704fe5bd-44a5-4a6b-ac45-447dca88a27b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8ad1b7d5-bf3f-48fe-9614-2151a8cb978e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e84f3b-b7d8-4973-a966-5a5f1eea31ab",
        "cursor": {
          "ref": "b98cb818-6741-4dd1-b21d-87bab983ddd1",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c6bf8fe0-00f8-4f22-b5e7-3d5034202d21"
        },
        "item": {
          "id": "82e84f3b-b7d8-4973-a966-5a5f1eea31ab",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8aa4db80-302a-4c27-a05e-6842eeceab6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f67779-afdc-4faf-a280-fb20eb9e8364",
        "cursor": {
          "ref": "eee0011d-716d-44a8-b937-f6a74bf3973a",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ff890842-e89d-4ee6-9711-c5fa14de0413"
        },
        "item": {
          "id": "26f67779-afdc-4faf-a280-fb20eb9e8364",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6b538c55-acc6-4f20-b607-492f2333885c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77947372-edfe-46a8-b2f7-464c9aabc388",
        "cursor": {
          "ref": "d7390f9d-8561-4c69-a99a-aa40cbfb0ed4",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "486ef073-345d-45a1-9b09-7ec8031d16bd"
        },
        "item": {
          "id": "77947372-edfe-46a8-b2f7-464c9aabc388",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3a92ac91-986b-4d5b-b442-aaec7ec8bc88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f12cf10e-a381-45e4-8cf4-3958824bdc7a",
        "cursor": {
          "ref": "dbc2cdbd-e263-47b6-90f7-63254a735a53",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "80139515-832c-4bb0-9d66-cc1738cd1345"
        },
        "item": {
          "id": "f12cf10e-a381-45e4-8cf4-3958824bdc7a",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "90b38fb7-27b9-4165-817e-452646cf3dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d4d753b-57f9-41c0-8bc0-dd4ffd56eb0b",
        "cursor": {
          "ref": "d8d487ef-60b0-438c-958a-5c402ca89fb0",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "fc1dc4a1-5699-43fb-9362-8723fca33299"
        },
        "item": {
          "id": "9d4d753b-57f9-41c0-8bc0-dd4ffd56eb0b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a6396839-6cb9-4c26-8e57-78579ddca54e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2528e0c2-58e5-43f9-8e1c-c43bc8cc899c",
        "cursor": {
          "ref": "67891e09-a8fc-4c09-869a-3d127b7d4041",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "bd5993f4-ea69-42bc-8d81-a17000f092fd"
        },
        "item": {
          "id": "2528e0c2-58e5-43f9-8e1c-c43bc8cc899c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "bae46daa-2dc9-4fcd-9b34-cf3b169851c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a03ddb6-a6c4-4237-8c92-3a0778dacfba",
        "cursor": {
          "ref": "e51c1820-7b72-4cf8-8984-cb3776b32261",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "73bc8b62-ca27-47a9-89ac-55c0bd185918"
        },
        "item": {
          "id": "7a03ddb6-a6c4-4237-8c92-3a0778dacfba",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4e7418e6-3f6b-47d7-b04a-a99641e5494a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a86121a0-7ee3-4e42-85a4-0c765fe3a4e2",
        "cursor": {
          "ref": "50ef2bde-4bb4-438c-8b94-7f0004a53483",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "aa052d19-33d9-45f8-922e-84291c4fb12b"
        },
        "item": {
          "id": "a86121a0-7ee3-4e42-85a4-0c765fe3a4e2",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "bb0d7892-da6b-4fa1-80d1-f852bb9157bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf0fcec8-7cbb-4d12-9344-6ada081fab3a",
        "cursor": {
          "ref": "16ea1371-3d26-4b70-81ea-ba5c54e17d66",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d884b455-0fb5-4810-befe-17ad5c5fc189"
        },
        "item": {
          "id": "cf0fcec8-7cbb-4d12-9344-6ada081fab3a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2015844c-cac2-49f3-82de-f2ef889b4891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51cfce70-e5e8-42c4-9980-81c9f710769b",
        "cursor": {
          "ref": "e2392f4b-3894-46e4-83e1-39015f4b72a3",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "16a4de33-f32c-47b4-8316-fd56f368fdb4"
        },
        "item": {
          "id": "51cfce70-e5e8-42c4-9980-81c9f710769b",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9ec32a3f-a6c4-4a17-9d09-14d18414507c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d191b4-cd22-446b-9cc1-5f78adaba96c",
        "cursor": {
          "ref": "44e8b146-bfa0-4997-a320-16b050bf1a45",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "5b801b0b-2b3f-4bd5-925a-acf3ef6fb5e4"
        },
        "item": {
          "id": "b4d191b4-cd22-446b-9cc1-5f78adaba96c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4b3a6e59-bc31-4a32-889a-273c7216ca37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7be5a41-dc11-4df4-8cc8-636f8ac810f2",
        "cursor": {
          "ref": "245a3b36-9083-4926-b52b-5f3eaa3aad8f",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "88938b73-0bc9-46ce-88e6-7134bc8c6714"
        },
        "item": {
          "id": "f7be5a41-dc11-4df4-8cc8-636f8ac810f2",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ad160e68-cfee-4650-8506-3c8190239964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8fad7d1-9d5b-41f3-943b-63d58b895f7e",
        "cursor": {
          "ref": "cf1d6ed5-c53d-4734-8a4e-98779791dd11",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7135de49-7bf8-44e6-84df-07928dd261a1"
        },
        "item": {
          "id": "c8fad7d1-9d5b-41f3-943b-63d58b895f7e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f8276ab9-f3f0-4bea-90f8-7adceeba2630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf5edf2-b591-4763-9221-9bbeb7360480",
        "cursor": {
          "ref": "2ec5e6e0-f514-48f5-80bf-09788928c622",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "99266a60-e58b-46b4-82f6-a012aed0f9ec"
        },
        "item": {
          "id": "5bf5edf2-b591-4763-9221-9bbeb7360480",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "52b4cd69-81a3-4b11-b9a9-34091e8e0117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24151ad1-c99c-4747-9419-61df1450c382",
        "cursor": {
          "ref": "47bc0311-6a7a-4b44-8423-3e5dc7679c73",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "908c3f63-5cab-4d63-8d68-09e4c1671153"
        },
        "item": {
          "id": "24151ad1-c99c-4747-9419-61df1450c382",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "0fa65b9d-5f61-4bf9-87cf-1b4cb052009b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb9e782-c454-4b2b-9265-f0cd71bfad4c",
        "cursor": {
          "ref": "6d8c9acb-e183-42cd-85fe-a6203d821036",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "60267f23-f146-4e32-a967-daab89997d07"
        },
        "item": {
          "id": "dcb9e782-c454-4b2b-9265-f0cd71bfad4c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "422a6ff3-77f0-42df-b0c7-e965ebdc2b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4862d032-a268-4c5e-920a-a53abb50e361",
        "cursor": {
          "ref": "2017fa45-a007-406d-89c2-a537065eb188",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "69d04cec-14d5-44d8-b37e-63124958d072"
        },
        "item": {
          "id": "4862d032-a268-4c5e-920a-a53abb50e361",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c961e563-23c3-46dc-9fa8-8d589ea8687e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fedc08d7-240f-4123-be47-90c9356e0fc9",
        "cursor": {
          "ref": "bd7d36e7-3dd7-4765-9d80-339079b980df",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ab24d530-33ba-4d06-aa85-649e9d22451f"
        },
        "item": {
          "id": "fedc08d7-240f-4123-be47-90c9356e0fc9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "bba070af-2e14-4ddd-ba67-05ab31a69440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f28e556-6879-4a96-8d97-d32441467d99",
        "cursor": {
          "ref": "a43b81c0-f83a-4644-b5a0-ad6d798ddc3a",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "fe7fc1b2-057d-4594-b6e5-332bf57f4da6"
        },
        "item": {
          "id": "6f28e556-6879-4a96-8d97-d32441467d99",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d64aa1b2-8750-4dce-aecb-77ebe6612628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c79fb23b-aeed-4ebd-b52b-0a3658a4d250",
        "cursor": {
          "ref": "502f083c-d4c5-4e32-aa81-7ef7d9277cff",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "02a0d89a-4218-44bf-bb0b-d1b704f92fd3"
        },
        "item": {
          "id": "c79fb23b-aeed-4ebd-b52b-0a3658a4d250",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a53e660c-9501-4400-8e57-3a9e71b3e9df",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "0cc81b18-79de-4266-89cc-915693d44694",
        "cursor": {
          "ref": "ec3f696b-e414-41c7-8656-c2c7d0f86409",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6da421d1-ae1d-4656-950c-2f106b60c798"
        },
        "item": {
          "id": "0cc81b18-79de-4266-89cc-915693d44694",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "179ce374-7846-4cbf-b73e-d948e753d60b",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "3f83dc9b-8ad8-4835-b604-310965296523",
        "cursor": {
          "ref": "dad68f81-c160-46ac-9410-65ab67b60583",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "659aada2-5738-4da9-b6ad-f55e0bca838b"
        },
        "item": {
          "id": "3f83dc9b-8ad8-4835-b604-310965296523",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "505eab05-030c-448c-825c-02392706b3d9",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "237ef4f9-c1a1-4007-9c14-b836e7e45d15",
        "cursor": {
          "ref": "acd7a14a-6db5-41ee-9997-3a113d52d636",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2ec64b73-d723-44a2-b6da-bd66dc105af0"
        },
        "item": {
          "id": "237ef4f9-c1a1-4007-9c14-b836e7e45d15",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "69ef197e-53d2-4d19-b581-ca79ac2813ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f076fe7-d36b-450e-aeeb-e3721bbb5439",
        "cursor": {
          "ref": "9d63407e-b556-4276-90c4-33096136f5b1",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "73447bba-3646-48e1-a3cc-63f3c9e04013"
        },
        "item": {
          "id": "1f076fe7-d36b-450e-aeeb-e3721bbb5439",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "276c9ab9-5b69-4098-bf5e-c5b3d4dd853b",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "f43703b1-4a84-4ca4-afb6-d98693b8c321",
        "cursor": {
          "ref": "1969288c-e865-4cf4-a3c3-8c9f51c62c9b",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1bc684da-faa4-4d57-8edb-3c0cdd5f41e2"
        },
        "item": {
          "id": "f43703b1-4a84-4ca4-afb6-d98693b8c321",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c81c5daa-8f09-4e38-9600-5e42a9a6be36",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "e4bfc59e-0dba-4250-a009-da20845a0342",
        "cursor": {
          "ref": "edd6a9e0-2a8e-4153-9177-97d7007237c7",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f3b30200-1b9e-4ad0-a18e-46b429a51b3d"
        },
        "item": {
          "id": "e4bfc59e-0dba-4250-a009-da20845a0342",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4e6e5226-2626-4d31-9c15-c9643def0355",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "6cde73c4-0e40-49f2-b535-b3261ad066c9",
        "cursor": {
          "ref": "95405900-804a-4ae1-a3f4-67c10ad19b35",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "1f22739a-c568-4b4f-b71e-897cee24c373"
        },
        "item": {
          "id": "6cde73c4-0e40-49f2-b535-b3261ad066c9",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9d04dd96-03d9-44e9-83c8-6fc4c2967562",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "66c95513-ab8b-4f20-bb75-17af48a006f1",
        "cursor": {
          "ref": "c3e87832-5459-4eab-9e98-050df19bd2e5",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ac2cb28d-fa25-469e-8008-69ba1f398997"
        },
        "item": {
          "id": "66c95513-ab8b-4f20-bb75-17af48a006f1",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "7e31eaa3-dc90-4581-a4ed-4a6b9793b078",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "ca0dc45f-5afc-456e-bc09-e56026e53692",
        "cursor": {
          "ref": "b557e415-ca6d-4858-85ef-409ff01d89db",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d7cb9dda-e5e3-4656-b963-df9df54d4185"
        },
        "item": {
          "id": "ca0dc45f-5afc-456e-bc09-e56026e53692",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9c5c1725-9243-45fe-b3d2-9fd49292df38",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "1bc45cea-bf08-43c7-9cf0-6d0f3421fca8",
        "cursor": {
          "ref": "451b800c-9555-4975-aa8c-209c22c76197",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "39e53cce-779e-4dc6-a999-2d80e7f8fc2b"
        },
        "item": {
          "id": "1bc45cea-bf08-43c7-9cf0-6d0f3421fca8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8ac27a6d-c702-4454-b811-9f15ce66aef5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf56b4c-6b9b-4a80-92c1-1d879ccd936e",
        "cursor": {
          "ref": "ee456508-754e-40c9-8562-6146f0c29ca4",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e4c5ed41-896b-4954-a54b-ada00193e2a2"
        },
        "item": {
          "id": "acf56b4c-6b9b-4a80-92c1-1d879ccd936e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b0c912f9-e609-404c-9ca7-aead419f9a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "266f6a83-5ef8-4d8c-a67b-9bec729a43f0",
        "cursor": {
          "ref": "33111c51-29f7-4e8c-9c4c-6cf0112f1e45",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3c93540c-6d8d-4e4f-92b9-d1a6dd928a3c"
        },
        "item": {
          "id": "266f6a83-5ef8-4d8c-a67b-9bec729a43f0",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0a3c0dc3-51e9-402b-9d6b-5f30520316f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d7694a0-4f60-44a3-a440-a833f6322c92",
        "cursor": {
          "ref": "14ecc556-e733-420e-8afa-2acb06a93e08",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8977ec90-d9f1-42c3-a7db-aa35f30e88bc"
        },
        "item": {
          "id": "7d7694a0-4f60-44a3-a440-a833f6322c92",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "45a8ca38-d99c-4541-a894-2d9ea8e625ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ffa8d0-7650-4848-9acc-7693c9712fc5",
        "cursor": {
          "ref": "6bce5e37-23b7-4e14-b143-1b6154d2cedf",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7d864941-ef15-426a-9250-0c966a76835f"
        },
        "item": {
          "id": "81ffa8d0-7650-4848-9acc-7693c9712fc5",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0ae8300c-c9c0-4d15-945f-0bf49203545d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c192d7-d7b3-4deb-a4f6-60687adf1bc5",
        "cursor": {
          "ref": "a37ed408-537a-4b72-a88d-6b6f8c8f15c5",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7928df02-b96f-45fe-afeb-e9364eca2675"
        },
        "item": {
          "id": "b7c192d7-d7b3-4deb-a4f6-60687adf1bc5",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c634d1f8-c4f2-4c7d-94c1-b1e7803b6365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a86e81-e929-4b73-bf20-7c79cb758987",
        "cursor": {
          "ref": "cf6f4ffb-1549-40e5-a271-bdd1c425367a",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6bb138d6-57f8-4b27-be5a-5ab06e95fd2f"
        },
        "item": {
          "id": "77a86e81-e929-4b73-bf20-7c79cb758987",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d23b5e28-a199-4f95-b255-74879aea110f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "565a8e21-05b9-4522-afc2-898be8213a66",
        "cursor": {
          "ref": "af6a21a3-31d0-4ce3-903b-633c292d8e86",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6f3828ff-1ca6-4ecf-b124-32a6bd4707bb"
        },
        "item": {
          "id": "565a8e21-05b9-4522-afc2-898be8213a66",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b5a8c5a8-90ff-4d7b-9e06-c8dcb50b44b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa64209-9338-4e78-a78a-a4ddba6a5ab1",
        "cursor": {
          "ref": "128e0a8a-436f-48dc-be26-47830043126c",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b9ed326f-b89a-40ca-a2ce-149744022cde"
        },
        "item": {
          "id": "efa64209-9338-4e78-a78a-a4ddba6a5ab1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4aedab61-69af-4914-baeb-d68f14e8c406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df33f42-1e4d-4478-b3d4-d13171ec813c",
        "cursor": {
          "ref": "ef267fef-574e-4cbd-8961-90f51d3571bb",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "14116340-e89d-4577-a736-cd4c8a45f8db"
        },
        "item": {
          "id": "1df33f42-1e4d-4478-b3d4-d13171ec813c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9b9e99c3-e7c8-41ad-b19d-0059bb97c5b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2598ab55-85ab-4ad9-a04a-ec30128be85e",
        "cursor": {
          "ref": "bfe95899-0b2e-44e4-a219-5997f19b584c",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "dcaf309f-fac0-454c-a712-41956f817dfe"
        },
        "item": {
          "id": "2598ab55-85ab-4ad9-a04a-ec30128be85e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1da025cb-e0e7-4f4e-96c0-e0e54ce3ceec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d531d91a-5011-46b0-9b17-2a04c882da5a",
        "cursor": {
          "ref": "45701ccb-c538-4ee8-9037-a11d609d4c04",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b4374f27-2acc-4d57-809e-65b9f20b56f8"
        },
        "item": {
          "id": "d531d91a-5011-46b0-9b17-2a04c882da5a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d56f18d9-39e8-47cb-b8ba-22ad1508310d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "598e129b-4873-4ad0-a3b4-70d0196b2c71",
        "cursor": {
          "ref": "c07a28f6-5116-4024-9c81-52d91cffc9ab",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e6e568e4-45e2-4ed6-95b3-3da97a895ae3"
        },
        "item": {
          "id": "598e129b-4873-4ad0-a3b4-70d0196b2c71",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "cf9c8282-0a60-4d15-91d7-ffb2ca3729f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c3017eb-20ad-4ea2-bbda-81c247498b11",
        "cursor": {
          "ref": "3a918e40-6098-4dae-a116-fa8d154cdc5b",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4d192920-36db-420b-a022-3f9330817d99"
        },
        "item": {
          "id": "4c3017eb-20ad-4ea2-bbda-81c247498b11",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2011a717-8807-46e9-91f0-0b470eaaae07",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "07e7e39c-2dc2-4525-8541-37f5111b9224",
        "cursor": {
          "ref": "98af2656-b2aa-444e-9a44-11ee91b6863d",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d117398a-0d66-45bf-83c1-dc21038baae3"
        },
        "item": {
          "id": "07e7e39c-2dc2-4525-8541-37f5111b9224",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "faed0ecf-af2b-429b-87c4-ba922e3c6d48",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "77497e1f-10d5-4345-baed-1acc4614e82b",
        "cursor": {
          "ref": "b6db6573-c423-46cb-907a-f6553da456c3",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d89af538-46b1-46a6-9ec6-388d28601092"
        },
        "item": {
          "id": "77497e1f-10d5-4345-baed-1acc4614e82b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "aba11075-e7e2-4a09-a730-be20e12cf53a",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "bdce274d-8ccd-4b83-8239-1285bcbf1785",
        "cursor": {
          "ref": "6164d2b8-0063-4d33-990a-fc26f2a138f1",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "14e496a2-fad9-4544-b546-e489384d3f2f"
        },
        "item": {
          "id": "bdce274d-8ccd-4b83-8239-1285bcbf1785",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "dcd2026c-7e9a-4895-aac9-f6bc5aae949f",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "1e4f416d-2d7c-4cac-be39-5e044b1ffd08",
        "cursor": {
          "ref": "7caeedbc-f1c7-40f0-a17d-f47b8e7f876b",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "48f5dfa3-4f6e-419d-82b2-ab8f03e4ff45"
        },
        "item": {
          "id": "1e4f416d-2d7c-4cac-be39-5e044b1ffd08",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6aa176b6-6bee-4e5f-b20b-8599a9c116ae",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "48d1cd63-ec80-4f54-84c2-64409edb79b3",
        "cursor": {
          "ref": "f34cb815-9f72-4ced-a213-1cb26de2718b",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "df7c4235-9847-423c-9eb7-7ee1067b7859"
        },
        "item": {
          "id": "48d1cd63-ec80-4f54-84c2-64409edb79b3",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f0634174-c78b-4c2b-b6e1-6085cabbef72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b3a48f-8830-4cbd-9f32-668bd12ce33f",
        "cursor": {
          "ref": "3e74aca8-3bb9-4e17-b486-6a67ee88ecbd",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7c50b8c7-5c50-499a-92a8-ba0f410e282f"
        },
        "item": {
          "id": "31b3a48f-8830-4cbd-9f32-668bd12ce33f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1c4b7340-7635-47d3-b11f-a944582a16db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b98da5d-52d8-4241-99e6-44e7f232cdd1",
        "cursor": {
          "ref": "3843b4c2-a9b0-4a72-99d6-004ed1695857",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "4a71e0d1-490f-4aa4-a937-1005c0979d8d"
        },
        "item": {
          "id": "1b98da5d-52d8-4241-99e6-44e7f232cdd1",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6a1c2bd4-6849-4299-87ba-1f830c8d1d23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9debf3-d88c-4896-8353-02c929b4cbb3",
        "cursor": {
          "ref": "2761da75-6593-40f8-9f56-159b39559fcf",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6524030e-19c8-4254-85c1-aa374c476cde"
        },
        "item": {
          "id": "6d9debf3-d88c-4896-8353-02c929b4cbb3",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7d1e9061-5a0c-4fa5-9bbe-9980d14a9945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a4d31e-5d1b-4e09-b346-1823468c4de3",
        "cursor": {
          "ref": "c54cbce8-b7b0-4c90-aaea-f79d4abb7754",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e93781b8-2c7b-46c4-ba58-eb5b9adb2e1f"
        },
        "item": {
          "id": "27a4d31e-5d1b-4e09-b346-1823468c4de3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5df33c88-b87b-49cb-a4c2-04aeede581c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7821c7e7-409d-454f-b890-ff896ddf5a79",
        "cursor": {
          "ref": "36d8c75c-5174-4673-a4e9-8dec95cd4d97",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a4586334-a611-4c5d-b8df-1e1b7b1f0b5e"
        },
        "item": {
          "id": "7821c7e7-409d-454f-b890-ff896ddf5a79",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "11659b5f-d4e7-42a5-9a36-27314ed2b9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1babd22-d33b-42d4-87d9-a95473f9b880",
        "cursor": {
          "ref": "cbfd52ad-f966-4ae7-90fd-a0e028a799b4",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "276e0260-2718-4f4b-8b02-55a8ab3855c7"
        },
        "item": {
          "id": "d1babd22-d33b-42d4-87d9-a95473f9b880",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ff396018-7d87-4192-8c2b-d3812062c48f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de72b64e-6744-454b-bbb4-b29ee196f9cb",
        "cursor": {
          "ref": "73f07d5f-89a8-4e3f-bfb7-1d05347ce1d5",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "49126a27-0435-468c-8168-9534607a3160"
        },
        "item": {
          "id": "de72b64e-6744-454b-bbb4-b29ee196f9cb",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a6bf8af8-4395-47d6-970e-82899e579edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edc47396-ed14-4182-aeab-efc0761ca1f8",
        "cursor": {
          "ref": "2333fc40-724e-444d-9794-4962831708f4",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "74aedb80-f602-43e5-ba69-ad001b6e9ca1"
        },
        "item": {
          "id": "edc47396-ed14-4182-aeab-efc0761ca1f8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5cfbe986-71b5-4c67-bdd4-e34609a7be67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6078f401-2f86-457e-914c-b862641d8a1c",
        "cursor": {
          "ref": "cd6d926d-716c-41a3-a0ed-bd902e072b08",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "535b0760-29d8-49fe-9786-f9e4189b669a"
        },
        "item": {
          "id": "6078f401-2f86-457e-914c-b862641d8a1c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "58657c60-31b3-48f5-8348-7427023eea29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc42ae9d-afb9-4c90-b6a8-24389e1e36d8",
        "cursor": {
          "ref": "097d39aa-c4ca-48b0-a7cd-e74157626d35",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "37835c93-6e9f-44e0-92e9-70c3ee6cf78a"
        },
        "item": {
          "id": "fc42ae9d-afb9-4c90-b6a8-24389e1e36d8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3ccbfb81-3104-4e7b-b722-774e08483085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3edaf9a7-bf24-4193-985b-2246807ec552",
        "cursor": {
          "ref": "7284602a-81f9-4152-b427-7458df9076d2",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "3e46db62-095b-404e-b286-964232b33962"
        },
        "item": {
          "id": "3edaf9a7-bf24-4193-985b-2246807ec552",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "00d20f1b-1c60-417e-b3a4-f4ccee182e70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af3729ff-47e4-4b8d-8597-492169572765",
        "cursor": {
          "ref": "34802641-8f1d-4f73-aaea-5b39d764f6f5",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "5a6ab79c-6929-49bf-94c8-7810a9f559c8"
        },
        "item": {
          "id": "af3729ff-47e4-4b8d-8597-492169572765",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e1f71b26-9673-466c-b5e5-4f0802a89cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e73b550-b96c-4b7a-894f-7b4d20545744",
        "cursor": {
          "ref": "3379afba-1a3e-4995-ac91-33a766990058",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "c43381ac-73dc-444d-a2a6-877ae952d7fa"
        },
        "item": {
          "id": "6e73b550-b96c-4b7a-894f-7b4d20545744",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "97d8f91b-6278-4542-bddc-0ff019bb7c37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2898688-8d0b-4dec-8df1-9c341cd189ea",
        "cursor": {
          "ref": "3e3cd4d0-fcf0-4d28-8c59-150911ca1033",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "7233b186-1fd3-41ee-8383-286b62f4cd1a"
        },
        "item": {
          "id": "c2898688-8d0b-4dec-8df1-9c341cd189ea",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c576fa41-11c8-4dc8-9bca-f11905117e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36a06a5-4556-4581-8bdc-58135c7b3534",
        "cursor": {
          "ref": "ff982df1-f55b-410c-a44d-4b8bc69d6fe8",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "d92b7a9d-e859-43a9-988b-7df39c8f70af"
        },
        "item": {
          "id": "a36a06a5-4556-4581-8bdc-58135c7b3534",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5c0a5978-91d7-4bd4-b1e1-493d2fb97ec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f913c4-d9d1-4df8-9f8b-3717f757b137",
        "cursor": {
          "ref": "77b5d281-687a-4159-90f7-d848df114029",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "3d032d70-159c-4a4a-91bb-9cdf699cbd8f"
        },
        "item": {
          "id": "73f913c4-d9d1-4df8-9f8b-3717f757b137",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "6df2a6f7-05a0-4fb3-8b55-683042c0baed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3457008d-1cb3-44ae-8c81-13aae64ce577",
        "cursor": {
          "ref": "54e18ac7-ec53-4c78-8226-33234c83fd64",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "64cf4c77-4d8c-4b8d-81f9-452d47b96fef"
        },
        "item": {
          "id": "3457008d-1cb3-44ae-8c81-13aae64ce577",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8ef927ee-3829-47ff-bc9f-d301e9030bbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d257e9e3-edb1-4a3d-bc9a-f2a2efd2d11d",
        "cursor": {
          "ref": "f0ea087b-a109-4da2-9602-97bd83d62f82",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "a28875cc-2811-42aa-9e2c-e741209f00aa"
        },
        "item": {
          "id": "d257e9e3-edb1-4a3d-bc9a-f2a2efd2d11d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5e05bff4-82f6-4230-985d-efb9087457ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b7b9db1-72ca-4ae5-b2ce-65fcc3a54232",
        "cursor": {
          "ref": "c1fa7b63-6c24-4bd0-b055-5e2898250be0",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "56017557-8f29-4c32-a5b1-679cd2e1e46d"
        },
        "item": {
          "id": "6b7b9db1-72ca-4ae5-b2ce-65fcc3a54232",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "60f3ede8-5ef6-4762-95e7-d8126d36fb74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4054ab2e-e5f8-4825-85c5-151e08e1fe29",
        "cursor": {
          "ref": "de1b6b83-afaf-4b25-a5aa-c6f645a9f875",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "4f441d91-53c3-4269-95d1-89f153b74d95"
        },
        "item": {
          "id": "4054ab2e-e5f8-4825-85c5-151e08e1fe29",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ec9ac788-023b-48d3-994f-0326891b55a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d4c288-e3df-40fb-b4e5-6298b9792746",
        "cursor": {
          "ref": "4de01045-2aef-4add-ad9e-ce7ffcb07ad4",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "ba80f333-2594-4628-bd82-af6596824c03"
        },
        "item": {
          "id": "d7d4c288-e3df-40fb-b4e5-6298b9792746",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b93ebe9b-dcd1-43a5-9017-a47d5ed4d544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdfc8c2a-3755-4677-929b-a148ffeae080",
        "cursor": {
          "ref": "b9da898f-8374-4b08-bcde-a0ff0994948f",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a18110d5-3d19-44e4-b938-ae02bfd652c7"
        },
        "item": {
          "id": "cdfc8c2a-3755-4677-929b-a148ffeae080",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "24ab9c81-107f-4c7a-8e7d-c500410cc00a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2058b992-a8de-4ddf-9388-d28737ca89eb",
        "cursor": {
          "ref": "905520e3-a3b8-4169-ae99-c4683a0c0373",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "c7a695cb-767f-49cd-af03-b9840eff697a"
        },
        "item": {
          "id": "2058b992-a8de-4ddf-9388-d28737ca89eb",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2f9c32d3-2d25-4bef-9e72-42624b3addc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f24875c-9783-4089-89c4-c9bd70adc08a",
        "cursor": {
          "ref": "c773072e-99cc-45f3-97bd-578aa87430bb",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "aa989c3d-1fe4-4410-81ed-35f58d48af1b"
        },
        "item": {
          "id": "2f24875c-9783-4089-89c4-c9bd70adc08a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "55a535e6-a827-4463-8c50-563493f2bd71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4802953-5671-4f27-b23d-f2bc19de0d40",
        "cursor": {
          "ref": "195b86b9-918c-4131-91cf-091a5194b91a",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "48afbe2b-b04b-49e8-b34b-167c4a43fd59"
        },
        "item": {
          "id": "c4802953-5671-4f27-b23d-f2bc19de0d40",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6f41def5-69fa-4988-b9c0-f1e6d0dc04f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc84866-37ef-449f-ac41-edbb1a14aa56",
        "cursor": {
          "ref": "e1a821c6-8653-4e81-afde-36826a744379",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "7f8568cb-82f6-4b13-9c11-1e5d3baaa41b"
        },
        "item": {
          "id": "efc84866-37ef-449f-ac41-edbb1a14aa56",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e182f29b-b69d-42e8-b4b1-358fd70dee6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0973627-86ef-4454-b1a3-b6c9034d8a13",
        "cursor": {
          "ref": "c95b8116-752e-4bb1-a8c9-b88b0603c16e",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "08b2946d-eb6d-434c-9b05-6af8115766dc"
        },
        "item": {
          "id": "c0973627-86ef-4454-b1a3-b6c9034d8a13",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b1a05cca-45dc-4aba-90c9-c41c202d51ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd90e3c-10b1-4e61-8f52-5d2367ad6b83",
        "cursor": {
          "ref": "820a70e3-57d7-4393-ac23-6e0ae1431725",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "9df4d096-08ae-405f-b979-9f82e36b504c"
        },
        "item": {
          "id": "cdd90e3c-10b1-4e61-8f52-5d2367ad6b83",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "eda9fa19-2041-4e70-9ba6-355452ab9a47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e4e4e1-8a41-438c-b8fa-757cd9422f5d",
        "cursor": {
          "ref": "527d6245-f820-4964-ac7f-3fe53d1dd4c1",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "a9eec8be-3eed-4c0d-8471-f4ee2516b763"
        },
        "item": {
          "id": "a2e4e4e1-8a41-438c-b8fa-757cd9422f5d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9f8b9f1e-354a-41e3-9e10-70c32c524d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5715926-4101-4f7b-8920-f8fbf4e21959",
        "cursor": {
          "ref": "f8f877cf-6200-4d8e-8af3-992454244d7e",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "aed46a9f-aed3-4a98-93c4-8dfdaae67622"
        },
        "item": {
          "id": "f5715926-4101-4f7b-8920-f8fbf4e21959",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "fa2de393-ba66-4daf-bb89-64521d2137af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dfaeebf-0811-49a0-8835-52bbda630728",
        "cursor": {
          "ref": "dfd30ac7-c809-40f7-ab83-8f949f692e53",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "d5de0356-d2e8-4ed6-9170-137e3d575950"
        },
        "item": {
          "id": "4dfaeebf-0811-49a0-8835-52bbda630728",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ac254491-fc6d-4ff2-99f2-a1207690c31a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff10c6e8-1ca5-4897-810c-640f2a1de31d",
        "cursor": {
          "ref": "f68d27c0-7269-4feb-bf00-3c31160c5ef4",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "ddc460d4-714d-48aa-a60a-88417a7a5140"
        },
        "item": {
          "id": "ff10c6e8-1ca5-4897-810c-640f2a1de31d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4e39a346-5f66-490d-a10b-782e18d4751f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77438e64-39d5-43ca-bc39-b845723cbe7a",
        "cursor": {
          "ref": "2527a409-4538-46f8-b6f6-43dff177def0",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "9c7bcada-4265-4e1a-86e7-475fd66feb46"
        },
        "item": {
          "id": "77438e64-39d5-43ca-bc39-b845723cbe7a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e787d83a-0f1a-457a-9337-66558de7bf82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1563909-181f-4c43-9219-eb462b950411",
        "cursor": {
          "ref": "88ec98d3-99b1-46c3-8580-42ba1a31721b",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "fea06d81-54bd-4329-970b-6a44f41b7f5d"
        },
        "item": {
          "id": "b1563909-181f-4c43-9219-eb462b950411",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f4d44399-d3b0-4267-974c-68fe94d1ff6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a776a10d-1e0d-4161-9f83-5dadcf881767",
        "cursor": {
          "ref": "a20a30a8-0c9d-467b-b550-2be99c1c450a",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "abd9578d-9535-40f4-8125-11d1deeae4ea"
        },
        "item": {
          "id": "a776a10d-1e0d-4161-9f83-5dadcf881767",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5de19829-2136-456c-a18f-97acf8013f43",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "eae94217-3dc9-4e77-8c30-22d12669209f",
        "cursor": {
          "ref": "2fe77370-4c66-459a-b62e-cafbd488764a",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "54bd8d5c-7c41-45d7-9a83-2b0eef731f23"
        },
        "item": {
          "id": "eae94217-3dc9-4e77-8c30-22d12669209f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6caf442d-8f39-4885-9908-606499b6f326",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5938dcb0-2d19-41fb-b732-7cb67f9c0e45",
        "cursor": {
          "ref": "9a94326e-ed55-48c4-83ab-bdbd9ce1eb99",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "539b3c4f-a20f-458c-8266-f8c07371b1f2"
        },
        "item": {
          "id": "5938dcb0-2d19-41fb-b732-7cb67f9c0e45",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "613fe81f-9683-45d9-8454-072988470021",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c0ca94-07b4-4511-8f5f-d8516a18319c",
        "cursor": {
          "ref": "65f4cf9e-a2e0-453f-8928-4a88d9061430",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "57cfde89-7829-4795-ab98-3d613a7f8878"
        },
        "item": {
          "id": "f8c0ca94-07b4-4511-8f5f-d8516a18319c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e4523798-8e4f-4ebc-82fb-1f4b9d69abef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c0ca94-07b4-4511-8f5f-d8516a18319c",
        "cursor": {
          "ref": "65f4cf9e-a2e0-453f-8928-4a88d9061430",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "57cfde89-7829-4795-ab98-3d613a7f8878"
        },
        "item": {
          "id": "f8c0ca94-07b4-4511-8f5f-d8516a18319c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e4523798-8e4f-4ebc-82fb-1f4b9d69abef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9ccc178-7ae8-4455-a201-cdc8b3878e9e",
        "cursor": {
          "ref": "f4dc5198-e0a2-4e28-817d-44f99949ba1f",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "1feb6fb5-d2fa-45ca-b931-1991d98e856a"
        },
        "item": {
          "id": "e9ccc178-7ae8-4455-a201-cdc8b3878e9e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0d84875c-8334-4f06-b0ed-71653a0fdb5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf2796a-9166-439b-889d-be64d832a1dd",
        "cursor": {
          "ref": "8b393a33-5bca-42af-9813-dc3fc61b7afc",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "2794a1aa-69e0-4526-8f9e-82d7c80e4ff8"
        },
        "item": {
          "id": "bbf2796a-9166-439b-889d-be64d832a1dd",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "039cdacc-d638-4832-9656-3819a3c5385a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}