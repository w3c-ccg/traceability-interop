{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a996fd1e-1c5c-4017-92e0-568731f54fc8",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b91bc35d-e06b-4a05-88a3-f5b303e9f3fc",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "77363dbe-332b-418e-84a1-2a3e3d9f078c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "05299fc6-8030-4b5d-a61e-607f52b592bb"
                }
              }
            ]
          },
          {
            "id": "1a956499-623c-4f00-8fe5-00a696f458e2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4c22cc78-f860-410d-8d0b-e532dacf0dc9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "99122fd8-6047-42d3-afee-f830a21cff91"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "556bcb0f-e0ab-4637-a0e7-c7eadf512862",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "336f256b-cfd4-4829-8bfa-6d9f65c2ac96",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f639f3bb-8159-45dc-b032-4e2a830e4cd2",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "42ef9111-ea61-4cbc-8c09-ff4a0d0c5a42",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e74a0902-a3d7-4d3b-9470-708fa832e6a3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d1f6b4ba-0367-4b83-baaf-6f1e5afe648a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5a8f5d48-d508-4b36-b61c-64e027dbae4f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a87bf560-5357-46ea-8fbf-8422ff8f9035",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fee587c7-f09b-4c48-ad5b-b1cfd1f6e5c6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b16820d0-7109-4007-9a61-0dfa18c07c04",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "26a466a2-e361-409b-a391-d0f7c23e48b6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2b3cae39-23fa-4859-8f42-b07c1d59744e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "74c37513-4ab0-41e8-b5b2-a7c89e0bf204"
            }
          }
        ]
      },
      {
        "id": "8fde6598-fd7b-46f4-b30e-e447f7cfdbae",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "41a8bd70-42f3-4b8e-b196-bfcec1238323",
            "name": "Negative Testing",
            "item": [
              {
                "id": "702efe88-e2ab-43c1-8fff-d7f16b099f24",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5dfc828f-a212-4d6b-b8c6-4a0b4831c571",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab25c51-2687-406c-99da-e82d878509bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b4120228-6a3c-4373-b267-f678a5827fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce5e655-e7a2-4bee-91ba-4a0b5d32fe9e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e291e3c7-7e5c-4765-a804-0838accb8cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6238dc0d-2964-425a-b1fe-cd3628eb735c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42bff5ed-9ec5-4c08-9430-607d545db94e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab31aefd-206c-4586-8cdd-533b276699a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b764320-6cad-40cf-8831-da98332d634f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "320f7b17-64b4-4585-a9c3-d6c4068e7d10",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "97351df4-b05c-4a0d-88c1-1ae250d078a5",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57662272-e4c2-4847-965a-dbbe6bfdce7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a16e59b-98b5-4883-b6a8-fbf677bb0c41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b6c23f9-cc4a-4876-8b0f-c7be51a6128f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecf1f541-bdb7-42ee-902e-7fa384898681"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b63d9300-d144-4c5a-9cf3-dda1607d9fa2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e35206df-9747-469d-8827-90d5ca47557f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "99ffb879-61c4-40af-93f6-6668f325e33a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "faa4b084-e64a-48bf-82a0-612a3612aa13"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb4b59df-2ef8-4819-839b-da5a2340c2d7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "563094bd-ff95-44ba-bac9-b87afa558729"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4a534a65-9bb5-4f74-bad1-74089d962949",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c4818a80-ec1a-4ce8-bd43-613d3c7eda3c"
            }
          }
        ]
      },
      {
        "id": "d4e880be-ff93-4793-b630-25d5d5b70f29",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "36161549-505b-4d0a-9ea9-789258eeaf20",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6cb80abe-9726-4831-991c-ded1e5210ff7",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6d33304d-fa18-43ce-8a63-737b0e41809d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c6bd9e-e69f-43da-98fa-88203a147143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0474a25d-ff4c-4896-bac1-cc42dc92c274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d789f8b-cb04-496b-9dd5-0f3c9a157ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d604ee3c-3666-489d-923f-4fc051ae9ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "787b561a-8cd0-40d9-905f-02c3291a083c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df90c7ff-e0df-4232-a70a-48447ed6df30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6acac6d2-4f7b-4ae0-8d6e-2036ca65ce35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939c6825-23c7-4414-bd11-ae648d00e0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15164f4c-8f60-4bc2-b649-11b3cb603f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b5c6a0-9d05-47ce-b50c-aa3d69a5ef54",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a27557-97d3-4e2e-b4dc-5db4645853b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc4c5b8b-3416-41c8-b067-a8871f0f1156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7349f2b5-c787-45f5-84aa-28607a4efc17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c12a5bb8-59f5-43b3-8eb9-ea47c1a108ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe87778-385b-4bb8-89cd-76d825b90252",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98704188-9475-4e48-8bdf-308120e0aae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6301c4e-7fbf-408c-a824-e890760ec88d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29eefd2c-0bc4-413f-8f18-9c6bfa46d069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf60cc24-ae30-4fb5-a168-0c342556bbfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9069e4d3-086d-4637-89aa-4dfb3546faa8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "957f4a1d-c796-452e-b357-f6d348d5d237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "578bae0e-f099-4693-b4b9-896c7244a3fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d16d86da-c7d2-4ea4-9b7d-9c12a7c5af01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fcd36b93-c86a-4290-91ad-a8e0c0832ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf8d3e3-0fda-4cb1-91d7-e35bfa370452",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b501568d-8b34-4099-83fd-4ed542f6e37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74cc3896-4893-4655-81a2-37c81ae3a4f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff87adb-7d3b-4788-bd25-c69fa0a7db78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f721df6-3aac-434a-9645-1d54706a393c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33ba3a5-c3e1-4d6e-9228-d564ee666828",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5946aae3-3c86-40e1-967e-54ed980e8881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "268d026f-7f02-436d-b546-9d77e060d89c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a42da1-5157-45fc-8cc9-eadd43a62296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23b8d40c-5d95-4aaf-9fb8-13498d0f5640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cea7577-2954-4ad9-9461-ab1bddad0428",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb5b3759-9ee0-443c-96dc-ed27f8d748eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a625e56-78bc-4c8e-98c1-14c09deca761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587715f5-7754-4ca5-9c07-63e1a3914726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2365a7de-29df-44f2-99b6-f597557a42c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f28e47e6-f90a-4078-825a-4daae8f7911a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb66cae-f7e0-4c0d-9275-5c55e9e966bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0ef49de-f6bb-42e5-a396-a4be59dcc721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc8539d-f440-45a1-b298-38933c2b5629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc1be650-3f48-4269-8354-452afaee1d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2ceb6c-bd84-4f82-8cef-cc46b67580a9",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e89329-1a92-40e4-8fc6-bebb44c65098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31f5aa8b-ac29-4177-97eb-b744b5871e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a974c5-cb60-4383-9b47-d9e65b93e1a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b360991-8ec3-4ac1-a68b-9ea71404cfe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3da65be7-7441-4aaa-b480-04fddca428aa",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b7ddaf1-67f1-4bc6-94a1-92f88ff86bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98abca76-4879-4aef-915d-f08cde50ab70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5035f547-3b91-41f2-b7af-f7366ebd9ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f073254-0c79-459f-bb64-9b82cff11247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933544c3-22bf-4095-a5e4-b4597439f232",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76680bc0-2a92-4376-ba67-c7de60c1b9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ea31ddd-0b04-4d2f-89dc-ce3d858efb8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3053b9-0c74-4785-9c90-9aeec2a5ae1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f199d7f8-de80-44ae-84c3-1585881f5241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a3dec3-090a-4c1a-b630-283c90a96803",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec97810-c690-49d4-a1df-03dc91867362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85a44536-1204-4819-b71c-0c0d0b8b10b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75d21d0-669e-44f4-b2f6-af7aabb044bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c40dc72-cf7f-43d4-afeb-a12d8e958724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f908a810-799e-4bb2-8d91-3bf66a48ddc2",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5abd7e0e-e1eb-4e71-be04-4cab28bbd7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "667eeae2-73bb-4457-a5a4-f506fc38da49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2d5817-c624-4a2d-abff-46ab3b0abd5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81e1fb65-92c3-4e82-9261-96e9f598546f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c006d90-341b-4914-8517-5450dcbc8e17",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c405934e-e3a3-4a48-a762-c2d449a48755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89bad29e-14d2-4cb1-993b-6e7ac0645423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97361fb7-883a-46e1-babd-9740400e02c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c87d3c9f-2028-4667-870c-ad7807119c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1bdf9bf-a77c-40f5-a21c-e3c4c7c4ceb0",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd6d4b4e-51a2-44c1-9336-7f3dc562970b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65608857-033a-4f95-b592-9239f5bcfda4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e1538cd-c45a-4b11-9d77-ba08cd12ec4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e837fee6-9b90-410c-b701-8140e0d3b89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07eb48c7-61d2-4b01-aa9b-a7acea9c6261",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "294b1457-ee7c-467a-a206-862354abdd8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e75e800-5058-49cd-afab-98a2980cdb7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31df9aad-d6f4-45b4-8988-0eb0eb0ddb47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95699037-bb57-4427-aba7-496d4487ce48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217c5ae2-8a43-4d6c-9727-8c88031841af",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5703b6c0-0ecf-4aab-9655-986c8237bbfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b297c0d1-843e-4a07-9c85-17f2a7759ad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc19e1bf-8378-4a98-984e-87ca1077356f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff1efa28-4a33-4f54-8686-cb69cda742d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71cfd9f5-c99d-4ca9-a123-da47bbbaa95e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cded9329-1857-40d1-825d-67684504f593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e144a430-072e-4660-883a-3bae638094ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782c9295-bafb-4aba-9590-72651efe51e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3ee7661-6697-4105-b485-e829d27e34a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653acde2-56b9-4e29-840b-407e8b5d96bf",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cab0a91-8e36-4c79-b3f2-fa949997f56e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4b21e7c-a0a1-465d-8bd6-db769dc37156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa89a8cf-b699-4afa-995f-1c9e5e2c608a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "81551d76-d8b6-451c-abc4-034ad52d7a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b76f3133-cb37-4763-b7ea-a6064f23a39e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7314836b-162a-41e1-82b9-62e09204563b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a989231-2e8d-4072-b14b-6aa135d0d898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032d8b6f-5fab-4026-a0fe-db4ae6fe8e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a5d0f5f-856b-469a-87d8-c149c4ee3d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625a53d0-2d89-4da6-9880-e546651540d8",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0022d07b-7459-423e-9c37-ca9648cd318f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "841b6df6-bfcb-4205-a6db-4a88a141e6ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad300253-484b-458b-b8f9-668995c50f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1150d09a-d484-4258-ad3c-f1c24a5fb119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b90eb97c-cc57-408f-a261-a74aa1259621",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca954dd-88a4-4c59-9e20-b857a0b44fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6630cc4-28a1-4824-9142-bba4ae7cd58c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d6dc53-4016-4e4f-8ad3-2f82fdfac0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "da71feab-c17f-4380-b5bf-c60382b7f76e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78793dd-5c0c-49b7-8691-6777b3238a47",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7fff26f-3bda-4454-8d56-fd3b122f353b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3611895b-9ed8-4800-bb90-7e84e323136b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5943f077-4f67-4986-941c-c35dd87a27d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b5f9927-7161-4226-9918-580c8818877e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d15538ab-d814-424f-8fc0-3f51e8f0f1e7",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a50418-5047-4517-bbb0-9afcd0b191bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2745db8b-bb3c-4be5-bcc9-92e031e3dc16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c80353-d63f-46f8-b319-7281d9c26fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "784e3bb5-5ab6-4831-af6a-b9a6a6e0a9f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fbd5f4c-36aa-493f-8b12-22b6a0b354a0",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed320b15-e263-4ba1-a05a-a665a35ae0dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89c81715-a985-4823-8873-37a9921a1909"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd1a0c9-e118-4c7f-b68c-600471d42ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef8e564b-4c09-4ab4-9675-e8c6524ab2da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b3fd42-a2a5-4364-a581-948d77ac1ff7",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca5fd2b-098d-4d00-9ccf-9735d74e55d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c75e64a-b443-406e-9969-cbfc7475c25e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ca8551-dc27-47b8-ad82-0e30d597b1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bf78f50-0146-47c4-b153-fba8210922ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd73dc9-5401-4ec2-ae32-07366c44da3e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6fb52d-b434-4602-9f37-49f889a1daf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c32df493-76f4-4f4b-b9b0-212223d9c749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "176cd6bf-5e70-43e9-bc2b-674c8d3138b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4488c87-cfd7-47b6-ac3a-15f9d45f6f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e052b39e-53b5-44a7-bcaa-97ab9f1a54da",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe728ae-a4b3-4866-aabc-eeeaf0f07d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f7f3601-7f85-4b5a-b3be-db7f6b687e30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c69395-85fc-488c-864e-1ecc043ee341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "89d460f3-31ee-40ed-aed0-d77329d33afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f0a81d-3191-4949-8678-e869ee82a417",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f20b86-9b44-4fb3-b275-14ba8dd8bcfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f1cc2a-6c3d-4c6d-9a11-b11ff068926a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e84942-418b-47f8-9c5a-f7608142f790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd596d27-d75c-479e-91da-876ece4dcac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809a83f5-9007-4645-a097-1e0807278120",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab225fe-e573-43de-8f2f-03442e6dc218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "569460f6-30d4-4963-aa11-6eeb9cf2c5dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65df0ea4-442d-4e7f-80ba-484a98d9a38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9e7d86f-3535-4c07-8a4d-c2355162ada2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc2fa834-d00e-4552-a667-1f0ede6ac27c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5616b1-19f9-48a2-9168-a74a71141190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1187eda1-8e92-4ba4-a7c7-b49b88e56e84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd2551d2-230d-422a-ade0-f25fe5c3d2e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bef98f6-995a-4b80-84c4-8f7fdd5db222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b20b4e-33b7-4df6-b9dd-7791469978ac",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1e8d8d-f620-4bb3-b48c-0534b4914b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bfbc334-bea3-4e5a-bcb6-18795664f753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf68792e-7dfa-40c0-a70d-36138d73f680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5df2ff82-a05c-4ea8-9310-0ce6b1336806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d40889b-d130-4706-94b0-aea9369e1774",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4964bde8-028e-4301-9471-8e32faca4a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ebfff4e-f69b-48f1-a4a6-d7761d6e6b42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f6c8c0-7e81-49d5-ab29-19df0c6c1fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed12d675-5047-41c4-b063-3a49571271fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46ede0ee-68a5-4af3-acab-9bceeec07d2d",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "919f46db-fc6c-4089-8747-1520a388f9bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "881b849a-1026-40f8-9076-0f71aa7aa9ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a143fe71-df48-40d6-921c-f76c5cf09330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c4f582fa-40e8-4473-8ac9-7f4baa371ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daec7d61-6e08-4cf1-bbec-83914335d323",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cdcdcd6-f0f3-4ab3-8e84-e9ac869dd148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96c3b633-0f3d-4c8a-99ae-72278e8cb641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c77120-6972-4c47-a14f-8ddf2c99dbb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "698b22c7-55eb-4912-988e-24593f1186b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0753a14e-5079-4d01-9c8f-4fe72a934f32",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6913effd-e46e-42af-ad6a-d0df7e3ac702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7a0e957-3e4f-4af8-94aa-0844b12dd320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1282e5-2973-49a9-aafa-abc47f72c5e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3daccf99-cf64-4dad-a1ab-90897abd80f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4519f929-fb0d-4758-97e6-1e4284f4426a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b81177-3ebc-4dc1-b743-7604c0c51591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2525f6c-edea-46b4-a629-a5e42f9085c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40f9fd3-9a6b-4253-9a0c-60359d0558c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "42921037-5b61-4f74-90d6-992f39808b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11700adc-c3c4-4fb8-9f01-73580030d063",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c2af89-a9de-45a9-b646-c0f4940c0e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fa3d005-ed1d-4b80-be09-5bd0aa9d88c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d8786d-4237-4b20-9331-045c94255a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "85cfb4ce-e520-4816-94b6-568fdabd123c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2714be9-27e3-4b23-abe8-0788af0ab8ec",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40051222-2931-4647-aee5-7f319644322b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86d72dca-0434-4f4f-9d11-c564d61b116d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c49372-9a2c-4a7a-8d87-4295ce102cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "65da4e5a-6fb3-46fc-9d58-1fb7f7d78c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a37562d-858c-47a3-8273-70291f8703e6",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f621a74b-2602-42c1-ad5b-1d8b031da38e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9866bcf9-5f63-4984-85fa-e627b230b98d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a15548d8-dfab-4a16-9a1a-a581702ed5c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c847c9ba-87c8-4ac6-96f9-2963c40bd499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b806704a-2251-478c-b316-0d16643243af",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "280cbd8d-897c-4261-822e-da3ef5564fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6bc8226-c206-4069-b679-0dd4f625799c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e08833-d408-4b67-aaf2-a09f83df8b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8b1378e8-2804-4ced-b3a6-8c72d211fdae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d7dd39-cb43-4dc0-ba86-8b7a6d0bae65",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba0a089-c057-40c0-8fa9-d72148515dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b952df4b-570c-48af-ac7c-a1e943719e18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd2edee-298b-4798-b4ad-74127e1c7ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f42060dc-ec15-41d4-97ee-fcfb88ba33c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0d4b3f-c3b7-41a8-924e-fb2530ced5de",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2885b417-b766-4d64-a31a-115fef63cb64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ea9f1fb-4438-43a5-876b-92866c4190ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb00277-adf5-4bc0-bee8-e8e553da0166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "478a65dc-330c-44a6-86d1-6f86a3d2225b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5198fc7e-d536-4a8c-9b58-f0c07452b1d5",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ab48b2-c1c8-4f55-8959-1e5eff7437d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eb3279e-b939-4b6d-bf7c-5e37de672df8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba936be2-3aaf-4434-9fba-ca9ffed873dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc54453f-7e95-4c9c-8e8a-dab4118280c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40147c0d-d117-4c12-a96d-022d06c6e9a8",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b87f58-e4ed-474d-9099-306deb6428d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22dd7148-3bf5-4fc0-b0ad-7c2a3f80107e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c9e1d87-9b91-4959-8204-6ecf1b532cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9a5d3d9-0767-4b26-aef4-7190ae298970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040342cd-408d-4dbe-90e9-1b6d636e6398",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4db063-db2d-429d-b50b-517e1c96f9fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbb5bcc3-fd1d-4803-9287-87c2b8e88087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67fdec11-5175-48ea-a2cd-29fcaafa7b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebd0bb8f-220a-40e6-95fe-42a8787dd2c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1564715f-e1d7-41e7-b3f1-0eb313055c6e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c03ace7-e01d-4f79-91a9-8fe7fe3b95cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e306996-14b0-4e56-8db8-6cddc493aaee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a8a33b-a90e-42c7-a871-970d4710fee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "198d6835-5447-4b2c-8a78-7b9e2a5fb3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0180e52b-8dc2-4a5f-9220-b4b3cc5b54b9",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02578438-49d2-417c-a328-aeb61e160156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe01c060-b028-4d1e-9616-df7b4b053bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20ae4e84-b1da-4d84-a812-3f763ad8f1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8512d73-102a-4617-8515-7f5420e1a26e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f022a9d8-f439-413b-a30a-87fc53a2cc61",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9041fc2-dcf6-4eab-9313-9eff3ece495d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5f25609-77d2-47dd-ad3a-6d33da0d8c1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8d2632-41a6-4ea5-a63d-ebafb03f0c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dbff4b08-272a-43c3-8b8c-33b0d60e2dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f0a864b-06a8-45ab-808b-a36c2de0732f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bafa8dce-7c00-4278-b58e-8dbd9a0d16df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e783710c-47a1-4ba9-9919-6c7175d9f177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76df97a4-2035-4bd9-840b-9992d8ac2ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecd15a16-4317-4762-83bc-d6954748143b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc7bb6cf-51b9-4f88-807a-c3ec9163e634",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "684300e9-d9b3-43a1-a742-e06e0c241c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54585aba-ca4e-434b-8517-727586efa17e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e457eba0-a5fe-4515-bb0d-9f72a0037916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce46ff29-8f32-449f-8810-fa7868cffaa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a63227e5-801f-4213-9b13-27a52203ec61",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22fdbad6-ed8d-4d12-9f51-2489044f7280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "612ea71f-7db9-48c2-923e-93c9407b6e32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5335b1b5-8ef4-44da-b6a1-fb3e3dae90df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a656b6e-9c94-4153-98c6-80183aa92753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41df1bd9-3219-4f7a-9e70-d14ee69f8764",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1915ce9b-2aa6-4160-a837-50fe6823cf53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f310ff2-3669-4909-a804-89fda5da9d7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "029c7604-5382-4800-a09d-8d3b4748d066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecd98d96-e537-4e14-acbe-e6f864796e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ec926e-1d5e-4edd-a7bc-dbbcf0f7bd9e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e2f77c-76a4-46e1-985a-4a0de0072ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84eaf70d-04e4-41b5-8cd3-7763edb8915d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4190f405-db26-4729-8f14-6900b2431ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c8b56f8-04dc-4e61-bea9-975e96a17e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c68255a-db2d-4b79-876b-d9d4bf8672c9",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e331dd-3c7b-4b73-97ef-94f6d6a6e794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9861a26-3bdf-4466-9902-4e516c54c9fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3132da07-4433-4996-aa97-de7b901798e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b2291c-7f86-49be-9ab5-7c923c26eeb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d914281-8dbb-4def-9ce4-c68185ae4812",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e59786-5ceb-4fa6-bcac-4f53b0f5f7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80bb595-c6ed-43b1-8fbc-72bf86df4b6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fcce546-da0a-49c1-95a2-dc7791830351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "45266482-f238-47cb-aef0-de30dba0a9d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb39138-0a3e-4020-82db-ca068cbb9a84",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d5569d-e9eb-4e0e-9379-c40136e5c268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a289cd-d215-40b0-9996-1b6b0fe2e264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84cdb746-7523-4be5-a23b-c4d04dd6e675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "005e3934-4949-445f-b15c-5b551c31d29a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dfee515-9ef7-45de-be9d-982175434cf6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bea4eab-b8d6-4481-8879-772877d238b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0553a619-0101-42ed-ad3e-9e2afe8152e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1585d98-b669-4f1c-9e14-df6a45fc99c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a9cc0ed-1747-45e6-a5c5-7c0fe740d82c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72352f58-758a-4c88-bc41-f31fad9cd525",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91897442-e3df-40ac-8b6b-4b13d2f310c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66a2a306-8c81-44bd-92cc-e9f0103be254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8688fa60-fb75-40db-868f-f409e84f174b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f762db6-a5a2-4f61-a70e-2229e4e8d452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4670e8c3-c0f4-4e88-8a2c-f51cab92b32c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df99cc7-9a31-45d8-b33e-310bf61bcbb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7ce069a-8fd9-4ee3-83e6-92b82dd45dcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f30142-2115-4040-be83-3bb07c9fa380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6630eb71-698e-41f7-a525-5e5f9a158034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa14b89-eeb4-4095-ab16-a66650ade217",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc7e998-f50f-4971-903b-b490ae1f3784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0072c6e-f6ae-49ec-9d24-224f73512be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2ff96b-feee-4ebe-8d2c-0f4c74d004a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "defebcc8-3436-4a24-946d-4cdcee02a898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7659f1de-278f-474c-a5ef-053ecf0531f6",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d04098da-f178-44ac-af28-1f1bb23092b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c98f3e8a-4847-4c8e-9983-b170b50c5720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15919d32-52ff-4d5b-ba8b-0489083ef07b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2571b1e9-499f-4694-b19b-5a613cfda649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5344e8c9-b0be-467b-888c-99d4f73b13df",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44fac52-3d9a-424e-9352-2f2be321a2f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff4a57df-b763-4229-ba6b-4497c92d5566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c4ecffa-de7a-4c11-9415-41d84c9bc649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "128c5fa2-b5e7-47c8-9261-8d99c5099bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34eba76c-c5c3-47b2-8ea7-aa7726fa31e3",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1faad5d0-1dcf-44af-8344-b667d9048fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "271a3be0-9ff0-49d4-b785-894496158250"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ba7e2e-07df-41a1-9ff8-f759fe00a256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec441a18-d2b1-4df0-88ee-7e4ab0410498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a2139f-677b-4cc7-884a-9801a2797f1d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9436ec9c-126a-4cc4-93f8-6caf54e8fed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c6c4a83-2cf2-43b7-b083-989d697c2d97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f458c03c-dbf7-4a5b-ac91-6c991b892a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "89e9424b-dec4-47b9-99c2-29a29f789187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "073f466b-4b97-4910-9398-9711534607f3",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0283bed7-3364-4d32-989b-8117d08c8fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "891ea2fd-a545-4572-9b41-d46eee346f5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce616d6-894c-4f7f-bfa3-95faf52e7b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "32b664ac-cd6d-403c-8db2-d48ac074f998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e48bb0e5-e206-4082-9f99-ff939b6340e6",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "056f79aa-29ae-4fad-bfd0-dcf7a899d2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54298df0-75b3-4a2d-a5ca-96b7f059f7ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0e7efd-bf99-486c-9669-a50f083019db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d39bc34-28a8-43fe-a9d2-bf083381a052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f902ded-ad6f-4d02-a231-4b378c59b7c4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6327b13-6031-40b5-b1be-09c21776220d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c771570-0d5e-4f81-912b-85fa35a4ba2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc644f5-b426-4673-9758-0b8b83c26495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c7b9b17-8abd-4790-acff-43dffed195ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bacb38e2-8686-4ff8-91ac-c85d44a77a73",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7800082-ecdc-4d42-a29e-eb1711d307c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c92f1347-32b0-45c4-9bc6-b43a3610bc6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1ebecd-505d-4feb-a5cc-f895d0b3425e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bd51274-0097-47ed-b372-a8aac27fae8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d82a7f8-e6d2-4cff-ab60-704dfe2f24de",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f2530b-135e-4bea-9b25-3dab27e75d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd9be014-1b82-43e6-ba72-61a085b5651b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49362d25-1e40-40d5-927a-5715ade0c5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa933b69-5415-4bcc-abe5-d0e20e40e7a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5a2b889-4ae2-42b1-9193-53cc8c55300a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd5c0d8-b238-4b04-ad9c-b2a8bc2f2ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56bf545f-ae10-4bc3-ad62-1ae93ed2ec7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde40c47-c499-4f54-8034-9e3d02f98664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc1786f0-58f4-47ec-8e1b-5e45f4517113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41778ff3-faa0-4720-b52f-4b769e1b8fcc",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe98f39-3343-4a76-aa76-95b44feb3252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d82a983-1132-4706-9655-160fbb898b3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e75d5ee-d874-4eb7-a15a-099367fb1294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff60700a-79e1-432d-b254-5f06e2df1e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55fed6ca-e3c8-4629-bc58-11fb5da704fb",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7dd724b-ccbe-4c66-ba5d-1f3fc45b60e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32ba12b3-917a-45e8-9858-144836abb8c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3661e4ab-13b8-4e33-94e9-314e858af196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "88f833b0-33e2-4589-9cbd-9f6a27374451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94dcd0eb-186f-41ed-894e-63cf6de54e7c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c88daa-8833-4adb-b535-4729fea42dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce7dba1f-0256-415d-9d1e-b5a720d9a84b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd07d4d-ccc7-4f7b-a9d7-798e1647a9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "67e2b634-2f7e-4ea3-a955-0a03111717cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c4e0b9-2c2d-41d1-a036-910fc4443845",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87fb749f-9050-4711-b3ab-5e2f20d27345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33001044-d666-47b0-a85f-c141a8f7c8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5741127b-35fc-4664-ae12-a8400ccc50aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "323f20e2-0e46-4a0c-97a2-557226f712c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641be5ed-5512-4598-a847-4aea5d4c4050",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5bc2909-345f-4496-b698-8caee5a36c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "757bb967-1a5f-4688-95dc-ac602a7b7138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1c2740-dede-49d5-8b28-ad9521571863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "70bf1807-1439-496d-978f-09afd9b0ee0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da470fc-e6c8-4eb0-bd1f-d16b1c8aa0f1",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f244b924-679c-4e63-9415-706e28bdeff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7df07dfa-f4a6-4451-8a4a-a34e7422f27f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e4a69d0-e473-4b28-a4e2-e823b2ffbbed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a25aa757-581d-4504-afeb-831ae9b180d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7e2754-f1d9-4bd5-bb25-d06293f1ff6a",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e58119f-c989-4fd4-a93f-86c94132e601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e787a2a3-0331-419c-b7ce-c706774da38a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e9beed0-5e12-444a-aed6-1ff0da1eb356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "82041434-cba7-4638-a89b-61f32dd730e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964ef192-35ef-451f-8135-f5e166de6315",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02948060-2a53-4312-bdc6-4d878d272925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c072211-f113-4b20-b230-caddc1b0af7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a5a8e84-c343-4ad1-956c-e438ea432f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8cd795b0-19ad-49ca-b76e-79243acd95f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e425d179-4d07-46be-97b2-a7aa1e191ab1",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d5163e-fb20-462f-88ac-80c2e7fb6686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d28c345-aa05-4de2-84dc-81c8918e2469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68542667-fea8-43d1-a9d6-384859fa03aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "09f16e8e-6ac0-4a5c-951d-fadae7005cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b99b72-4afb-4164-82b2-10cfadbd594b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03fe7c8f-64e1-4ac8-9dff-fea760b144f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c2ec6da-211b-4075-bbb2-179f3bd8840a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5087d28e-34d1-436a-a3c8-dd4c8ca52166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1166b7af-1a04-48d1-865c-7f6ef601cba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f700e86-42a5-42cd-b82d-4279e98a37dc",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39372b0-4679-49ea-828d-365c98062fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "277d219e-d738-4719-99b7-541cc70381ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf289ca2-035e-4318-9321-67cdc5e62503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1f1e387-e73e-4035-b1e4-8caf556d443d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf957e1b-b207-41e1-b9d7-040359cbba2a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5125956d-05c9-476d-8031-8d0bed5d15fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "321bf330-27bb-436b-ad5f-3ef9e35a1f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70644c27-ab19-4f81-8d7f-46554308f59d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "21ff99ef-e0ae-48ed-be39-bd894d9ba202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98849d81-d65f-450a-a7db-128a65b016ff",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "845a6c80-f4bd-4cb7-b16e-5efd40fcb157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d11bdf6-1aeb-49a8-b5e6-a1e99b91f278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a9c047-a4dd-47de-9fe8-aaaf9469da4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "570b58d5-f109-48e8-9eee-71ef05f091a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071b55d9-8de0-4193-aa04-de1ea7c16103",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc7996b-370a-4993-88a1-7d0f7fa19d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5139aaa-97be-4b03-8f88-31d4c47107fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fca3399-01cf-4474-a0fd-7d2e446159d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "783583e7-25f2-438b-8567-7b31e393e877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c039e147-5742-4379-aaf7-11aa8ea2e702",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79bd5ef-5f45-411f-9732-9ab5e534acb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1e1eb9f-f8b5-4837-852e-7d894c30ee9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c60f0f2-b095-41fa-bfa8-40efcdd25c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3b8d5eb-014a-483c-8bd4-bfca84fed2db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8697c4-3d0b-4f28-8ab3-70f3dd5450d5",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9909dcb1-02a7-4209-9aad-98acae5db566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81f56a50-db9b-4d7f-b078-91092595a6f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202f746c-cf53-4fa0-9904-b51f1bdf6494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "749e6cab-8261-48ed-83b9-e08581d35774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8473ce-fef4-42e9-b070-4ced6a8531c1",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b1a882-a842-413f-bd78-1e897791e06a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f014b6-cf7c-46b8-8c91-73ed4e36483b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8fc5eaf-9782-4a73-9a5e-5f04a983cc57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "edf96722-02a5-4607-b940-79acba587b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea01302-afab-4d74-9563-083f8f611433",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf0997f-ca25-40c9-9bd1-121495321760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72ed2eca-6ec6-4026-bd1d-47f5cbb54b3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718c6a0d-2e46-4fb3-a483-b6bb35f1bd6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b132325b-0219-4d77-8969-ed7b71badfea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367c2cec-202c-46e9-99f1-f2b8fdb66be4",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13119ae-11f7-44ed-bffb-20614664a934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "881a2e6d-7ce6-4c86-a13b-abfbc815e0a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447086dc-23eb-4a02-902d-1805794ba954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7ab721f-f607-4ec0-9957-d011770ed9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7186a8c-cb5c-420f-84bf-4e4af53610c2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d51d4bb-d082-4abb-8edd-d55acb5bbfef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "62006172-5e53-4dec-9aa2-bda00b49e974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e10f538-a4ca-4f6e-9266-b30175e53cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb218116-4c7e-4344-801d-ecdb68bec6b8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a10ea74e-33b0-4f64-965f-86e955892e36",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "99ba9cce-239f-4d72-98b4-498fc9551ea6",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e614b9-04a1-4826-8c74-3ca9cc249521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb1f9807-f02e-4d11-b75b-96b1c9bf7f95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86551eee-5063-4a8f-baa9-68f2858b75a2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4894b186-ca1e-4a32-b5fa-2f0236518dbf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95bbeb89-8230-4aad-a674-4bda97762984",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ad4987b-3435-4fb7-81b9-e5b131477716"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "43a4d142-c231-4268-b59a-2b408bf8633e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab1b25a3-9619-4463-823e-bdf463b362ff"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "643b0e4b-016c-460e-9939-2285c446f99b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "412db241-fb88-46bf-a627-be2e62836f24"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "65f7f87c-9154-49fb-a723-964bbeea5aa6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "69a9a212-d536-40b8-aa43-c22490194174"
                }
              }
            ]
          },
          {
            "id": "a9c5a9fb-fbcc-4875-a7c4-2a23567861be",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e1ef4c35-8f3c-485f-9f3d-4a9cf8dfd367",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "0a237127-a5f8-477b-910e-fea7994eaaa3",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de1bb7ea-7500-4ef6-a5c0-5bf01aa0b62f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5d2ab848-a655-4cb7-8c9a-d0814aab5f76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc8b23c-638e-490c-b364-2a45d07c8716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2254ff5f-b46a-4f0b-80c0-76f2950e529c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "324a9a1b-421f-46e2-bad0-f45ae9ee1553",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c48d309-e8da-4140-9e2b-a74fddae1f5e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c9bfc590-4336-49d9-8bf7-9c3eed7142c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a881634-baea-4930-a39b-abb4bc3584fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "89470e8f-ddc5-4300-bb92-4060df4acb49"
                    }
                  }
                ]
              },
              {
                "id": "d6693ae7-b7be-4ad2-ad11-771bfa513519",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00f90f8b-23c4-49d6-a34a-0785c5b02d71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1b4f544f-9e40-4ee1-8b00-0f7fb842649f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b22878df-a021-4562-9575-7c0234e9624a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3b697f0e-e6aa-415a-8ada-151af59dc305"
                    }
                  }
                ]
              },
              {
                "id": "c6467ce4-b952-42c1-9ed2-832bacd729c9",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e99b09c-f17a-409e-88f6-d583607f540b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d6bc081f-d80c-4c06-b3c8-21138f6118ba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5869e1d-74f1-4e55-88d2-d318e1651a88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6562b84b-bc33-4bcc-853a-dc39be60b7cd"
                    }
                  }
                ]
              },
              {
                "id": "39e56b7b-999a-497e-81b5-88a6778141de",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d2a6791-d681-4013-8517-43ff09d14731",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e3c69ca3-02c2-439d-b7b8-089187c0703b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6f5a20c-3c7b-4b5c-880b-438f6c01c3cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5e6e06f6-7bca-44c6-8f3a-77c60f41ba88"
                    }
                  }
                ]
              },
              {
                "id": "749ad0f2-66b2-4e78-a2c1-140a3687af34",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f9141db-833c-47f2-8b7e-ecd116772006",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "68a5a38b-7e50-47dd-bf05-011fcf22a6b2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7eaf8f8c-5bd8-4e8f-b8a0-725c40fc78b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e53a0f15-c636-4b22-b336-d2ce4360f8bd"
                    }
                  }
                ]
              },
              {
                "id": "a8d7a671-bf53-47a0-ac4e-ffb0359634c5",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "50aa73c9-575e-4959-b24b-b4736f6632a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b3cb38e0-f7d2-4182-a11f-55f033e18bf1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e44bf844-a9c9-442d-bddf-07fc0e51d59e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e6a3f5ab-6c6b-484b-9de6-b27f1bb2f475"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "85b397e2-fbcd-4b73-a943-2d48f625658e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a08838e7-8052-48b3-944e-221dda127e32"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6f9513e1-db93-4571-8c22-3c84a0f2dce0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6e332f3a-e8a5-4377-8861-aec502e0a8a1"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9ab25f0-52e0-4d6e-81e9-566d84e3328f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c8aca9e4-5256-4c18-9d47-202a4c59a7d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6e4a316-cb8b-4268-821d-a9f907b4b23e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "784480ab-ea8c-4f1f-97f7-9f1715fd7b37"
            }
          }
        ]
      },
      {
        "id": "fc4cf881-11d7-4161-830e-ffa250afbb4f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8adf894d-b165-48a4-b4e3-aca3d3fd79d2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6367cf60-8729-403d-8bd7-c12fa6b68b1c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cc31fff0-023f-4862-890c-f4752f3fb98d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f061c31-1e1c-4f3c-8692-edb8665ec32b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a3cb291-0e33-43c8-9f42-64f44c10dd74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dfefd71-0aab-43b0-8d51-a0482423192c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a15d319-b30a-4bf5-aa2d-5e4fab665a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959ab2e2-08b9-411a-9160-823bf425300e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b8202d-61a8-4d25-be78-80209e42b15f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5be32a68-e09d-4c2a-b971-48d51dfe831e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07063f02-a5a2-4a2f-b633-907256f0b2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e40191e-4b54-4703-baa4-13a843bfcb5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c0d47b-d37a-47b9-b050-5fe86a9acc31",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c5cdcd-d5bc-44ed-8b0b-b338355d3a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7635856b-9973-453c-993c-9804772b0b61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ad0a02-c3cd-43e0-85c0-cc2a9354a6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b14cc774-efb7-4d7a-a8ce-b916f87c3e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d851aa-7d02-4328-bed4-c5d6e17f6eda",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dba96be3-7537-4074-bc0b-098af088a4ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c59b59e-b4ac-4bba-9b02-d6e665486380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea476e3-70f5-4f7a-ab1a-1cd1940b7de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "67c02f2a-ddea-4e1d-81cd-948e965562f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398d34dc-d87a-44d6-9bbe-63fdc441e171",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d4b9c7-3efb-45b5-b2c3-7108cc77f5c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "602114b0-ddfa-4276-bd69-b27d4f163831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f112b86b-e687-45b6-b06b-27c6ca3af667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2fb763d-6bca-475b-a732-c383c9e14002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be479746-2a7d-48fc-8cea-81f6e9eb6390",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd4fda4-379c-4eaf-8040-e08238128451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "553a7477-3b44-4483-8533-a0b60f197c27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f97dc389-49b0-4b65-af72-120c429b8f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2c62e44-bb5a-44aa-91fa-a81b46421cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa609296-86c4-444e-997f-f506a2d513f4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0fba91-f615-4849-a62a-f81cd393ef79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8feda587-d569-489e-a218-211abe96cdb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b1ee5c-8f6b-42fd-90a4-f27eaa7b2351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a8485fe-9a41-47dc-9a15-ed87bdd25cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ac0dbf-37fc-4fd1-abea-390904548c49",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a098e63-dad7-46c7-a718-7226e788bf6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b23d9c3d-463e-4d05-b1c6-59d4641662b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92107bc2-1358-4dd9-8c53-776f42ff68b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "baa3b582-2c28-427c-ae35-e09ffd172be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffcf3ce0-6b35-42d7-b25d-cdf16fc3f776",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c61ba1b-4af7-4d9f-9fb9-b9f9b13e1876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30e2761b-5313-4b4c-ad3e-e8a744bb76bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a96385-8286-4b1d-9586-da76e529d033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e655e304-e0ec-49a6-8a10-af01b9ad866b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a453c2-6664-4d63-850f-4859da935a51",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff5e52e-ee3b-4a39-bc78-c043d8cd0aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf1e7dd5-601f-4c5a-b5f0-bd1fb367f627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbdf5762-4867-4b23-8232-ad7570b0b235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6520471-085f-473e-87a5-e1980c2ee55f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aeb5989-d5f3-40a5-9229-018b861102f4",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ddf0c8-fb9d-4843-92f4-afe47b0e2a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86fee76f-1850-4819-acb8-fb10b95a348b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "518d176d-f47a-4eb6-9b56-3d45c2d01775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "83533847-b8a0-43a4-b1dd-0c37d77ce4fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c64ccb-7027-4b9e-b7b5-8e8c63db6e2b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2d8c55-311f-46e9-972d-07603c87d3b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2a8626b-65d0-42bd-8fa6-fbb7a99100a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad6802e-9bde-4165-9a27-c30549cc363a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "251f1599-05af-488f-a10c-373b76190496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171de1c6-66b4-4ea9-9335-0c6b545cc6ed",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6658c7d2-cf55-4f3b-b13e-0c6b5f611cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f52fe1f6-541b-4b3d-bbd5-a2c719565f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aef5f50-b2da-4ee4-ac8f-66fc4f686482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee7e5b88-133b-4b47-9136-10d0eabce439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d38e56-7c60-4b2d-ac75-a77d0bc4a004",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ead11e-dde4-4839-b5ea-3eb13de85098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e393ff4-2f26-45da-a536-27edc16225b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55ad592-6d17-45ef-80c6-67632465a548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "897834e1-1f1b-46cf-a3ab-b1f92afaa36c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a207a1e-1a31-4ae8-80a8-0a3d8c27f583",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "790228f0-76de-478f-9b32-aff805f6b829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fb40005-56d4-4ad1-b434-5d5fdf1048cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3ed10e-bb17-40af-bf8b-9228b82ea631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7bce0b7-0b98-459d-ba49-2243aacb661a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaccb15f-7439-4ad9-a19c-e2d3c3834d52",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "905c1ac8-01e5-4ddf-9c79-7e4f49aeb11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb8e9ca0-6d00-4550-bd9e-61bbfd609ef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf1b850-d8f5-4668-8444-49db30f05aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "82c42683-4882-4069-8935-8690da9f28f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f7a245-d7a8-4c2e-b999-d7398ea64526",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "433556da-35a0-4812-b58b-4ca7101a4ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63af5a6d-3b73-453c-a0f6-b2800b84d5a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd2c479-1194-4138-896c-5735e2f78f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "276a74ca-8b9e-46d7-935a-a7da50aa3168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d143b7b-c954-44f5-88e7-01ff2e3c8149",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca9bed1d-84ef-4177-a398-5f0a8fa1cf65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec8c5fd9-4f5a-4044-9692-0a705e4068d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efab855b-327a-44eb-ab97-6c9b4cda8b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2d11b7c-2b70-4b36-892a-a2dd7aaab496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5264c621-bbfa-4759-aef4-0dac64ef1de5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dce51c6-db6e-451f-90da-fc635c056f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49faf21-1cf8-4121-b0ca-b7b08cc29e81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f651fdec-8b39-400d-992a-8c393003bf78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3338e793-3ca0-4838-9e7f-de54af8d064e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91bc2a4-c0dc-42c3-adc1-2a418faf8b77",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14667b5-10b7-46ce-a9a0-89dac29a3a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c5776eb-222f-46bd-ba6f-64a375177f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ef577e-f46f-4f61-b89d-4735d6985288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c99d9c64-6be1-40a1-a38f-781926930044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1487b50d-09a9-40c2-bbb0-ca48dd810f3a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31ec0fc6-7d4c-4dc6-8c3c-16f4638c306b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc54b09f-cde8-4ee6-b1d5-a8a169aac907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9be4f2a-1e8f-4716-8e5a-c086f8e08c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2411ff47-ba9b-4567-9830-83d2b335da56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e6ddfa-c2d4-4394-826f-256201a33dd5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10edda7c-0554-46c5-b65b-af175be45097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d59ea0d-5355-47f6-9290-f2d46c4e1206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f20c8d-1926-46a1-9379-68b72ff91715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75c29743-5fed-4a5f-852e-5dbba04803fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a6cac4b-6b36-402c-aa62-b8fd06a38399",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df489dce-994d-4447-b206-98c40790d7d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "355f40cf-94f4-4c93-aaca-10ec9597699a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e11bb46-60d1-464c-b3eb-59bbf4008fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f76e5558-a5f2-48ec-b922-bc71297a0ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b455d8-171a-4db5-95df-1bb6b552fc6e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3baaed1d-ccc4-47df-b9f0-cdc9a9c33e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f839fef2-45bf-4ba6-b3f3-d78b23c3d4cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a88da6-2b4b-42e9-b416-48bbcba981c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04e8bb57-5fd4-4990-8056-f42c3b8bf777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5014a29-3f25-4246-9d23-941986179ec2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32383f45-7299-44fb-aa36-6bf1e5ff8fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f8ea897-a113-42e0-b1d4-2880c8092482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b597c92-529e-460f-a025-5e9f7e719ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6239b3f-1a06-44fe-bb57-1c96da9a2d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c436e9ca-4dcd-4981-b5d3-db1005190800",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74441af2-fdcc-422a-add7-2a844ab751fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c57b2d8a-d5e0-4578-aa13-bb21015ae860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b99b975c-1159-4877-a845-f756882436f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab407b86-56a4-4887-82fe-3d1467461b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dde71a2-0386-409b-972a-4558668d1e3a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b416b8ff-c4a5-4b75-bebd-0669d592a799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4fd8e27-0066-4127-8f48-3da3535d34ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15298d81-defd-4abf-8c66-8fdb5e711ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f3b95e1-c847-4dd3-a26b-8cd08eeb2fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca27cf5-a2c1-46fd-ad11-0f9ec535ee94",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32afa4cd-48c4-4dfe-876b-3c865e9f5495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afc6b570-7925-4b72-b999-c697cf36a88e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d2232c-7127-4a5a-b0d4-e2efa15d41fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d78e476-18a7-4055-8eb5-ae13c956b286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20996e30-c688-4813-934a-a31a4ffb41d1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7a5e9e-d572-4fad-85dd-ff01396d5353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02ba7a3f-72bc-42da-afa0-4acab169c22e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44706d8f-0ba8-4f77-91ba-e096a837c9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "edeef919-4ae9-493d-a83b-c95c62fbb11c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee11b9fa-5347-4b70-810f-d38dfb983f5b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e224d00f-98ac-4533-a9b1-ac5451d5fd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4e2d075-6e18-4267-ab59-caaa22be24d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "080a5342-4b19-41bc-8ecf-a55c73cc4546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68401776-bc91-4228-a151-538e1851eaf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2428fe3b-afec-4ac5-b93c-66f40def0ab5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e3b5f9-93cf-4e1c-b3bd-fb88e232db68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50b03f8b-2a68-4974-8841-08386acb418f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9912701a-c3b0-48f6-9304-bab224068735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dca9c52c-2e96-4f02-b786-6f8a71597f90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804b8f89-1bba-46db-b211-2188bfaaa876",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a186da53-8551-4510-af41-68cc68a7324b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43e5c8cf-8913-45d8-82c9-b2d61a42be90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f7a974-09ff-4023-a500-59354b22c5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8c698b9-1ef7-48ca-abde-478d51fdf835"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c34c24fd-2b61-48e4-a0ca-7cb58a04ee4d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6c2612d2-cf01-4cc8-acfe-8346876c79c9",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6661f93f-8159-45a9-82e0-5845ad5365d7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "692bd3ed-6db1-40f7-bb9e-0a453c6d5cd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7ace5b-c0fe-47f8-8c75-b8bbf844af5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "55771130-78a7-4806-9dbf-bd7809477145"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e3bf48f-9574-4dbf-9965-360f947415f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6515611-dfb8-4297-85bf-e835e6d33a95"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff7ad61e-927b-4547-8d32-268acfc1d2e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0a2d6e4-04ef-462a-ac50-00cf82145277"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9cf0aec8-ebb6-47fd-98bb-60d7cc6f06fb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "81e22d11-691d-4bbd-bb89-1bb82c915ad2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6b257491-0227-4699-8bde-e643ec2fcc0c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "40b9c837-f873-4b5d-91b4-3590d3fcdf65"
            }
          }
        ]
      },
      {
        "id": "e2d716ae-8d5f-4508-8a98-8fb11294e415",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "b6eb0f32-fc70-40ce-98e8-2afdca29bf16",
            "name": "Negative Testing",
            "item": [
              {
                "id": "57840484-68e0-4f3e-848c-d4b5b1065353",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "675f3890-d08a-4bc8-90d7-695e62076418",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5114959a-60a1-4435-824a-d64b938507bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc0793dc-0908-47fb-8ed1-2184beba1a91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aad7f0f-86aa-4b3c-9e3b-d51107fbd0ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6515a498-c3da-4531-8810-e1df16144f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68bddd4-3fd6-4601-b0cb-78d23e304232",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf352b46-4c21-4f53-9b30-98b2dfeee41d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3891bd5a-1929-4dab-b87e-fca16e811817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a96c0d-ca5f-41fe-9cfb-ed3065816e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e935c7c7-2732-4860-a47c-34609ab2b28f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "700b76dc-fe1e-4115-aee9-55f92b671bd5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d9ab08-9dc5-4d5c-8727-acf876c46f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e13d7e6-ee42-45d4-a951-dd953a6ec744"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc954a06-8a14-44bf-bc37-159db81f10bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd7978fb-4c59-47de-b3e4-41601f26447a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31fe7dc-2396-443c-b5b6-48b30b1a0d0e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "148d26a5-fa60-401a-8356-6f5621338153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5fb344c-dc30-4313-9b88-254dc0d8de25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4c1a7d-876b-473f-acbc-0f5ac020eafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ee6e406-e838-4ea3-ad7c-0c187874190e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "172d9f3c-3d6d-4964-8955-727c9382791c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fbf27c0-8c3e-432a-b6e4-8b3fd98d1ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2af8cb7-eff4-47ce-b865-d8f84c6d24b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad591be-5802-483d-9a62-946c2cbcfe31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "67541821-2e38-46fa-af01-4a5b93b1d7a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486a57ec-0f5b-467f-b844-8f063d17f2e6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c9839d-0023-4003-b5a4-c6f266d5d08f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f609e05c-bba5-4044-96d7-ff50cde38e13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e733c576-0328-479b-91fe-719359c06ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "83710e49-89b2-437b-987b-3203e7916bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6fd574-6145-4e86-8044-396443f4417b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eaaf740-2dd4-45b3-946e-a412953a9813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e2723aa-166d-4904-a066-947363782465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4de6431-32c3-47f6-9b01-2b0d34b3f851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "fab22c5c-2fca-4cb1-872f-cfea894b1c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c6ebbba-cb57-47b0-993f-aa783d6af621",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32cab865-f4a9-48dc-b6b5-f5718e888081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "240d17a9-adb9-4301-b0fd-f0411d17ba04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef11965-a45f-462d-90e1-cff8d9a077ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2fc29ba-a67c-4582-ba4d-7211c1b92153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6bc4f5-3c20-411f-8df8-b274d93a1a59",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c7d39b-48c5-4abe-a8fa-f523ed6ac9d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b691c18e-da2f-4213-9de8-42e445aa3074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8603f789-ad67-429a-aedb-45c92e01dd26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f45b362f-7375-4b57-b280-5b2e55e8c3c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9e2785-c76b-4ddc-a94d-7fdb2ca45039",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c54b5e-309f-4fd6-9742-196e498c0403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77172f3d-f279-4cc4-b6cf-b4c508330ebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "482eac26-be12-4923-87e7-ec7b87fe414c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b2668d6-171a-4c7c-a208-8e25e0d9e4ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a53cbb-3bb5-4906-b83e-eae74e6040a2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f71b93-60af-4010-aa7c-b0c230b93b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1484dfb1-fe2e-4774-8ae1-66a1731fb2a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c3b523e-b854-42aa-9f9f-525706ef5305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ddd8f26b-9486-437d-b2d1-5d88a4f915e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f805f6-68b0-438c-9eec-78d565ff0b8f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab0337d-7f90-4509-91bd-fb18751583aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d31fb2-2f63-40df-aceb-587a436b15d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded82409-2088-46a0-87bb-eb6db80527a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ad254e05-7096-43f8-98d0-fddcdd923094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d292b91-2589-4b1c-86ac-c4b1d91ac1b3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9da0928-bc27-4695-8856-7e81e6a3a8a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fae0012b-ffcc-4406-ac38-d80d31824f99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7c62e4-3c11-4ed1-862b-23e5405114ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf7f28dd-485b-460f-894e-21a3937270d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25776fa8-ac5a-4041-85a4-920ebb84f858",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce648e8-753d-4bac-965c-8f257dd4898b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3cbea7d-cf5c-4598-b518-def52dd5229e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f2c0eb-8366-48d3-a4a6-94fcf2351d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3ce8691-2420-44b6-b9ec-a95aff5d89f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35423d72-2b91-40fb-bbf6-f2f10e98fb87",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af48ffa-b186-43d6-8184-e7301e8f6e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28e4e66e-54e0-42c6-b940-641319e375a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f7f099b-9b08-4ec9-86ab-b962162dfd37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "39e4f4d6-256b-423c-9544-af303f6db6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9da90ac-ec01-4739-8580-ed9e8a5f362a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31967cea-fc21-4ffb-a642-806e427f98b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9f6a299-43a0-4bd2-bb45-3f168c856d9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f82ca59f-2935-4fb8-bf39-a67dbd5f6b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0e69052-6803-429c-bcba-3d43a6834f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a8874e-5e6a-4721-8b90-b84f233318de",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14da6c47-aefa-45e7-9fed-42f694967e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c7ddd42-8028-4a83-8983-42deb3060ba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8729ff9c-1db9-4ea7-9b6c-1601477ebf2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "82260e6c-9e8d-4d5f-89b4-f194dab176a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da48d14f-269e-45cb-9767-127e0d4e4297",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa36b3ce-9e21-4d76-a1bd-302d832a32db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cf75a15-b751-44df-8862-c99d2a22ab57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51bc4b5d-3086-4e81-8b78-7e872fcba8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "494a1d27-5b11-454a-82c2-e91758aa3cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e1082b6-24aa-493f-9178-4ae3f819948d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d18815b-a0f7-4757-9349-6236d26c12a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40a90630-48f6-426a-a529-9aac6ffe2fdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb6c097e-93da-4963-bf79-307307bcabda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c15e1d74-5a0f-4fd3-a57e-136b98782fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989fa19c-d90b-4429-a4f0-4c833e780a7f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "754831b6-6e7d-4dfc-adad-47de98ce8ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b5e8a52-208f-4b27-9c27-dba195eda118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97863d52-bb42-41b8-83d2-d3801f861352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3829550-d5e5-4c0e-9f77-ff6f95140196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff10b0d8-067d-4851-854a-ada36c0361bd",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e15be7b9-d41e-427a-9051-5d401b9d8c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "017d3009-5034-4485-8be4-985363cbf47c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b7e528-949d-4a47-93a0-23c19765c669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1acb20d-b2ad-4f5e-858a-b1ad733ce708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee80e4b6-17a3-422f-b5fa-2579f49acd8d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "933118b4-d326-4a7b-958d-88bbd8b62bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "741841ac-a3a0-4175-ab55-735442fa6b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad3c720-3774-407b-8376-cd3f4dad9545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "802b1a2c-8511-416d-9e4a-100002186595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3000f462-c1e3-46ee-b84c-310e24122eb3",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e7ae851-8b5f-40ac-a431-401f8f1b26a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d04e60d-cfe1-4dc2-80f6-6d6ac87e1965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f79e59d-4aaf-402b-a0c7-f6ff1b0c3951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df260cdb-2a72-4909-9875-c09e474f3f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78a89832-3966-4709-8a75-bb638098487a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81032b0-ddf6-4f6d-9666-d2aead3d2904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "663a7645-e015-4eb8-988b-e8902bee99b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab9829b-088e-43d6-be87-7a2904250bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5316353-28e1-4cd4-b173-655d56537780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ace876e-348d-40e9-8556-7ab8253eb0c6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8f8dbc-00e0-451d-8c3e-4deed106f61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9879fe1-825e-407f-8872-53c401bf3261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6de233-560f-4119-8730-9a06b556e164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3682f470-5135-4015-abc6-b23b7a762bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe80ac5b-5d7b-4eef-a1c6-9f132d70e005",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a874f10d-886e-4358-9ed8-fe5d27e4e003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae84193c-762f-4db3-8acc-3f2eabe829a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0662f8b8-64b5-4fe4-8366-dd55f9f77d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb11d628-eb24-4e0b-8669-29cf86216784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a279c0c5-b7dc-42db-b235-001dd793d686",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71fd8564-ec15-41e1-8c4c-70ad59abac54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84932ee9-9cdc-449b-87a9-3be172f66975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d361d960-aa3d-4495-9d97-666a15d9e6d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2af5dfb-7e12-4736-a1b3-dc7c96e880e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7f1d13-9cde-4d26-b175-c90fd738d6d9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc482d9a-c214-46c0-bfed-6f0cf9ff24e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd7b4139-3537-44f4-8985-0ad12651afab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922d97ca-56c6-4616-bbe9-f269406cd35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ece15c85-e4e1-4377-a127-8c626d4f236f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add6c096-9923-4053-b7c0-1040df365bca",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aaa54d5-044d-47b5-9250-e5c3640ac7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b04fd491-0e0f-4f3c-b8f1-c322822ee72c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da3d8ffc-b454-4eae-bdc9-cdd8302fedf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7474fda2-0abd-4e62-8ed5-547790176732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38e0b733-50aa-47b3-8038-09ec713eec8c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9d8d9e-a256-4e6c-8875-124f25d006ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e8067fb-379e-4e32-a08c-b2bd085cddaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d71088-6eb0-4017-bacd-2101635b47e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "750ab49f-4a43-4e34-a730-9f4def4c7fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa60915-254f-430c-9d90-cf8add2ea27e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e855ba-8b39-45e9-88ec-0f97614b2168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93c5507a-649d-47d6-b63f-c13fb0615733"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1a8623-1f9b-4823-84a4-f8a26e163f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e8d5448-0de4-4bdb-b916-a94bb7927731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a51cfe3f-7df8-4fc2-a868-80eb788af6d3",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a45af5b-bebc-4eb6-93b5-33d27674210d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a5a5bd-7fa6-4b16-83bc-e1b6ea38bf0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4cbf8c0-0b09-43a9-a75d-f8212fde8bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf7470d9-d27b-4a44-8afe-4207ed12bfec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619067c8-523d-4783-89b9-6617b8be4559",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a504e2c-636d-488a-94c5-2404552bf703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5932e68c-7506-48b1-99d0-015a9a640ae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572e312a-cc95-4ad5-ad9c-824645d6119e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d0835d4-bdf5-420b-b9dd-0b4ed6c2f285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6a37a3-dad5-4d59-911a-206d74b14bd9",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af791f85-e983-43bc-a08e-e5f4b349e55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d195abb0-eafe-4dc6-9417-64d8d3e13f75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf766f6-be55-41ce-bf04-3c4fbc1ef4b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29864652-2034-47cf-881d-d854f27baf39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e902fa31-4af6-411d-a867-5b3b9aef7fbb",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43967db1-ab2a-44e1-937c-94abd588c6e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "329b15ca-143f-4758-9d06-f91b5af19b46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66830e19-39c3-49d7-b5f5-12aa52e4383a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6ba5e6f-2e09-46aa-b44b-9cc0cf3ab18b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52847185-3aaa-42a1-a60d-438c7a1442b8",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e1d528-d237-46fc-9abe-7ac2676e1b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ce3eb52-dc7a-4de2-ad88-e3d40f2a599e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd803696-dd95-45cc-9017-5e880b4705a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbb8e59e-a9c0-4d44-b3aa-941ccaefbf44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e628c1d-12c9-4f49-926a-7890d4275e7f",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15c092a-b70f-4a0b-b160-73d98d89397e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c13efa02-b673-455c-a123-98fec3e2de17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d359dd-bcec-420a-a33a-4534efeb6f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72ee4cfd-8969-498a-a85d-422abb0867f1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ae54b539-f5f5-4175-80f0-6fda8a1f3353",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c10386cd-4fbd-4ba1-82f1-648f033269a4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19145ac4-8ba6-4f0a-97a5-1df5a8f19548",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "abc57d0a-55b8-460f-acb2-c68c6aa5cafc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f6f324-c7dc-4eb8-b437-c7280274fd1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0510f30a-6730-4a05-91e1-77ce82ede04c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7a5cf85-345c-4567-8915-270adba5a382",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4bbbce92-4bea-4d13-ab87-679d8c8ea258"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ff8708d-e733-4053-81d3-46f13ee70202",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57fad071-d42e-4f66-8123-3b1b1962dfec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1121bb36-9158-48e2-8bd5-b2057c7b7268",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3a3cc7c4-2225-4a5a-9073-2976ac3f6c4f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd6c3ed8-61e2-4de0-af6a-c9676eb06b97",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1065a5a2-6afa-4303-8e2c-635b72549f9e"
            }
          }
        ]
      },
      {
        "id": "af43ae73-b35f-43c2-be68-6fdc39b70d99",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b87ba827-777c-475f-98e7-9f8a91b8af37",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0a2702dc-340d-41b8-ba1f-dfd787252096",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "53f0badf-7dc9-45df-ad0d-ef7c92ccbce7",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73af5baa-6c7f-44d6-ba43-b6e21c86c414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e5d8cb8-a474-4e94-b6e4-abd0bf2eae53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f44df3-fbe2-404b-a190-652eca38fbb5",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e5f3b7-91a1-4175-aa6c-cdc421038b8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16ff14a4-9f3f-49e1-ab5e-ecf9d6b6c332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14929fa9-4316-46d9-8a33-7a6efdd89a82",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77c562b-1fd1-4afa-861e-10b8c8f0436a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fadaf3a-ce25-4612-90cb-d3849b2e5fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41d72b1-7f95-4f98-aec3-f45d49dfc8e3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0ff521-ee24-4c52-ae3f-8efa6bbe442a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e05ed93c-2f7f-4d4e-a033-46cca173e7be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2396f69-ca80-4eac-8edd-2210b82a3b8d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5662fd1-5fcf-4d16-ae8a-e683dbd9d0ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c633225a-699b-4c15-a0cb-1eba7563dfcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51535a63-2c5e-444a-b585-22a7a13c1525",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d894c0b2-3ac5-4f1b-9bb7-4f16c020e14a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "891c15da-a657-41f4-86bb-691101859d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6401e94-e866-44dc-889f-ef6f52f2a8b0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4be67dc-4a24-48a4-8e62-7d176bf5a9af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f983ae16-f311-4022-bf48-5b1a391137ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa421a67-3683-4d3a-9057-06fd426034c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5959c24b-a2b0-4ce1-ad39-b5686e10fff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c9895c9-d7c0-400b-b22f-6f42708cb780",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b836cf-54df-4cc0-b1cb-69f1ea5c5c93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d02f43e3-39f8-4904-97db-4fafec7f3dea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6035fe6f-b052-444b-b690-1ddc06923285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6e666f6-7655-4923-9b9a-ea0c88b5a43a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2158cd95-8c97-4683-a654-35dd35bfcfd6",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d4f40e-7182-4056-abe9-2c5043d15c56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "876bda1d-341e-4523-b468-3048552f52a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1a71ae-5c64-480e-9538-44a41870b88d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fc5a329-a935-48ae-86e0-ad68d2bb54bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd09b080-232f-4859-9136-0ee1ce0a9a82",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6695d046-ba58-42a9-b783-5710cad655f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d5e7874-8de6-43ac-b785-a888ae4bc92d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "068d09a0-da27-45f0-bc7b-d8a5f45edcbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "225fab9c-b760-46f6-8122-3fe93b3478cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd9d398-67b0-4e20-8d2a-ea68bc44d217",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2639fbe-d4cd-40ea-ae16-126729bfdee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d49428-9ed7-4f55-8c4d-0ed6f4e08491"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82bed20e-cd33-4990-9928-38aa2370cc23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "686960fa-ee7f-401d-816e-918491dfe4fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83cc90e7-58d1-40b5-8a4b-3ab47a8ecca9",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2606785f-820d-4d36-9fbc-267df4476fe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d2ecc82-7411-44d6-a462-3949c669b202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ac306f-816b-4f6b-a2dd-80526fcd5288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d391ebfb-c7e1-445f-8c82-96cfaa1934a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0c041b-c5e3-419d-a177-c2342f8da035",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e8a842d-00ec-41c5-917b-dd793dfa4c7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a13a6ce7-3ce1-4a06-8840-50badf366cb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d380eb-db0b-4547-9b1a-37d061cd2884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa8d59b-42cc-4ce3-acf6-7c377d8b140f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547c62c3-55e1-4c89-95a8-a0543ac75e63",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf661819-ff89-4082-b664-a65baa68b72f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7886db7-1829-4cd2-a114-15cab1607972"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "219b432b-b543-4541-a145-a18b5bfe0141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5c83f36-2faf-4fd5-bc08-e5996f7d7e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1039e4c1-99cf-4b6f-a934-6e7322b265fe",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39e6f44-9870-41a9-84e1-d42ae2bdf544",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08efade9-312f-4ec1-bf2e-fb5f88951d44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf1d5c4-d716-45ee-8c27-44154a448d1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28fbb64a-3ef6-44db-b91d-6fc21faf46b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55174328-65f7-408c-8691-61d8031a5b1e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd71663-7b5f-4a73-b03a-da419ba967b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b1bed85-e83e-42a2-84e1-07f0aa4a0544"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7872e39-a893-40e4-aec3-bfed7036e4c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a892991c-db84-4cb4-845d-cb61852d820e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d930b9b3-9e16-4348-b34a-98ffba2bffa1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "017ebb36-0d26-440c-864a-40c40312434e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e3fbdd8-873e-4d62-9fb1-2e81e6d33649"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20489a76-ff33-4a60-bd6b-fabf07d6eed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d2f735a-0973-46c6-b67d-55900e3cde0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50bcd549-e7b7-4fff-bd38-eeb479a130e7",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa55340d-49d7-4bab-9325-0c172939cde4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e8efae8-048a-49ee-a2cb-08aa5dd66e27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30d76cd-db96-4949-a664-db8165390ef3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4af5c1c-4640-4b71-bdf8-3d810e3b66f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e2f0982-a282-45af-a970-8c355c13ae39",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da1c0ec-1e81-4324-a5e5-997c1aa1b40c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd2e52d-a4f2-41aa-b1c9-dc5332091846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01830061-bf30-4d85-8272-b83c21346243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1901c5e7-85b8-4bed-a83d-e08bd1fe56ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0125d0a-5a95-4ed0-9603-a68104f86631",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fef2e94-5130-4c37-aa8f-40df3ec5d6fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc2c797-125b-4375-8562-42d675210650"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07bdbc10-cd44-44b5-896d-cd5daea262be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e462347-3633-412b-adbf-e9690da38cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e36ec6-ddf9-4d67-8742-2f187953f69e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b83be209-e879-45c6-9085-65ba6908e767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3970cdb8-69f6-44c4-ba38-219e4cf9722a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba339b2-da21-48ee-bfeb-fa117f3ba848",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b210d8f-8067-4442-aa93-03c7df06d299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98487e51-8289-4b0e-8a1d-df325e7a7c32",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1fb5df1-4f92-4adc-af88-fcdac2c724a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "370003a6-59c8-40cf-9702-b2a5151e40ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e442881c-eecc-4e5e-92d6-d8916775009c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70584e48-4b10-4c50-bf96-300c8ef7b810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "024328f0-701a-41d4-9f67-b2d58145fb32",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a97fe3-4aa7-4595-a35f-243df886a2de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b513eb39-4265-446c-bd59-9c02f5876a4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70dc2f9d-5b6e-46bf-bb12-19d6fc3293b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffa06831-01f1-4310-9476-c162e0822875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7b68ec-8eb5-4a2a-8272-82e3dbcdfdc0",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5363a3-f33a-49ab-abdb-d259ba8e4cbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba98eff0-60af-417f-897e-b597921923f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14783630-e767-4868-8fb0-8152344666d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f83ef7d-6daf-47a9-8205-5500052ffabb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b950d6d-e1a0-447f-a3ab-3b365249f835",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ee7a19-2cdc-4e02-a24a-48c8790f687e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5941f6b-423a-4805-93c7-6ba6210d6fbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83baef26-b035-4e1a-b758-b1321dd9ccf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ca798cf-06ff-4928-9a86-930577eb40d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bf1d775-96ba-4817-82e5-3d33c1dd9049",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7dbca62-a3fe-43b8-9a6a-172e1158c120",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2037348a-1c56-4a66-bfb8-50f41007fe21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02acc57a-2e73-4356-ae51-26a958e08cf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff13d611-e957-45ce-a48d-70866fb8a892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab7c630-e318-473f-9f81-388d429d1e34",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2d8a15-6a5e-4756-accb-2f6fe51c34bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22491d2e-7031-47fa-8672-1be7020db8de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb022d2-ccfa-47d3-b344-1fea8a2464ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38009f24-d210-49e9-baa8-a337fbd87885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff102e41-1c8a-46f3-9186-333a4b618126",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0506b955-b863-4d97-bc0a-d3d1abe6d6c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5de01ca7-bf76-41dd-a215-957373ea7a1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5119f908-de5e-4d64-8133-50eb205b20b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76dbb12f-2da1-4803-aa81-3565d236f269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0eedf36-e4ed-4196-8b86-d72ce029f98a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4f2b40a-6aac-41ec-97f4-a0780a2e4a8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8155b0fd-b5ca-46cd-9269-ba4d40246575"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a8a0ca-b0a6-457f-8ab3-ee67d0ae7240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49a474da-6374-4ca8-bc6e-4671a6350b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f9d368-59de-4c74-911a-6cb5ec720537",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11fd4ca0-de57-4f8f-836e-a82c62054f24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "558f21bf-b896-4e48-986c-65326f167dd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bdd3d83-6ddb-4fd9-993e-812f13029ad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29d055a7-77e8-45fc-bbf3-c2eb54fd1c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f42017ef-59da-41b3-a23c-f6c0bf59b944",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a153a3c-c495-43a8-97f4-113cfd242faa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a01dae1c-68c6-4eaa-a3ec-2e7dc29313e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25c0a60-e62d-40ab-9c28-718ff75fabb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf71140b-8a43-4802-91e1-0d4e27d54bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "602a7ddf-4b4f-46cc-98ad-f1f26e1ca82a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221e273c-3b09-4788-9bc9-345da0e690d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4a29414-9c3c-4037-bb04-47d275e0970b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2420c191-c26c-4d56-939e-7fbb27bde7f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54995f7d-171a-4d7c-ad2b-1785ed336142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c84a775-3963-4ef1-a81d-572f953b10d5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ec5567-70ca-44c9-848f-ee7f05fd3e13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d25ecfd2-42ab-4358-8e24-69a0d332fe97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c5bae41-c159-4047-a2c7-a1d679b31362",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afd10681-ce72-4901-8e8c-39d2df76effc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b453cf-36aa-4c99-936a-65ff6040273b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f056ee2b-fbc0-4692-a475-73a47417790b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9cac418-c235-4e98-a240-25e891a8fed6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8915762-b54a-4d30-a206-d6bab323a7b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e1c7f6d-a91e-44b5-b59c-c05c76c137dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c59f2150-dbe8-49a3-a630-ec7163df7b8a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b38c7360-2984-40f8-be79-4c337780c09d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c5c5ac5-3246-4215-9b95-a263cc68b908"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31dc13a6-d96c-497c-a73d-d0a42903b10c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43d936f5-f026-43b0-b3b6-43febf409e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c46ae6-f838-4e2b-b150-e344dc92eb89",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee01e680-bf5f-4625-98bb-6f3dd0f8b305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b96f6b0-073f-47c2-8350-4128a45ad83e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa1eb35-3f84-480a-b13e-29d8471e2460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "196148f4-a548-45bd-bb8c-904a53c494db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c7a058c-57e6-4b1f-acdb-aa914a942232",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ae4ce0-646f-465a-b2c1-e6a0785425a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "382717cb-3ff4-46a4-86ae-ff2b3b056887"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "970caa16-80f8-4495-b2bf-5f9191782ed0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f292231-531b-4d3c-8c4d-3f5e6748b80f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b3670c-e127-4736-a307-cc1e4a3e2541",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7db286-a1fe-43fc-846e-b9c039d32b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0dce319-e9e9-491a-9ccf-1c6aecde2dcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9544763c-eb75-428e-ab48-700b1e09e109",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89b0f72f-e268-4d0e-9139-9b9273bacb4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94473137-198b-4ee6-87a5-c548a688cd63",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f8d590b-dffb-42bc-8c3e-380b35e96c1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bceb4e4-c0dc-4168-881a-6077995a34d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96be4578-af7a-46b3-9ff3-88a47117e80a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74611f2d-8e76-4f3b-99d1-a343df8b4c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77c53c8-c492-4b63-88ad-8a150cec265a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5353a167-f23b-40c3-8c38-5f3dfa6cd99e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d43cd3b-a512-456f-bad1-c93cbe31fa3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d156cf42-e239-468b-bd92-8ad6baf458cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "746a00ea-3bb0-4aec-bda8-f987303399b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00aafeb6-d1b8-4475-88e7-c7b6f39855b1",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90af413e-f758-4bc3-bac8-7706eef96b83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "973ebcab-d3c5-4ecd-8231-4fd5f21d8bf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c45664ae-b22a-4f10-8784-97d78dd0fbd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eecc790-512d-4f5c-9bfb-f2a174eaf5cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f40d68be-e6ee-4d45-bb08-fa32a3d8cdda",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0e39f8-8e23-4dba-a62f-817cd5c6af99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dfd5954-f6f6-494c-9f19-27c40ab142fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dfa84f9-7f2b-42b2-8e55-d2a5677b2c9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8664d3a-67c1-4602-b0db-4eb49f52bb25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afcb716c-bed6-4ab6-aa20-49ffa846c767",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab25773-ce4c-48b8-a04d-6fd472f8f6ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c32187dc-6d70-4a74-bf13-818dccff9555"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d42347-71db-4e0a-b836-fa1091345886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "607d6153-f9f2-4dfb-9cd4-2bc53ed57cd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d839f61-9503-4510-beaf-34ca1818ad1a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f3c019-ce3a-4557-b83b-0685b48cfa2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ddf4f1c-16be-400f-bc66-ca26cfa9c901"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "973301af-656c-482b-8549-f194a5b2707c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd4eff5c-3087-40bb-b7ae-90aa925742e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1df108c-738d-439c-a16b-1ffb4c54b3cf",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7d71b6-d736-4891-bf81-9a0c588d22d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b339e38-f6eb-4c0d-9f64-4a2ecdabc781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6d04e1-a0c3-4009-b830-db217db4c76e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fb263f3-082d-4444-b569-df547dff8ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a5c5707-88f5-49f9-ad15-f0343279299c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f993ad-73dc-48aa-9517-5c1c4c479581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0044d2a-93be-42b6-b096-a45c80142d74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5989338-8d4a-45ce-bae2-2a8a7a4e66c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22857df6-2fe8-4c61-aa5a-bc256a297260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44babb01-9358-44e9-b0bc-354959b51e73",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a89bf44-6adb-4dc9-8471-fe349c5a2123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eee428b-0cfc-4f4a-aa30-18858a4632aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "089cff71-3089-486a-be49-a5243c37e2ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05400f57-6221-4013-8072-7f4d4a6b8887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663b131a-656c-4a04-9824-2af05f2c2594",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc982c1-df28-4b74-aaf7-2afd68634cab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b24767d-cd1f-44eb-9b8f-cb1ac8070579"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "795caf05-c99e-41f9-9c8e-83767286e190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90b408d9-7c81-4494-96c0-8754a244cb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9b0a10-fe6b-4d6f-a4b6-db001fb761ae",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f41f5d-bee0-4eb8-a547-209a72e8b446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d85fd5e8-c0d7-4dac-8670-933ac49596f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b633bc-4d82-4466-accc-326be2e32708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc5c2bd9-f688-42be-b965-c74e85bec23d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3bda36e-c056-4ca9-84d9-3f5cdaf6b11a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b54847-ae4a-4f5a-b5f4-f816f3077dd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00c819cd-bc75-40bb-beb7-925cea9ea1e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88990fa-f2c8-4091-af68-0e1915372741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfcbdc84-7802-43e4-971e-c1cffc382f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c823916-1db6-47e1-b9dc-1bf5008b3133",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8d4ec2-5795-4217-b37a-96c7580e422a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68445260-ce5a-45f2-874c-11bd94093ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9635ed72-1cc4-4b53-b903-64596fb68f6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "785ac93f-cf16-4bfa-993a-df22cb607342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74486ed-d000-4566-911f-843f8310555f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb493f8-3133-4e24-8631-79562c4752c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d43d931-e277-45c8-9093-c0033b8ed38b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f40c062-6019-4f35-b3a8-6a2c9fc73edd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db4b4f69-1f45-4edb-a2a7-91643d2b68f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d784e3-2334-4eff-80a6-d5cb3bf41ec1",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f31cffa-30ae-4a73-8e5d-a8eb7e170a9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b80193f6-167a-4ea4-b7d0-a11566caaac6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca7a5934-dcbc-4569-b26f-2853aeebf62b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9997d69-204e-4120-80cc-6e55f834c1c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf4fbcd-5a53-4061-b838-f09bafe9bfb9",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b69390dd-4d3f-4ae0-9dea-b87bc2d2d067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55003149-3db8-4440-b091-fe6efcf90a2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "398f3204-f17a-4ac8-95d7-5a34e51df445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a801a6-4cb9-412a-826d-5666026f91b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45432b17-f128-4383-af68-ab6e2779d835",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c74e1d9-96a5-47a6-832e-a8a3901242a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec165b14-26a6-4ba7-a232-5f39cfaf3596"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc15a36-8453-48de-94f7-b737d12174a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9036242a-0417-4ccd-a8ba-fbd2c59e0db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d678d1f-fcbe-43b9-a564-6c9642a326f4",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8fdc40b-22c7-4a61-891b-54caee81e6b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a83a470-d21a-4e83-b7c4-39f6301e38fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77837da-cb01-426c-80e4-74a5597821fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a2c9e33-6aba-46a5-ba25-af816b51bac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236ef857-bb7f-4308-8abc-0eaffbbcbc0b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae7eb05-4ccc-4803-92ef-b86b9eb3adf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13bdf041-07c3-4ce6-b496-62685971d1aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b7c17d-c241-4af7-bd46-c677f404e9bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1ed2da6-dca2-4ae0-9b7a-b06f837aaa68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09de929-72e2-4a44-83fb-83fac988df28",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0455d5-9ccc-4ecc-8cb7-6167ecadc1f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "976a493c-228d-411b-953e-6e6431305481"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e22e227-f808-448d-bd9d-250aa268a4e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69fa6d7a-b3bc-439b-b428-1ebdef9cd6d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f1deab-791b-49da-a1d2-b5eafcea935a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4b5719-39f6-4782-a574-18fbbd302ba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4634483-b8e0-4e42-b4f5-b42d5fc3d8ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "409d6bdd-9883-4ea9-8764-4d2605011bdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff1b8ddd-7284-4f8c-b186-8cb5ffa9db6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d4e2d5-31e1-4e92-9055-a3a9ad52a994",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b5fe88e-b17e-490f-b279-406b18477794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e641262-fa90-4b44-9fad-ea5c97aa9791"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07056f3-817b-4d45-bfe4-5e74b4461ea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da3bbe8e-1fee-4386-850c-4f798eed6615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "686597ff-b97d-4ffa-9354-beb911d167c3",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b382372-b842-47e6-99a0-f4e88506488c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f77aafb3-e7db-4f2d-83ca-52207794fcd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba50390d-1eb9-4f8d-99a3-1d2714175388",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f95621c-6718-4df7-a082-a4c8d27bc2ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30eaa934-4910-4890-8bd4-f4037c0d9591",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd0db80-a046-4a34-9862-b2649d777d2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fade0bfa-090d-49f1-8007-e9ba52b6621d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c16b56-c275-48e9-95a6-4c3411139a68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "855e51d6-8aaa-4fd5-8012-b2fccf11c4d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8267a443-e3ca-4ceb-b2ce-9bd8835701c4",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e536955e-d48a-418b-9d05-0a0d4c842e00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f861902c-d909-448c-a358-a8a97cb79d4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f34c644d-fe19-4a9d-9ddb-712bd2f80ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "414b91b9-ed9a-471f-80e9-c3af505dd3bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f87fcc3a-9888-4666-9fed-cdea6c068080",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd4db1a-1756-45f2-8e9f-9e9a68c91696",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a021e2d-1d4d-4f31-892b-ee794b1d5c05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "131d5b0f-9be0-4d7c-a602-4ab71d376389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f258e7ed-3862-4458-bb3e-fe4f9a96373f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5c2401-ffde-4778-8c99-0714b65c6015",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38eb5d55-6f70-4dc0-9ce7-d24099bc3012",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b02a789-0c17-4e43-b1e1-9bf04d245eb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30b8dcc-06bb-4dd7-a21b-80f405ffe9be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d9fb526-88fe-4f4b-b8bf-09dc0aa64fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1756a258-75f1-4323-953f-c3cbef43cb39",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0bf2eed-20db-414f-b731-628d746257d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "628f4a0f-15f2-4f15-b6c1-732bea90efb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "498c5e24-6e40-4527-9232-93cc15a6cae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82a423ef-99f4-49fd-87c7-4e0ba5f44094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa279050-4e65-4ddf-88c9-d7141ecb5eec",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f61674-324a-4005-9cf2-6b398142e967",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5d57739-46aa-465f-b8ff-c4df865f4e92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "851fbdb8-148d-4038-88ca-8e0db294ee24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f676363-42ab-4c6c-93eb-43d4332cb5ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a782dc88-6d42-4d22-8d40-c1d3b0a17054",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed897224-f76f-4fa3-9506-28915dcceced",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61643b44-60dc-4b71-8330-b47a33e9423d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e26706-15a3-41bf-ae16-f2ed6d26c3b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c638e454-6bab-42f5-bf9d-d31404b57478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59554807-d5c2-49e9-a7c6-ca4d92cd1b8f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9437726c-ac2c-4296-ae1c-33587445c8bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0eb8f4dd-0617-4431-b5f0-94c609bc2b4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea01745-a042-49a8-a96e-2fd514d4ed52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99321180-d640-430f-9866-40945d4c06f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cd64e29-8103-4e7e-8922-908ce07ad787",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40633b49-d295-4b9f-bf82-7236f4353370",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62bec26f-ed08-4047-82bf-f758792d9e06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41706d67-1acd-4371-b528-6fb50470ce1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "414e531d-5cf4-46ea-9948-da1cca3ee4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d1d1410-5cd4-48ab-bba7-a3b4d018fa60",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f27cefb-0080-4461-b992-64fa7875cb7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afec2f1f-23ea-4a53-aa65-7122ea8b9cfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd74535-ebef-44bd-92cd-9a9e495e9be6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4de961a-8ba1-4a7f-8b3d-b3bad948883b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b3273b-f54a-4f53-b40c-8a7281d02e7b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ec35cc-6ff0-4ecf-8707-3b2b4649a2a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce9d9656-8c9c-4c67-996c-45894593b7d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c8ff7b2-2957-4768-b354-519ac1483f0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38b7e7ca-59fb-4962-8815-b40a91348406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb3e8cc-1992-43f0-9ef3-e2220744710d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d257c4e-ce00-49cb-aebf-5930490042f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5b69400-0196-4642-aaa5-4e529ed25068"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b4c115-fcc9-455e-a29a-c7c50bb15144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4955f2f5-25d8-4bc5-bf50-00e8671e5f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5609921c-5f8f-4c29-b051-c95e501a4871",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a901d3c9-d267-44bf-ab59-1f0ea42787d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58cc55d7-f0c5-4222-b3e0-9a3e1e238e00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1813fe-e2ca-4211-a69d-095de4dc0ab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5c78eb4-41b7-4f01-85b1-9c900d6af660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0b2581-d4c6-46e1-ad4c-aeb092c362d3",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da8e7ab-dece-4e57-a8e6-6fc9eea6a0dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a8ee31d-1716-4a05-98a2-b1d0edee3153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0699d2ea-af43-408a-b9ff-351e52fc2373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9476db4b-b7db-42b1-8c66-1609520703f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae522a2e-6ea9-4410-b47a-ff3ac942696a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810dd3f1-d024-4f59-8970-3a92663dc462",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4877a37-9ae0-4684-8a39-c3cb1d074f46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be5bc203-63ef-4d66-a456-e9c536fcfe8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e05b605-a853-4cac-b8e8-19741aca4072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b969c8-52ec-45c6-b7fa-28ff98eb9884",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b94cca5-a0ad-48bf-8903-bb0d8083d987",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bf10dc9-1773-4802-ba00-acabd055f669"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3dda30-606b-4f67-8b0b-520dbe29ff1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4fd34d-d60e-4bd4-a21a-33243f57e5ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18bca1a-849c-42be-afab-920adad53854",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e32b3ba-c3b4-4f7c-968f-a43c8f88c775",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70b150d2-59d6-4aa4-88a3-7f8bb7a2fe48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3da6a97-f7b0-4c75-9e2c-7d4ecedced5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca7962a9-6387-4502-9208-3406e72fefaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6380bd4f-cad6-4493-a6b0-360e9e34f6c5",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec1d661a-177d-4cc2-9dbd-286f2f8bc4f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cffebe64-acfe-4933-80a2-b0f3463a31d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a7f435-56cb-4bf8-81e6-16a4a16f5954",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f6cd0da-9fa5-4227-9f51-8e8170358016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6599a3fc-5d07-4b1e-9480-eed2c1d3d042",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d00dab-9122-4005-b5cb-a69ae860648c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4e1b2d7-b631-4b6c-aecb-d3f4970192e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5354f9c-9cf1-4325-980a-671edd86ee45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7611b68-24c2-425f-a09e-c12aa7fd373b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba483a7b-150c-433a-a588-1679d91add50",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc4711db-05e7-4964-a8ee-d668319980cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "650798cb-ef05-46c9-8eb5-40c8d6ffd26b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0087c69-80f2-458b-94a3-53e9b72f18a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c6f2718-0ea0-47c5-938e-4ed47400e1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5b02a1e-f33a-45b0-a0d1-449a5a7e4b80",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b09eb76-5991-48bb-8e43-bb1c8d3b63e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac2ada46-fff0-4388-b19a-9329aef0dd17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbba7a3c-4e56-4d6b-80a8-f0f2246b909d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a88fb5ad-d80d-48a0-afe8-d17620d900df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "081309f0-9654-4db3-b2dd-744f8edd0662",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d971349-549d-4421-8a55-0038c8e7993d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b198e28-09d7-4d2b-aceb-6bed5320c745"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68dad10e-af64-49da-8401-37bb518153de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87a3e4c3-0031-4ccd-b6cc-a7d56cf275cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc674429-f855-45ac-95c1-b63523f2301a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca8fe5fa-3083-4ac3-9ee6-02cc0d44bfd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72b25c20-8c3c-4f47-911e-fea2e1962fbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ae7635-bfc5-45f4-b184-c138336e5ac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c09dbf5-05ff-4eff-ab3c-00e663defd2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bbfdf17-0543-4e6e-9b3d-ee9daf866cde",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe0d856-4bc3-4b18-afa4-3bf25c206453",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94d46e81-f11f-4ae0-a6bb-a0f127924371"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e7cc581-15ae-437f-b0f1-59113b6a0b96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fd3509b-59ec-4390-bc46-f2596ebe899b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a337562-7267-4bfd-905b-a78b62c946b2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a6daf4-4e5e-4994-b9d1-fde8ae8aebc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f64af6dd-5b48-4791-b78c-3f02333ab50c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6249b70-a869-4bfc-9fa4-fc0009be82dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52ea608b-1f26-4b3b-bf65-a753d3514693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b994e6-a80e-44f1-962d-aa9807091a04",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe08527-924f-4859-8351-0e172aa636fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "128f9b1e-a7b9-4f71-b808-985ff8bad839"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "157c28a4-50ef-4748-88f7-ba7a003afc24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "090fa87c-d01f-4030-b82d-f91e29d75695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cef0b6f-166b-4a21-8bc8-99c79df58eec",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a8111e-b388-4455-ae83-e6df1eb202a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a23d85b8-e3fa-492a-9729-82a1f1cef549"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d8b223-87d6-449b-8e0d-87df81673086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10c5228b-227d-459e-8801-6ba70a980764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b31b7d-bef2-4b8f-8559-2f68abe524ff",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91ea8c4-1559-44a4-b5b7-96fe699a63f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e770a97-f88c-452f-bc82-9aee79e5fa00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "017f552f-49e3-4c96-bc4a-b1bd4dbb439b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10827c06-e277-4b9d-a249-df09a3012484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c5d6e7-535e-4799-8042-e6f9da3b4e81",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3929de65-3d2c-4f81-9088-77133cd20ff8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e65c94a9-38cc-4939-8035-bf46b7fed8ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "561cf547-273e-4cad-9f20-9fe80b357658",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87dd3345-7a76-410f-8201-8a806e0e424f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f7975a-b971-4a7e-80f6-bc3c4e885b11",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141649bd-268b-4061-9e23-30892fa7415d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ceb6bfda-299a-416d-a125-3651c8620b03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f45efe-232c-407e-b2d5-974c8278862e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e42cf3c7-ba11-4069-88ee-6e535fac1d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25bb3681-2c5d-41c0-a515-1be481038cff",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf24189-1408-408b-aa8d-1f7119317666",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5b2c621-c2b3-4be7-80c4-1393296669af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a6d898-7fdd-40ba-aa51-11c9da4f10c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb7e751e-89b1-48f7-8235-346e76d9460e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be720127-542c-42d1-a07a-f754db5431f3",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c96f60-9ccf-455a-8399-e0a376ad5480",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "309e8e8c-c4d0-4c37-819c-349aad4fb5f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a8e240-e09c-4e4a-a2c2-93145c59e11c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1917824b-7d85-4a51-ac52-f696a46c74aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ddd7bac-6576-4c02-9ece-bb2a0edf90e1",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00c694e-4dd3-4419-aabf-2cba1e01b939",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06c50c22-5483-443c-9928-afca1201a344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8717b2c-7e23-4fd5-ac46-f548e6c2a66e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f76df01b-f87b-4e3d-b27c-accbde6892b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1bbdee-df8d-442e-b691-787864a27634",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "345ccb6b-625a-4a49-9ec9-74c220bbfd54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6694555f-98c1-4c22-9c0c-43a82d5a25e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3113218f-ffb0-4586-970f-d0d460d13c58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "505e6885-55f8-4936-b26a-87261c0c66fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cef925b-9113-46e9-bfb0-8b5d1a6c6bf0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930c7611-1f56-47dc-82d1-5c31ac0b1737",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1a6a029-bb39-4de3-ae15-c48f386c68ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f74429-8fe9-47f7-8999-ecbff401a760",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "486347ad-f3a2-4ba7-8c80-d8ac4b681c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62952192-d3fb-43fc-9016-17f1801738ac",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29e2bac-1d81-4f07-ba1c-75d56325899c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f8d470c-edc8-4dcc-bd80-03d5c44ed23b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25dc2e84-4e4b-4205-92cd-ebd3f7a1d4ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5854bd16-f288-44bf-bed0-121ae41f8a69"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ef07241-ae80-43aa-95b0-5133a62de596",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe88edc0-3346-4472-bf49-fb78c035010f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "86e0e3a0-b257-4b36-8c76-0a84b81062fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e0f85d8-4aba-465c-a8dd-71c8f7472de1"
                    }
                  }
                ]
              },
              {
                "id": "9f3e4e32-b4e7-4d34-b207-b69831b30838",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47190a69-6584-4550-854c-bd5fb049ff2b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4810a0-5c4d-44f4-911b-dd188f791cbb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f22f1f92-4757-4479-9189-8ac024604564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "673e1634-d70b-4705-9b66-84d7048f3a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d670791-3ec7-41da-a4f2-7776c4ae05eb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6c142c5-ea8f-4579-b6c6-79b699a6206e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a8d8c06-2aa7-49b2-a7bd-8248d5ff88d7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0bdb3fb-cbac-4cbd-8fc3-0f7f546731e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b9594f2-1da1-42e3-84a6-204c3b2b5430"
                    }
                  }
                ]
              },
              {
                "id": "ec8e5961-2663-401c-a0c6-3f496c09f7af",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f8c69d31-dea1-4361-b187-d611ed0cacb4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87aa00e8-7088-40f5-b63d-28b4b53babd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ab9e29df-0297-4a71-84cb-97abcd7c4a4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99c354c-0f9a-46a1-81c8-812fb23c02f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fabfa7c-c842-4fb4-9af4-0943e4ffddfb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fcb83ab1-9a14-45e1-bb28-3cfe94706950",
            "name": "Positive Testing",
            "item": [
              {
                "id": "084fb83c-f95d-47b0-83bd-a03f795c9aa6",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab2d3771-e412-4a2c-876b-d3bbb21ef9f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "04a97f5c-2ee4-4fda-91f9-122ef7b12932"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "321a6c7c-c130-4c5b-9c30-00f1c4ece4ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "98ce48f9-b6df-49b1-894d-39500cf69c0e"
                    }
                  }
                ]
              },
              {
                "id": "57c62601-6d68-41b8-ab86-c68229006cd5",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "69663df6-c3d9-41d3-86f6-a60410544f5c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ed1cd437-e720-4988-a9cb-af6f0b409bfc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d44b702-4059-446a-98ec-91e9ca26f493",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df30a0d1-9c04-4e66-896b-b7ea3e81618c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6007d8bf-25c8-4b4d-aae8-0fe6e5886998",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7b439877-ed39-4464-b7d8-f0952d29f170"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "decc3ce4-fc2f-4686-a0eb-57967b8501a7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cc799843-fd10-465b-bf0f-b9bcb7f060b1"
            }
          }
        ]
      },
      {
        "id": "08b8572c-7c53-4aa4-b6cd-8d6509a71af5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d24fe620-b936-4373-82b9-3b47d92b9d89",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1a547597-73e1-4b1f-b5b4-3d268d7f009e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6c442146-406e-465e-aa84-d00e9b3aaddf",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d7249b-1d8c-407d-a344-9c1133623e4c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4ff29621-2a17-4487-9853-2f6da9e39062"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef2ce3a9-853b-4eb6-825d-a82a6ba12dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12680fca-378e-4e42-95db-78a36fb4a2b0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "15257376-8831-471a-8201-f08399688feb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94bc64e6-a96e-4d33-81bb-a2d6dc64a936"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b757dce-909d-4fbf-8453-36f53beba381",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8904270e-4fa5-4524-8dff-619d3be4cbd1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28a43899-5462-4b1d-ac9f-cd3d933d3807",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ad285e35-20ae-4ce0-9f25-88f9c70880c6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c607ecb3-0ae8-43f6-abfe-de854719da58",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "73fa0916-8b53-46c1-af01-d59a4a1c5d0a"
            }
          }
        ]
      },
      {
        "id": "b306170a-efbe-4519-a857-19ecb913afdd",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "776711e4-e66d-4cef-8628-3d0dd35f13a3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "27a16d8d-7aa8-49bb-8dc9-00c1cc0485a7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e4c174a0-be20-48f0-b7b1-e247f4fb1b80",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd4c8210-3fd8-41f6-bdb6-548e4c1037d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7e11ea5-db69-41d7-96ab-15d4a751b686"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25c58e4-7e46-4b33-b571-0548855d0a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9cdfab30-2b36-46e6-aef7-9d9d812172ad"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81d52965-24c5-45e9-b68f-2aa67d1783d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8d4c592-be2f-439c-8133-d129da054cc7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "21373b43-f6d4-4d49-b072-96141e3ab770",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f601265-6df1-4103-9a37-56254ba4c79e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2895d910-1c22-4e47-8f5a-b45720799a83",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bff10936-6c8a-4900-8fec-d65e9a5aadfc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea512a4b-4125-4405-9f98-e5e985d26093",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5e285044-8ba5-4553-8595-dee193ec9384"
            }
          }
        ]
      },
      {
        "id": "36dcdcf2-c381-4401-9ad1-d89929c3d9e1",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "19caebc9-78ea-4895-ab07-4b69e9b7594d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c3742d42-dd13-4393-8e2d-a688c21f1415",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e6c10e41-be3f-41f7-989b-b0b8b1174668",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56c6260-0fe1-4465-9e93-562f527d3540",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de54bfa5-816b-4a3d-a209-50e9871ef304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b9f164a-c24a-463c-88bc-659013728fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6436f1a5-99a4-4600-a4d4-fa0319260ffd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e24f913c-9172-40bb-840b-2513146da356",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fdaa4b77-ddcf-42ad-a126-f2deb947f2ac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a5ff7a7-81d8-4eec-8e26-8d390100582e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39866248-60b0-4056-83f7-e7df1722a314"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc32ad78-67b9-4e56-b18a-9476efbaad9b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b536e7d2-0061-4129-b88a-bf1f25f75eaa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b01db817-a239-45a7-b04d-a1b0bff65699",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f0735399-a260-44ac-9365-cde50031fd25"
            }
          }
        ]
      },
      {
        "id": "64097d64-86c9-40b0-99c7-54d9eadb2ef8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "612263ec-0014-447a-aaee-d8333e2c1ce0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "99dc9f11-7cfa-4b50-aba1-e76a47ab59c7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4b6ee81a-1a0e-4bdc-b744-f6104058e010",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd6669df-7676-4cd6-ba6c-5194e852bc0a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a872a114-81dd-4402-bc30-fa2a604af4b2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 140.13684210526318,
      "responseMin": 4,
      "responseMax": 8159,
      "responseSd": 481.3881304637985,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1705019793372,
      "completed": 1705019842741
    },
    "executions": [
      {
        "id": "b91bc35d-e06b-4a05-88a3-f5b303e9f3fc",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0097ad6a-e45f-43f3-8905-aca436775321",
          "httpRequestId": "b032e147-d2c9-4ccd-a2da-c8422e99242f"
        },
        "item": {
          "id": "b91bc35d-e06b-4a05-88a3-f5b303e9f3fc",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "559671ab-def1-40ff-80f1-9aee6de940ff",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 0
        }
      },
      {
        "id": "1a956499-623c-4f00-8fe5-00a696f458e2",
        "cursor": {
          "ref": "9702bc72-a54a-4775-b794-abcc5bd78b7b",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a845195d-5f82-4db1-96dd-23ccf77230ba"
        },
        "item": {
          "id": "1a956499-623c-4f00-8fe5-00a696f458e2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "abe656a0-a412-42bd-bee6-b2fd96363118",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 0
        }
      },
      {
        "id": "f639f3bb-8159-45dc-b032-4e2a830e4cd2",
        "cursor": {
          "ref": "71336461-a11b-4880-b95f-e1b023679af0",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6d1be909-c5cf-408c-8797-c092168fae1d"
        },
        "item": {
          "id": "f639f3bb-8159-45dc-b032-4e2a830e4cd2",
          "name": "did_json"
        },
        "response": {
          "id": "4b3ce271-8aa2-48da-8ec5-5508dc176b64",
          "status": "OK",
          "code": 200,
          "responseTime": 358,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dfc828f-a212-4d6b-b8c6-4a0b4831c571",
        "cursor": {
          "ref": "503c2dc8-4e7d-40f6-b0a1-7dacdcaed43b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "336d5a2b-e225-4787-95ad-35c8f0063f29"
        },
        "item": {
          "id": "5dfc828f-a212-4d6b-b8c6-4a0b4831c571",
          "name": "did:invalid"
        },
        "response": {
          "id": "667616b7-9f73-4cbb-8405-ed10b7499dc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dfc828f-a212-4d6b-b8c6-4a0b4831c571",
        "cursor": {
          "ref": "503c2dc8-4e7d-40f6-b0a1-7dacdcaed43b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "336d5a2b-e225-4787-95ad-35c8f0063f29"
        },
        "item": {
          "id": "5dfc828f-a212-4d6b-b8c6-4a0b4831c571",
          "name": "did:invalid"
        },
        "response": {
          "id": "667616b7-9f73-4cbb-8405-ed10b7499dc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce5e655-e7a2-4bee-91ba-4a0b5d32fe9e",
        "cursor": {
          "ref": "836e41c8-4f71-470c-8b66-ab38d7d6aa8d",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "edd32a38-575f-44d1-9299-275f8a76f1ff"
        },
        "item": {
          "id": "7ce5e655-e7a2-4bee-91ba-4a0b5d32fe9e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "11470490-a6b0-41e3-a839-e82483e9098e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 144,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42bff5ed-9ec5-4c08-9430-607d545db94e",
        "cursor": {
          "ref": "c2505502-cdc7-431e-8cec-2b6cc15d537b",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "45593f33-57b6-467c-8bf0-0c115ddae219"
        },
        "item": {
          "id": "42bff5ed-9ec5-4c08-9430-607d545db94e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e8e03073-76e2-423d-8fea-af69aea58a0a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 91,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97351df4-b05c-4a0d-88c1-1ae250d078a5",
        "cursor": {
          "ref": "ee1d4c0b-991a-4fc9-acca-0c87e33d010d",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "06e4b161-3d83-453a-9269-56db357e3c08"
        },
        "item": {
          "id": "97351df4-b05c-4a0d-88c1-1ae250d078a5",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "10582a80-ecbb-4936-b6ca-7f543df0ce4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35206df-9747-469d-8827-90d5ca47557f",
        "cursor": {
          "ref": "0b5c7335-7644-403e-aa3e-64ea333ac289",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "abced071-4e88-4ba9-b474-5e76ebf0ced2"
        },
        "item": {
          "id": "e35206df-9747-469d-8827-90d5ca47557f",
          "name": "identifiers"
        },
        "response": {
          "id": "1bb011e9-7983-4f04-887b-7d70f4bb9869",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d33304d-fa18-43ce-8a63-737b0e41809d",
        "cursor": {
          "ref": "c074d84a-446c-4c5d-aff0-e419e200a30a",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5da9c1ec-ec06-491f-8571-251b15411188"
        },
        "item": {
          "id": "6d33304d-fa18-43ce-8a63-737b0e41809d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f7be26c4-a169-421d-b62d-8a1f0e1e62ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "787b561a-8cd0-40d9-905f-02c3291a083c",
        "cursor": {
          "ref": "2c40e649-585d-4e92-aa44-7f5c5f1757ad",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "462aa5d2-3c6f-476c-8212-58b99e37c115"
        },
        "item": {
          "id": "787b561a-8cd0-40d9-905f-02c3291a083c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "8568177f-5b3b-4f0a-89d3-023e583e5c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01b5c6a0-9d05-47ce-b50c-aa3d69a5ef54",
        "cursor": {
          "ref": "4c02dc26-2cb1-4807-8aaa-72dfd4cf25c7",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1bccfb69-4e70-4f31-bbf3-0c52bf5f51ae"
        },
        "item": {
          "id": "01b5c6a0-9d05-47ce-b50c-aa3d69a5ef54",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "113581a9-7c6a-4d87-ad12-8445bb7f6491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe87778-385b-4bb8-89cd-76d825b90252",
        "cursor": {
          "ref": "1c0ad494-114a-4ae5-a460-1cd639f425f9",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "19d247a4-b2da-4dfd-9a53-6c51a8a46e7d"
        },
        "item": {
          "id": "2fe87778-385b-4bb8-89cd-76d825b90252",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a088cd62-f88d-4bb9-88f3-cb861bc08333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9069e4d3-086d-4637-89aa-4dfb3546faa8",
        "cursor": {
          "ref": "7febb8b6-a18c-490b-af9e-f3317f96ae62",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fb467721-9925-4589-8f3a-533310f08709"
        },
        "item": {
          "id": "9069e4d3-086d-4637-89aa-4dfb3546faa8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c015bfdb-8f32-48c6-8709-58a7a7926b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf8d3e3-0fda-4cb1-91d7-e35bfa370452",
        "cursor": {
          "ref": "8c685ea6-bd63-416f-9f60-1893ef281818",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ea3b244d-5723-476d-ad4e-c1d79788a680"
        },
        "item": {
          "id": "9cf8d3e3-0fda-4cb1-91d7-e35bfa370452",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1cdb293a-26ed-44db-bf95-579091488abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33ba3a5-c3e1-4d6e-9228-d564ee666828",
        "cursor": {
          "ref": "a27724e3-e2bd-4592-a5f0-ae50a0c332f7",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a31f5101-86a5-4fc6-b49a-55269de13e6f"
        },
        "item": {
          "id": "f33ba3a5-c3e1-4d6e-9228-d564ee666828",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9d402019-7176-4058-b1ef-bea9faad96a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cea7577-2954-4ad9-9461-ab1bddad0428",
        "cursor": {
          "ref": "199157bb-0816-4c8d-9384-38ff670b2d8d",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9aa015b8-7890-4819-94c0-c1a5c1bfdada"
        },
        "item": {
          "id": "7cea7577-2954-4ad9-9461-ab1bddad0428",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4f444e72-8549-4f1e-9b5c-9729f3b019b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f28e47e6-f90a-4078-825a-4daae8f7911a",
        "cursor": {
          "ref": "3ecf28e9-201a-426f-98ae-b66c5c04bd46",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bd8701d4-2bae-4ee2-85a3-8dfe1040b2f8"
        },
        "item": {
          "id": "f28e47e6-f90a-4078-825a-4daae8f7911a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "688d853b-46c2-4693-b4ae-376720cd52f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e2ceb6c-bd84-4f82-8cef-cc46b67580a9",
        "cursor": {
          "ref": "a6e3b48a-7164-41e9-83ec-985ed11dd5ef",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "392a8502-b34f-490f-ac0a-6141ce2093ec"
        },
        "item": {
          "id": "6e2ceb6c-bd84-4f82-8cef-cc46b67580a9",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "bfe23a89-267d-4431-b59c-3971cdd74a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3da65be7-7441-4aaa-b480-04fddca428aa",
        "cursor": {
          "ref": "f8d92996-f3b6-4d35-ae08-1aa4bee9de6e",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4093a4d3-ddc9-42fe-bc7e-25b0b26be252"
        },
        "item": {
          "id": "3da65be7-7441-4aaa-b480-04fddca428aa",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "18c58bfd-93ed-43a5-829e-532df32775da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933544c3-22bf-4095-a5e4-b4597439f232",
        "cursor": {
          "ref": "5d5566cc-9420-4a8e-9896-f42751783e7a",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2cd05e46-5cc7-4868-9a7f-6bd36499105b"
        },
        "item": {
          "id": "933544c3-22bf-4095-a5e4-b4597439f232",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a635340e-2463-4a9f-9bbe-5182813084bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7a3dec3-090a-4c1a-b630-283c90a96803",
        "cursor": {
          "ref": "219e0d4c-2646-4f3f-8d94-129dc315f0ff",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "123bcdaf-0f00-465b-9db1-5f7150156d5d"
        },
        "item": {
          "id": "b7a3dec3-090a-4c1a-b630-283c90a96803",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1ab47583-d21b-4a54-856c-9fcfcb449357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f908a810-799e-4bb2-8d91-3bf66a48ddc2",
        "cursor": {
          "ref": "f9d88cb2-f236-490b-9dff-55530498724d",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "65b394d9-c22f-477a-ba2e-3f50c1c55361"
        },
        "item": {
          "id": "f908a810-799e-4bb2-8d91-3bf66a48ddc2",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "c3164214-a942-4006-b929-7dc5aa19df83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c006d90-341b-4914-8517-5450dcbc8e17",
        "cursor": {
          "ref": "145c1578-aa8d-471d-a1ab-2fbb48b20a79",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e23b92a8-fcd6-46f1-a1f5-73355c80f636"
        },
        "item": {
          "id": "6c006d90-341b-4914-8517-5450dcbc8e17",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "878ebd82-58ae-4d33-ace5-34cb4343e512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1bdf9bf-a77c-40f5-a21c-e3c4c7c4ceb0",
        "cursor": {
          "ref": "63ab3f71-ad23-4387-8fe3-8b33b59a1a65",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8c53d802-1a47-4fd9-af9f-4836f6bfd80e"
        },
        "item": {
          "id": "d1bdf9bf-a77c-40f5-a21c-e3c4c7c4ceb0",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f370115c-e5cb-4c31-9d24-c76c1a947dee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07eb48c7-61d2-4b01-aa9b-a7acea9c6261",
        "cursor": {
          "ref": "4bf9e304-ec85-49e0-ad89-b98a540d7520",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "cec175df-3655-41ea-9f9d-7ed9118a93e1"
        },
        "item": {
          "id": "07eb48c7-61d2-4b01-aa9b-a7acea9c6261",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2e761164-023f-4190-9596-db770836e9d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217c5ae2-8a43-4d6c-9727-8c88031841af",
        "cursor": {
          "ref": "dd408f12-7642-4f45-a933-0d8f62513d11",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f35afbeb-c98d-45dd-abf3-a728679089f8"
        },
        "item": {
          "id": "217c5ae2-8a43-4d6c-9727-8c88031841af",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "db83a84e-640f-4909-991f-2d8f8223b920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71cfd9f5-c99d-4ca9-a123-da47bbbaa95e",
        "cursor": {
          "ref": "2031f947-ab5d-45d4-b62a-19f3d41f9fa2",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "be96185e-9dbe-4806-a7fd-53f5694157bb"
        },
        "item": {
          "id": "71cfd9f5-c99d-4ca9-a123-da47bbbaa95e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5d9f9b33-0616-481f-a808-108fa92906a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "653acde2-56b9-4e29-840b-407e8b5d96bf",
        "cursor": {
          "ref": "f884aa21-99f8-448f-986b-7fb54e6b22ae",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "08edcb2f-fdf9-4573-993c-37fe4eeacb0b"
        },
        "item": {
          "id": "653acde2-56b9-4e29-840b-407e8b5d96bf",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f3893cd3-84d9-4232-bf9f-f6cdc8d6b63f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b76f3133-cb37-4763-b7ea-a6064f23a39e",
        "cursor": {
          "ref": "7fb0e9fd-880f-4f2e-a5e4-fcfa0693a4c3",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d31d3ad0-cdf8-437f-9209-60329941b432"
        },
        "item": {
          "id": "b76f3133-cb37-4763-b7ea-a6064f23a39e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "97a13064-3973-4ef1-afe2-d5dd1b6dfe3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625a53d0-2d89-4da6-9880-e546651540d8",
        "cursor": {
          "ref": "5c9bfa2e-afd4-4faf-957c-ccb2c17b6da8",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4bf48845-c5ac-4537-8246-6c14c750e836"
        },
        "item": {
          "id": "625a53d0-2d89-4da6-9880-e546651540d8",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7ef3893c-7800-4531-b544-7ea44ed749d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b90eb97c-cc57-408f-a261-a74aa1259621",
        "cursor": {
          "ref": "4e10d861-4e6c-4a89-9b63-1400ad6a3213",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f1fd75e1-0692-40d9-a4d0-d45dad28ef91"
        },
        "item": {
          "id": "b90eb97c-cc57-408f-a261-a74aa1259621",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e86ee018-b0d5-463e-8cb0-2a3a9c529af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78793dd-5c0c-49b7-8691-6777b3238a47",
        "cursor": {
          "ref": "6b79742f-44fb-48f0-957b-94d6a3832aaa",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1357527d-0994-456a-956b-d5a7851dc6fc"
        },
        "item": {
          "id": "b78793dd-5c0c-49b7-8691-6777b3238a47",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "47c06e6a-064c-4b8f-83f8-a5a2bc412da1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d15538ab-d814-424f-8fc0-3f51e8f0f1e7",
        "cursor": {
          "ref": "ca2667e8-d649-4e12-a7c7-9a47c7fe1b06",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ab5c507d-d528-4fb1-b42d-ae787274b2b6"
        },
        "item": {
          "id": "d15538ab-d814-424f-8fc0-3f51e8f0f1e7",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9337666e-562e-48da-a42c-2ba7edb29343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fbd5f4c-36aa-493f-8b12-22b6a0b354a0",
        "cursor": {
          "ref": "3a287b2c-bafb-4153-aa7f-398e4121100e",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fefc9ab0-eef9-4eb1-8254-d34f5a30a5d2"
        },
        "item": {
          "id": "0fbd5f4c-36aa-493f-8b12-22b6a0b354a0",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e1be54b8-b1c0-4a8a-a943-6e4f14a27dca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b3fd42-a2a5-4364-a581-948d77ac1ff7",
        "cursor": {
          "ref": "4f414db7-7b0a-4a14-93c1-cfd248c34f81",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "82127222-c375-4fb2-914f-1702d984f2b9"
        },
        "item": {
          "id": "98b3fd42-a2a5-4364-a581-948d77ac1ff7",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "80f7ddc9-92e8-43c3-8b11-7418073112ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd73dc9-5401-4ec2-ae32-07366c44da3e",
        "cursor": {
          "ref": "075b8c19-ff33-4cbb-913f-f7ad51b97868",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2bedcfdc-2855-4e76-9939-75d28aebfaaa"
        },
        "item": {
          "id": "bbd73dc9-5401-4ec2-ae32-07366c44da3e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "bad59d58-b29d-458f-87ac-ba932e99b40e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e052b39e-53b5-44a7-bcaa-97ab9f1a54da",
        "cursor": {
          "ref": "c209d4cd-fcc2-4f8a-b210-5eda9b5f96c8",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9caf71d4-3f54-4885-9390-c95418ff08b8"
        },
        "item": {
          "id": "e052b39e-53b5-44a7-bcaa-97ab9f1a54da",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9e03a70c-808a-48a3-a1f2-246b91746608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f0a81d-3191-4949-8678-e869ee82a417",
        "cursor": {
          "ref": "f2ab186d-0f13-4ad8-81ce-f07d376d0075",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "036b5ec8-0f7c-4358-a190-e442fdae4154"
        },
        "item": {
          "id": "d1f0a81d-3191-4949-8678-e869ee82a417",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3fb42134-8517-4b15-a484-3e6c016d71d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "809a83f5-9007-4645-a097-1e0807278120",
        "cursor": {
          "ref": "1dda0194-f513-481a-97b9-f126c3b83516",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "45e47fc4-f271-4711-9668-fed7adc6868c"
        },
        "item": {
          "id": "809a83f5-9007-4645-a097-1e0807278120",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "115e5029-8b6f-46af-945d-dcb56187c014",
          "status": "Created",
          "code": 201,
          "responseTime": 822,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "dc2fa834-d00e-4552-a667-1f0ede6ac27c",
        "cursor": {
          "ref": "2ccfe25c-ccb8-4f4f-854a-04cde0e888b4",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5a28e840-484e-456b-8468-95b95a20155b"
        },
        "item": {
          "id": "dc2fa834-d00e-4552-a667-1f0ede6ac27c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0f8f7a3e-e9b6-423e-bca1-12958e425f2f",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "24b20b4e-33b7-4df6-b9dd-7791469978ac",
        "cursor": {
          "ref": "2b776033-9cd1-45b5-b5ec-4cfb15beb707",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "86e7a265-e0d3-41f2-8441-1fe6edde879a"
        },
        "item": {
          "id": "24b20b4e-33b7-4df6-b9dd-7791469978ac",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "84ce09f1-68e7-4f20-bf13-6719b77831d5",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "7d40889b-d130-4706-94b0-aea9369e1774",
        "cursor": {
          "ref": "cb89969d-a2c0-4171-9aa1-b1aed5656112",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "31f4657a-2791-4828-922e-ee7d46922319"
        },
        "item": {
          "id": "7d40889b-d130-4706-94b0-aea9369e1774",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "2f836efe-02e7-4537-a6b9-b12c5fac054e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46ede0ee-68a5-4af3-acab-9bceeec07d2d",
        "cursor": {
          "ref": "7a1459d5-af4c-41ce-9044-ae47b97772c6",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c0f29b4a-6b10-4e79-850f-f3d027b289b0"
        },
        "item": {
          "id": "46ede0ee-68a5-4af3-acab-9bceeec07d2d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8b2e34f9-4881-40ac-b0ff-fabd5515a573",
          "status": "Created",
          "code": 201,
          "responseTime": 356,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "daec7d61-6e08-4cf1-bbec-83914335d323",
        "cursor": {
          "ref": "2765cf19-c4ee-48cb-bdb2-8acbf951c715",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "61c0a600-20dc-4c58-8223-7e69eadc5cfc"
        },
        "item": {
          "id": "daec7d61-6e08-4cf1-bbec-83914335d323",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e5386146-0483-48ae-ad20-f6f54f199c0f",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "0753a14e-5079-4d01-9c8f-4fe72a934f32",
        "cursor": {
          "ref": "d959f1f1-e167-43ce-a1ce-417972488806",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "37e1faea-1342-4640-abae-a0c0a8d3475f"
        },
        "item": {
          "id": "0753a14e-5079-4d01-9c8f-4fe72a934f32",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a6a15584-8270-4abc-850f-5fc200e87c41",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4519f929-fb0d-4758-97e6-1e4284f4426a",
        "cursor": {
          "ref": "27888386-d51b-42cf-9f87-e70c670375c8",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "22f8878e-84e0-4a2c-91ca-344682d9654c"
        },
        "item": {
          "id": "4519f929-fb0d-4758-97e6-1e4284f4426a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b0242af7-a960-4d5a-984f-0b183de39a5c",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "11700adc-c3c4-4fb8-9f01-73580030d063",
        "cursor": {
          "ref": "a01d462c-d615-476e-b557-996467c9da51",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "055044c7-eaac-4382-b38f-54737cb75e39"
        },
        "item": {
          "id": "11700adc-c3c4-4fb8-9f01-73580030d063",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9e2c3196-0d8b-4267-bfd6-8429bc35cae8",
          "status": "Created",
          "code": 201,
          "responseTime": 348,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f2714be9-27e3-4b23-abe8-0788af0ab8ec",
        "cursor": {
          "ref": "eb70584f-be7e-4f08-b2d1-aa9b2f2d20b3",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "afe4d624-8b1b-4fa7-8612-c8e277ebaf29"
        },
        "item": {
          "id": "f2714be9-27e3-4b23-abe8-0788af0ab8ec",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d66e9724-fe88-49b3-a8f2-633723d6b7d1",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "2a37562d-858c-47a3-8273-70291f8703e6",
        "cursor": {
          "ref": "4ecb46df-9a90-431d-8766-43f378e629f1",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "66afa697-2374-4854-9a9b-e83b70450dc8"
        },
        "item": {
          "id": "2a37562d-858c-47a3-8273-70291f8703e6",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "3fb4e8b4-6c53-4dfd-b9a4-795c7fad01a8",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "b806704a-2251-478c-b316-0d16643243af",
        "cursor": {
          "ref": "4a7cc71a-7192-430f-b534-224a75d6c6ff",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7d0e2d92-9456-45fa-86e8-2df133a560a9"
        },
        "item": {
          "id": "b806704a-2251-478c-b316-0d16643243af",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "47bd66ed-23f0-401d-835c-8c9c3e07fe71",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "d6d7dd39-cb43-4dc0-ba86-8b7a6d0bae65",
        "cursor": {
          "ref": "bcef6613-0eed-490a-a40c-2cffac26e41e",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d873a015-4eee-4254-b1ae-584bd3fe5e38"
        },
        "item": {
          "id": "d6d7dd39-cb43-4dc0-ba86-8b7a6d0bae65",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4d80aa3a-fda4-401e-ac7d-0e8b9705585d",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "9f0d4b3f-c3b7-41a8-924e-fb2530ced5de",
        "cursor": {
          "ref": "18185b3b-da82-474f-ba95-81ed33ce055f",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "47363ef8-31b9-43d2-9358-b352dceafd84"
        },
        "item": {
          "id": "9f0d4b3f-c3b7-41a8-924e-fb2530ced5de",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1b3b0953-f6dd-4e7e-8e0b-86cd9d49182a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5198fc7e-d536-4a8c-9b58-f0c07452b1d5",
        "cursor": {
          "ref": "a942bc82-2568-4b54-8870-ed3f57c7b1d3",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "08e74648-3f6b-45ea-9fed-0c3c751c24c2"
        },
        "item": {
          "id": "5198fc7e-d536-4a8c-9b58-f0c07452b1d5",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9f92571d-7d66-47dc-805c-77a371950cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40147c0d-d117-4c12-a96d-022d06c6e9a8",
        "cursor": {
          "ref": "89e1b77f-0738-4b40-8577-e5aba2cbad18",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "313cef29-e7fd-4dcd-b0c3-b88a1c0e2dec"
        },
        "item": {
          "id": "40147c0d-d117-4c12-a96d-022d06c6e9a8",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "46851f57-3764-43ea-a746-1797f040abfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040342cd-408d-4dbe-90e9-1b6d636e6398",
        "cursor": {
          "ref": "a1db9ae9-9465-42f6-8c72-e601c9b894e1",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f012fe35-5f3f-4d00-aa39-3323b15f19a0"
        },
        "item": {
          "id": "040342cd-408d-4dbe-90e9-1b6d636e6398",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "6dec35c7-e589-4c39-b420-347ab595c8c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1564715f-e1d7-41e7-b3f1-0eb313055c6e",
        "cursor": {
          "ref": "f987e6b1-bc8c-4cb6-b477-31ac35263728",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f7322fcb-373a-4c79-98f0-66e9b21e4d8f"
        },
        "item": {
          "id": "1564715f-e1d7-41e7-b3f1-0eb313055c6e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c2aaba4b-5a34-4030-a510-688f6808d26d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0180e52b-8dc2-4a5f-9220-b4b3cc5b54b9",
        "cursor": {
          "ref": "ff9dd7d5-4459-4bf6-a815-cbd3ed573fee",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e6be6595-7208-4acf-af68-7d3c37598ec9"
        },
        "item": {
          "id": "0180e52b-8dc2-4a5f-9220-b4b3cc5b54b9",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "83d9b5a6-afdf-457d-8e24-f8fa900c25c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f022a9d8-f439-413b-a30a-87fc53a2cc61",
        "cursor": {
          "ref": "865821e8-7ff1-4050-bfe0-b115f6f4b3fe",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "07e47315-9557-424b-8b55-d1e8df3241dc"
        },
        "item": {
          "id": "f022a9d8-f439-413b-a30a-87fc53a2cc61",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "27befcc1-0aee-4d34-a93f-6d0f7cdf711f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f0a864b-06a8-45ab-808b-a36c2de0732f",
        "cursor": {
          "ref": "68ca6d23-7a22-4c98-b7a6-d942b1512bab",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "0834d07a-0a57-45e4-8e57-d792ca5834b7"
        },
        "item": {
          "id": "5f0a864b-06a8-45ab-808b-a36c2de0732f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "07f58bdf-2acd-400f-9ea9-60b2c6ef4752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc7bb6cf-51b9-4f88-807a-c3ec9163e634",
        "cursor": {
          "ref": "0a1456d0-9af9-43b3-8183-61e664af8d9d",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "29c3d05e-83d1-4cbe-a7cd-6ebed2088009"
        },
        "item": {
          "id": "cc7bb6cf-51b9-4f88-807a-c3ec9163e634",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f425e06d-32ef-4dd4-9810-ce7e769e4243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a63227e5-801f-4213-9b13-27a52203ec61",
        "cursor": {
          "ref": "cc27bc68-47bf-42fa-9859-b6ce3c1720fe",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b6a4b4f7-05e1-4ece-8f4d-f20225c97bcb"
        },
        "item": {
          "id": "a63227e5-801f-4213-9b13-27a52203ec61",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7b1282bc-91d0-400c-9fd9-17e8b371609b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41df1bd9-3219-4f7a-9e70-d14ee69f8764",
        "cursor": {
          "ref": "1c071a45-c127-488f-a063-e2ba024581cb",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d8bf59a9-1428-440c-af47-aabbf48f1722"
        },
        "item": {
          "id": "41df1bd9-3219-4f7a-9e70-d14ee69f8764",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0e868386-b163-4588-89d1-190f9f3964d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ec926e-1d5e-4edd-a7bc-dbbcf0f7bd9e",
        "cursor": {
          "ref": "bce7eb94-3b59-49cd-a678-01727a5992c6",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "196d3d47-b357-4f19-8c59-616bcaadd303"
        },
        "item": {
          "id": "36ec926e-1d5e-4edd-a7bc-dbbcf0f7bd9e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a63b14f1-b566-4fcf-9052-c144e01da745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c68255a-db2d-4b79-876b-d9d4bf8672c9",
        "cursor": {
          "ref": "5ccb5033-d419-4c08-9f9d-f5ed469beeaa",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "236a562e-9530-4ba3-9763-762bd447a79d"
        },
        "item": {
          "id": "2c68255a-db2d-4b79-876b-d9d4bf8672c9",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "cf204bb7-c937-4695-8b7c-206a412a7e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d914281-8dbb-4def-9ce4-c68185ae4812",
        "cursor": {
          "ref": "7b356994-6fce-4796-a293-8a55441a4552",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7f43cf78-eeda-486b-8248-884fc2f95510"
        },
        "item": {
          "id": "1d914281-8dbb-4def-9ce4-c68185ae4812",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "cd8e8b82-cee8-411e-b58b-ba6a927a0b51",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "3fb39138-0a3e-4020-82db-ca068cbb9a84",
        "cursor": {
          "ref": "79c528f9-f492-4de2-af62-a787c9d94b51",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "2d087bef-bd6a-4ffb-80e6-967029d81560"
        },
        "item": {
          "id": "3fb39138-0a3e-4020-82db-ca068cbb9a84",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3adbaae7-19c1-4f01-9f7c-d2cf811f8722",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "3dfee515-9ef7-45de-be9d-982175434cf6",
        "cursor": {
          "ref": "6f60dd28-76c5-406e-954e-36d268fd8c9e",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "970ffa0a-fee7-44d2-bf26-2b2180359f85"
        },
        "item": {
          "id": "3dfee515-9ef7-45de-be9d-982175434cf6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "53a069cb-27db-4347-b2a5-81617cdffd91",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "72352f58-758a-4c88-bc41-f31fad9cd525",
        "cursor": {
          "ref": "30591267-1909-4871-b642-f480900db2f1",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1f71613e-0638-477b-8909-ad0f76b8530e"
        },
        "item": {
          "id": "72352f58-758a-4c88-bc41-f31fad9cd525",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2ebd693d-d109-4df6-becd-4e524240b5ac",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "4670e8c3-c0f4-4e88-8a2c-f51cab92b32c",
        "cursor": {
          "ref": "90554bf3-e952-49b4-8501-0251a68c92d0",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "5e262066-de7a-460f-9c93-a7c39973192d"
        },
        "item": {
          "id": "4670e8c3-c0f4-4e88-8a2c-f51cab92b32c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "beeb8908-550e-4a34-86e6-788f8bb95b94",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "cfa14b89-eeb4-4095-ab16-a66650ade217",
        "cursor": {
          "ref": "f2a73970-e13b-4fde-abda-140c19748802",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d68ab100-4cf8-41b7-9439-c4bd74ae92a8"
        },
        "item": {
          "id": "cfa14b89-eeb4-4095-ab16-a66650ade217",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ff62cea6-9971-426b-a791-bfc386ad50d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7659f1de-278f-474c-a5ef-053ecf0531f6",
        "cursor": {
          "ref": "a2646a08-8cde-4aad-82b0-3d584883ee3e",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "8ecadab9-3f9b-4380-b8c9-ed2825eb8c2e"
        },
        "item": {
          "id": "7659f1de-278f-474c-a5ef-053ecf0531f6",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5c769989-8242-4a5c-9ffc-aabb0da4323f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5344e8c9-b0be-467b-888c-99d4f73b13df",
        "cursor": {
          "ref": "629380d1-aefc-404b-8faa-9291d6aa98c5",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8d79acec-b72d-4b6f-bc13-f3a8c45d8738"
        },
        "item": {
          "id": "5344e8c9-b0be-467b-888c-99d4f73b13df",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e4f820ec-1dfb-46e7-8f1c-b2e4e538f7a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34eba76c-c5c3-47b2-8ea7-aa7726fa31e3",
        "cursor": {
          "ref": "bb4ae910-7683-47f5-ad2c-813680ebd899",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "6ade48a8-5a3b-45d8-8ac4-0237dfeb0c10"
        },
        "item": {
          "id": "34eba76c-c5c3-47b2-8ea7-aa7726fa31e3",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "cdc09d75-2caa-49d3-b9b8-551aabb1d557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a2139f-677b-4cc7-884a-9801a2797f1d",
        "cursor": {
          "ref": "54a8b002-5679-45bf-978f-9cacf5d50d05",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "902fd637-1b31-42f1-a44a-e2e00251a2c7"
        },
        "item": {
          "id": "b2a2139f-677b-4cc7-884a-9801a2797f1d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "60469a49-fe45-4a6b-a307-44575f83b90d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "073f466b-4b97-4910-9398-9711534607f3",
        "cursor": {
          "ref": "735d9ef0-68a9-4022-a6e8-84ae6022afe6",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b434fca9-078a-44ca-970d-fe8d1166c312"
        },
        "item": {
          "id": "073f466b-4b97-4910-9398-9711534607f3",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "28a78f16-f917-4dc1-ac0a-c4c83ae1bc95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e48bb0e5-e206-4082-9f99-ff939b6340e6",
        "cursor": {
          "ref": "0918ce7a-b78a-4627-aad5-ba0896795495",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "60fceb24-4129-49c1-bf39-30cb0bb2fed2"
        },
        "item": {
          "id": "e48bb0e5-e206-4082-9f99-ff939b6340e6",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "80c967b0-f2fa-40f0-b413-544c3d8af3eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f902ded-ad6f-4d02-a231-4b378c59b7c4",
        "cursor": {
          "ref": "d599e2f7-6359-468d-bd0e-9d57b31b7d6e",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "16ea69a9-8ce4-4be3-a1b9-7a5ad273a066"
        },
        "item": {
          "id": "6f902ded-ad6f-4d02-a231-4b378c59b7c4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "fabb7945-6614-4544-8970-bc69c770cdff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bacb38e2-8686-4ff8-91ac-c85d44a77a73",
        "cursor": {
          "ref": "c035f089-af44-4897-8c6d-107655a96908",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "93c26968-07bd-44f2-bf08-6239ec4e403a"
        },
        "item": {
          "id": "bacb38e2-8686-4ff8-91ac-c85d44a77a73",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b6ca2764-6d70-4ecc-bd68-cc13106ecc1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d82a7f8-e6d2-4cff-ab60-704dfe2f24de",
        "cursor": {
          "ref": "205b4844-7af9-40ac-a2c4-3b27b5d80e2f",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "63f70aa3-89a9-44d1-bdf2-7a2e2aae5836"
        },
        "item": {
          "id": "4d82a7f8-e6d2-4cff-ab60-704dfe2f24de",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ac81630d-c4a0-460c-b424-f1caa9b3e233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a2b889-4ae2-42b1-9193-53cc8c55300a",
        "cursor": {
          "ref": "29e968c5-cfb2-4db3-96b8-af8e0c853d19",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "08fc18c8-74b7-4c6e-94c0-b19dea7c3521"
        },
        "item": {
          "id": "d5a2b889-4ae2-42b1-9193-53cc8c55300a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c9bd5268-b5ec-46a6-a4e6-d419804e83af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41778ff3-faa0-4720-b52f-4b769e1b8fcc",
        "cursor": {
          "ref": "6a3b23ce-7d47-4437-8862-c81aaec69eb1",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "99556c17-792c-43f6-8d10-fb8ac6eb4188"
        },
        "item": {
          "id": "41778ff3-faa0-4720-b52f-4b769e1b8fcc",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "76eb57eb-2c2d-425f-977e-4747443f0f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55fed6ca-e3c8-4629-bc58-11fb5da704fb",
        "cursor": {
          "ref": "044bb42f-cc54-455f-8534-a596d12ebf6e",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0975233f-90a2-41e1-a697-2c0398d27e1b"
        },
        "item": {
          "id": "55fed6ca-e3c8-4629-bc58-11fb5da704fb",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0e323a19-74c7-42f2-8ae8-30286ae9740e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94dcd0eb-186f-41ed-894e-63cf6de54e7c",
        "cursor": {
          "ref": "3e690647-d963-4a24-807f-c410d096cd9f",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e4a8cf3e-3020-4aaf-98f1-2a79c516cd11"
        },
        "item": {
          "id": "94dcd0eb-186f-41ed-894e-63cf6de54e7c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "308bf211-b0f7-43aa-bd29-d82c6674b08f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c4e0b9-2c2d-41d1-a036-910fc4443845",
        "cursor": {
          "ref": "df95c41a-e403-4022-8993-719d68bffff9",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "08fb29a6-d867-444f-ae81-26a52f700eb0"
        },
        "item": {
          "id": "43c4e0b9-2c2d-41d1-a036-910fc4443845",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6816a106-e6c3-40aa-8bcf-8e3f71ca740a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "641be5ed-5512-4598-a847-4aea5d4c4050",
        "cursor": {
          "ref": "ad793daf-c535-4f0d-b2a9-c88585a1621b",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5a5de616-e1bb-4dc5-909a-d984bf910f98"
        },
        "item": {
          "id": "641be5ed-5512-4598-a847-4aea5d4c4050",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "77e8f015-f662-4ea9-9db9-71ff760439be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da470fc-e6c8-4eb0-bd1f-d16b1c8aa0f1",
        "cursor": {
          "ref": "f41da125-7a34-4c60-8744-a643a2169d40",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "23e242f1-5eca-4e21-b264-6b540ab92c38"
        },
        "item": {
          "id": "2da470fc-e6c8-4eb0-bd1f-d16b1c8aa0f1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "66b56720-3e44-4d2d-8536-ac6505ffdda9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7e2754-f1d9-4bd5-bb25-d06293f1ff6a",
        "cursor": {
          "ref": "eb02f894-2f36-45e0-b373-2608c1a9c2f3",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "725a6cb7-438a-44bf-89ac-c86748ef574e"
        },
        "item": {
          "id": "ca7e2754-f1d9-4bd5-bb25-d06293f1ff6a",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0d0b5855-b381-431f-94cc-572f0fb2ba41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "964ef192-35ef-451f-8135-f5e166de6315",
        "cursor": {
          "ref": "6a04c267-1a0e-4024-8693-4dff438c2223",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ce1e822b-1f26-4e30-a3bc-6d54024ae172"
        },
        "item": {
          "id": "964ef192-35ef-451f-8135-f5e166de6315",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0afe4c03-3b0d-4963-9cd6-e3bc274a118a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e425d179-4d07-46be-97b2-a7aa1e191ab1",
        "cursor": {
          "ref": "063aa2c3-bc12-4e2f-bd37-b8f694685a5f",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "731622e2-b75f-4a44-a612-42d26a3d7540"
        },
        "item": {
          "id": "e425d179-4d07-46be-97b2-a7aa1e191ab1",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "046d3b7f-17a8-4f01-995f-90f34978ade1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02b99b72-4afb-4164-82b2-10cfadbd594b",
        "cursor": {
          "ref": "40bb5392-30f1-4ef4-a0c4-52010b3b41d3",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2696f6e1-4532-480c-a21e-619dd6ebbf88"
        },
        "item": {
          "id": "02b99b72-4afb-4164-82b2-10cfadbd594b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ea65c93a-64a9-4641-90a7-4f7712a50ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f700e86-42a5-42cd-b82d-4279e98a37dc",
        "cursor": {
          "ref": "de855d0f-89aa-4ae4-99c7-990046f307e1",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "481e384a-1222-4695-9dba-a72c89347679"
        },
        "item": {
          "id": "7f700e86-42a5-42cd-b82d-4279e98a37dc",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "13b70e0e-6065-417f-b0c1-a1579573a37c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf957e1b-b207-41e1-b9d7-040359cbba2a",
        "cursor": {
          "ref": "be2b99c1-3b37-47c4-b660-27a208db6ac0",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "73ce9b2f-780c-4ba6-a9ba-0b561f2d0f75"
        },
        "item": {
          "id": "cf957e1b-b207-41e1-b9d7-040359cbba2a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "68ae46b5-a87c-4aee-81dd-200e0db8d9eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98849d81-d65f-450a-a7db-128a65b016ff",
        "cursor": {
          "ref": "835b14f8-31d2-40e6-b1ee-36906691360d",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "34bc32dd-6dbe-44f6-a983-03b3b061abae"
        },
        "item": {
          "id": "98849d81-d65f-450a-a7db-128a65b016ff",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "397ab7ab-8428-4fb8-ba60-3f15c6dbfa90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071b55d9-8de0-4193-aa04-de1ea7c16103",
        "cursor": {
          "ref": "58d6978e-649e-447e-b1e8-12561fa6f73a",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ff338640-5c1c-4e58-8aea-e9296f52d6ea"
        },
        "item": {
          "id": "071b55d9-8de0-4193-aa04-de1ea7c16103",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "10318ce1-f95d-49d4-bb38-79097a027a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c039e147-5742-4379-aaf7-11aa8ea2e702",
        "cursor": {
          "ref": "1ef07d37-fa71-47c0-bd45-df7f134f5e4c",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1bf8b660-a704-4f80-848f-a710a6293f3b"
        },
        "item": {
          "id": "c039e147-5742-4379-aaf7-11aa8ea2e702",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "11f59869-63b8-4535-bb1c-f8e4d20611f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8697c4-3d0b-4f28-8ab3-70f3dd5450d5",
        "cursor": {
          "ref": "cb0340be-551c-4d9b-acf3-40e8f6ec99f9",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "80a0a3cc-30df-4bdd-96c9-bab4b54da74a"
        },
        "item": {
          "id": "af8697c4-3d0b-4f28-8ab3-70f3dd5450d5",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "7cf38f6f-ab54-4fff-a748-a236f74675bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e8473ce-fef4-42e9-b070-4ced6a8531c1",
        "cursor": {
          "ref": "0624bf72-24ac-4763-b4ee-487f5e909b90",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d9e060af-f00e-402f-acf3-c225d024ce56"
        },
        "item": {
          "id": "6e8473ce-fef4-42e9-b070-4ced6a8531c1",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a7c9d440-ba74-4645-9d81-2ef778e31264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea01302-afab-4d74-9563-083f8f611433",
        "cursor": {
          "ref": "e2c2c966-9f16-4015-b074-e95c3b2a1dea",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9be8cd07-20dd-4800-86c1-94362ffe9421"
        },
        "item": {
          "id": "bea01302-afab-4d74-9563-083f8f611433",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "6afd79af-83a9-4a56-9469-0a2e634aa770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367c2cec-202c-46e9-99f1-f2b8fdb66be4",
        "cursor": {
          "ref": "93529bcd-1d4a-42da-b70b-d90979e4812c",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1319d438-c106-4fcb-a39f-44814d16a840"
        },
        "item": {
          "id": "367c2cec-202c-46e9-99f1-f2b8fdb66be4",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6385960f-4ff1-406d-86c0-4815a592ff91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7186a8c-cb5c-420f-84bf-4e4af53610c2",
        "cursor": {
          "ref": "9be61657-1a18-47c4-8121-d9fce74ee467",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8e070eea-2c3a-4fc1-9b5a-972027b9af63"
        },
        "item": {
          "id": "e7186a8c-cb5c-420f-84bf-4e4af53610c2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "dcbccaad-0382-46ef-8f35-8a27e54374e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ba9cce-239f-4d72-98b4-498fc9551ea6",
        "cursor": {
          "ref": "17a3edb6-134c-43f5-a591-16a3d754c92d",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "106ca49f-08c5-4a80-a739-ce3073b9fcd2"
        },
        "item": {
          "id": "99ba9cce-239f-4d72-98b4-498fc9551ea6",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c8fcb06d-ac2c-40bc-b4d4-b86df52f6bb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a237127-a5f8-477b-910e-fea7994eaaa3",
        "cursor": {
          "ref": "69af8354-b402-4532-bbb1-b9a6a29b17a1",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "2d2d2934-1ce6-4f72-9551-5a8d90faabe5"
        },
        "item": {
          "id": "0a237127-a5f8-477b-910e-fea7994eaaa3",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "117d2e3f-2000-4d60-968e-814ef05afa5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "324a9a1b-421f-46e2-bad0-f45ae9ee1553",
        "cursor": {
          "ref": "fc351f75-8a62-47ee-8a51-84ecd18500dd",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9c5c778c-08a3-4bde-9049-fb9fe078fe44"
        },
        "item": {
          "id": "324a9a1b-421f-46e2-bad0-f45ae9ee1553",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0d364128-c7b8-488b-8af9-f7f4b2a6a0e7",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6693ae7-b7be-4ad2-ad11-771bfa513519",
        "cursor": {
          "ref": "6ca5290d-33fd-465a-a00d-943734386b2c",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "0ec835a7-b3c9-44f6-a79e-61b70572c48c"
        },
        "item": {
          "id": "d6693ae7-b7be-4ad2-ad11-771bfa513519",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "282239e5-2d2a-477a-a3e2-798e99060d29",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6467ce4-b952-42c1-9ed2-832bacd729c9",
        "cursor": {
          "ref": "2f5e8a4c-378a-433b-8388-844beb7c3b21",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "dc7872c6-9d2c-4978-9beb-13169a43a50e"
        },
        "item": {
          "id": "c6467ce4-b952-42c1-9ed2-832bacd729c9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "76c0a59b-e725-41ad-a805-e9f9a9cbbf16",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e56b7b-999a-497e-81b5-88a6778141de",
        "cursor": {
          "ref": "f335c732-f83b-46be-ad95-5a12cb46da5a",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d78b8b64-a795-4122-8e65-9b9341148f45"
        },
        "item": {
          "id": "39e56b7b-999a-497e-81b5-88a6778141de",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "84b95b1b-d1f4-4903-80a9-c8dd05ee9332",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "749ad0f2-66b2-4e78-a2c1-140a3687af34",
        "cursor": {
          "ref": "a796f13f-668a-4107-b2b6-1459959c5aca",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e75b2819-1e81-4e66-971c-5c67ca14937c"
        },
        "item": {
          "id": "749ad0f2-66b2-4e78-a2c1-140a3687af34",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "47eec937-4db8-451a-bf8c-4fb1b0ace264",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-12T00:36:52.215Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-12T00:36:52.215Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "a8d7a671-bf53-47a0-ac4e-ffb0359634c5",
        "cursor": {
          "ref": "70b030b9-f87e-44a9-a62f-c73216233751",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1b642290-b7d7-4880-82ee-1f2d73ddd2f4"
        },
        "item": {
          "id": "a8d7a671-bf53-47a0-ac4e-ffb0359634c5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "4564b20a-cc02-43e9-92f9-82f26d793cf3",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc31fff0-023f-4862-890c-f4752f3fb98d",
        "cursor": {
          "ref": "79f5c3cf-0877-4372-9459-2ab1e09182ee",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a96f4763-5699-42da-9ff1-12f8af9f40b0"
        },
        "item": {
          "id": "cc31fff0-023f-4862-890c-f4752f3fb98d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "61ed93c6-3d54-430b-90c5-858f5507d3f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "959ab2e2-08b9-411a-9160-823bf425300e",
        "cursor": {
          "ref": "d64c91db-2b8a-44c3-b21b-17f8d499d586",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "959b87db-75ad-4c93-ae28-1a9d11882279"
        },
        "item": {
          "id": "959ab2e2-08b9-411a-9160-823bf425300e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d524ca1e-48a9-4d46-94ac-085076d9b935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c0d47b-d37a-47b9-b050-5fe86a9acc31",
        "cursor": {
          "ref": "042edd23-f44e-4379-8e4f-c43f85c6f589",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "482bf9b4-48e9-4d7c-aff6-9145b76645b9"
        },
        "item": {
          "id": "49c0d47b-d37a-47b9-b050-5fe86a9acc31",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1bb82af1-5738-429e-b5a7-e8e629a391eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d851aa-7d02-4328-bed4-c5d6e17f6eda",
        "cursor": {
          "ref": "52bc82a7-0d39-4d6a-8c6f-e6dffbd5fc0a",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "87f2bd5f-acd0-4f8f-b833-eb29c53a8c8c"
        },
        "item": {
          "id": "74d851aa-7d02-4328-bed4-c5d6e17f6eda",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "509f44f7-29bf-4251-8d9a-a7d1c5a57da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398d34dc-d87a-44d6-9bbe-63fdc441e171",
        "cursor": {
          "ref": "02e76c6b-3743-4dce-bc42-f2a735ded66b",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8827548d-4fdc-4b64-9a20-925f89b48497"
        },
        "item": {
          "id": "398d34dc-d87a-44d6-9bbe-63fdc441e171",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1f515aa0-0ead-447d-9bcb-26e58a329fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be479746-2a7d-48fc-8cea-81f6e9eb6390",
        "cursor": {
          "ref": "12cb04b4-b15a-41fe-b739-ed6ac0344939",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "235b2c1a-9ac5-4622-bdf3-91d6932c7f22"
        },
        "item": {
          "id": "be479746-2a7d-48fc-8cea-81f6e9eb6390",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7544245d-d121-490f-a552-1dc01d7a71a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa609296-86c4-444e-997f-f506a2d513f4",
        "cursor": {
          "ref": "8d904777-75d8-4e1e-a274-840b01ee3c10",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "95bb1c53-0d47-4882-a863-36d358c98970"
        },
        "item": {
          "id": "aa609296-86c4-444e-997f-f506a2d513f4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "67dcf13f-91d2-4a18-96d4-a35b76db4ccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ac0dbf-37fc-4fd1-abea-390904548c49",
        "cursor": {
          "ref": "d875c6c0-49b8-485b-8b07-d5bb811c6037",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1fbb9d1d-1f9b-4244-b488-5b249186706b"
        },
        "item": {
          "id": "10ac0dbf-37fc-4fd1-abea-390904548c49",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8da5a168-b62d-446a-abab-35331fdbd1a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffcf3ce0-6b35-42d7-b25d-cdf16fc3f776",
        "cursor": {
          "ref": "5e9db07d-9e91-4c68-9077-866796edea9d",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "4ba467ad-12b5-42dd-8c86-b630c3cdc147"
        },
        "item": {
          "id": "ffcf3ce0-6b35-42d7-b25d-cdf16fc3f776",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3703c5af-e756-4870-8382-45885764549c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a453c2-6664-4d63-850f-4859da935a51",
        "cursor": {
          "ref": "be50d40d-bb61-47cf-8903-77c4d6192a4e",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1757c5be-767d-4b35-b19a-d70e6dec248f"
        },
        "item": {
          "id": "41a453c2-6664-4d63-850f-4859da935a51",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "23fa05a6-9dbb-4d9f-8044-1d96ccb7a850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aeb5989-d5f3-40a5-9229-018b861102f4",
        "cursor": {
          "ref": "a5893fbb-a470-4728-94cc-6b755e9974b9",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "36e6bc81-358c-493c-abf1-679354631de1"
        },
        "item": {
          "id": "9aeb5989-d5f3-40a5-9229-018b861102f4",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "326be946-0e3f-4352-9302-37c442f20716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c64ccb-7027-4b9e-b7b5-8e8c63db6e2b",
        "cursor": {
          "ref": "644e935d-b886-4fa6-8e67-4192a16cd6ba",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0591b9fd-4af7-4ac9-b704-f0c170c39da5"
        },
        "item": {
          "id": "03c64ccb-7027-4b9e-b7b5-8e8c63db6e2b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5d4c20f6-c51e-48d1-b135-45ecd2ed656e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171de1c6-66b4-4ea9-9335-0c6b545cc6ed",
        "cursor": {
          "ref": "5ccfd7dd-0fc9-461b-8a3c-17b56ca75ed2",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3d453a70-ec8c-4ffb-a8bb-e454eeab05e0"
        },
        "item": {
          "id": "171de1c6-66b4-4ea9-9335-0c6b545cc6ed",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "eda14fed-ec51-44d7-8bb2-de273a11ca53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d38e56-7c60-4b2d-ac75-a77d0bc4a004",
        "cursor": {
          "ref": "87da49bd-c532-4fa2-9655-d6ccf90662c9",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c46e52bb-0354-46e6-871b-7ba8745c290b"
        },
        "item": {
          "id": "82d38e56-7c60-4b2d-ac75-a77d0bc4a004",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c363d4c8-bdcb-4724-ade6-01d3e134e2be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a207a1e-1a31-4ae8-80a8-0a3d8c27f583",
        "cursor": {
          "ref": "489c1ebd-5288-4ebd-a510-c5e1961a47b2",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "cde1ed45-09ee-42cb-9e4f-1fac3dd5850f"
        },
        "item": {
          "id": "3a207a1e-1a31-4ae8-80a8-0a3d8c27f583",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5085b4f5-7a4e-4106-b98b-49c1f28e2c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaccb15f-7439-4ad9-a19c-e2d3c3834d52",
        "cursor": {
          "ref": "8737ee29-d3ed-4dcd-be3e-72e8185722cc",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f8e33e17-4d5c-4eb6-86af-d98ed66b3dea"
        },
        "item": {
          "id": "eaccb15f-7439-4ad9-a19c-e2d3c3834d52",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a08cc6e2-ff5f-4b8f-b843-eaf9a65235ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f7a245-d7a8-4c2e-b999-d7398ea64526",
        "cursor": {
          "ref": "477e53ef-0bbd-4e14-bfec-74c5dc94f13b",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "97e82e69-6067-4f58-8f3f-212e61e349ea"
        },
        "item": {
          "id": "12f7a245-d7a8-4c2e-b999-d7398ea64526",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8f646ddf-3f0b-458c-ad97-453ec7127d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d143b7b-c954-44f5-88e7-01ff2e3c8149",
        "cursor": {
          "ref": "acf29dba-352a-4bfc-997d-2b99f6dc8c58",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7c0ee6a5-661b-4d96-848b-a7e91df5bab9"
        },
        "item": {
          "id": "8d143b7b-c954-44f5-88e7-01ff2e3c8149",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d9875aeb-6e3e-4a95-9114-4933b61340b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5264c621-bbfa-4759-aef4-0dac64ef1de5",
        "cursor": {
          "ref": "359de880-c903-4794-bd16-69d263b49e1e",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8397a993-d268-47b8-8713-adb317a16a2f"
        },
        "item": {
          "id": "5264c621-bbfa-4759-aef4-0dac64ef1de5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "44f01ff2-23c1-487d-a1a8-603b3ad4fbbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91bc2a4-c0dc-42c3-adc1-2a418faf8b77",
        "cursor": {
          "ref": "a81bc050-c0c3-4fed-ab39-337da0327360",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d1ae9fc4-8e7d-415c-8e45-f93812a85c13"
        },
        "item": {
          "id": "b91bc2a4-c0dc-42c3-adc1-2a418faf8b77",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4ad88420-2e93-4fc7-b044-20c2589b2901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1487b50d-09a9-40c2-bbb0-ca48dd810f3a",
        "cursor": {
          "ref": "d91c204a-dbbd-4bc6-b16f-066be2c8630a",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "11173748-4a55-4312-9e66-8dcb94ef3824"
        },
        "item": {
          "id": "1487b50d-09a9-40c2-bbb0-ca48dd810f3a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8690ecb8-d6da-482d-9754-3b7248072953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e6ddfa-c2d4-4394-826f-256201a33dd5",
        "cursor": {
          "ref": "1070c9c2-0e5f-4374-b42f-4e626a8d6d36",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "717a0776-d0de-4e1e-b9d7-ff5e7341f1fe"
        },
        "item": {
          "id": "91e6ddfa-c2d4-4394-826f-256201a33dd5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b9cfbe97-53dc-420a-96a8-c5f3aab5c70f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a6cac4b-6b36-402c-aa62-b8fd06a38399",
        "cursor": {
          "ref": "5b6623da-7250-4f5b-be7a-860b4af3c303",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c862f85d-5153-4892-aa83-f48d53b0d513"
        },
        "item": {
          "id": "3a6cac4b-6b36-402c-aa62-b8fd06a38399",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4bda488b-8d5e-4222-b880-d6e1da265a95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b455d8-171a-4db5-95df-1bb6b552fc6e",
        "cursor": {
          "ref": "6395060c-a71b-4162-82f8-5ac98ef43a5a",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7e462079-072f-4462-82d1-2746c9f9284b"
        },
        "item": {
          "id": "14b455d8-171a-4db5-95df-1bb6b552fc6e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "98cadf7f-0586-4b42-b108-08b4ba900bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5014a29-3f25-4246-9d23-941986179ec2",
        "cursor": {
          "ref": "7ca3da79-561d-4ea5-83d1-3e33d511fe58",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a66d2299-ad02-4610-9167-99ec49f286af"
        },
        "item": {
          "id": "d5014a29-3f25-4246-9d23-941986179ec2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "696d10d4-606e-4fff-9351-e0a6f129b43a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c436e9ca-4dcd-4981-b5d3-db1005190800",
        "cursor": {
          "ref": "1dea2c6c-5cc9-4cad-b793-57e59978a639",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ce95ee74-25ac-4c25-9675-edef8d73c067"
        },
        "item": {
          "id": "c436e9ca-4dcd-4981-b5d3-db1005190800",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7f10cde8-cf2e-4c19-bad2-2676ee4d8f5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dde71a2-0386-409b-972a-4558668d1e3a",
        "cursor": {
          "ref": "c637ac5e-a0a9-4e08-942d-22737b990397",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "24eefba9-dbca-40f1-aa68-c6e3907dba1c"
        },
        "item": {
          "id": "6dde71a2-0386-409b-972a-4558668d1e3a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "070d072f-c251-4a1e-9e51-4bf8b9e4084e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca27cf5-a2c1-46fd-ad11-0f9ec535ee94",
        "cursor": {
          "ref": "886a99bb-30fa-45ef-a83b-f6601c5c786a",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f8bca27f-4d38-4d1b-92be-6d51040001e0"
        },
        "item": {
          "id": "8ca27cf5-a2c1-46fd-ad11-0f9ec535ee94",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b40079aa-0aab-48e8-9d34-10de16c1ca14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20996e30-c688-4813-934a-a31a4ffb41d1",
        "cursor": {
          "ref": "6c5904bd-31ed-4796-8863-f55439795d58",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "334a7fa5-4678-450d-91e1-13a24c5e0dd4"
        },
        "item": {
          "id": "20996e30-c688-4813-934a-a31a4ffb41d1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8549ce86-06ad-415b-a4c2-237388f35289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee11b9fa-5347-4b70-810f-d38dfb983f5b",
        "cursor": {
          "ref": "277374e8-c9d8-40c7-a5ac-ea72081e8c34",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f751b151-5953-4755-908b-7097251676a2"
        },
        "item": {
          "id": "ee11b9fa-5347-4b70-810f-d38dfb983f5b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "71ed6d51-e776-407e-a183-1ad03ed6b5dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2428fe3b-afec-4ac5-b93c-66f40def0ab5",
        "cursor": {
          "ref": "bbddd477-275a-460f-89a8-906de8f0350a",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6fc6ddde-1251-46a1-9e70-65e07921391e"
        },
        "item": {
          "id": "2428fe3b-afec-4ac5-b93c-66f40def0ab5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1fd52a3a-926c-4df4-8e6b-b09fa1901681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804b8f89-1bba-46db-b211-2188bfaaa876",
        "cursor": {
          "ref": "2541175d-4fe4-472e-82a9-f20303214521",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "93de60ee-419e-4c7f-bfad-cb532bfac2db"
        },
        "item": {
          "id": "804b8f89-1bba-46db-b211-2188bfaaa876",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "77e95da5-4778-45e4-b532-18bcfd029715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c2612d2-cf01-4cc8-acfe-8346876c79c9",
        "cursor": {
          "ref": "b34b5db1-ba2d-4483-8cb7-f5b7c2fcd2e8",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "9becbeb8-4f24-4e86-b53b-72f8b70dcb63"
        },
        "item": {
          "id": "6c2612d2-cf01-4cc8-acfe-8346876c79c9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5d4c753c-d4ca-4d3f-a80b-62b1c81e6816",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "675f3890-d08a-4bc8-90d7-695e62076418",
        "cursor": {
          "ref": "73157673-895e-46d1-a423-813270a38a08",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e69c4595-be7c-4a5b-865e-719e77249034"
        },
        "item": {
          "id": "675f3890-d08a-4bc8-90d7-695e62076418",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "aad59dca-be4a-4b39-92d7-3464f95db9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b68bddd4-3fd6-4601-b0cb-78d23e304232",
        "cursor": {
          "ref": "33248db3-9102-477d-9115-bf438e8eae07",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e2376ac5-33e7-4755-8df6-b99d5e809a5b"
        },
        "item": {
          "id": "b68bddd4-3fd6-4601-b0cb-78d23e304232",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6805eacb-f538-4125-bd43-99e21b2d233b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "700b76dc-fe1e-4115-aee9-55f92b671bd5",
        "cursor": {
          "ref": "2a16c763-daa9-47ac-9345-45e47057c5b1",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ce609be4-9149-4f49-9d50-8c886f4f65e8"
        },
        "item": {
          "id": "700b76dc-fe1e-4115-aee9-55f92b671bd5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6a74bfe8-0712-488f-9aac-c5806a9ff6c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f31fe7dc-2396-443c-b5b6-48b30b1a0d0e",
        "cursor": {
          "ref": "21d75779-488d-4602-94da-954f21a97b6d",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "fee1fa39-2da9-4d56-ad1c-6eee01797248"
        },
        "item": {
          "id": "f31fe7dc-2396-443c-b5b6-48b30b1a0d0e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f7fd7be5-bb8c-464a-8ee0-141b11d6fcbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "172d9f3c-3d6d-4964-8955-727c9382791c",
        "cursor": {
          "ref": "39f8e2a3-878d-45fe-ac8c-891fdacd34de",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "db100529-cd66-40b1-8e10-d68a1c5912c6"
        },
        "item": {
          "id": "172d9f3c-3d6d-4964-8955-727c9382791c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "03814be3-b5ce-4d2e-a8ab-581f6906fd79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486a57ec-0f5b-467f-b844-8f063d17f2e6",
        "cursor": {
          "ref": "d5cbd0df-7ab3-4d95-ac6a-4ab19a832620",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d16a03c7-3a9a-42ff-a69d-60045d461187"
        },
        "item": {
          "id": "486a57ec-0f5b-467f-b844-8f063d17f2e6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b5592257-8839-4718-b726-4014d2351dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6fd574-6145-4e86-8044-396443f4417b",
        "cursor": {
          "ref": "f520903c-7cc7-4228-a514-88763fbcf50f",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "66889804-845d-420a-ac3d-f076f353faa8"
        },
        "item": {
          "id": "9e6fd574-6145-4e86-8044-396443f4417b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "fe1b3729-f60f-412f-997d-5e8e5066f33f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c6ebbba-cb57-47b0-993f-aa783d6af621",
        "cursor": {
          "ref": "d3131d97-fc5f-4edf-b9bb-45cc11031c56",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "239535c3-dbf5-4130-a679-dbab1f17b3db"
        },
        "item": {
          "id": "1c6ebbba-cb57-47b0-993f-aa783d6af621",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "98afbf4a-3875-4d6d-a422-a87a146d3f34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d6bc4f5-3c20-411f-8df8-b274d93a1a59",
        "cursor": {
          "ref": "1a05f02b-1ee8-4815-a106-15d388a07c7b",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "fd9904ef-051a-46d4-a215-bf44e95c07b4"
        },
        "item": {
          "id": "9d6bc4f5-3c20-411f-8df8-b274d93a1a59",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b391ba38-daf2-42c1-bfcb-d2d756a013dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9e2785-c76b-4ddc-a94d-7fdb2ca45039",
        "cursor": {
          "ref": "134582f6-66bf-4458-933a-9cd622207082",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4a71d454-e072-44c0-8e36-95c81ad5fe6b"
        },
        "item": {
          "id": "1a9e2785-c76b-4ddc-a94d-7fdb2ca45039",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e1fd3d4b-d9c3-4792-8294-be310d503546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a53cbb-3bb5-4906-b83e-eae74e6040a2",
        "cursor": {
          "ref": "8ab0270b-96ed-4a03-9f78-7330963bac2b",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "82163148-f7d2-448a-8306-c71d57b431e9"
        },
        "item": {
          "id": "00a53cbb-3bb5-4906-b83e-eae74e6040a2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "88f9a9a7-a663-4a97-bd23-f2cddb45e508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f805f6-68b0-438c-9eec-78d565ff0b8f",
        "cursor": {
          "ref": "b2a1e42f-8c96-49f3-94c9-d8ff91236b64",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6067fcf4-01fe-4232-97f1-f8557da14441"
        },
        "item": {
          "id": "19f805f6-68b0-438c-9eec-78d565ff0b8f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8623c5d0-7368-4c11-86c1-1c4b9da2ffe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d292b91-2589-4b1c-86ac-c4b1d91ac1b3",
        "cursor": {
          "ref": "0ce4681b-8554-4adc-872a-ad913d3ce6d9",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ec0b2efd-3aaf-475c-a10e-2aeab6e09dd9"
        },
        "item": {
          "id": "8d292b91-2589-4b1c-86ac-c4b1d91ac1b3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f6d5a8ec-8db6-4ab7-a287-1b7ae5e2ce6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25776fa8-ac5a-4041-85a4-920ebb84f858",
        "cursor": {
          "ref": "c5be3bce-3dfe-424d-aaa8-db6444a70385",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "69ab4791-5da4-4694-820f-5dd2cf0660bb"
        },
        "item": {
          "id": "25776fa8-ac5a-4041-85a4-920ebb84f858",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e7672d80-ca37-4ea3-a02f-685cadfe6986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35423d72-2b91-40fb-bbf6-f2f10e98fb87",
        "cursor": {
          "ref": "07e0d76c-ab32-411b-804b-fa2fdc204b2d",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6ac12525-dea7-41ef-90ef-b8bf7d46fc61"
        },
        "item": {
          "id": "35423d72-2b91-40fb-bbf6-f2f10e98fb87",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a4a82345-1936-4a3d-9d32-2362bf3e5c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9da90ac-ec01-4739-8580-ed9e8a5f362a",
        "cursor": {
          "ref": "2ccc3034-adc3-494a-9aa0-d1a85f49b055",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "8b6bf8d1-4a59-4bcb-bf0d-da3f4a381e79"
        },
        "item": {
          "id": "c9da90ac-ec01-4739-8580-ed9e8a5f362a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d89ce12f-a55d-4a4d-b92c-5ba93fb207d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a8874e-5e6a-4721-8b90-b84f233318de",
        "cursor": {
          "ref": "4ead2a91-250d-4231-84f2-a8345a625e9c",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b25e2848-d75b-430f-9ead-96b9a2bf5844"
        },
        "item": {
          "id": "a3a8874e-5e6a-4721-8b90-b84f233318de",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b46b2d15-55cd-43e3-991d-0f0b78759c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da48d14f-269e-45cb-9767-127e0d4e4297",
        "cursor": {
          "ref": "89208bd2-3707-45bf-84fe-147f28b581ec",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1256f17f-30e4-41b9-9640-2945405da0f1"
        },
        "item": {
          "id": "da48d14f-269e-45cb-9767-127e0d4e4297",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6b7681db-5b7d-4abc-9336-07b88eb2d8f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e1082b6-24aa-493f-9178-4ae3f819948d",
        "cursor": {
          "ref": "b28a3c33-1b27-4606-8034-a62db675df00",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "848b6d69-5381-44fc-a624-10cfb29e4e23"
        },
        "item": {
          "id": "2e1082b6-24aa-493f-9178-4ae3f819948d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9d17ea97-17b8-4a12-87b1-b3b916cff0b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "989fa19c-d90b-4429-a4f0-4c833e780a7f",
        "cursor": {
          "ref": "3aeea14c-2b4e-4de8-896c-d38b820c112f",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "529c5c32-93c9-4475-8bbd-176c7300aa4b"
        },
        "item": {
          "id": "989fa19c-d90b-4429-a4f0-4c833e780a7f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e01aa791-3a92-4e2e-9948-ac6e1abba388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff10b0d8-067d-4851-854a-ada36c0361bd",
        "cursor": {
          "ref": "55dc5fb3-38f5-4f5b-9422-c1a468dc3e05",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "92a7b6da-1460-47be-8fa3-3270d0c46a5e"
        },
        "item": {
          "id": "ff10b0d8-067d-4851-854a-ada36c0361bd",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7f66ef13-6351-40a0-badf-695b1a3b1829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee80e4b6-17a3-422f-b5fa-2579f49acd8d",
        "cursor": {
          "ref": "372ebc02-67cb-4a87-bbce-b221d0851923",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "6db5ef09-7da7-4cd8-8c18-17f0525cb5d5"
        },
        "item": {
          "id": "ee80e4b6-17a3-422f-b5fa-2579f49acd8d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "18125fab-7a4f-448d-985c-ced76033e88d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3000f462-c1e3-46ee-b84c-310e24122eb3",
        "cursor": {
          "ref": "a527be42-0811-4c50-9453-d71d2681a17c",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "07d253be-c316-4ce4-8ab9-d5bbadc1cf23"
        },
        "item": {
          "id": "3000f462-c1e3-46ee-b84c-310e24122eb3",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f31e23de-ecfc-40be-9e79-98be42fd59fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78a89832-3966-4709-8a75-bb638098487a",
        "cursor": {
          "ref": "96ee2e63-b750-4746-9fb3-073549e0966c",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "1f55b662-8b0c-413a-8666-c04420441c2f"
        },
        "item": {
          "id": "78a89832-3966-4709-8a75-bb638098487a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "79c2b0e5-cf4f-4b96-9970-cf7197a63d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ace876e-348d-40e9-8556-7ab8253eb0c6",
        "cursor": {
          "ref": "8461fe7a-1f1b-4601-a22b-e407b17a3698",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "34680aab-648b-4734-812f-4d2efc8cb322"
        },
        "item": {
          "id": "7ace876e-348d-40e9-8556-7ab8253eb0c6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "84ea9296-e2bf-4cd5-85bb-b3c40428f673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe80ac5b-5d7b-4eef-a1c6-9f132d70e005",
        "cursor": {
          "ref": "2cb04420-b70f-486c-aa08-b77eebd68862",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1e1e1db2-10bc-4886-b0c8-2378fd8994c1"
        },
        "item": {
          "id": "fe80ac5b-5d7b-4eef-a1c6-9f132d70e005",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "11d8ebac-7788-4e78-a86e-b97d0a9b511f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a279c0c5-b7dc-42db-b235-001dd793d686",
        "cursor": {
          "ref": "cc2a4629-3f74-4030-852e-6518b2cd8dc9",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "25576a5a-5029-4d81-b812-293aa7ca1d77"
        },
        "item": {
          "id": "a279c0c5-b7dc-42db-b235-001dd793d686",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c0a05953-2c34-4cbd-a144-b223edc5a332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf7f1d13-9cde-4d26-b175-c90fd738d6d9",
        "cursor": {
          "ref": "cc00472d-4cc3-4973-a98c-e38212c9f232",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "523275a8-2bd7-414f-98cc-1a1bbb893d2c"
        },
        "item": {
          "id": "bf7f1d13-9cde-4d26-b175-c90fd738d6d9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "cd36d340-5bef-40a8-91a4-31fee61c5b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add6c096-9923-4053-b7c0-1040df365bca",
        "cursor": {
          "ref": "482c32d5-a510-4e18-9165-919a6f85ad13",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8bf6501c-1ca0-4956-a639-fcd93df8afa9"
        },
        "item": {
          "id": "add6c096-9923-4053-b7c0-1040df365bca",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f3f56b96-cfeb-4168-85dc-f1d3454f9ed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e0b733-50aa-47b3-8038-09ec713eec8c",
        "cursor": {
          "ref": "f0f7bc86-c751-4838-995c-9df42f6210df",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7a40df82-3371-4b17-9839-55a46d352f21"
        },
        "item": {
          "id": "38e0b733-50aa-47b3-8038-09ec713eec8c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1f27297b-041b-4f9d-9e0a-251f56d2dd3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa60915-254f-430c-9d90-cf8add2ea27e",
        "cursor": {
          "ref": "f7940101-cb62-4f1a-9295-35200a692f80",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "be1ad58e-06e7-42e1-ae39-2d32c3495901"
        },
        "item": {
          "id": "2fa60915-254f-430c-9d90-cf8add2ea27e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "872676b1-47e9-4fdc-a76c-8010308f2767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a51cfe3f-7df8-4fc2-a868-80eb788af6d3",
        "cursor": {
          "ref": "3d4d6264-58c4-4112-8fb3-894343652b27",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9fcfe78c-31f5-49f9-ba39-0f593bbe5131"
        },
        "item": {
          "id": "a51cfe3f-7df8-4fc2-a868-80eb788af6d3",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "8d329e23-1e99-40d5-a24d-702956403261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "619067c8-523d-4783-89b9-6617b8be4559",
        "cursor": {
          "ref": "652a9f64-eeea-403b-a3f3-23e0eca5dfb0",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0fb257b1-a33b-446a-832f-3db97fab3533"
        },
        "item": {
          "id": "619067c8-523d-4783-89b9-6617b8be4559",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "152a15c3-565b-423b-8ecd-bf348299b7c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee6a37a3-dad5-4d59-911a-206d74b14bd9",
        "cursor": {
          "ref": "717d5767-a688-4b41-b030-501fe14694e8",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ec14c4c1-d0af-4765-a7c4-d826b3ceaf26"
        },
        "item": {
          "id": "ee6a37a3-dad5-4d59-911a-206d74b14bd9",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "b320fe12-838b-4979-aae5-1abc497f3952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e902fa31-4af6-411d-a867-5b3b9aef7fbb",
        "cursor": {
          "ref": "873b7bbf-3381-4ad8-b43e-97b62ae66e87",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "97903250-fc9e-4108-8958-dd1c5bf04916"
        },
        "item": {
          "id": "e902fa31-4af6-411d-a867-5b3b9aef7fbb",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "4d607065-75c8-43e8-b844-23471472665e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52847185-3aaa-42a1-a60d-438c7a1442b8",
        "cursor": {
          "ref": "84109aa3-c97f-47ff-82f8-32efd773b882",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "32857ce2-454b-4fa1-9696-071d2be4f9fb"
        },
        "item": {
          "id": "52847185-3aaa-42a1-a60d-438c7a1442b8",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "0811cdd4-e4d1-4635-bb02-b202e6db199e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e628c1d-12c9-4f49-926a-7890d4275e7f",
        "cursor": {
          "ref": "33a51a94-9d7d-493a-95c1-547d87fadb50",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "00c28d76-6dec-4fe2-8995-318eb0aa6629"
        },
        "item": {
          "id": "0e628c1d-12c9-4f49-926a-7890d4275e7f",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "512dbb8d-d7d4-44e3-97d7-57965879dd01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c10386cd-4fbd-4ba1-82f1-648f033269a4",
        "cursor": {
          "ref": "736767a9-acea-4374-a83a-f0c9b992ace3",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "eac7171d-5e45-4f83-8d08-6199d685f119"
        },
        "item": {
          "id": "c10386cd-4fbd-4ba1-82f1-648f033269a4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ca7f877c-458f-41e1-b096-d81c2c8be022",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f0badf-7dc9-45df-ad0d-ef7c92ccbce7",
        "cursor": {
          "ref": "097f2a3e-74f7-42e6-9885-a8fad586effc",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "18e21102-c97d-41e7-b224-097ec37df1a1"
        },
        "item": {
          "id": "53f0badf-7dc9-45df-ad0d-ef7c92ccbce7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c1527b1c-f38f-4d8e-940c-548a58dc0dfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f44df3-fbe2-404b-a190-652eca38fbb5",
        "cursor": {
          "ref": "7e5a067e-b95d-464b-a27d-c00624b3418d",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "696cf0cb-7ab7-4a82-8653-7babb7426460"
        },
        "item": {
          "id": "70f44df3-fbe2-404b-a190-652eca38fbb5",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5291f323-1d92-4bb5-9c0b-3854a9f55d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14929fa9-4316-46d9-8a33-7a6efdd89a82",
        "cursor": {
          "ref": "7b625f13-0c93-4676-a9a7-9804975f8b6c",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2a39292f-faae-4a4c-a6a2-116aef71a2b1"
        },
        "item": {
          "id": "14929fa9-4316-46d9-8a33-7a6efdd89a82",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1d251483-92c5-4014-812e-4e842e708bda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41d72b1-7f95-4f98-aec3-f45d49dfc8e3",
        "cursor": {
          "ref": "b40eddda-e81b-49da-9570-a0f0340901f6",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "6ff9dd5b-9f1e-452e-8f3a-6cf48131f721"
        },
        "item": {
          "id": "b41d72b1-7f95-4f98-aec3-f45d49dfc8e3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5c8e91f3-5914-42f7-b32f-4ffacd77bf3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2396f69-ca80-4eac-8edd-2210b82a3b8d",
        "cursor": {
          "ref": "b954ceae-41c1-4282-bf3b-6e4111522187",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "22c7c967-6d4f-4c87-bf1e-fee296e960ef"
        },
        "item": {
          "id": "b2396f69-ca80-4eac-8edd-2210b82a3b8d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f33de595-6f50-4d10-b38a-e93930c19902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51535a63-2c5e-444a-b585-22a7a13c1525",
        "cursor": {
          "ref": "8b0816e8-446d-41ae-9df6-eec88a8c2ccb",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "64377330-1f51-44e9-a2de-024ac903f1d5"
        },
        "item": {
          "id": "51535a63-2c5e-444a-b585-22a7a13c1525",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "2a857bb6-f75a-475f-8aca-1ff1ca7b9fc6",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "f6401e94-e866-44dc-889f-ef6f52f2a8b0",
        "cursor": {
          "ref": "264b55cf-0d08-460b-ad80-7616ab6131e1",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f5ca3d2e-aae7-4b8e-bb2f-cab37256c6e3"
        },
        "item": {
          "id": "f6401e94-e866-44dc-889f-ef6f52f2a8b0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d8ddf693-ee8c-4591-a1bb-96132e7c082d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c9895c9-d7c0-400b-b22f-6f42708cb780",
        "cursor": {
          "ref": "fa5912f6-a647-4123-ba3b-0f6dc25d0abb",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5feea132-7c3f-4d1e-9255-2ecb403e1183"
        },
        "item": {
          "id": "1c9895c9-d7c0-400b-b22f-6f42708cb780",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "63670887-4c24-4106-9580-90c3a9084f06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2158cd95-8c97-4683-a654-35dd35bfcfd6",
        "cursor": {
          "ref": "ed5fe9fb-5f77-430b-94cc-f5d2170ec13d",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "cd059936-15b1-4b93-825b-cc32c4867365"
        },
        "item": {
          "id": "2158cd95-8c97-4683-a654-35dd35bfcfd6",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "325df09b-141c-4ceb-a5e2-a361cbece94e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd09b080-232f-4859-9136-0ee1ce0a9a82",
        "cursor": {
          "ref": "5e88e566-5787-4afd-af64-7df167354679",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d139fd08-a7ca-49b5-99f1-ea7a69875003"
        },
        "item": {
          "id": "bd09b080-232f-4859-9136-0ee1ce0a9a82",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "cf2ff301-33f0-48b4-8615-fa83af0dd8b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd9d398-67b0-4e20-8d2a-ea68bc44d217",
        "cursor": {
          "ref": "fca3f39b-2ab3-49a3-b07c-7271b805312a",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5c65e1e2-caa4-4d2f-878b-eed9116b6eba"
        },
        "item": {
          "id": "3fd9d398-67b0-4e20-8d2a-ea68bc44d217",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "624ffd88-0d67-4550-97cf-ee4a613eb405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83cc90e7-58d1-40b5-8a4b-3ab47a8ecca9",
        "cursor": {
          "ref": "f5392bbc-9a4e-4b36-8761-89c4f1de1bc2",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2efe61e5-eb78-4c05-9eb3-a1cc65db60b5"
        },
        "item": {
          "id": "83cc90e7-58d1-40b5-8a4b-3ab47a8ecca9",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c93316ff-f61d-44e6-9190-2ca4e736b689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd0c041b-c5e3-419d-a177-c2342f8da035",
        "cursor": {
          "ref": "c3a5ddcc-a194-4fc8-8e83-0dea0d8c97d2",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "81e4faeb-7d87-4ec5-8f9b-a289527b3a1c"
        },
        "item": {
          "id": "dd0c041b-c5e3-419d-a177-c2342f8da035",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b037d188-7bb3-4109-a845-01bf88f8a77f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "547c62c3-55e1-4c89-95a8-a0543ac75e63",
        "cursor": {
          "ref": "2cb0a6fd-de9a-42cf-8fd5-8c7cfac236a2",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e4ec726d-7732-4c75-9432-34c74a7d80eb"
        },
        "item": {
          "id": "547c62c3-55e1-4c89-95a8-a0543ac75e63",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "73cbeb83-1e86-4aa5-a96f-6ce76a9dee2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1039e4c1-99cf-4b6f-a934-6e7322b265fe",
        "cursor": {
          "ref": "b7a4537a-9067-4b53-b841-0d47c7a39d99",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5d5b0c1d-1e02-46a2-8422-32958e1de93f"
        },
        "item": {
          "id": "1039e4c1-99cf-4b6f-a934-6e7322b265fe",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "92da9bec-7a46-466a-863c-8f3ca01caf30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55174328-65f7-408c-8691-61d8031a5b1e",
        "cursor": {
          "ref": "e962e6fc-b649-4660-9c94-3b02648428bb",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "501bd66b-3c4a-48dc-aab0-480a9b18d9ba"
        },
        "item": {
          "id": "55174328-65f7-408c-8691-61d8031a5b1e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "670c48d2-1dfe-4bf1-a616-3559eebb1d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d930b9b3-9e16-4348-b34a-98ffba2bffa1",
        "cursor": {
          "ref": "fadb4881-e0d8-4859-88df-29d66fda614c",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f066bcb2-86fb-4544-ad9c-a0a3a3b80a56"
        },
        "item": {
          "id": "d930b9b3-9e16-4348-b34a-98ffba2bffa1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e11e8c6a-0382-4f24-8a68-5d0345926709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50bcd549-e7b7-4fff-bd38-eeb479a130e7",
        "cursor": {
          "ref": "b8f7247b-6909-4e5f-be73-519b10798d82",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "41e71397-76f9-4b2f-a0a4-7ee5f3d3080d"
        },
        "item": {
          "id": "50bcd549-e7b7-4fff-bd38-eeb479a130e7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "30d69bce-e85f-486a-8142-a722bfb63baa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e2f0982-a282-45af-a970-8c355c13ae39",
        "cursor": {
          "ref": "37667a3d-d606-477c-88be-3574f539d929",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "344fe6f3-3aef-424c-adc1-c46a17d82a9a"
        },
        "item": {
          "id": "8e2f0982-a282-45af-a970-8c355c13ae39",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a80700a4-f078-4407-9c3f-ecdd9bc5bdb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0125d0a-5a95-4ed0-9603-a68104f86631",
        "cursor": {
          "ref": "7af57d88-d24f-4de0-8eaa-431355610bcd",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "23bc7520-a660-4945-b1ff-dcf164eb8798"
        },
        "item": {
          "id": "b0125d0a-5a95-4ed0-9603-a68104f86631",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6979869b-e9c1-4216-b24b-f353c680bea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e36ec6-ddf9-4d67-8742-2f187953f69e",
        "cursor": {
          "ref": "b7885102-f0b4-4526-bbbc-3124124310b9",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e2aee5d3-6c7d-474b-8f9f-ce2cbe6e8dea"
        },
        "item": {
          "id": "02e36ec6-ddf9-4d67-8742-2f187953f69e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "aceb9b86-589b-4917-bd20-ac8fb0dbdfba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98487e51-8289-4b0e-8a1d-df325e7a7c32",
        "cursor": {
          "ref": "fe594a48-b7ab-4cb6-a091-a23af5e52972",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a3793e2e-cdbc-4cd5-8f45-d8a4c6a98b80"
        },
        "item": {
          "id": "98487e51-8289-4b0e-8a1d-df325e7a7c32",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1d22fc39-b9fb-446d-b806-f62ef4f3d872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "024328f0-701a-41d4-9f67-b2d58145fb32",
        "cursor": {
          "ref": "c37a4e4d-5979-4371-a0c9-0e6ffdd61d01",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "fe3f93ae-fc4e-44a8-b231-73b3a9260fbe"
        },
        "item": {
          "id": "024328f0-701a-41d4-9f67-b2d58145fb32",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a7f251c5-3766-4e1e-94d5-9d0b87a1e669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7b68ec-8eb5-4a2a-8272-82e3dbcdfdc0",
        "cursor": {
          "ref": "f82cde13-73ef-471c-8f5f-f710646c1915",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "07ff14b6-5b34-40c0-bb6f-a18701af6746"
        },
        "item": {
          "id": "5f7b68ec-8eb5-4a2a-8272-82e3dbcdfdc0",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "947d9e84-4491-44c6-882d-e68beca75bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b950d6d-e1a0-447f-a3ab-3b365249f835",
        "cursor": {
          "ref": "2819e77f-03aa-4704-9be3-bd215dc17813",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ba12823b-756d-4f5f-bf9c-e6420d53659c"
        },
        "item": {
          "id": "5b950d6d-e1a0-447f-a3ab-3b365249f835",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1c308897-f44f-4b71-9550-0704e6b142d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bf1d775-96ba-4817-82e5-3d33c1dd9049",
        "cursor": {
          "ref": "bba657c6-8b35-4d04-a56a-476aede1e815",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8afd6107-4771-4034-aed6-28750b1a32f6"
        },
        "item": {
          "id": "1bf1d775-96ba-4817-82e5-3d33c1dd9049",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1596d807-b11c-485c-84aa-a3b635fbd009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab7c630-e318-473f-9f81-388d429d1e34",
        "cursor": {
          "ref": "b61b7a1a-b115-4c82-9ad7-10e6b463f603",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2adb7693-8c6e-4f73-bc28-fe91fc519426"
        },
        "item": {
          "id": "dab7c630-e318-473f-9f81-388d429d1e34",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ee9bd18f-e24e-404e-9850-57d5ef2efdec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff102e41-1c8a-46f3-9186-333a4b618126",
        "cursor": {
          "ref": "a9e9cd81-5cb5-4218-ab54-57702fb27d74",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "aa45f5ea-5a0c-4db9-8c86-e0d3762a18f4"
        },
        "item": {
          "id": "ff102e41-1c8a-46f3-9186-333a4b618126",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "111676e8-67c1-4750-91bc-1ccf2c679d5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0eedf36-e4ed-4196-8b86-d72ce029f98a",
        "cursor": {
          "ref": "fa018494-3b2b-481e-be3b-0c444a55df78",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "61f1af1b-86ae-4194-ada8-69ab80023a50"
        },
        "item": {
          "id": "b0eedf36-e4ed-4196-8b86-d72ce029f98a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "513715df-4661-4e10-9e3e-e5f5b9b8e2b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2f9d368-59de-4c74-911a-6cb5ec720537",
        "cursor": {
          "ref": "3e21f691-eb13-41eb-a490-b12af24a9150",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4b9766b2-e50b-4b18-9475-776462483bbc"
        },
        "item": {
          "id": "b2f9d368-59de-4c74-911a-6cb5ec720537",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "4535f9ea-be1c-43cd-b252-6b92db32dc01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f42017ef-59da-41b3-a23c-f6c0bf59b944",
        "cursor": {
          "ref": "4b2f8320-686a-496f-92e5-bc2ffcc3f55c",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5d1720a7-761b-49e5-b814-9f12030c0381"
        },
        "item": {
          "id": "f42017ef-59da-41b3-a23c-f6c0bf59b944",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8fbadb19-a968-469c-86a8-10a1276e49d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "602a7ddf-4b4f-46cc-98ad-f1f26e1ca82a",
        "cursor": {
          "ref": "4ade8fcd-097e-4adf-adb0-869a0423da7e",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8a885030-97ea-477c-8750-5bc5129aa664"
        },
        "item": {
          "id": "602a7ddf-4b4f-46cc-98ad-f1f26e1ca82a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4c0d1f7a-d928-407f-835c-982b86b6a97f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c84a775-3963-4ef1-a81d-572f953b10d5",
        "cursor": {
          "ref": "3bf21f47-6d0e-4b4f-b8ca-09f71f207783",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e9341d24-8fd2-4900-8ed6-9561add0c155"
        },
        "item": {
          "id": "3c84a775-3963-4ef1-a81d-572f953b10d5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "752af177-420d-4ccb-af8e-d4ab42b9f27e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b453cf-36aa-4c99-936a-65ff6040273b",
        "cursor": {
          "ref": "a0e01e2c-49b6-4ce1-a6b5-9ca83bfcd7b0",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7d775fc6-1a3b-4cf1-a8d8-17dd1b6c2db0"
        },
        "item": {
          "id": "64b453cf-36aa-4c99-936a-65ff6040273b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "18b93b31-f665-4edd-88de-511c56b28481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c59f2150-dbe8-49a3-a630-ec7163df7b8a",
        "cursor": {
          "ref": "5ef61553-ffc4-48cd-986c-9f69e17b0685",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "bec7d650-44ad-443e-b880-37f869724782"
        },
        "item": {
          "id": "c59f2150-dbe8-49a3-a630-ec7163df7b8a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a66192d2-e9f2-44d5-b2f2-22e0c909027f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96c46ae6-f838-4e2b-b150-e344dc92eb89",
        "cursor": {
          "ref": "ee9edcf9-10c1-4a8c-814f-88b7d27da691",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "17008e4c-5d79-4150-9c8f-81f65e836835"
        },
        "item": {
          "id": "96c46ae6-f838-4e2b-b150-e344dc92eb89",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "79a82120-3739-4a1b-8716-4800e43671e3",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "6c7a058c-57e6-4b1f-acdb-aa914a942232",
        "cursor": {
          "ref": "c2c06315-6e4c-4d41-8969-32a37c9c16c6",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "33e085ad-c4e8-427e-83b7-6a8e32278364"
        },
        "item": {
          "id": "6c7a058c-57e6-4b1f-acdb-aa914a942232",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1252215a-89d0-4963-8716-1b8727faa108",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "83b3670c-e127-4736-a307-cc1e4a3e2541",
        "cursor": {
          "ref": "5d00324f-e1c8-4f79-b581-d4a430dfe179",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "775d06e2-9522-4c37-a25a-43a40c5b7f38"
        },
        "item": {
          "id": "83b3670c-e127-4736-a307-cc1e4a3e2541",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1a70b7d5-bad3-4853-848c-341a951a2544",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "94473137-198b-4ee6-87a5-c548a688cd63",
        "cursor": {
          "ref": "dfacaabb-edc2-42f7-bdc4-0dea3dd3a2bd",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6eb6d57e-27f9-4bf3-8d26-c6411a252530"
        },
        "item": {
          "id": "94473137-198b-4ee6-87a5-c548a688cd63",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "678697ae-1b31-4671-8811-14e61d780f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a77c53c8-c492-4b63-88ad-8a150cec265a",
        "cursor": {
          "ref": "bdc541ae-c3fa-4458-aa99-99dffcac71bb",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "87bc9ce8-6566-4533-bfe6-81db2d5afbf3"
        },
        "item": {
          "id": "a77c53c8-c492-4b63-88ad-8a150cec265a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "68fbcd96-6aa4-457a-a2b8-2179274e26f1",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "00aafeb6-d1b8-4475-88e7-c7b6f39855b1",
        "cursor": {
          "ref": "9184f466-96fe-4795-8987-43088432c064",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f42ac167-2b42-45ad-a90b-9aab6c06e58b"
        },
        "item": {
          "id": "00aafeb6-d1b8-4475-88e7-c7b6f39855b1",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "718aa147-da73-46d2-83fa-675e245edaab",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "f40d68be-e6ee-4d45-bb08-fa32a3d8cdda",
        "cursor": {
          "ref": "08cc7a65-6166-40e9-b6a2-4f0104dcf499",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6de502a2-a1d1-4315-9fdc-d5f611f5a846"
        },
        "item": {
          "id": "f40d68be-e6ee-4d45-bb08-fa32a3d8cdda",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e7bffd39-6b2a-4be7-9b2f-ed78ff4d5225",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "afcb716c-bed6-4ab6-aa20-49ffa846c767",
        "cursor": {
          "ref": "a859d974-8bcb-4ade-b866-3dd0e657dca1",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "910b805d-5c72-41e0-a310-4752bea15471"
        },
        "item": {
          "id": "afcb716c-bed6-4ab6-aa20-49ffa846c767",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4ab31d9d-a4f7-4610-a090-97a4ed1222e9",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "3d839f61-9503-4510-beaf-34ca1818ad1a",
        "cursor": {
          "ref": "f02d42c8-8c4c-443d-944c-2cac27eda502",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4a774687-7fb3-4191-b4e6-9a51d59ab369"
        },
        "item": {
          "id": "3d839f61-9503-4510-beaf-34ca1818ad1a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e8c4f3b1-fb35-42e3-9584-3e6db41b6832",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "f1df108c-738d-439c-a16b-1ffb4c54b3cf",
        "cursor": {
          "ref": "77046050-f743-499e-a8ce-98669ba12217",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ee4d5ac7-dd8b-41ea-a6ce-478343d9a935"
        },
        "item": {
          "id": "f1df108c-738d-439c-a16b-1ffb4c54b3cf",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "afc8801e-0f2c-4f16-97ba-b4356e607e53",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "4a5c5707-88f5-49f9-ad15-f0343279299c",
        "cursor": {
          "ref": "91343a95-4dbc-476b-b8a6-c508a92814da",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "697f89c0-5d13-4149-9e13-300b95ccca50"
        },
        "item": {
          "id": "4a5c5707-88f5-49f9-ad15-f0343279299c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "63a42858-4362-4301-b976-4c08216b22fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44babb01-9358-44e9-b0bc-354959b51e73",
        "cursor": {
          "ref": "5938cf08-309a-46fd-b292-7d6e8b4e0b79",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f7171f0e-8998-45a7-bd85-691aaedc0c88"
        },
        "item": {
          "id": "44babb01-9358-44e9-b0bc-354959b51e73",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c6701166-ae6d-41c5-bae6-f7d6a99cd7b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "663b131a-656c-4a04-9824-2af05f2c2594",
        "cursor": {
          "ref": "ee9b826d-1fff-4574-8d06-0e7a903c44ee",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "4dfcc7fc-c725-4ccb-a2ed-e4770ae8f282"
        },
        "item": {
          "id": "663b131a-656c-4a04-9824-2af05f2c2594",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "ebea8951-c7e0-4b48-b62e-d7c981ac5cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c9b0a10-fe6b-4d6f-a4b6-db001fb761ae",
        "cursor": {
          "ref": "e4a2f1c7-48a2-4761-a803-5ddcbf150f0c",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e194f468-1b90-4ea9-b667-a3498bff74bf"
        },
        "item": {
          "id": "4c9b0a10-fe6b-4d6f-a4b6-db001fb761ae",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "089ae675-6873-4c29-b9a7-29b75ff5b5d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3bda36e-c056-4ca9-84d9-3f5cdaf6b11a",
        "cursor": {
          "ref": "02642b6d-3cdf-43d2-a250-014b62465f5d",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c99c556c-489b-47bb-831b-2d5415ac5805"
        },
        "item": {
          "id": "f3bda36e-c056-4ca9-84d9-3f5cdaf6b11a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8f5ff681-b8f6-4d30-8f5f-a3de898b1947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c823916-1db6-47e1-b9dc-1bf5008b3133",
        "cursor": {
          "ref": "f91287cc-9100-4aa0-9aa4-c7c493f5b3f4",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0cceccd4-46b4-4fb6-abbd-eb8f3ed61697"
        },
        "item": {
          "id": "7c823916-1db6-47e1-b9dc-1bf5008b3133",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "917aa922-8dec-41e0-a26a-53351d285905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74486ed-d000-4566-911f-843f8310555f",
        "cursor": {
          "ref": "b8f4905b-72bf-439e-8316-70676bd0070e",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "5ae9d8ba-dd02-4b0c-8379-fbd5bf88fbd9"
        },
        "item": {
          "id": "f74486ed-d000-4566-911f-843f8310555f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b94d21c9-c22c-46eb-ad93-1f34de398edc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d784e3-2334-4eff-80a6-d5cb3bf41ec1",
        "cursor": {
          "ref": "709a9129-2e98-4a12-a554-e3f65b6ac9c1",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0e980ab0-d22d-4a4b-b7bd-d2edd78613d0"
        },
        "item": {
          "id": "38d784e3-2334-4eff-80a6-d5cb3bf41ec1",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e441bedd-6c91-4cae-8b1f-e80ab4e68cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bf4fbcd-5a53-4061-b838-f09bafe9bfb9",
        "cursor": {
          "ref": "17125214-28d8-4a6f-a7d4-4fdfedde94ba",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0c02eb18-3221-4bbf-ae07-4f79c86cd1fb"
        },
        "item": {
          "id": "4bf4fbcd-5a53-4061-b838-f09bafe9bfb9",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "748dd1a0-2173-4a19-805b-3ed0d4cbd555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45432b17-f128-4383-af68-ab6e2779d835",
        "cursor": {
          "ref": "dedd2f83-6d46-451e-9acd-a79380fdd018",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9c5316ba-1e99-4caa-a4ca-34e51536eab9"
        },
        "item": {
          "id": "45432b17-f128-4383-af68-ab6e2779d835",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "bbb856c3-6858-429f-b2cb-f4d5c2d2a565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d678d1f-fcbe-43b9-a564-6c9642a326f4",
        "cursor": {
          "ref": "88dcb658-2063-483c-b742-336b9ef80787",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "fbad47b8-8f11-47b7-870e-1d6bb9b402ea"
        },
        "item": {
          "id": "4d678d1f-fcbe-43b9-a564-6c9642a326f4",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b6356b9b-82ac-4e3f-821d-bb573ab99d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236ef857-bb7f-4308-8abc-0eaffbbcbc0b",
        "cursor": {
          "ref": "36af87b5-b5bb-47c7-90b4-0f1fd054efec",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f1de0a85-db32-4c97-a053-10cff8f5f885"
        },
        "item": {
          "id": "236ef857-bb7f-4308-8abc-0eaffbbcbc0b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "30f744e7-053f-47e4-aec0-f6147ec0dea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b09de929-72e2-4a44-83fb-83fac988df28",
        "cursor": {
          "ref": "ba63e7e9-6abd-42f6-9949-db48ef4960ca",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "70554590-8c7d-4c7f-af67-d262a1d55745"
        },
        "item": {
          "id": "b09de929-72e2-4a44-83fb-83fac988df28",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b80ad89e-5a89-4406-9725-9d315f81ac0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f1deab-791b-49da-a1d2-b5eafcea935a",
        "cursor": {
          "ref": "48886343-6ae1-496c-a9c1-8b80d9dba421",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "65fed020-e257-457b-842a-cdaf4c2c1141"
        },
        "item": {
          "id": "70f1deab-791b-49da-a1d2-b5eafcea935a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "db66f3fe-ae7c-4120-be6f-d1e7ee2b6f3c",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "05d4e2d5-31e1-4e92-9055-a3a9ad52a994",
        "cursor": {
          "ref": "e0ee6a94-8d86-4d84-8dee-3e08a7720192",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "37cb9b10-5751-47e3-b788-57798972d5d0"
        },
        "item": {
          "id": "05d4e2d5-31e1-4e92-9055-a3a9ad52a994",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b5db055b-1dfd-4259-828d-07187298a371",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "686597ff-b97d-4ffa-9354-beb911d167c3",
        "cursor": {
          "ref": "e9b0aab8-9f09-4cf1-b324-4ea451059ad7",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "14bed009-6fa4-40ba-b7a5-5a9cc2979059"
        },
        "item": {
          "id": "686597ff-b97d-4ffa-9354-beb911d167c3",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "91e79d1c-4e28-442e-bac2-8f4be2c3dfe1",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "30eaa934-4910-4890-8bd4-f4037c0d9591",
        "cursor": {
          "ref": "6f825344-4cff-48b6-a9f3-8bec99c1b75a",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2159387d-17c7-48a0-976c-47377be97171"
        },
        "item": {
          "id": "30eaa934-4910-4890-8bd4-f4037c0d9591",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d61db62f-f93e-4d1b-b16f-1caae1570a88",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "8267a443-e3ca-4ceb-b2ce-9bd8835701c4",
        "cursor": {
          "ref": "1376cd0c-3ba2-44ba-92a3-53998d8e73ee",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b94c64be-c9d4-45f8-942c-75099a9f0029"
        },
        "item": {
          "id": "8267a443-e3ca-4ceb-b2ce-9bd8835701c4",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3e9954b8-b3f1-4ffb-b386-66a2ab25a71d",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "f87fcc3a-9888-4666-9fed-cdea6c068080",
        "cursor": {
          "ref": "e50c0876-6a6d-49b6-8c07-d78f6e7eaaf4",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e4c4867f-95a8-41b6-bda3-9fcd8ab9f3f3"
        },
        "item": {
          "id": "f87fcc3a-9888-4666-9fed-cdea6c068080",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d4cb960d-0714-4974-9fc9-720f28cb2fe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5c2401-ffde-4778-8c99-0714b65c6015",
        "cursor": {
          "ref": "1d48f7c9-9e87-4119-932f-3c325dba102a",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b7b17536-81e2-4832-ac47-6d3521a2e9ff"
        },
        "item": {
          "id": "eb5c2401-ffde-4778-8c99-0714b65c6015",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0ac3caa3-1bbf-4721-b8f2-bdaf48a55bfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1756a258-75f1-4323-953f-c3cbef43cb39",
        "cursor": {
          "ref": "7bc85278-2ec0-498c-96ca-5638717ec2df",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "95d56f99-0aeb-41c4-b52f-e3c1f9d92e18"
        },
        "item": {
          "id": "1756a258-75f1-4323-953f-c3cbef43cb39",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "98ada08e-e5f1-4ceb-8648-34e67c377001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa279050-4e65-4ddf-88c9-d7141ecb5eec",
        "cursor": {
          "ref": "ffbcc038-f8f9-4d0f-b3da-ce9081450b92",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0f7d76ac-4f21-496c-8c9a-6e1c40eb4f08"
        },
        "item": {
          "id": "fa279050-4e65-4ddf-88c9-d7141ecb5eec",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3c64a7db-49d1-4db6-9b81-6aa4758e9196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a782dc88-6d42-4d22-8d40-c1d3b0a17054",
        "cursor": {
          "ref": "9a4d99a5-e46b-40a1-9de1-42600ba0dba7",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a1300287-87f0-4928-a776-e4471092797c"
        },
        "item": {
          "id": "a782dc88-6d42-4d22-8d40-c1d3b0a17054",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b5fac889-2b19-416d-b090-4ef93d6c99f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59554807-d5c2-49e9-a7c6-ca4d92cd1b8f",
        "cursor": {
          "ref": "729a7b7d-b519-4802-ac2f-59ef520c2c1d",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8ee9ba52-b72f-483f-a5a2-2a9f40a1f6ce"
        },
        "item": {
          "id": "59554807-d5c2-49e9-a7c6-ca4d92cd1b8f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "70aa80b0-7e65-49d3-ad75-5c584ea774d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cd64e29-8103-4e7e-8922-908ce07ad787",
        "cursor": {
          "ref": "e141da50-6db5-4a50-9078-d2ff711d930d",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ee0274fd-12bb-429a-8d6a-e9eb409a9c9d"
        },
        "item": {
          "id": "1cd64e29-8103-4e7e-8922-908ce07ad787",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5d81f36d-e18c-48d2-84d8-9e2a9475ab3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d1d1410-5cd4-48ab-bba7-a3b4d018fa60",
        "cursor": {
          "ref": "6ce567bb-4ade-464e-84f3-33e822357df6",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4489adad-b505-4669-b461-b6317ecdb1e5"
        },
        "item": {
          "id": "3d1d1410-5cd4-48ab-bba7-a3b4d018fa60",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1d939220-646a-4f0b-ad74-c20f7fdf2bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b3273b-f54a-4f53-b40c-8a7281d02e7b",
        "cursor": {
          "ref": "a0a77a63-9f20-47e7-a998-b0915168ec5d",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "aab87999-d523-4b57-9979-447fa3eb4cae"
        },
        "item": {
          "id": "06b3273b-f54a-4f53-b40c-8a7281d02e7b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3e502ed9-1952-4ed1-8d6b-adb1f01cb6cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb3e8cc-1992-43f0-9ef3-e2220744710d",
        "cursor": {
          "ref": "049e99de-f5ee-45eb-9154-0ce1c812e614",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "54dc4513-58aa-43f2-8e38-152445e6afb2"
        },
        "item": {
          "id": "6bb3e8cc-1992-43f0-9ef3-e2220744710d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d772acb4-fec2-4a7e-a3db-b7f5a6af72e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5609921c-5f8f-4c29-b051-c95e501a4871",
        "cursor": {
          "ref": "0a1d23e0-6698-49bb-bd1f-3b23fa1b7c2c",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "72731230-d14d-4bde-b825-aeb6102b1955"
        },
        "item": {
          "id": "5609921c-5f8f-4c29-b051-c95e501a4871",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b38e9ccf-97fc-469a-8f24-5e62d6bfd7c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0b2581-d4c6-46e1-ad4c-aeb092c362d3",
        "cursor": {
          "ref": "246368eb-821b-4289-8178-046effb7d548",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "7f444909-7c74-4c68-ac4a-203ae5972d33"
        },
        "item": {
          "id": "3d0b2581-d4c6-46e1-ad4c-aeb092c362d3",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3f58da24-7705-40f0-a902-b6667d23bc3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae522a2e-6ea9-4410-b47a-ff3ac942696a",
        "cursor": {
          "ref": "d57bf83e-bb68-4b0f-a3b4-fc71d8e11603",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "07f90839-0180-4d9e-9ef9-c1399d2f04a9"
        },
        "item": {
          "id": "ae522a2e-6ea9-4410-b47a-ff3ac942696a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "fb86fb5d-e4a4-45d8-b639-0562b11b7d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b969c8-52ec-45c6-b7fa-28ff98eb9884",
        "cursor": {
          "ref": "fdb728bd-31ab-416a-8722-c8f02e9900a3",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "8b7face6-93b3-4346-9ff3-e9a187813d9b"
        },
        "item": {
          "id": "98b969c8-52ec-45c6-b7fa-28ff98eb9884",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "72453bd6-156f-46ac-9030-ee8f959e1c1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e18bca1a-849c-42be-afab-920adad53854",
        "cursor": {
          "ref": "09c42f77-304b-4cb3-bf2c-88d27777fe2d",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "67502b89-f45f-44de-96cc-b5620597b444"
        },
        "item": {
          "id": "e18bca1a-849c-42be-afab-920adad53854",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "dca4d61c-1033-4528-9676-b0ec10fdc5b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6380bd4f-cad6-4493-a6b0-360e9e34f6c5",
        "cursor": {
          "ref": "dcda1807-025c-4b6c-95b7-9ebb2192cd32",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "d487fbf8-8b88-45d9-ac03-446bf71efbd9"
        },
        "item": {
          "id": "6380bd4f-cad6-4493-a6b0-360e9e34f6c5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6f6f189b-540d-4465-985c-f93d07d03873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6599a3fc-5d07-4b1e-9480-eed2c1d3d042",
        "cursor": {
          "ref": "8c60a63b-8bec-4d8f-99a8-72c0c02b4454",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "398c8d44-c2b8-4422-b3f1-176191897686"
        },
        "item": {
          "id": "6599a3fc-5d07-4b1e-9480-eed2c1d3d042",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9cfe1f76-3599-48d2-82c4-bc70b34e0d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba483a7b-150c-433a-a588-1679d91add50",
        "cursor": {
          "ref": "7d73df0e-36ce-4798-9337-19d27d6ae1e5",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "c5244106-d882-44c9-8b38-7ee649b5003f"
        },
        "item": {
          "id": "ba483a7b-150c-433a-a588-1679d91add50",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3999ccc8-5397-4e00-910f-495c0618db65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5b02a1e-f33a-45b0-a0d1-449a5a7e4b80",
        "cursor": {
          "ref": "8f087007-3570-4512-b68d-4d768df8e026",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "5aa4532d-b344-4980-9d70-1635eeb9702e"
        },
        "item": {
          "id": "b5b02a1e-f33a-45b0-a0d1-449a5a7e4b80",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "54f643b2-63b5-4c8c-a3c3-a663a28bc955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "081309f0-9654-4db3-b2dd-744f8edd0662",
        "cursor": {
          "ref": "e0ca6693-30d1-4c4c-a37a-e6382bd033ec",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "ac5acb54-0160-449d-9de0-8e231d691b2c"
        },
        "item": {
          "id": "081309f0-9654-4db3-b2dd-744f8edd0662",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "5cabe169-505c-489d-a44c-4d0abc78aa73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc674429-f855-45ac-95c1-b63523f2301a",
        "cursor": {
          "ref": "67056791-cc5a-4ab3-ad2c-6f8fc29e6a31",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "6f08fc2d-e1eb-4999-ae9f-03c0f3c825de"
        },
        "item": {
          "id": "fc674429-f855-45ac-95c1-b63523f2301a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "554cd148-b8b9-41fc-8309-3e49588f0383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bbfdf17-0543-4e6e-9b3d-ee9daf866cde",
        "cursor": {
          "ref": "1c63bdbc-1a4c-4bbe-85c2-3a62cd644232",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "d15c112c-0547-474e-a17c-6e655c49e3ee"
        },
        "item": {
          "id": "0bbfdf17-0543-4e6e-9b3d-ee9daf866cde",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "28795b55-dee1-43d4-9a87-37d85e455e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a337562-7267-4bfd-905b-a78b62c946b2",
        "cursor": {
          "ref": "099bc435-e7d1-4623-907d-bbbfbaf8e298",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "5e69160b-aac2-4f54-81a4-7af571ea4129"
        },
        "item": {
          "id": "5a337562-7267-4bfd-905b-a78b62c946b2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e7b1d683-6f4f-4e27-b1b8-54761888b20d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89b994e6-a80e-44f1-962d-aa9807091a04",
        "cursor": {
          "ref": "894d6115-4e86-491f-aebc-16e5f2a93642",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "fc2e36eb-03ec-4960-a135-6764ad711bbd"
        },
        "item": {
          "id": "89b994e6-a80e-44f1-962d-aa9807091a04",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a4459f6c-a633-48b1-ab53-02a4e30ff82b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cef0b6f-166b-4a21-8bc8-99c79df58eec",
        "cursor": {
          "ref": "0f317995-5602-4a20-b122-ef11b8e8035c",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "89872bf3-6304-4c30-ab59-c15dddb39981"
        },
        "item": {
          "id": "7cef0b6f-166b-4a21-8bc8-99c79df58eec",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b801411c-0b56-47d2-ae2d-36534b63745c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b31b7d-bef2-4b8f-8559-2f68abe524ff",
        "cursor": {
          "ref": "42043729-ff4f-48da-b7c4-e34a027f797d",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "86f2ce51-521c-49fd-a46c-62797d73bd8b"
        },
        "item": {
          "id": "05b31b7d-bef2-4b8f-8559-2f68abe524ff",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d850a457-0f1e-44b8-b8b5-d9b95a4fe44c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c5d6e7-535e-4799-8042-e6f9da3b4e81",
        "cursor": {
          "ref": "4152e797-d968-4cea-9ef6-777e93eddc03",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "9bde26c0-50f1-4336-a059-c554c203ab02"
        },
        "item": {
          "id": "10c5d6e7-535e-4799-8042-e6f9da3b4e81",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b05604ef-8e4b-4acd-a6a2-6fb772928062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f7975a-b971-4a7e-80f6-bc3c4e885b11",
        "cursor": {
          "ref": "e66f8678-116e-44b2-86de-4053b906ea9b",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "5bda4168-0c57-467f-bc28-60a248728bc3"
        },
        "item": {
          "id": "a3f7975a-b971-4a7e-80f6-bc3c4e885b11",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "8c77e6f4-e7e4-494b-bd22-23ee2e7623c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25bb3681-2c5d-41c0-a515-1be481038cff",
        "cursor": {
          "ref": "a042bc93-c40e-4355-93a4-9480ed8455f6",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "85656f51-71b1-4309-8705-144c1d12da5f"
        },
        "item": {
          "id": "25bb3681-2c5d-41c0-a515-1be481038cff",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2a22588a-05de-460d-80d0-bf2212dfa556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be720127-542c-42d1-a07a-f754db5431f3",
        "cursor": {
          "ref": "e9560215-f4b7-4db1-b18d-0a2a319ccc67",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "5c1b6240-6db8-4d01-83a4-f20bc33bd5e5"
        },
        "item": {
          "id": "be720127-542c-42d1-a07a-f754db5431f3",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7543e47d-f7c6-4c9d-8e1d-a3b498947a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ddd7bac-6576-4c02-9ece-bb2a0edf90e1",
        "cursor": {
          "ref": "e3401554-0d7b-4a4b-8879-ea800f301128",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "aaf7bef2-3375-44ca-9a40-2c6b3294d857"
        },
        "item": {
          "id": "9ddd7bac-6576-4c02-9ece-bb2a0edf90e1",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7f3c1412-2193-44c0-8ca7-7d95cfc0b33f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1bbdee-df8d-442e-b691-787864a27634",
        "cursor": {
          "ref": "02e0e132-357c-4f24-ade0-364e008b6f57",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "f220e3e6-6b2a-49ba-866c-93b061f1da39"
        },
        "item": {
          "id": "de1bbdee-df8d-442e-b691-787864a27634",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e1d99850-250c-4911-b7db-f596c4c72d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cef925b-9113-46e9-bfb0-8b5d1a6c6bf0",
        "cursor": {
          "ref": "6ce99808-0e66-4a5d-a7bb-1e087138aa45",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "b81d0dc1-091b-4e19-a7d8-47ea74bd78fb"
        },
        "item": {
          "id": "0cef925b-9113-46e9-bfb0-8b5d1a6c6bf0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a5f7b333-905d-4c22-b261-df9b341ceb97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62952192-d3fb-43fc-9016-17f1801738ac",
        "cursor": {
          "ref": "6cc773f6-a9b6-44b5-8c0b-381cdfcf487b",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "a78682df-02aa-40d0-aada-834b40b1b2c1"
        },
        "item": {
          "id": "62952192-d3fb-43fc-9016-17f1801738ac",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7578039b-a1fc-4acd-9090-674e104d8e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47190a69-6584-4550-854c-bd5fb049ff2b",
        "cursor": {
          "ref": "078d327d-82ea-4e80-a20b-e8f077c2a9e9",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "c5045764-9b22-4b9e-9170-1b776e1fb9f6"
        },
        "item": {
          "id": "47190a69-6584-4550-854c-bd5fb049ff2b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "74c4fd33-c10d-416a-b55d-412ce2b35cfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c69d31-dea1-4361-b187-d611ed0cacb4",
        "cursor": {
          "ref": "74a0df76-1e0a-46ed-9d59-3fec7b2b200b",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "84a321d9-0e64-424a-ab58-4648278e845d"
        },
        "item": {
          "id": "f8c69d31-dea1-4361-b187-d611ed0cacb4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "93896945-05b3-44d0-9a26-c87cf956d974",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "084fb83c-f95d-47b0-83bd-a03f795c9aa6",
        "cursor": {
          "ref": "d9905663-9776-42fa-bf95-eb18f458927d",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "92e4c897-a6c3-404a-923f-0517047464e0"
        },
        "item": {
          "id": "084fb83c-f95d-47b0-83bd-a03f795c9aa6",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5e24933d-3817-473c-824b-9af795f9fd42",
          "status": "OK",
          "code": 200,
          "responseTime": 8159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c62601-6d68-41b8-ab86-c68229006cd5",
        "cursor": {
          "ref": "15669c31-1541-46d0-84b9-a763ae92d545",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "b70356e4-0d15-4581-876b-8ebfe232b6e1"
        },
        "item": {
          "id": "57c62601-6d68-41b8-ab86-c68229006cd5",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6c7d4a71-9506-49d1-bad8-923f259f4ce5",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c442146-406e-465e-aa84-d00e9b3aaddf",
        "cursor": {
          "ref": "496a5b0c-7fa4-439f-954a-00bafaf0ef65",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ce22591a-206a-4cd3-9a38-95dba45ab1b4"
        },
        "item": {
          "id": "6c442146-406e-465e-aa84-d00e9b3aaddf",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "90218ebb-e78f-41dc-b210-bdf945e4350b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c442146-406e-465e-aa84-d00e9b3aaddf",
        "cursor": {
          "ref": "496a5b0c-7fa4-439f-954a-00bafaf0ef65",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ce22591a-206a-4cd3-9a38-95dba45ab1b4"
        },
        "item": {
          "id": "6c442146-406e-465e-aa84-d00e9b3aaddf",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "90218ebb-e78f-41dc-b210-bdf945e4350b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c174a0-be20-48f0-b7b1-e247f4fb1b80",
        "cursor": {
          "ref": "2637bac7-1b58-47a8-b4fd-406d87c30aaf",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "edcf79dd-05b6-4783-a03a-08e08d9fd4be"
        },
        "item": {
          "id": "e4c174a0-be20-48f0-b7b1-e247f4fb1b80",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6f4b6f16-de73-4a8f-97fd-1e0e6d1cad95",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c10e41-be3f-41f7-989b-b0b8b1174668",
        "cursor": {
          "ref": "cbe93560-f331-4670-82ce-ff8abaf90105",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "0fd8fdb5-eb9e-465a-9863-a97becb57b5c"
        },
        "item": {
          "id": "e6c10e41-be3f-41f7-989b-b0b8b1174668",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7250f030-0ec2-4441-a6f7-ed1ecc1b7514",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}