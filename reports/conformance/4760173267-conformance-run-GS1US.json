{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e2f0df1b-619b-48a4-85b4-ff14b4d43ffa",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ce52d2f9-b658-4aa1-b1f1-52375a329a06",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fd3417b2-89be-4a88-898e-e50704ef9b6a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "57ccd3db-3d51-4bf8-8232-40ef6b32b59c"
                }
              }
            ]
          },
          {
            "id": "db1c8f65-a093-47c2-81c0-7c92a2befe13",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4a84aa91-e69b-4c3f-b4ae-010a085f1943",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cb06ea80-e237-4fda-bf04-48ce80a5b9f2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "33066665-b43a-4437-af4c-732ceb33cd81",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "52495bfb-076b-4ce0-9a73-ded616bbe6cd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9d53cdc5-5d64-4fdd-a282-2baad13ebfa1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "efbf3b98-6379-469b-bb6b-3c58260e947f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1fed594c-ba62-43cb-8342-95cb5f530254"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8c72edda-1f53-4212-bada-cd1c2e4ab200",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "819b5aac-51a4-421b-8f5e-fa64d780e420"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f1e3b5b0-b993-4408-a09c-e511264568a5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3e120065-77f4-4352-9570-5d1a4e2a835c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2c9214d-de38-4290-820f-1d17bed85725",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "2373f8dc-7ab9-473b-abc7-e64aa1c95575"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5677ac4-34d1-4857-931b-db1689b41ed6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e1adcaf6-4eb8-45c3-b8e6-47782dea9b9d"
            }
          }
        ]
      },
      {
        "id": "182e4596-b5ab-44e6-9696-c8a414e82feb",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "94e1dd0e-da52-4c93-aa5c-e31865c7ece3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a7add5b1-cab6-4d5e-8cb1-bbad885f6483",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1f3e7605-e3a3-4ba0-8394-15bbf0759168",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8307143e-7f03-4214-b71b-9f6f8b7aa3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "771eb1cd-d766-4ada-985b-a3a97293287b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfee005f-7bd9-4b16-a7d5-42af4d95c27b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d22321-3ccd-41e0-8d0b-214e1dba9b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7adec25-8354-4d19-8788-59992ca4f6bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e95adb-4c07-43c9-92a7-065c5d78cfba",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b5d6a19-05e4-4ec2-81b3-1b6236ee49af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8806b513-033d-4221-a6bf-10bd55103fbb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7c408c61-681b-4600-8e02-cfb74c0df902",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eace9e16-458c-449f-81cf-86267170a4e2",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da3f87f-1a88-4a48-aa7a-49cb74c341b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f69292a-6863-4a6c-8883-863b528ceea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3633a136-a0cc-4057-bb15-cf4d0379eced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49e13d0c-98bc-406a-87dd-01c99d65725f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea709937-6121-4641-88e1-3047adde3249",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e074172-6673-4ffb-86bf-7e19c2f4a694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c550742-4e75-414b-8434-df07d28d30a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58435df4-1573-4bba-83f3-238166bbc35f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "dbebd16b-5559-4430-9a47-353bc97f6834"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1a9bf4af-b831-4839-866f-2df89a150de8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5a47c9b7-1031-4e55-89d8-e73b72315945",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "87b954d1-d2d2-4833-aa85-403d665e94b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f6c29042-0a67-4c7a-bdef-d0751e49841f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e2512535-51b9-4977-b712-7961cf8c4bf2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "c3bd7157-bf89-408c-a128-e6d9fc387433"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "30e561fa-5bd6-49a7-96f9-5dab7df7be79",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "af4f1f9f-6698-443f-b12e-fdb5d2c6379b"
            }
          }
        ]
      },
      {
        "id": "72373e6e-e685-485f-a63a-1c20f3fadf4f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "21ef0adf-0ce6-4763-860b-a8889063984e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6a835fee-aaea-4a3d-bced-a14aa590245c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7f8beb24-cc66-4def-ab6c-60c521fa3078",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "818d3b94-6851-4723-a1bc-4f573723dba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f1d7d55-aa28-41ab-92b8-afb8a4eab210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b5b9c7a-e16a-47b4-b9a2-8ddd3497297f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2896352f-0c0f-43bd-99f3-c621df2a8579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d48c814-3cd7-49e9-bced-273d3895dfa6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "031cb648-44a6-4681-a7d5-9a8187eb2d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6b4c3b9-ee75-4b9d-a329-63f4a01f8b7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba0ac2d0-86b0-4950-9485-fff5cb7a8878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9738aaa1-285a-4c24-9cd8-da378978a65b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9aa3067-22a6-47ba-b82f-1da66727a656",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a79dc2-3f52-4348-b77a-ae7704fadec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "282b3531-1c2c-4cb5-a810-8ff11d211d03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e2ce79-cde8-4ff4-96af-c04eb99369c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "957da752-e3a3-48ee-a86b-3cd28f04701a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "597bf959-99f3-4950-a9fb-8b246d626da7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c61566-0c8d-491a-a5b4-6a77eacf6ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aa63865-6a22-46bb-bf77-c81f29f5ed8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b3ae18-e589-4c49-a74c-12cfb245b60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66fd9ba3-cfa9-41a0-88ac-f2ad141afa6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a90598-7cfe-4b97-ac87-7213e5ed9ea7",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8872048a-01bc-4ffd-9acd-b8ed562c7cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0887a693-90e6-486c-951f-1e1b6766e026"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f03ed0-305f-466b-8c4a-237c330d3dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8639ef4f-e808-4a00-8c57-e67f9db54f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d542b2a3-82c5-4efd-86e8-85e3d461414d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c25ab631-967f-4820-8e1b-11414a7a3874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21117714-8c9d-49e5-97f3-fb2eebe58d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cdebf33-26a7-471c-8ab1-115054387fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "410ccd8a-e267-40e4-b524-801dcfe724b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8484ed-5767-4828-85ab-f5dd1a5dacaf",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "264ba735-a5a0-4fc2-86cb-1c19244d49db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22658954-bc8a-4d9a-aefa-6fabf0734089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8225f989-59a3-49b3-8edc-c400c75e667d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5259c0ab-7c3d-42f7-91fa-11ec74821394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120eb4aa-15c7-472c-8131-cdc18f7a7e10",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a887eb88-820c-4264-be84-454c5ff91558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afa778d7-5a29-48d4-9678-cc27da8c70b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8171855b-c29a-43af-8858-e0c34dec3f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77fbcbe8-e54a-44c3-9171-46c4287793e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5249bd-0943-4327-b01b-6630630701fb",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f72f322-dcd7-42de-82cb-827a36f8ba94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79e4e798-a5bb-4a30-886d-54a38edfadc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899d8b4c-8b1f-4aa3-b708-df8f6d52ba09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49699f16-e842-466d-8de4-1694a0dcd91b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c23d9dc-d6c3-4477-811f-b14eea50a364",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f4b171-6b22-4d8f-8b44-15802a52cbdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59d34f10-0a61-430b-a1a1-1131b3ce4414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af679c67-2b71-46dd-bf10-198fc6d43c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "135bb5ca-4e07-45c9-9a59-ce91e9fd2ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bafdab5e-5993-4939-b025-2b1bb0614059",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd5e801-043f-4ac6-b741-19c8179a9046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7fb8e55-27d7-45a4-883c-d2cd39bbec0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e81a8f12-32b4-4534-ba10-2030a575aaee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eac3e409-a085-4292-a622-f03459442b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66524d1d-02de-442a-b7bf-a0ed65146b60",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3456430-d2b6-410c-a4b5-37a51d1fb2a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb3b4acf-f7f4-47f1-99f3-7438b7e6f8f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1420c46-a7b7-4ec6-b661-ce702b569fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ffe54a1-9456-48b8-a1ce-33af3c7ba959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480d3cd0-97a5-4e71-a7c3-41889d6239c9",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f0e6b8-c19e-44df-a411-ca2d721df5e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c8f7a3f-e12e-4ef2-8484-6e79d7760176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46be7693-381e-4a89-a9a6-7f29cc532851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a41b8166-33ab-4444-a301-98711f7c8cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4cee38-c34b-441b-acba-7d212f73f522",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61545cb1-0a53-4902-bd9d-3ad8b1bedaa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa6411e3-cd95-48a4-9c08-c18e89b0caf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1a081a-1430-441e-8efa-34bd82e67430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a466118d-e7ea-4882-8ec7-afe0a8e2169a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7acbea3-9e97-4497-b736-9cf85b415b31",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e68949-04ed-40c1-9d60-6da080235b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9da29315-c3ed-4597-a391-ebefb53451fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05c214c-c7e7-435b-9e81-b4853ebce3af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7342411f-1496-4461-9feb-bd2ab24e1805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d58def-3c06-49bf-b1a7-32c49d425825",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1636fc-f305-4481-935c-d1f88029df12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b69bc71c-4522-41cf-80ae-f633d759d059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad549a0-70a7-4e6b-9109-b571bcaa543f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd65d180-d9f9-492f-949e-b6c36747a700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3614c5e8-97f3-4780-a30a-5ccba42dcc7d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e6ef7c-bd6a-4d38-94be-241eecaed984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d82338d7-2862-405d-8fa2-224f10abdac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f19be5-a6d3-4515-aca5-b7617f239462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51030ab4-e88b-456d-adf9-66694162850d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a9f738d-5997-4db0-a989-d0392f6bfb66",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92dd4694-eb4a-42a1-aac1-3bf2038a8650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6db9bc30-d723-4530-8670-b403ef28402b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd16a365-6873-4252-9bf7-956a995561b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6fd0164-4cfe-4683-9d02-dddaa1f9fde5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b07384-3394-4d7a-9f79-f51a6f793ac2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b2f9b1-8ee6-4bee-8c08-d2c23921ab81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8563cbb8-4394-423c-9524-2d2bf73cb3ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a449c2-1873-488b-8af8-e2a8261036a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c73cd09d-6990-48d5-a232-873182fa896e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c66d1fd1-f1a4-4464-81a0-b5467edc9f6b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ddaab6-add3-4dd1-b932-658c91cd6356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98708789-1fb9-4593-9286-38f25d921bd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6534b555-1acb-4532-b731-ef7de490a837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "651c35bf-ec3d-45eb-9f02-6e11ec09e036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d90d0608-10eb-40c6-a648-0d51543c5493",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f02ea9-3ee5-44ec-95aa-97c72585ee6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddbd60de-4032-491c-9442-38acc3171684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3291c863-731f-47e3-97ae-79e20637b242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d266d565-bbb6-485c-915f-77049e2a65fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb14fad-21cd-47ba-a955-735e589eb8b7",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48565abd-12d1-47ed-8802-43eaf64a8096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "578b1a1e-75df-4d06-ae72-d65bb88b41be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "149877be-4026-4a5d-b09b-8cd6c1a2381a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc1e6dd6-aca8-4cc5-a08f-c373bc4a79e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "974c162b-b263-412a-91e5-67cc507a3a29",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a3efb6-7a9a-411a-a7e5-26c3a83527f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23fa2a15-e22a-49e4-b4d3-ad5d8ed8cf53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c82beda-2674-4304-9801-6f9a70f221fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a35f509a-bd69-41e6-b5d3-b41ecd122ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed10b92-0fbb-4ec6-b146-8d60a17dcf19",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad4cfec-d602-43a0-bc5e-695d01946db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2ebac3d-b0d1-4515-a631-a08cf8bdd69e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935b6239-f98e-4ffd-a444-4d56f034daac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b376307-80eb-46f5-a4e6-08e759ce3a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e573d6-6ee2-45f7-a3ff-c5ac658085c8",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee5468f2-6968-4e5b-92a2-fe8169c2903a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7474030-c62d-48ce-88db-3b39a7d00233"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ddb8d5-ba48-4c6b-8299-436249d9c434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b08a4565-6ba8-46f0-ab3e-611d8733128a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc388c16-5dbc-4baf-ada7-d371171c7616",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c39d5d7-6501-46cd-9835-d9446a8af2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "650f387c-b187-4aaa-ae70-2422db154ab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc9a96c-6bcb-4e0a-aa25-d213a50ba26f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4db1cbac-b391-4591-a7a0-522f5ebba876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f81c55f5-08da-4ab9-ac84-4e9faeac62c6",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35889502-2b33-4957-b056-d5a2bf3be0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b013ee37-97fb-492a-a7a5-ebd37ea7fc86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34dd5f1b-c78e-4d87-8e5b-10f7f5b623e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "21756d40-3ff6-4745-87bd-600ae6d32a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f27a33c-3a7c-4136-9147-19cb1fb370d5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "407e99df-0366-46c4-9ac9-adc05cff2423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de098e02-703f-44e4-a7cb-838b715a0e3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a13f602-6fd1-4588-8d3b-b3b66853039b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f77c494-6b84-4a1e-81d3-b297a1ba11d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe44265-424c-4f06-9171-e1fa31695505",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abd3108-1d85-45d5-a187-5c8509735160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "137b9c79-ee11-4714-bae9-6a7f2c6b91a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b18f3c-5c21-4d40-9f46-ce5b2f299405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "077012ee-4eea-4e3a-bb06-3526add41f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1095d83b-0999-4656-af28-397e6cd32672",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5831fac8-eb0d-42bd-81f3-c1a833a4f966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0418487-37bd-4b09-b528-07c3c5f37167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77262765-f9c3-4bd9-aa54-64973783e0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a031dbf0-edd6-4288-973b-770ee71fffe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e670a17-0f89-4d3b-8685-98da7139ae4a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd77dee-d8b3-4ee7-bec4-a58c87557061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "859f2706-2248-4ee3-bc90-7ccee0a4b7be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deecefc6-bf97-491d-9d1d-3064f3040d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bc231c0-cc16-4067-9334-c84d1da2f7e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5deef37e-0a1c-4467-aac1-3ac37ec9011f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a6b9dc0-83b7-463d-80f5-4e424ac5c48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbc5c66f-273c-42f2-bc0a-20460de6e304"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34efcdd3-75bc-410e-acd6-af3f1f30508f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e1e9072-4fc3-46ac-ab9e-0abb74eec0ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f351570-00da-487d-91e1-7d8edfef7805",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7734006b-d64e-46e4-8d87-4f558d254f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eb2ec5a-0a0c-4a6b-9ad8-71add7043d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a73a257-636a-45a4-83c5-c8bd46842ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9a1e470-20c0-441f-9a93-a42b2736ffbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dae9281-fbc7-45d3-ae22-5bcb5cc81b5c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0727928f-939c-4d25-a144-0cc21f157f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38e33410-cf26-443a-8010-de8753c95e7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6bf90e3-095f-424f-8fe8-6f0490f561f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b3097b0-b5f3-4019-90d3-e924f6c22281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8abb0f7-5732-46c9-8b93-4a8c6431932b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01485cee-7eec-40d5-8349-9b2dc7cff7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbba9022-baa4-405f-8a12-acd1141a90c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a2a4dc-b7ae-4ca1-8f4b-14b9d7464b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a69964f7-3bcc-497f-9393-627866145695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3d7a9c-24f6-4911-befe-79a764c91a6e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e064eb09-c904-4543-ac66-4a410b91268b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2e97c88-ca63-4e4a-8c98-d0ecb7c1a5b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6671b586-f1ed-4978-b9a1-6c93d948b24a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cf1597f1-1429-4bec-bda3-b518abd87e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7799e800-225d-4743-824f-ccf42926d4c4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a285996-2bfa-4d12-8326-7a2f9d62e2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1de50b22-6685-4936-961e-837fabb52785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c72a05e-6cdd-41ab-99cb-afc3a18cc88f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4534a59b-c2d2-499b-b7f8-c29a3936145d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "388a8f0e-f73e-4969-b356-c80200b91ad1",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6caf98ea-b568-4a21-90ae-ed746967047a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "775dd6cf-163e-40f5-8d51-5cdfa8c6161c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd4b2aed-cbe5-4eca-9bf6-7a6510b55661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a92787c1-8095-4942-8585-3e70c9be9b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68919312-18a2-438a-bba4-37e6e32ae08d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2f5ade-b863-4abe-bd9d-580a33519102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ff6c1a-fac4-4b37-83ee-f072fc0bfc65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83fe47a8-f084-4683-8c65-25b4cac10038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "667d80e7-8bc3-4f39-9eff-4ea92b24dad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37873840-2349-4ae6-b0a6-24ee2feaa5cf",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41e335c2-9a49-4d91-a53c-39cfe7acc95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3ad420a-6c34-400b-926d-c999848f3070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "044a0377-424b-4333-9a37-23e0a8e7adb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "19e8e195-482d-4216-89a6-eef1dcca7bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804d6b18-625e-44d1-b241-5be278b84c71",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26d9005-cd3e-41c5-a5b5-befa1fdf040d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04c8b553-c183-4f24-b116-543454948e65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ba6fd4-ad10-431c-a579-975903668411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c2b09bc-5a40-491b-9cab-bbf87a9b105f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b9e4cef-0239-4e86-adce-b4c88197b6e4",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15cf222-8466-4cdb-8667-dee6613ec846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251b797f-8348-4828-ad55-cc660a7e363c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "420a8bf1-73d7-4d15-8cdc-8cd9405d60be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "fc0ce2c5-ce82-47d6-b50f-0e582a870480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed0d53e-be29-43b6-92cc-40465a278264",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e27585f5-f3e4-4782-815d-bd7159839146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d680c46b-36fa-48a3-b13c-10cf7057c2d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d71ec42c-2c5b-44aa-a5e3-a659e1c7e17a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "27f9ff33-4f93-494c-9eba-d03df2174fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5db2848-6ab5-4ae9-8707-a138e38897cc",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7d6a64-a886-45e0-88ef-4a8914118a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "485b3d5d-bb82-4ccf-8a47-54cc93000177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea9fd52-74b6-40c9-9375-e233332c972b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "78decf57-730b-449e-bcc1-a17f6d941bc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b21478c1-ea16-4ef5-8569-0698fe52d687",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8177cf85-8fd8-42af-a31a-06bc82c16b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4fad045-5cdf-44b8-b2ac-6748946649db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da4628e4-8283-420d-af91-eb60ad63022b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "96abaf6f-5325-4bb0-8ec8-6e14977851e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d45aa0b-930e-489f-9dbb-7ea29da7145b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4b6b99-a571-4a16-81e3-dc4049413d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bb48388-9c0c-44db-a9f8-6a40f597c8c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41aa2c22-f441-433a-ae5b-af62e567cad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "20c6d8b4-bf2e-44c5-9ed1-2ed27b1aac93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea5fca1c-b320-4a66-baca-80264ab3ea3a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2372200-16b9-4ef2-a4b9-92bb1e6ad018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53112cc3-4d96-4ac4-a7bb-afe10196dbfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7136141c-d731-42c5-a032-bdfd7ef510a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92231943-3896-4578-b333-3e1cfbc8ffda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3276df5-4f36-4aea-9191-60a25db85ff5",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ef2aeda-d84b-42fb-a263-576cd022f619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d35b091-bfc5-4f13-8e0e-fa7bae5ebe09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281689da-c63f-47b6-9914-fc2925d9a572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "011adc36-37ee-459e-a1bf-b0f36aa017ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9138ff47-df0b-42bf-977d-855df8f09830",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fcce55-67e1-42d4-b456-f8614c15ef71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2a2d774-b75e-4bad-8d66-1f627b142522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee3099c-c7e0-49a4-a293-450add99586c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f3af097-a234-4cd9-9712-bb8fb5cc05b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e80951e-3f87-4fa7-a05b-ad3bcef737da",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "434a56d7-16cc-4df7-bca0-c2159af57758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efb84061-5252-4737-84f5-850b74cf0ceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d8717d-7b69-4d7e-a74e-3b013cefbb9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8e85294a-c724-436a-8603-d6f939c94eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8910e5b5-a748-489e-b689-bf61f56689cc",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d4a071-c93e-4edc-bc97-66c2b31924dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46bea639-33a8-4926-a968-78a7c70ac095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a561d77-53cb-4518-a4ea-506ba5cefb45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "df7f09b5-1363-44e5-ab5a-0df902d290da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec5bf93d-30fc-4ff6-957c-704a4d5aa83b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3964cf9c-9ef0-46ec-9817-00f4f5530e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b089e668-8e62-4016-9fde-245eb3f3860e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7284c302-e155-41ef-a23a-1455e3991907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "052aa920-3ec2-4a62-a307-2e72b7211ae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d798c6be-5aa2-4828-8b1f-54422df04f1a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa9a75d1-a0ee-4d53-8b92-c0ccf628e7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c0d676c-cdcb-43d9-aca4-23758bd671a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb17e8a-e349-42a5-a5d6-04a8abca9292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1db585e4-f419-4502-a286-79705e974011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d65a864-28a4-4c65-ac1e-914bf8d9b41f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb7e3371-d2f4-4bae-b4cb-7ecdee5313ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13101365-9d7d-49ff-b305-ba671274246a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f3bfbf5-f414-427d-8d89-96a52b63f2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "03152003-8f33-4460-8cf3-d814a28743dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f1295a0-e778-43d0-be71-ea66ffd24362",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "765513e7-f82c-4d28-9383-cdeeb659beb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85048054-2182-4a81-8a8a-e2b82dc61ee9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d2b22d-beab-4717-9c13-ba66375b58c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9bc01d7-215f-44b5-a14e-617b2d4c24e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a459277b-be5b-4b5d-9335-4a888d87f4d4",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "436ef83a-90fb-4548-902b-6a919ffd0501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "631e11ec-099e-4f62-b440-e04b30868333"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a4c093-be02-4530-8b3e-0de1d0af9f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "2ae77733-696c-4650-9666-d00f54341f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10269975-cb2e-4f1e-bb7b-ab601137c646",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "504b5129-9c26-466a-8036-f7d893c7f89b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27ed4c5f-6a8c-4da6-b3fa-ccf9e21b20ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd5719b-7bda-4d90-b71f-8b46af9a0a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "550b0dc3-c6a6-4a3e-aab0-8c038118f681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bae8fc6-d2dd-4600-b315-4bd5b66859f2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "666877cb-81a1-48b2-a7d6-255f95473b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc0d79c7-6ff1-4460-9a55-f5f87b9d3c40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c17c4a-db2a-492f-9fd9-accef6efb110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7f45a93-8bca-4f84-862b-7701b693595a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd65ef21-4b78-43b4-84d1-4818b4f5af08",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac732ea-16b7-4d72-b708-8d00dfc0ff16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0d8aa2a-e02c-4265-8569-2c6d85e39343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4fe1a03-8b07-4cb3-b12a-481a2a1f6b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe4fca50-396e-43ef-87d1-2407042e4083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679c7c0c-38db-4d01-87c5-4d42c32b18bc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1da9b5d-bd0d-4077-bf28-50814f2be110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de015aa8-82b9-4224-8ea6-9e679ebd3c62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a76ff2-bd18-441e-b013-59f04b7c4ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "111b5339-0bde-449a-8b4e-5784dbd2b8e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a82e7962-9633-444b-972f-505f28674aba",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c40e385e-970a-4f6f-912d-08ca72b2b25a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ef54556-597f-493b-b624-fa44940f05a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4993a6c2-6bf8-4ddd-9c60-19465c21f5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a023c49a-6667-4e70-849c-026e6a63c8d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee74534b-848d-4a69-a3a5-1b19952c7581",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d40dfef5-9bb7-4587-90ec-4c08c2da01de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f34e764e-95aa-4348-9864-23e2572a1337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d36ed363-18af-4495-ad42-c112b2cf565e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0b08b67-050a-489b-9519-eddd69dd9616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d389ab27-e15f-46ba-8760-c7235c92c1a4",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eeef365-48cc-4c0e-954c-de53a156ebdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72fc90b8-3c8c-4bc5-b1a1-df2872d72a44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf35729-2842-4f83-9fd0-17ca76e25f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ac8d21f-dc23-43de-a259-f8382ac5d7f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2b5edd-59c9-45dc-a1fc-fcc2361b9d63",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f4a4c6-09e1-4dcb-bade-7b02fbb20127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "467c7596-d008-447d-a928-9e8a8d8139ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70155ab-259a-439a-a890-36e0d7c9021b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ff2b87c-c14c-490f-99a4-667fbf53c49d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ad637f6-9bd8-49b0-b80c-571f2cdb465f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e552c500-ceb7-4b50-b14d-4dddac4f109c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "458bd668-c011-45ca-95bf-b2d9157dc1c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2acdfaf8-ffbb-408f-ae04-373686a54087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4010b24-3edd-4d79-bbfd-572932c1c4dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cee5dbf-a02c-4b85-8733-1fd368f36478",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "952adaa2-f09e-4a07-894a-2d7243da9ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69eae91f-438c-4b69-ada0-e5f195c82065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f90e3d7-c821-4094-b357-5270cb431f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4ce6743-e1b5-48c5-baa0-806354a9d996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c3eb9c-9b19-4f3b-a80f-d0682eb6090b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adfc3238-4c5f-4b6c-bd27-9e9cbc888eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33491b8e-92e4-4dc2-ab06-950c7d28bc86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6adc404b-1990-4dcb-9343-bb9b851887f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9426fcfb-f31e-4832-9f57-0e5086121be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c6125c-cb04-4dff-b3bc-d886d606774c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f2d93d8-c809-409c-a073-d433f8098d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02c913ce-f6a4-4c8e-9adc-064872199817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1056098-e26e-49c3-94cb-88adf7975445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfdd9b86-4372-4220-beff-374e252a2519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0657071-a012-4836-850d-98fcc2a6db6c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db4ab59-65d4-4be8-8dc1-cada20b1dca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3466d379-50ec-4820-bee3-fe6993f75723"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383481e9-f6f0-4322-b2c7-ef4886019368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "42bba1d5-8216-416d-8301-be957ffbaaf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd3f4bc-ee8f-4a3b-89b7-32abe18b5035",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac846f0-c550-4b61-80b9-1505563aee7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39c229db-e2d9-4dc0-9fc5-7a54383408d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd9736f5-fd08-4650-991f-9b855fbd9137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6b16e63-00e5-4d60-8246-ddf1aef54c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b36803-6ff4-4d7e-9f21-0151c7c89e9b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c592de26-e760-42da-977a-dd5fd8c8e41d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3465e48c-f1ef-449d-9fc3-f02355b0271d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d54fdb-9cdb-4a88-8c3e-e6a1f165ea72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "81d8becc-4013-4817-bbbf-772af5d9c567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83479520-0d9d-4f13-8370-d2850ae3eafe",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6f79ef-2f92-4f34-9991-200fd6c1d72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9540087c-bdc2-40bb-ae04-3dba2d17c9ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b26fda5c-bbec-497c-974a-e2dd229487a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "562cea61-646c-430a-8675-d0d783db6615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b36428-e035-47f7-bbb0-e70ed0ae6d8e",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c3de98-9869-4df8-aeec-b8026ad57d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb4c929c-d4f2-42d2-ae5f-23b1d65a30e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7068fc3-f4e9-4aaa-acc7-54649fc5228c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7616865-8dea-4952-b388-53de376a4e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e931b417-ac3c-4186-9ca4-08448e829a88",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67c889d-7cbe-4845-b290-8db32a6a49a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9fad94d-8150-4768-9a44-0da3571384ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2b4976-9c38-4d86-87da-fce79f94a284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f0681d88-a31e-426e-ab27-2ffcba3748f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1d6f3bf-c433-4b0a-b703-cdb5d4f32fc2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4359e7-864e-40bb-8125-2f25421ca6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c113555-5a7f-40fe-95be-3b17617c8847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c93d26c-510c-4473-ac5e-254df8ec9c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "55844b6d-67f1-4bc9-bd66-13c815e61fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f6e00d-4328-48a7-817e-bc77017a1e38",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a348fe1b-295b-4050-a0fb-54d2b7fe9434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dddc8884-9a34-4be2-a881-8e7d181caef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a12e824-d3cd-40f7-9aba-187f12f38624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4355b6ac-4514-453e-ad7d-1d8d35e6e108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc6f472e-0665-4404-aa61-e2d36891cd46",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bebc4643-2a78-44f5-887e-ac7655ede5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f9a15e-1f3c-438e-87f9-a2589e3cf8ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e5d614-249e-4f9f-b445-aeaebe954886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f730902-691e-4b36-b2eb-d3ecc01fa6fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "457d2238-0b92-4f12-a122-ec7cccb4bedf",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdffd135-4315-4576-a26a-47e607b10141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6bc5931-1dbf-48cd-b2e1-fe4c8ff02453"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69fde909-b261-4739-ab02-d2cab3b6f0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "09cbc4f4-1b56-4465-9faf-8f08d4d37f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb170441-48c4-4d6e-ba8c-0de6d4fc7e6f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2115703-f88a-4194-8944-aa81daadc602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ce6098d-462d-487c-a443-986118b4dc73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e763545-7680-4732-ab34-ef98d06f4abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "504581a9-18cb-4af6-9a1b-c4769e6bdd09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e45d60a-6865-4581-bc77-13beed779256",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a385ad2-5eca-4dd3-b50d-c52f43206058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fcaa4da-d949-4a3e-a340-5734a7220733"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ac0302-589a-4b6a-b820-a15082ab9d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "537561e9-1831-460e-a552-25f74edcfacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28c601d4-1cf5-4ef6-8af1-d6f82855947d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e91b51-cf98-4334-a5f4-37aa7463d064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d78c04e-b91f-409d-93d8-ae1339db01ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68814ca9-2a84-4ad1-85ec-c924f2ff42dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f4a2f0f-8194-454c-a2c1-7047dfe7dcbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f85b3f-2105-4f54-8aa1-01ca4e30d6e2",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7edc26db-d307-4f89-9b16-f7c0527f28a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b9db31f-b9a2-44b8-8f4f-f0e69af24399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0091a3-704b-4110-a4bf-e6da89afcfdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ad0d89c-5503-4528-bba1-a62c010f588c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce6b7ce-5872-4477-ae2c-ef22cd660c10",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec9e073-6843-48e7-a11c-9b57092fd08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bc2ec33-1583-419a-8858-c064f93ccc20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d41c2912-0e1a-46f2-8d0c-30025848482a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6677e3a2-450d-4c4b-a6d7-20bf99b87aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dfd5d45-5900-4392-a690-f2178aad5e3a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8f3607-8368-48d2-802b-8b09ee3c7202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cdd907c-a460-43ae-9c8b-38a7c7fe6b58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07270040-2cd5-4af9-8841-951af62deb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c87ecb8-b786-47ad-b20d-158f34d44bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a8eca2c-e45b-4119-b8d2-13dcb5d224f3",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62bc522b-44a8-4047-ad9f-a1990ae91fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "069cce58-2d8b-4228-a9ea-d36484cacf94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4603ce95-7185-426b-948d-2c42fe196354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e381caf3-d052-4658-aec6-0a057ee076db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf3e841d-9990-47ea-ac7c-d4bffcf1b82e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0495779-06a7-41ff-8bd3-572782200831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd1437ce-872c-4bc3-88e8-f50dc3dbc5b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ad7f5e-3bff-4b09-8fde-9bf53762d767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "308af135-360d-4c6b-b2d2-307035f2afe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08cd216-8e5d-416b-8174-b0e076e94fff",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b47b083d-e946-494a-8c02-218eb216b092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7afab93e-4775-46bb-aac9-95ca2095aadb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c45bae-335f-4834-8e65-ea63355e051d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f203449e-b49b-4c8b-91e6-e30f8da5ee5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed61b44-344e-432a-acfe-9985d351dfe0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d92578-5e16-4405-86f5-c776ddc14b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e51a2e24-24aa-45bb-b044-42b2710eff97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b270b383-0bc3-442e-a87f-cf796c0747bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6cf3a5a-a70a-4ff2-8b2f-389463694602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3beb632b-e146-45e4-b9a2-1a5aa7797b74",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff995740-217a-4fbe-a1e7-2ac7a477c577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b99f0c1a-40bd-42a2-9efa-9536190cf58d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81465914-1e54-49b0-a692-11630927168f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "12238d0a-576e-417a-a386-4e7d1a833699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f214299-767e-4580-a5fe-cad7952157f8",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66dbc2b7-9477-4129-9680-f2a29ed118a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28a3a072-7d0a-4f47-b89c-135c515bd010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45aa890d-e87f-41e4-8483-2fe5cc49d370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d11a6d2-1f8d-431c-bfdd-96d5fa24ded2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da84cce-0c1d-4f64-a9fd-2a584f1eac38",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef06ac9-2898-4fe8-9a0b-dfd68aaac214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5684f0a0-f874-4da4-8cc7-247d5ffb2fdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04ef601-8660-41b0-9a7e-2d101732685f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f8a685c-f32f-4057-b2ce-de1d472fb503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e953fc72-8712-429f-bfe3-43eff7c4cd47",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "915d8510-9b79-428c-9f9f-bc981ff750db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1ac9c837-ff90-4677-b323-20fd2b6657a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436cf43b-9bd9-40fd-862b-4ada4f6d94e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7604eb89-1081-4079-89a5-85c6209aae3d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3e444702-1cb7-4231-8377-72c3de5b9218",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aed0e8db-60da-4277-9402-e290cea8a4b2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8947588b-a8b2-4ecf-a7e8-a85e5d1c787b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "217cfbbd-a06f-40c7-9c32-4b8f1c8ed115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083b8a5f-4192-4d69-b327-e8822cae748a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df0cd3f2-0cc4-4e14-bbed-aef6ecccf5f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48abe198-3175-4a9a-872f-59ef5496d2c2",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0fbc55f-4f3a-45c0-a148-6f13e0ad268f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "add08f5c-ad46-4027-b293-0030c40d8823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2205b94-9b78-4a57-88b3-076719452265",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "662c6149-8fef-4461-8979-e15fc6c497e8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c42bb759-604d-493d-9dc7-70e0fef5629b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c083e8a-b972-42a5-94c8-423bf562de0f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "975ed84b-4946-498e-84ef-f23e8c33cc51",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5186114-d824-4046-a5c4-da0a55ceb6ea"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8fcbf6f3-7779-4fdc-a1c0-cf6f0c8f2630",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e77668b4-fe7c-47d0-97e3-731cf1a3c48c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a211c276-a39e-4721-8c41-17864d5008da",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "adc09b5a-ce80-4d09-8c44-fe7993fe91f9"
                }
              }
            ]
          },
          {
            "id": "7c44447b-1c6e-4e7f-8d72-42bbb627e089",
            "name": "Positive Testing",
            "item": [
              {
                "id": "80291a7f-010d-43a0-94c1-de9e493ba54f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f869366-2bc9-48f8-841a-e1f5489f4426",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7f38faa1-9cba-4782-ab19-2b31465365f9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f74250ed-42be-4f15-9f95-83057af09d79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "eda838e6-71ca-48e2-9aa3-f40e4b37f30a"
                    }
                  }
                ]
              },
              {
                "id": "22c0682a-2d1d-474b-aac1-c7249bce0b8d",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d65cbcc3-76fc-4135-8bbe-b8dabed22ec6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d98ddc3-884e-481d-8971-bd07e73e7514"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "080ac730-ab5f-413a-8b5c-0c5eb90b68e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "76f49e5b-5d68-49af-a500-1b4d6ad47d50"
                    }
                  }
                ]
              },
              {
                "id": "79b757e8-801c-4542-a8b9-d10f7412367e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c42927b7-704e-49f2-b98a-4c9c0ecb8ff4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "142e0439-63ff-4786-b9ef-5b23b75141d5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "527c8925-4e9c-4604-9cdd-9ab8f63c8653",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "eaa52558-3968-4fd4-bc7d-8abc3e2602bd"
                    }
                  }
                ]
              },
              {
                "id": "68bf056d-ca80-4092-bad2-8a0e2926e5f0",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a32a3b0-0681-4164-9921-5005b37930fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7f3d795d-e265-48fb-a015-5fe0c61c53c1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce5dd331-3a86-466a-8ee7-dab047b9eb29",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2822a459-cb67-4d00-9ce3-fa7b15d83de3"
                    }
                  }
                ]
              },
              {
                "id": "3e4d0afd-347a-43fc-866d-59b2200e5fe8",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4995cb76-ef2d-49ed-84f1-604d41ac6cec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fa4a26e1-b751-4da5-bd31-0b9a7ac48f6b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46f97e32-ce89-4439-b357-fcdbcc2ff5d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c79b84c0-5439-4eba-b61b-48365b1a6dbf"
                    }
                  }
                ]
              },
              {
                "id": "4b587209-a53c-4611-821c-dafc9964a64c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16c2d324-ef7a-44c4-a53b-5ca8218f6b08",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "12489490-725f-4b4c-aba4-f52d07f93cfa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6050be73-515d-4ad3-ae2a-7c13ec9c19af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "91de7a6b-efb7-4a62-adb7-76a65ceee9c9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bd6858c9-10fa-4c21-9cd9-dc0f865e9405",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "17cc1fa9-2a81-4f3b-8de5-82f4c8e80215"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ae1de296-b154-4eb3-beeb-a757f9a4be3a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7e5c744f-af09-4c38-a85b-d0acdb63917e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0158f68c-8ff5-4e2b-87c6-99be5883fb8f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b993b5de-ca83-455e-888b-4dcf83d32d83"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c23a3d6b-9660-4c83-bafe-c762fdd457cd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6d5e6ae1-cf8f-4d3b-954c-d67bd384e1ec"
            }
          }
        ]
      },
      {
        "id": "5321faed-677d-4fb7-a161-59a284c9ad66",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "6e4de16a-468f-4dd5-b646-49ba00ecafef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a8698558-fc9b-490e-92ef-7457386183c2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b0942e37-e947-4f7c-bdec-fbc8c3beb8f8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41cb2bb7-c164-4463-adc4-bcad330fdd81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78cff38e-cc5a-4d8f-a9ce-37491a725513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df7d0a0-740b-4c67-9cb6-3b8aa7b18f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "959f750c-976a-432c-9486-d41b126723f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f307edd0-1f5e-4cf6-b803-0dd2ad67264c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60cb8db-cf05-4793-b7e8-25f5cea77297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cb99226-f65a-4873-a7ab-ef7a22c5dedf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6dd7394-15dc-4f14-8f86-7268c7ce82f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b7e6824-5681-4588-a7be-35d2f47bcf64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd4f4ab2-e3c6-45de-8ba6-d5756bd2fc8d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e41511e1-fa12-4744-8d0a-bce7533629c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e09e449c-4732-44b9-ac85-b98b7aa23a16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989700e3-d21a-40d7-8038-d22382ee0881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c555f23-4ac6-4a46-8ee9-ea1447c9409b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d951fbc-b689-4f82-bb3d-d20d664fe7a9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b9e3cc-9e47-4ef6-b2fd-8118ac097a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "202f1a43-661c-4b45-bb0b-a82c4f8fab9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "685ac466-a2f1-4d3c-a11b-5b2f573c7c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e38d0b77-b137-4ffb-961b-1ea89aecfe49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da1facb-fdd7-427f-b8ca-cbcb9ea8fbf2",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba7a76aa-4b59-42bd-8922-da5d5cd73cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03b3504d-d891-48ee-826f-d6e9b3ff0e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a857d93b-2841-40b0-a7f4-cfb5acb8b461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7aa335e2-fa08-46e2-933a-47c03c07187c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b8de5a-ddb3-48aa-b0a5-a16d9ceda699",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e560ec64-1977-4b57-b2e8-bd9735273e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "129f9b73-fa53-4aeb-8cc8-47a4884f6af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3480a44e-1c54-4bc0-a99e-15886da5d356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6bcf63b-aceb-4dcf-91a6-25a4ecb61ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e607ea-1443-4d1c-b6ef-4b25c844960b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "646e3af9-5357-491f-a619-9b8b7b8edfc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d8f984b-c806-4e8f-b00b-add8559ad8e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0fdaae-f4c7-4e50-90e5-70ad7a7169d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb80f0c6-c328-4d29-b7f2-186e8d88befe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef6a94ea-c213-4173-9a9b-53e1e5ac933e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6261a81f-034b-412c-b1a7-a59fd25e1481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35d7bdbe-60e5-412e-a208-4030c8ea824e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d87d645-d8ef-4ab5-87ff-dacc146e5942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f30f5477-9fa8-4e8d-b753-3ad74537f6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11025db7-0d3e-4076-b030-e1c205879e81",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f87d48-a467-4809-b9ec-02c423fae71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fdccc51-23bc-487a-91a6-4a065bb9d118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68186f34-5c76-4301-b9d8-0923bab69191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eec37145-8458-465a-bf6c-3ac8f18d91e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540cfe01-b5e3-48d8-b37f-9bda67532514",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33473d7-8468-4a36-be57-4aaece7f9887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee6be6e7-0d9d-4874-841a-42a927665404"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1386199-0d20-4d9a-94b0-7dd22cccacc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec5e9300-e6fc-42b5-92f7-0f39d66cbe54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa3a165-e6cc-48d6-b071-20ddd05d1394",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed15c0e-2bc6-4a6b-a5a5-2e3007a745be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "328d82f5-4b27-408a-889f-739a63cb72d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c66cd40a-8e65-47ee-aed9-768861cadb19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8ca5a6fb-d2e0-405c-ba6a-07a13d3f5a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "853a0d7f-4acf-4d19-9ca2-3223a9e91a2c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b5930c-d7ed-4b98-9f5a-5b9f1e2b0ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdc0e3c5-cf1c-404f-aa73-820474d21e7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b6138f1-ce36-4248-9daa-9d7e09e857e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a994ba7f-f910-4d2e-acb4-4f9cbd52019f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c4be06-3f35-4188-878f-0ffa7ea99bff",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b9d44b-f711-44b4-8f0b-e4c998b7555f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1611476-605c-4529-bf36-4077f9132e7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f745c8f1-e2cd-42d0-8d16-187603862181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "21567ac3-ad44-4ba3-82a5-826dcf0c0353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4337de20-7c6f-434f-9f16-42af55e464cf",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9485e53d-ac6e-4d83-b48e-347786a721d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ce38ae3-a139-4655-9010-f871ba42361f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c2de13-c1f6-4aa4-9cab-8fa020fe9b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4addca51-5fd8-4934-85d0-1d802e14e30e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f7318f-adc7-43fa-9ce3-d3ebf8f55c8c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b843a8d5-8d9e-4a9d-a0d1-8cafbbe7d312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "050b2755-85b9-48ee-9009-8266a4299990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf61874-cea6-4355-9ecf-ca94680f26f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8ff0719-5af0-4558-8751-b7252112beb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd0cfd5e-c8e4-4f7f-aa66-20778f89cdba",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7640246a-a41e-4f66-ad45-2d06ba4d4f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5225bb97-1126-48b3-81e7-a3b843e20999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e368e4-80a3-4604-a972-8a67dd2f14f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "13400bab-7593-4132-bb42-49eb0b6b3b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f882c6-9e2a-4063-a3d4-d8b3a9b58f90",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2335e6c0-a2a4-4169-9f82-a5cb853d57e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4075bec-8422-4aa6-a954-e969fff5046f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc8fae0-3a92-4712-b472-4cec39872336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "63324516-531c-4888-863b-af81d2b08cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f0938a-4d1b-4839-abcc-e04bd887de16",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0518b74-03bd-4bfb-8cea-ff570ff76379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e0dba4a-d761-43a7-9a97-671331774598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e625b4d-d631-4f71-9a1c-8a315af2b1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9653437e-7639-4ad2-9a4b-d14596975859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b2d10da-7f3f-468d-b2e0-cfe43e7fa391",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d85a4d78-8c4e-4aba-9a5f-9422e6c29fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59b44535-27ad-4ed0-8680-bf4428ceb752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e127250a-636d-422c-8806-856c28827613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f13c884-26d3-4c00-b4ea-183e38410f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62525611-bd23-425b-86de-11033e3837a9",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf626860-a5cb-4c02-8a73-936c73baf4a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adc78440-f04f-4c4a-916e-859b79093906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21eb7c26-b873-4a58-bc4a-7ee791b1253f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48a7bb3a-56f9-45a7-8a60-631404123882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa4a2cd7-343e-4f2c-892e-6869d3fd8a1e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2acb742-4c32-4889-91d9-cccf3b3fdb50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c767831d-9096-47b8-a318-b56736852750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f8f0929-47df-4ec7-82ff-87ebeede9a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00398a7a-823d-4090-a684-30b8d312ce18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ebd437-6356-419a-bb13-77ecd364acb5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a82e92c7-8d7c-4f17-9522-ab2d3e0709e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "168f1304-6204-4371-913f-07aaf7d8171a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a83ecadc-12db-4b30-a4f6-0aca6b0f2053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37d8ba86-6622-4802-8522-9966e8695e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77dae15f-b281-468c-8cae-26c602de3721",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "752ad586-03bb-41dc-b1a9-6a1b797000f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b00693e9-f990-4283-abed-96d55c85b8b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec80ec19-647e-4e6e-805c-540c353e8b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "015038ff-015d-48b6-8ee4-e2eb750e570b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e060d23f-c515-4da0-9418-405a336ac0e7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e08c5b-1649-4455-b733-31f681c23ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eab6b2ac-d281-4fd3-826d-45fed5aa9199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ccdb71-8844-4b1e-9d11-25247244c75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49777bf3-2e16-4035-a016-3c3cb355095b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1145eff7-55a6-4af1-b0e6-a2e3d677cb7a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0637e1c5-2708-4302-8587-17cbf49b52ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "241f8e3a-544d-4cc7-8173-941b4ce525cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191749f8-0f0b-41a9-8ebc-dac3bef3320f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2b31e51-fe70-4c7d-b6eb-7a879920854d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6a63eb-2edc-4d7b-8ff0-cb8145e1d30b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb046d21-9150-428c-81ce-8e8291170f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1151985-4f29-4e8b-b4db-91845d0cf5d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cda04ab-bbbe-425d-b46c-f013141482d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20b78407-a0eb-4104-9558-242ec7a6f55c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ca286b-4207-4c9d-86ab-35535b1466c2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36afc85a-c51d-48d8-8029-59b4f2666da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8afb0f2-aa35-498d-bae4-103813cecf4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bcd4af0-3f53-4452-b235-7b6e4ffefeb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5de6e40a-fb7b-4042-a2e5-62bc0886a04c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ac4b2c-b0d7-4db9-bce8-41f5f45b5fff",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "807d2b50-f0bc-4656-903b-619f8b7565bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e23cea9b-16f6-4646-95f2-527d1ac3553a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07949f4a-d222-4f1b-86c8-4e5cab19370b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53a6179d-aa91-4836-94eb-2cb1cae6ba4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a0a7528-5230-4037-9f1a-586d55ecdf57",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49a2e38-e8c5-4f2d-aecc-1a645c39dc9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c06db8a3-70fd-4755-8416-63df4c33aa8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226cabb5-2550-4886-b945-1e8302abea01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31c884d9-54cf-4e20-8c1f-406adea5324d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9810c840-093f-41ad-bb30-f472c2b3475f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b001f947-c254-4db7-a333-d96e80d8933d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ee1ab11-42cc-458e-9262-35a8598d20cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e0a312-97bb-47af-abf0-7216cbb3c367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "745b4fc4-4dfd-422e-bf6c-5c618b25c892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52592401-7eec-417e-8c66-10fde1cd751c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8984d77c-635d-448b-b015-63d1c63b3590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb06a218-8134-4356-85fe-757fae0cb48b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2609a533-355e-4c6e-907e-cb7a69564398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18cfbcd8-e9d0-4a1a-b00b-91909cf8f5e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad9af3d-f9f7-42ca-9f6a-d393c00df680",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3a1a4e-1beb-436b-a6e1-ad009dfb9582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b52f1de-a074-4596-a2f1-e2c2a26e1c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5c700c-9927-44f2-82d7-2707cb764fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f461a1e3-7d9a-48bf-a4c4-2271da13937b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "92a4aeb1-62fd-4cc9-88d7-23500a5d566a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "132e5a97-c8ba-4f84-a614-fd16566bc1e2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67a953e-f89a-48a8-a925-1a486dd46002",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "df3e6b66-d24a-4313-b13e-c5d92370d17f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "294ac241-cb8f-42ee-b467-36840b3fdfb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "90968e21-136f-4bc1-acfe-dc69e5bea6e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68741d8b-7ea0-44ab-b62e-bb1255ed5d50",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7004ee-b237-4a0d-9200-0216e2567bac",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "49acd016-1caf-4d0f-b98a-02638dfd1c6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06bf167-c74b-45fe-8187-28fd5736c5b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e4eeba6-51bb-44fb-b78d-d0811de0fc7e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4f4d042-f7cb-4ced-9992-3abfe1f31936",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f3cc35c9-cf6d-431d-97fe-ff4239e1da10"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "233d386b-2aef-4eb4-95d3-681820d453bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "982b6a6b-0677-4f9e-9daf-7d9acfec16dd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "807507c0-beb3-4dc5-826f-d4d020ec9ff8",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d5b72676-707d-40c5-8783-0285a735b495"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "918a72c9-0f09-4fb1-ba33-abdfe36be496",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de741a0e-93ce-48c3-bbd3-a7ea09b25bad"
            }
          }
        ]
      },
      {
        "id": "b87789b9-f0ac-4531-88b4-dedac8360c65",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0999d2ee-c770-43ab-87c8-d14e8b3050b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ee7b9cc8-6556-4d81-b303-b04769fd423e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b89e12cd-79b0-4e19-bfc2-2dc88a3337b9",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6286249e-3804-43dd-9dd9-9572d3d3a70c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5253918-e41f-4bc2-91ec-88fb94c20f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84bdd6fa-8c61-4985-b5c5-1d493394b1b0",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de303e35-25ab-4bf0-b3b0-67e2eba46fac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83235d6c-10cf-4e40-b5a4-f076b22e57da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d81e87-e262-41b2-a749-624c457c4d9f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "333c2bb5-3ce2-425c-b567-7a9278811d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f8c3fc7-581c-4a65-a6ec-f45678c3e126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e46846fd-6e6f-4dd3-97f0-cb2a7bfd34a7",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff92818-2076-49a2-8bcf-1bd68524e72d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9049671a-7f15-4c36-8381-1c26ac3153fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff62612-24e5-40b5-8299-ab51730e9da3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c808d26-d4cf-44f4-833c-c6d1e2d9c183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7259c93d-a21c-41e2-9866-8a71942b3625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37127a71-de28-4891-a74d-e7e9642f32da",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e10eb0-7b60-4406-9363-f532160afe8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c483da85-309e-453c-96d0-2e9f26202cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f9c54e-3bc6-4257-9819-68348265a8a9",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c04d3cf-9045-4c05-bfba-e9d1d242fefa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e1354d-1408-4192-b84e-5694139822d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a693ec5b-bdf3-438f-a3bf-f92808fd0f23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6261609-007b-4378-b734-41410e8c65f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114a1290-6878-489b-8a36-d756e90fdb84",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d2d285-20f0-465c-a295-877002a4a018",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e275ae11-521f-47ac-8602-e010dd8e084d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88f041e-5dd6-4156-9da4-a7175ce5094c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f82aba22-6ec5-46ad-bbc2-862904e310c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba14103-a4d2-42e6-be2a-76d3489eab6c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "096b0404-8176-421b-90da-ad768e722292",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9718d8d6-994f-4f82-af48-ed595de6ab40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3f713f-16ff-4c52-93a7-a08eeb7eff67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08c2f167-388e-452b-80ab-651dbc1fb851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e37d3b-26fa-44cf-9c7c-fb6fca659e14",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ecc06b-c259-457a-ad83-9c1736841d82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c11d6847-a282-4da9-8657-02a52f169689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "700b3b5f-ea0b-4935-bb04-aac8392cb253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d073993c-33aa-4755-ae1f-13e6217a5252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd111704-79f2-440e-95cd-0de82d01ba6c",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14bbd22c-0644-4593-9b8c-432652ea687d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7efe9243-706b-4bfa-af84-fae07ab6e95d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0588ca-e02d-405c-be5b-b13d06f278dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "552a7746-c60e-4c0e-a3af-6feed9c7c28e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "638a673b-6d1b-4581-91bb-4feb4017c005",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d50096-17d5-40a5-a257-d29bf789a7f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df1ebc79-8c0d-4b22-8a22-51e7bb9b6a2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db88b49-eff6-4bf2-b445-0c5d2208a8e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6108f94-a817-4298-bba6-1422f23fe1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b82a3634-f5bb-4eff-a2c8-8e8f8fc2bf29",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7442a8c-41ac-4982-8f93-3217af57efe5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b7e6ad0-7cc9-4451-b1af-ce1104ca7fac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e73914-dd1e-48e4-82a9-094814283274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24e007e5-078e-47c8-8d39-55edb6222e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "293d9d42-437a-401d-bc9e-f50b3d9e6970",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96856a26-ee53-412f-9537-f27f2634fad6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "680c8bbe-0641-4bc0-958a-a13825459da4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adde0b19-cd21-4b80-a776-fc54628e2d98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac4e8573-5e89-4e25-af5b-59d573ae3f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0f9541-eeb9-4219-942c-244d25331d8b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995e535b-cfe3-4116-b709-72bc7581baf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1e32a6f-6828-4002-bef3-b175021e660a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "738ced46-6bad-4895-93e9-2a7311d0e875",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24a0c2f1-d649-447c-80bb-27b63ed77bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cff7e4d-056a-4a78-a66d-c85411db7446",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de21177-3700-4c37-9f57-f7d1b7b84645",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14f241f8-4eee-43cb-86a1-0285e0764a33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3933f0ec-907d-4618-bbe8-4bf6e18b522e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b770a7c-f1e5-40b3-9053-233049296ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aad1c76-a75f-42a9-af1a-f88ac4f1a36a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c771a3c-795e-4f58-97cd-5303a05ae7c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2e1ebc8-b44e-4df9-92d8-73a16709b280"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "606a8aba-9709-4f2d-9e7b-bb03f4c9674d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9eafab1-2b6c-44b0-acd2-aeb747f327df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb347fe-b5f2-4418-aad6-19e6fe3915d4",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03709f87-2a6b-47a4-b113-f0406bc580bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1f44d2d-a798-44aa-a5ec-9a92b08baea1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6104e3e-16fb-45b4-bbc9-4c9986a9c56b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "193d0d44-36d2-41b5-8b04-66c044166477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38634238-33be-432f-9700-e90c53ab8d4a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da49ef3-5fcf-4355-bc5a-7ce67e3c65f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6221783a-9452-4de8-8cb7-f1ed84edd6c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f0eb994-1f06-4614-bfb1-b811a170332b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b7f856d-c5bd-47bd-8d4e-ab97b6cd3b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd72bc42-f4dc-43b6-8858-a301cd137fc2",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a779fc4-db19-4973-8943-2606e4665851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e2ecdbe-5dc1-43fa-8fbe-e97a60650460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2fb077-3601-48b1-b0bd-dc04f4ce8d45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6042028-f51d-4169-95c5-167f22fecb23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b763083-087c-478c-af07-181e8b866b83",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ebf552-3bd9-4f0e-b240-d4c1e0cc58d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1fced91-5285-441f-8e78-25663edb1466"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda7d704-bb35-467a-bbc3-f11326dc12d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29c1b1c0-ee15-4eab-8733-43f562584d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5302d171-51f2-4863-9a5e-b259f5e509c2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d333154-fe9a-4223-95bc-8786c11d9594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "259b75a5-2dfe-4318-bce1-0d8df1ccc843"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17376c69-da98-4b2b-97c7-26f86ee20b3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2e98d67-63b3-416e-923d-927abfd65d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67675e06-a102-4271-9aff-b4beb837d436",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8533545-f885-4ab2-b5a8-d5cc0a58ef8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83ad898f-18b7-450e-a890-ddbc462a0d18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6ad1e6-415e-47f7-846f-c9fc5bc41776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93edc6ef-ba63-4347-af4c-f71b27c6e29f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa37f74-4eb2-4192-b173-ee90a79aa688",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "020f7276-2e92-4bf0-a776-399f47f15286",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7b7b524-47b5-42ed-b25e-cb3d118edce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e06111-31b7-43a2-b9c7-e2951df594a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0b06916-a68d-45cf-9f73-b18f16d85131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc42fbf9-c6e1-42d3-a608-1ced6d27b768",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf92140-a761-42f2-990d-bb9abc4775ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50419b2f-d004-4d61-a8fd-84af507bbda2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ed7cd0-1cd7-4a32-a8f3-99e46bca2944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c8e5e83-cc38-47f1-b96b-c2dc711557bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b44397a-1e4f-40f0-87dd-dd6e9237f2a5",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27788ced-539f-4b5b-9a56-ce6326211210",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53c71ac8-c340-458c-aca4-b5efce722e5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e0a9cc3-91de-4d72-8336-179a6264ad71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4f8f2e0-37be-4921-be02-a7663a0bda0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d28c5dd1-d211-4631-b1b6-57452ffde265",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb505da-e4fb-4575-b2b7-455bf8519f51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ce999b0-5330-4c46-8e41-d217cb7f80af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3e314e-3b71-41f2-94a3-4eb80d7716b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb9a5442-f98b-49a2-ae7c-b57de46e6462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ed806d-132b-41c4-8d8e-f726e878f83b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6877c021-4a28-499b-953d-0740ccccde19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8435d34-c7d1-44ca-9ac3-aabfc86a4b54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4a5cd1-adc9-4a05-b1e5-0b4aa956f031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b88b990c-6613-4d49-9341-a4109098d8d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b313b71-c901-45cc-b868-98d1b1ed641a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad3c0af-4b49-411e-89a0-08e8a8ae8a12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d0a3e20-b66a-47f7-8393-9aec783789eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4489a6ca-5ad5-4e05-8807-c2fce28d3e51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c504d7-afc7-41a2-95b0-3afdc00b0b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a150d52-cae0-402d-a4e6-51dac2e35ef6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3cad90-1340-475a-a14b-8085fbe554b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81a84c59-8629-46f4-bac7-e83a990b0b11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23108d24-d8b0-461e-9bbe-d477a4932eb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43b83ccc-3138-4cec-b99e-fdfdb7715742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73682f2a-09e1-4ac3-b009-d962792f8caa",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f5d76d2-b65e-46dc-ad6c-84da2fd52926",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82ec7e47-489d-40b3-aa4f-f5b81a8722fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb32729-d2e3-485d-a5a4-eae64e52db6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1355efb2-0e5c-4c58-88e4-cb47db3cf9b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02da6a7-fd74-408d-814f-b76c446203d1",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6efe9a-24ff-45c3-aeb9-f8e9fee289b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1072a5ba-d2d8-45d6-88a0-d5aabe4c36c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5b9723-c77e-4a40-897d-a2e3fd0a79eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8105c666-d1b4-491c-9655-db172bddd47e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b1821d-20a0-474f-ab13-2f67d9c29cdb",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d576a730-5966-4dfc-8497-5b2cb0dc23d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78ebf23a-5984-45d3-bae4-36d0c9c18401"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d27c502-b052-40aa-ac81-cbb72e8f4120",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24481708-c497-493b-b2b6-4ce725a76059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c764874-23db-4447-9b84-d9b7205859cf",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fc424b5-f9ad-4356-942b-d06ad18de0a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "779d1eb6-905c-4906-a9eb-a9cc099eb4e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fcee18a-0735-41a3-b98a-c9b487a972e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd080596-0c7c-42c0-895b-17a9fe3d8465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "181fe320-bad4-41f1-8898-3959f768f8aa",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b9ba39-0202-4a0c-bb01-e6711b49efd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b15331-2f9d-4241-9130-d28ca7ed7dfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3065363f-e492-45a2-ad7f-ddb969310a23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf95ba6d-ed98-43e7-a1de-6289b1459d4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce187ac-a7ff-4368-a710-e99b269c8a46",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa47eae9-6fe1-4a7c-8ca1-407dc39fd0b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a88c5b7c-16d2-4cbc-a345-d99f99afcad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a9a667-de42-41c9-939d-072b783015a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "001e3e58-701e-43c5-bfa9-46088d6ac059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f8156f-a538-41c6-87e5-709f2b99662f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71cb3ed4-9758-417d-b75f-3a30050116c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49e8574a-a425-469b-9b81-c8a14fd5477a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebbbed44-4068-4448-b013-11eaf4bb8e72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2537f0e0-d180-4dcb-8d43-0adb6aa106e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393392a0-52a6-4bb0-8447-0b2be2ebc3a8",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc132b8-6c15-4792-9c3b-540f703266a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62c7a04a-67b8-4beb-bb51-0aacb3431bcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84ef880-8852-4c2a-ac31-3c30d36a16d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "841b2c74-abfd-471a-954d-1d36cb188749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94409e8d-da69-4268-9fa9-44303f519738",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b05b95b8-70f1-4dc5-bb38-fa406f414b46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "896798a6-0b76-4a39-8049-dcd5610ac578"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afc054e-e0fd-4f7a-bbd2-f9bee6db11e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a36ed403-16cd-423c-b9b8-b4faecc4c7da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09cb0163-43ca-4a63-9480-aa61c0df9ff0",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6bf78a9-dd2e-463c-84bb-008f4ad809c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aac3026-387a-4e01-97e3-f586cdf53c74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5e65e3-affd-47a8-a632-990b406dee07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77a575c8-6bcf-47f2-9bba-891e2feda768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "908a94e7-aa67-4be4-aab5-ec5593616945",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38379623-b6a8-4546-80ed-7f1e40f6ec05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "505e71ca-5f16-48bc-9513-8990595817b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23dd158-bfb0-4f5e-8abb-b12fe0b0f4f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "890d3a94-666a-446d-b4af-74745f3f07a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932abba5-41b6-493c-8fd4-13acec8573f3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e208ed8-d9ad-4a7a-bc9f-629fb1158e60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8448bb10-1747-4100-9c1c-4f3ed8d03a5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1150d1-1e64-41a5-b5ad-e07cc4797ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43225078-4408-445d-8f34-52ebb65b4230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec3c0ed-78e8-41f9-be54-b9e710f1260b",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e1149ab-b054-4a8d-91d6-c9bd08ed18bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08c95b8a-79c5-4651-8482-63226f45a2d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "709a3642-9d08-417b-8a19-8728a2783ff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a0c5b57-e48b-4cf7-a35c-c40641b56e46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207ea82b-0446-4cda-8c25-15f56c880dc2",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e14f83c2-86c6-4e66-ae18-270f958bdd2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1652f295-7113-4f65-9f01-f281d80ccf7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2088c6-0403-4ceb-82c8-0c35d08d8f61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a061e5f-71c5-466e-be2b-8a24c4591b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8eb79ec-d27f-4f3e-8fcf-9a66cf929587",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c51cf2-0fac-4e96-a6ae-a0cbd40be092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ca037bf-1330-48e5-89cd-da87788ef1ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb59706b-cdd3-4879-9a69-98cafb9fe86b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b4fc35c-459d-40bf-8dfe-97c6c9d2622f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b39ecf7-0c43-42fc-b153-bea5440c7b0e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf04b2fe-76c3-458d-adc2-96cef35c62a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120a73c3-429f-4250-8e65-25d07a208363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "352d4c02-db16-4516-b535-56b20b82b222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1187a4e2-7d83-4a01-8593-5de7cde05d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df77b247-3805-4d34-967e-dc2bc4fc3b66",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5159a3c5-d452-42cc-8362-25ef0934d3d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a78ee8c-5bc6-4f6d-a637-f38032b15362"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45605f17-de62-4dff-b0fb-f8d511135b99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5312375f-dbac-48be-8522-52c1d4b5558a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61b83d9e-aa07-4f23-826d-9cff51dcffd8",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f8efe2-623c-432d-87ba-c296954f11e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec0b7a1c-5439-4104-b00b-9b497ed5aa1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada4861d-7dfe-4313-8608-cee6d67093fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0796f12d-598d-4ec6-8250-ecc5114e8e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0be9609-27a7-4533-a80e-40952f7e65c5",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7039b6a-627b-4ab0-8b79-6afa8f1d36d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b87089f-81a0-438f-a11c-c15b381c3e89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a2b9452-e96b-4c91-ba98-6e4ba7e5caa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dd64a85-b7d2-45d8-a4ce-a91dbfea606d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2efb90e0-82f2-4faa-af73-e79382cedaf2",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41809b5-08c8-4208-9f07-8c55365b5cb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75fe8b73-18cb-4647-9df2-ba85c9ae2770"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88c3eed-2258-4030-b7e0-bed433906ac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa168dc1-442b-4546-9f2c-7d564e75818a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53541b3e-9f2f-45cb-9dc7-e64a88874dc7",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f2df62e-47e1-46ba-b7c2-086bd5261ac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fde6c838-0db9-4ac0-975c-69d44c020f49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e9cd4cf-f801-4c09-8fa6-46196ccc62fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "974ef1ec-0538-4018-a73f-5711cd73a66e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a248d6a-1623-43ed-99bb-a054810cc2d7",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a07b0e73-7a7c-4420-8323-3b7cc399511b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8064447e-6e84-42a3-809b-2b33c4bc7953"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15ad2d6-506a-4780-9d52-b777b13237f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c40fa79-16d4-45a9-b9fc-23d1c938db3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4cd687-82b0-4ec7-94d4-b6a381f55c53",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca32f043-b53d-4815-9ca9-3f9b8406e16b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f698eead-83de-48e7-b379-7dd65751c1a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b2faae-f02c-4d2e-b41c-972410010711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec0d0bcb-eb99-4a1e-a38f-72d5a1e17adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e96b43a5-31a0-4944-bcb2-4fd2bf1a45a2",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45d2a07-9593-4b3f-b4fc-82affd2bd4b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "127b2338-a5b8-407b-94a3-48101bb792a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb585f78-b815-40d3-a64e-a2e27f945e71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4ff9665-f57d-4c49-aa13-ab767075f753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "421a8081-1b64-4f37-b6f6-639cfa68a685",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa68271-14c2-41c7-aa3a-0dfc46fcb53d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecf881e7-5fed-434c-91a2-5207d6ae16b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce456ee6-9872-415f-9d28-c2dfcf0ccd59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d882bbe-15da-4496-8a73-ab2ef5d102ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c68907-1566-4171-b5fe-5a3a03d36426",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2251d83-eb46-4d73-aab4-bef2c09a89a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "748137e2-a649-4b6b-84b0-7ea45442423c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de0e13e3-66ba-456c-bd75-621f8fc0045e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f79289be-bc1c-4ca0-bcf7-5125e513c59d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f22104f2-418f-4f36-95a4-5f89a7990e3a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50cf5a4b-83e5-4e5a-a2d3-e001327cd84b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d2b0041-7370-459f-b3c7-ece511f12ab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6329585-0e76-4bbe-9cc1-306bc96aedf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd4496c7-f510-4627-ab54-af3d7899e0ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea08bae-adc0-42ba-aa1a-ec75bb2bad42",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f1170ed-c632-4b4d-bf37-48bb27fc320f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8227dfa1-1a89-4fc1-b7f1-53f6f62c20b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e467ed9-d2e8-4e58-b4e9-7ea253b8be31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17f03d6d-e6cd-4c0d-8c71-9c626460a57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfddcee6-f376-4491-93dc-3e52ce447bff",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a859f2-6a21-4285-a01e-ade73ae895ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b1f6f4c-668c-449c-8c75-e1df8ec4f6ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b1675f-24a3-4848-90d6-05e0b895aa4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a70d15-c0e8-44da-896c-031fa1f2c248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebff92a3-773f-47f2-921a-2f9e12e668e1",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d34b13-697a-4e83-ae14-b619977f1220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89b158c0-7909-4456-b847-4d20015598b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db82f3df-60f2-4fa6-aa75-e25e011926c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e213e0b-0bfa-4dee-86b2-8c86a84a2a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3050613-5a96-4fe0-a3e0-0669cf1d1b49",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887e962c-d780-4b72-a856-358c64931258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52047c5b-ee65-4e43-893f-d5d6601f234a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77a21cb-0867-404a-8ff6-50d5c9ca619b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bec23c8a-73b4-4090-b718-b31e341f1b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2464051e-4092-46fb-8aba-613538f4fac5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d6ec94-c57d-4d9b-afd7-9a9543cc5841",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb32d334-1b2f-48e1-9386-3237531d699e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6de432d-975a-4761-a322-d6359aa69589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fd4e3dd-a61b-4af5-b6cf-8b11bd05f94d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e48a4b0c-fbcd-4fd1-b0fe-0b75f4d26dde",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c37c7593-3f44-4f8a-8033-0137219c8df0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe55ff4a-e831-41aa-ab08-35e4368e5032"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04440aa-8263-4023-878b-156de3084f5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69032be0-e495-4545-9b35-7c51acf9d4fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec270d1-2426-4546-90d9-193573e74254",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ff2981-5fdc-4aa9-bdc3-f9ee674b0415",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fdf2e99-e8b7-4ddc-890d-e6356f76cd2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c5b187-1457-4ba1-a2fe-7a5f716142e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bfed399-9297-49e5-9ade-7eedbfbfa72d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b819285c-f14b-4b90-866c-e549597d9607",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73980bad-3f7d-4382-a280-66fd62c03a5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92b0de7e-9408-4200-a00b-57a6821ca60f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba8b913-e26f-4920-9d54-b37c76cbc395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b0aa1d0-2b78-4523-acde-6df5e83b0b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af217abb-8ed1-4a6b-99c9-4db9d137a5d3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c8dec5-33db-4d7e-a6d3-e0486c1b1619",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "985b7364-968d-4d62-8f36-d07a9817d322"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d6dbfc-ca36-47ce-8430-2fec30b8da41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe095aa-1710-422d-9689-b882ae400222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "907aaf8b-42a6-4a25-a7df-0da5d8f07aea",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6606fcc8-b4e5-46a6-af07-fd737814ecc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77360be9-3df4-4b78-a39a-50693fc73f85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "196e555e-705a-4981-a31c-819258007002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7a01882-4046-46bc-83e7-f5b113bafc0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74989df2-7a90-4aec-977f-eebbb72d6a3d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e503550-90b5-4595-ada3-371b3c85de72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0913706c-583e-4072-a3be-528b1d636f65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab3fe12-bb84-4c82-9d04-a86f72f740b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b660af3d-c5e1-473a-92d9-930dc1e01720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183ef95b-090c-4b4e-a604-7515220c5ec3",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2337635f-dc2a-4e0b-972b-a22da050d091",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61afdfdb-1086-4c39-b012-b63e33cc050d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d40604a-b773-499d-817d-e6814ae34fc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "812421bb-2014-4b17-89a9-3b196d697a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e57130a-1fee-49a1-ae76-5c85caa3f45f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bdb7bcb-95a0-4902-99d0-2edc9acaaef7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04b6586c-1670-46cb-9e2d-bea7a38dae4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f2adb4-9e62-48a1-b260-f04496da95f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f6744d8-21ea-40b7-8712-eef519e197d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b99b9f-0555-4e7d-9d56-85ec2f4264c4",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a86b85f8-b749-42f2-abce-df333c64e3f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72f64b45-4bf6-4774-900f-996c77194749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8ab624-68e5-4fbe-a8e5-e7c7690d5955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb4c29d-2528-4c2c-aa26-3c43381f9e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3ae2b3-f04f-4e4f-9394-9a8748af2516",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f6d6cc4-02e3-4753-8898-a9cccb7bd2dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3336a609-134a-4262-aa8f-e5de52977ac8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faaad3e4-b148-49f5-b547-54989d9fc601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a163d81-4072-4082-89f4-fe94cbc5f4e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3cb0ff4-71e5-49b4-bf10-000a3b828cf2",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c83ded6-e7b1-4634-b8af-f6306a591b05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "feb2d61c-0540-4f80-9977-872b10e2cef7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8387fef-2dad-412f-b820-d8a431f06078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4be0405-2f2d-42fa-bab3-62f3178c3e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27f28fe0-e183-47bb-8043-379855b6dd4e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be7956a-64f7-4ab5-98bf-951a0d962741",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f66e066-57ce-4802-b541-7b19a5c3d324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3634f915-9c8b-4946-9e1d-79d684590338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "830581bb-2954-47ac-bbed-b4471198a8c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f60c32aa-cdae-4d9d-b3f5-30112dc10a55",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5f950f5-1c82-4b97-b50a-00208a4897bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "579209d4-3523-4de7-a15c-412bc980c2de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b066116e-dcf3-4b73-a70a-08c7bfded739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37cedc6c-47d9-4d52-aeea-b4538d5cbb3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51c2e34-6732-4cc4-ab12-45e5565936b5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676b38c4-4265-4c41-9cac-df4585b7b8d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2b9b778-e948-4f18-b6a3-147eddd09105"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d375be1-6c1f-434c-bed8-a63f67605254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a50dad8e-cdb4-4602-a8bb-8d7d3e3e9934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ebe516-27a0-45e7-8e41-5ce60c7eb585",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "022c017a-c87b-4d4f-b462-8f23390a7fc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7286ab7f-3dc6-4c5b-af61-2e879e6d8d2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "773e1f25-533a-49a2-a36e-c7bb6b0895e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7ce8f61-dba1-4946-b24a-a5313073cc56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f3008f-45a4-4ecb-8db9-da3f091757b4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3701c0-4a2a-4df4-a97a-9541b5d87008",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "733d40d5-d890-4c6b-a1a0-3dcc8721f741"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3a4008-934d-4ea4-816c-a1d798b0862d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30b19905-43cf-479f-be51-aa64452e94bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7462fd3d-8f4d-4eec-b3d8-7e974a2583d9",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08426ed7-8d04-4376-88ff-61390fb692cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ae009d3-3a6e-4dbe-8434-56450eba8019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "082360d8-d461-4dd1-af9c-137aa793186b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26b322ab-9f41-4515-8f08-3c178597b6ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e6f0d6-2bdf-4f9d-abad-b483f2e8b3ca",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4890145-f596-4e2d-b666-09f9faea91f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "081c057a-ae07-4f56-bbbf-cbffcfa067a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4628b0a-3fe3-4282-b551-973612568a5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d735fd1c-c72a-41f2-8043-4172888fc673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09605e74-0c3a-444c-8d19-704b2b4ac400",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b05cb6b-6984-483b-b682-f0bc4b60200d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f82d2df-e55b-40bc-a901-b215ba2499be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6cba40-4ea5-49ac-b0a1-80a4f81d1ee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c5b2690-714c-4512-adea-32d8e803e328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6fbafc2-7153-4247-aa08-6254c43dc0cb",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b18df3-915f-444f-9c7e-7d1b567f936f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "511c391b-713c-4505-a537-872e4ddc4a54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b250822a-2b6b-4b91-b720-1250793e73e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89531677-2c2f-4c82-80a4-b9bdf2d57d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "782d31cf-9a62-478f-bf9a-4f90ee351a03",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d2692e-9bd1-4c96-b331-04ef4511e14b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d740354-6fd4-44e6-b4ef-e84fc2c123c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b345f420-aaa6-4689-88f7-9b7f754f00b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67c4407f-3264-450f-8d6f-1a2ab751c58f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5c3835-c234-4f8b-8a9e-cda57c346a12",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c680db69-8343-40e3-9bb0-f84da517579a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "024ea649-e18d-4be8-9e92-64fb9c1a465b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c131315-109a-4a98-843e-0da294aaba13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0764743c-52bb-4179-97be-fe5501d1245b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04be98b0-c5e7-46cd-8b51-4847804f1067",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "710a1ea6-d587-4902-b906-6302beb7ab5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b202dd6f-b92f-42ec-88a1-9371cd9ec809"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "effd5f0f-c3e1-4b35-ad2f-d30c6f045db3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf4ca12e-ddff-421c-af17-895b6d594775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d70de128-650d-4a05-8d19-f5b452d71b50",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f1ce34-9033-4155-941a-1b9216e029cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c92a911-c511-4aa7-bde9-2d9b2557d400"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72740777-886f-4988-85e3-aa299f05e01e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "486cc6a9-f444-4a0c-8642-5243c112c378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c445cb8-0fc3-446b-a279-f83eb6329da4",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae257ec-9ba5-4d1e-a316-9e0dea6df7b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8021460d-65b3-46bf-ade1-69ab94002d00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "590a39ae-a5e0-46e6-9bf1-3a97e5a99951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43bd333a-475c-45bb-bbea-573463992edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e26d811a-9b80-4097-86f1-502cfbe61bac",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672e529c-b85e-4833-848b-f131a44bdc9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6163030e-fbd9-4abb-9488-044443a010e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10cba78e-6419-46e6-a991-be4c63fad739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5239ac96-dc7e-480f-9ae5-c1a52de850d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad611a1-5e4a-431e-a68f-fb0cacd44d23",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f85271-e8e5-4007-83cf-9ec98340bf32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e72090c7-97fa-44be-b861-1e7f2d5ee690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31cd523-9a95-4be9-80a4-0a30103d9166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dba89b1a-41aa-4910-b1ac-5f80cd89cb8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd62e62e-e9ec-4493-9bce-c0c29d2f2dfd",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddec62b8-68eb-4058-9bca-2f4116169492",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d23304d-78c5-413c-9bbc-e295dab65c3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "449313d8-1351-4406-b8ca-8d2180091774",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e44bc7d7-8b49-47bb-94fb-7eba19aa9a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95af72ca-2b01-4030-a44a-ec89f299f8ad",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be40154f-3019-43d5-848c-22af2c279daf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7961c9ec-2a0c-4b17-806a-976699bbdb74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a971f857-8585-4bb8-99b6-52e517779d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3397605-c31a-497b-ae5c-ee280182312a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ec488e-7fad-49b2-b09e-d16c5d7cad55",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901fe169-ccee-4ff7-9edb-8e4d65124a32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "055172cb-8bef-4c25-99e8-6e996b4fb99f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12621ec2-ee19-4235-b504-8ffb11fafda5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e4ce7e1-c64d-45de-840a-d1ab54a0a47f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d60e816f-85b7-406d-8262-b1537110c3c9",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e6ce1e-a206-463c-a2d0-340ddc30f04d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5f093e9-9528-45fe-91f7-545a724aee10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3365feaa-8d0e-4606-b991-1f304be1f17d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c9ca9bc-9d48-4633-8db2-88ef6d7668d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adf84c5c-a5d8-459a-b4db-7cd9af87a1bc",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa8756f-a02a-4bfc-8eb1-b92a02d007c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e360aa3-9515-41c0-b98d-31954d4f8bc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea3cd38-b45e-40fd-8195-8792d8fbc1fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a6e6b8b-e312-4a12-a5e1-7486b10ade52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6d1394-1e4c-4b66-92b3-8502c6987ec4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3360e8f-7973-484b-a7ff-2e2d05f82c49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4964f027-77a2-4f4d-88fb-ba06736dbe66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c726a8-86f2-415a-895a-8a7013ee5bb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e8efc07-b2b9-4737-b8b1-06bf7eec5eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09950dad-cc4f-4c0b-bc52-2ed1e0cdeb8b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657c7477-80e3-425f-915d-be8b9352fabe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ed271cd-8236-4849-9ac5-69735a0b4000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e657d6-2ae8-4abc-8678-b67af06841a6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45bd36eb-9df7-4d9d-9617-f5a933c6af11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80893e74-0bdf-408a-9a36-afe1338669f2",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1423182c-3652-48a0-a0e0-07b9e2165ba1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce5fd1d9-f0c5-46bb-b450-151d08f16507"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f235fee7-d878-4d16-b524-73984aefd3c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a05efae6-4609-4d1d-9d62-355a9a4d76fc"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb013c21-8bc1-49c7-9971-061d52ea365e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c511963c-003f-4ff2-963a-e4e7fd012a9f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc155933-fdae-4d0c-b0f3-c8e10f66f07d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f448582b-5aeb-41b9-a68a-67e2ba50ad4f"
                    }
                  }
                ]
              },
              {
                "id": "3a8f4efa-097b-47a7-989a-26073978e4e0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2cb859f3-c023-4ecb-b76f-50539d5d8bf5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "245df7b9-f01e-46f8-9343-d7d08723a352",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "bc886997-d968-4808-9828-e24c0a3a49d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ca7059-a4ee-4e0f-9854-9d22404fb17a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ddba4fb-cd7d-4cf4-a611-3237ee2eb61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d26fe98-5e3d-4383-bdf7-e28ecce35363",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b2b9eb-3a1a-4aea-b9e0-814ca756171d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "52ec5dd6-543d-41f3-b7a7-2201aa2cf14b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbfc24a3-03e8-4cb9-803b-268a2d8f8dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7380721-b7d5-4b48-b864-26edd56fd23c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b0ca40d-6db6-4e0e-bedd-b2410469aba5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7da29ae-0dd1-4c5a-a969-ea62395c58ae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec5a1193-6f1b-4e92-997a-6a83fae01e86",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ce0ced3-66f9-41f2-a899-1b2967081475"
                    }
                  }
                ]
              },
              {
                "id": "a1620e76-e48d-4c33-8df5-1dc97350b31c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "7760fdba-35e4-4f40-b932-785c5756a5ca",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d19fb0-48fa-4e05-9040-53d5a9d0032d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6e98a900-30d8-420a-ad03-34d8ad1ef765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36040bb2-ab5b-4aad-85f2-619eb7aba02b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca1cb27f-74e8-431a-91a0-b149bd3f4065"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "75d02589-57b0-4361-ae8a-6922e2bde4e4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "220abdd6-1008-4dfb-9711-feb40e8ca58d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "14ac173d-eeba-41c1-bd31-d3e46d6a0b8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c088d353-de5d-404f-8add-923a8e278015"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f254500f-fc18-4ce5-abcb-b5f96c38f14a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39265f67-0d2a-4a03-83ee-33020fcb97f3"
                    }
                  }
                ]
              },
              {
                "id": "f9c4e9b9-cd81-4443-849e-7068d3db02be",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "888ccc9b-007f-4755-81e1-ced40907d04a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "87e0d0f6-b661-4b8a-b722-f3e54bb4c5f4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a48b394e-0aba-47c4-bb05-d2899d9f8dd6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1cb5fd8-b769-410f-a56e-add3509f3cf8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "701afdf7-8ef5-4269-9b69-56f09860946e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0d6093d2-78d5-4f10-806b-ebfae7dee47a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "07c0735f-526d-476c-b125-6941a529ef62",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c77e340f-aa48-4521-a837-ef48abffe0a6"
            }
          }
        ]
      },
      {
        "id": "c3390b82-039d-4b7a-8ea4-2a34cfe5bbec",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c8a361f4-9174-4df3-98e1-08e789161495",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7d6c4022-2481-4f09-aa17-bde70c35f92d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f07f3b75-a7f7-461b-9fba-dd8748cbd3df",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7b7ead-a0db-4987-951b-49e23db223c4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b70ee358-7c04-4782-b2c0-3b84f2f2ae9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ff32a5-3b8c-44de-9a75-8dc60b3c95d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2e6a5d35-20ae-4539-b872-d8a95f17b9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6503dbea-bbde-43f8-9eba-28885437ba3c",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d63d07-1a81-4e4e-b87f-8f26e8bd8266",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cec2ba27-b682-42cf-8e1f-1003fef07b5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0854d8-64de-4d3f-aa98-d38eda1d3671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8cdb0dd0-149d-4dd9-a2fa-62c602d27a9b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48027371-43d9-4f91-987e-66e841bde63f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "346ba7db-a33e-4e77-bf01-83ebd9093705"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf36de32-52fd-444f-a796-9121d301d8f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4276dc55-74ce-47ef-8b8d-05aa64044c99"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20fd7508-af73-4bcc-9373-67db4a835797",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4b466803-5dd6-4e12-9442-f72472b08e22"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a1ee8831-decc-43b5-9b9c-192bdd8ed6b2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1e00b132-80d3-4b2a-a5b7-6e0b4e2a4019"
            }
          }
        ]
      },
      {
        "id": "bdb12963-5c00-4dd7-8abb-f414157bb646",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c6a97b73-9f58-48a8-a842-c2cb6910c974",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f8f0c5bb-8663-49cd-b631-29d4913ab045",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1b87b9e5-99e3-4e2f-8e39-e0af0c7ae05f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8cd71a-7290-4c2f-9530-22ffdbf938bc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac0fbc6d-bf43-438b-9013-ed3e5fa31302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4220c7bd-9a07-4917-a1db-7e21f791ad41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f7604c4-0117-49da-9891-2cfb51b02e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c66cbcd-d86b-48f0-ac57-d4109fa348a4",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a656e6-bcbf-45e9-b3bf-367f290c9216",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "317aebc2-79c7-4abd-8476-85fd30a2ab62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d59efc-c6a6-4997-bcaf-e38fbd64d8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dcc10f5e-055e-4ef5-8f76-61b2c264f032"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "269bf718-9b04-4105-aa07-6cf5645b9a1f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86cba171-578a-426c-85e3-06367762cf27"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c8ee2f5-0414-4971-9a89-ec96a73ea45c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08687296-4dcf-4888-9a74-e72d51faf721"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "484b83f8-b390-4a43-bf53-9b771b2ef330",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "67585c98-d580-48f4-b7f5-a11aa492c984"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2468a70c-3ec0-409e-8be3-f970320ab897",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c0b8d2b0-8d88-4e7a-a8ed-2e0074ae52f1"
            }
          }
        ]
      },
      {
        "id": "d50796be-2057-4c9d-8e14-a6d5426a19e6",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8ac5d332-18ce-484e-91e7-1ac829358e50",
            "name": "Negative Testing",
            "item": [
              {
                "id": "57cbe91a-dbcb-4466-832d-996f6156a6f5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ddc93ca3-af47-428f-bcb8-364c759fcc43",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a21aa6aa-53f0-4944-8a96-efd40b0190be",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "126bf207-f0cd-4d94-b6df-4bbb6e8030ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bbe5275-683b-4e19-98e4-472d5da73b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ffc5dc04-a98a-4909-ab37-6df56ed245f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c4aa890-894d-443d-b182-43cb73f6e6f8",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a07bb79-a64d-43eb-8282-21254d207889",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bf33938c-c865-4730-ad9a-beb0bed74084"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af562e1e-39d0-4277-b758-73f63dfb02e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ab4ce12-fbfe-4fae-9fe7-fd8a6ca9797b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6461c600-57d4-4cd3-a6dc-bbf78515ea2c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c72550fe-0ac6-443b-980a-b9a0a706a968"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "777b7d30-0075-4c31-8363-31e7e9b1e4de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5eb4d805-0487-438a-82e1-6e572232c4e7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "36ddcf2d-8485-462c-a3d7-a8bf2521a2ed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e8403a88-d344-47a9-aa52-53720d1fa0a3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1372704c-905b-4d17-86de-09c2d370606e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "583c1e63-44f5-47b6-a73d-6f61844db236"
            }
          }
        ]
      },
      {
        "id": "c1c92bce-ebd3-4aa5-afc8-2cdd5cd39fbf",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "347cb84a-5277-4ad1-9e90-753fb64dc8aa",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ad4322d1-4420-4344-b084-8c6f1dedaa36",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "77e059f7-68b1-4bd1-b655-dd9e4a08a3d8",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1905eea4-ffdd-419a-8b92-eee039e47f6e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0000406f-6002-4d87-af35-f9562e7b0068",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 306.61923076923085,
      "responseMin": 22,
      "responseMax": 5985,
      "responseSd": 802.300311373602,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1682037364729,
      "completed": 1682037455662
    },
    "executions": [
      {
        "id": "ce52d2f9-b658-4aa1-b1f1-52375a329a06",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7b3d8cdc-402b-468c-9ccd-60122401a38e",
          "httpRequestId": "3c86b880-25d1-4d79-9f56-c53248fb9346"
        },
        "item": {
          "id": "ce52d2f9-b658-4aa1-b1f1-52375a329a06",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "07aadf31-06f6-4210-98b4-81e63f1237ac",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 0
        }
      },
      {
        "id": "db1c8f65-a093-47c2-81c0-7c92a2befe13",
        "cursor": {
          "ref": "9a4c5eb4-a6ea-4515-a092-e63d8e2d8a66",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f299ff6f-d4ef-4a34-94a5-a49a8e0730ce"
        },
        "item": {
          "id": "db1c8f65-a093-47c2-81c0-7c92a2befe13",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "46dfe4ed-de80-4543-8b58-38ccbebb6a0b",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 0
        }
      },
      {
        "id": "9d53cdc5-5d64-4fdd-a282-2baad13ebfa1",
        "cursor": {
          "ref": "d8fc356d-3296-4e0d-85a7-052d66ede40a",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "aecfdc46-2cf3-4839-b615-4c25ace2a80d"
        },
        "item": {
          "id": "9d53cdc5-5d64-4fdd-a282-2baad13ebfa1",
          "name": "did_json"
        },
        "response": {
          "id": "ec20ea28-ffff-43a1-bd41-0436b486658d",
          "status": "OK",
          "code": 200,
          "responseTime": 530,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f3e7605-e3a3-4ba0-8394-15bbf0759168",
        "cursor": {
          "ref": "7abeedcb-1cbe-4a1f-8352-1c46f126fef4",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "05a51f36-a37a-45eb-9ec2-560704bcbf76"
        },
        "item": {
          "id": "1f3e7605-e3a3-4ba0-8394-15bbf0759168",
          "name": "did:invalid"
        },
        "response": {
          "id": "336d0d17-865b-4602-b08a-a2162bda4f39",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1049,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "1f3e7605-e3a3-4ba0-8394-15bbf0759168",
        "cursor": {
          "ref": "7abeedcb-1cbe-4a1f-8352-1c46f126fef4",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "05a51f36-a37a-45eb-9ec2-560704bcbf76"
        },
        "item": {
          "id": "1f3e7605-e3a3-4ba0-8394-15bbf0759168",
          "name": "did:invalid"
        },
        "response": {
          "id": "336d0d17-865b-4602-b08a-a2162bda4f39",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1049,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "bfee005f-7bd9-4b16-a7d5-42af4d95c27b",
        "cursor": {
          "ref": "6bada9f3-9f7b-4906-9b02-eb11d5d3696a",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "72e91adb-00ce-4999-91f7-b25b477733ca"
        },
        "item": {
          "id": "bfee005f-7bd9-4b16-a7d5-42af4d95c27b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "975eb72e-f231-4ee4-95f0-d078cfe0b485",
          "status": "Not Found",
          "code": 404,
          "responseTime": 68,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3e95adb-4c07-43c9-92a7-065c5d78cfba",
        "cursor": {
          "ref": "6950948f-97a8-48d6-933c-f79e2ec5922a",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "57d507b1-d115-437a-898d-36850b837b22"
        },
        "item": {
          "id": "e3e95adb-4c07-43c9-92a7-065c5d78cfba",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "359208e3-17a4-4328-abfe-8b1210fd2948",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eace9e16-458c-449f-81cf-86267170a4e2",
        "cursor": {
          "ref": "42256b0a-fc6c-4cf2-84db-bd224bb3c026",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b041e86c-d175-4486-a699-b709df9c9df9"
        },
        "item": {
          "id": "eace9e16-458c-449f-81cf-86267170a4e2",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8109a6e9-8a0f-40cd-921d-0a4cc75e91fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "ea709937-6121-4641-88e1-3047adde3249",
        "cursor": {
          "ref": "e8d2ef7f-636e-480f-8583-b448f2e3ac6c",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "96d5e17f-d9e7-41f1-8934-6e25db6a7d08"
        },
        "item": {
          "id": "ea709937-6121-4641-88e1-3047adde3249",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "e0ce65a6-8d40-4d89-80bd-231c3b65dd04",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "ea709937-6121-4641-88e1-3047adde3249",
        "cursor": {
          "ref": "e8d2ef7f-636e-480f-8583-b448f2e3ac6c",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "96d5e17f-d9e7-41f1-8934-6e25db6a7d08"
        },
        "item": {
          "id": "ea709937-6121-4641-88e1-3047adde3249",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "e0ce65a6-8d40-4d89-80bd-231c3b65dd04",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "5a47c9b7-1031-4e55-89d8-e73b72315945",
        "cursor": {
          "ref": "644180f1-051c-4c40-abad-078dcf014ede",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "df292692-0908-46e1-b589-b2602ece1eca"
        },
        "item": {
          "id": "5a47c9b7-1031-4e55-89d8-e73b72315945",
          "name": "identifiers"
        },
        "response": {
          "id": "7530d6d8-35fe-4725-9942-3c408fb13767",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8beb24-cc66-4def-ab6c-60c521fa3078",
        "cursor": {
          "ref": "f2785a94-659a-42c0-bb48-f1c03c2f7226",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4ff30fac-1444-4d18-99bf-b17eddd2b69e"
        },
        "item": {
          "id": "7f8beb24-cc66-4def-ab6c-60c521fa3078",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "80cca487-5f3c-4db1-97cb-33252f2d546e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8beb24-cc66-4def-ab6c-60c521fa3078",
        "cursor": {
          "ref": "f2785a94-659a-42c0-bb48-f1c03c2f7226",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4ff30fac-1444-4d18-99bf-b17eddd2b69e"
        },
        "item": {
          "id": "7f8beb24-cc66-4def-ab6c-60c521fa3078",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "80cca487-5f3c-4db1-97cb-33252f2d546e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d48c814-3cd7-49e9-bced-273d3895dfa6",
        "cursor": {
          "ref": "64ac2ee9-1272-4846-ba2b-ad7f4818dcf2",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c04de18d-7d1a-4dde-bcc2-35a5bd9bc615"
        },
        "item": {
          "id": "1d48c814-3cd7-49e9-bced-273d3895dfa6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "68366ead-1c09-4d9f-8b46-58db3ebfb06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9aa3067-22a6-47ba-b82f-1da66727a656",
        "cursor": {
          "ref": "8d818d12-23d5-4532-a053-05b8bafd9b9a",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "51b28e47-e139-4485-bd32-dde5f4696093"
        },
        "item": {
          "id": "d9aa3067-22a6-47ba-b82f-1da66727a656",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "dfecce5e-df63-4614-93d4-80c619454d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "597bf959-99f3-4950-a9fb-8b246d626da7",
        "cursor": {
          "ref": "fba946b6-0cf1-471c-aa83-9c19de369647",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3e22b6b7-09a1-481e-882e-5ed1def67522"
        },
        "item": {
          "id": "597bf959-99f3-4950-a9fb-8b246d626da7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "3058a23d-c050-494d-a6b9-3d22b3ee4ef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65a90598-7cfe-4b97-ac87-7213e5ed9ea7",
        "cursor": {
          "ref": "c174665f-dd6c-4504-8b6d-afe715a6db25",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c7c2fd87-3152-4af9-95ea-4e5d460eb6f5"
        },
        "item": {
          "id": "65a90598-7cfe-4b97-ac87-7213e5ed9ea7",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f0188b5d-aa3b-4428-b0bb-82a2017e83fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d542b2a3-82c5-4efd-86e8-85e3d461414d",
        "cursor": {
          "ref": "c6380e9d-f509-4841-82c7-4aeb0dbfd838",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2b2c14b7-3106-40fc-8a7d-b5d59366a846"
        },
        "item": {
          "id": "d542b2a3-82c5-4efd-86e8-85e3d461414d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "388f1bac-f54f-4445-8fd5-7d9f7a7a3551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8484ed-5767-4828-85ab-f5dd1a5dacaf",
        "cursor": {
          "ref": "ee15510e-bd27-4662-a85e-f4c5eb69524c",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c1f03821-ff84-4ff7-8fa9-123c22318672"
        },
        "item": {
          "id": "9c8484ed-5767-4828-85ab-f5dd1a5dacaf",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c24a7479-e74f-4d86-ab20-d49424601ec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120eb4aa-15c7-472c-8131-cdc18f7a7e10",
        "cursor": {
          "ref": "8f06a6fd-48d3-4485-94ce-f517b1f1cbc1",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5fcc525d-17b8-466b-84b2-8896995b7c26"
        },
        "item": {
          "id": "120eb4aa-15c7-472c-8131-cdc18f7a7e10",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "bd072299-b13c-48a6-a2eb-338186bf670e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5249bd-0943-4327-b01b-6630630701fb",
        "cursor": {
          "ref": "9a28d59a-8393-49a3-91dc-44ceaa5b7bb0",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9b42c1c1-5f9f-4743-8c38-d7fb1182c11e"
        },
        "item": {
          "id": "ad5249bd-0943-4327-b01b-6630630701fb",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5d159859-b2e8-4dd6-b978-e393c561f60f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 154,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c23d9dc-d6c3-4477-811f-b14eea50a364",
        "cursor": {
          "ref": "b30c06cb-c2a8-476a-bf00-9b4ec7134e5f",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7b809aee-d20d-4a7e-b994-1eda98bc0ff3"
        },
        "item": {
          "id": "3c23d9dc-d6c3-4477-811f-b14eea50a364",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4377506b-8a56-4d0f-b596-c692de88215b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bafdab5e-5993-4939-b025-2b1bb0614059",
        "cursor": {
          "ref": "3a0c816b-e184-425c-9892-8ce472f8a54c",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0e3c12d0-4af9-415b-af8d-054914ed1da1"
        },
        "item": {
          "id": "bafdab5e-5993-4939-b025-2b1bb0614059",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "fe40f15f-86b9-4e4a-af0c-a5cd7429d712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66524d1d-02de-442a-b7bf-a0ed65146b60",
        "cursor": {
          "ref": "b20ab909-3843-45e2-95ab-dc566aed12e8",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "201dce2b-6ff5-40aa-ab0c-270fd3953f2f"
        },
        "item": {
          "id": "66524d1d-02de-442a-b7bf-a0ed65146b60",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "38051bf6-f296-4de0-b77a-417fc00e552d",
          "status": "Created",
          "code": 201,
          "responseTime": 710,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "480d3cd0-97a5-4e71-a7c3-41889d6239c9",
        "cursor": {
          "ref": "16ac8bfe-f9db-4387-b687-0ad85e982d84",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f3bdff84-25ce-49a5-a973-f045b60b37e3"
        },
        "item": {
          "id": "480d3cd0-97a5-4e71-a7c3-41889d6239c9",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "632090ce-acc6-4ed9-b4e0-b610bae5697e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be4cee38-c34b-441b-acba-7d212f73f522",
        "cursor": {
          "ref": "80b240cc-9f3d-4d3d-8757-d8b6de99b996",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "4c2a881e-9845-4c19-9660-cb76bc9955f8"
        },
        "item": {
          "id": "be4cee38-c34b-441b-acba-7d212f73f522",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "62e75b15-4481-42ae-9d76-85337cd659f3",
          "status": "Created",
          "code": 201,
          "responseTime": 5740,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "b7acbea3-9e97-4497-b736-9cf85b415b31",
        "cursor": {
          "ref": "8a5c3f4d-77df-4365-9c57-eb44529de92b",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "36228929-ac2d-4b4a-820f-07026af849b5"
        },
        "item": {
          "id": "b7acbea3-9e97-4497-b736-9cf85b415b31",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "8f6b8b67-d9ca-4753-b151-4c2e5f072d95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d58def-3c06-49bf-b1a7-32c49d425825",
        "cursor": {
          "ref": "6b901478-f1f5-42f1-997d-c80bfae232e2",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5f3c8b5b-e566-4129-bbdb-6566e126dd94"
        },
        "item": {
          "id": "61d58def-3c06-49bf-b1a7-32c49d425825",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "08b11c8c-9a3d-4b3a-b278-7d7c51e90158",
          "status": "Created",
          "code": 201,
          "responseTime": 5985,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "3614c5e8-97f3-4780-a30a-5ccba42dcc7d",
        "cursor": {
          "ref": "2b304d6c-2d25-4e09-8fe9-106616637e51",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8336e37f-f58e-479c-934b-0a50d814244a"
        },
        "item": {
          "id": "3614c5e8-97f3-4780-a30a-5ccba42dcc7d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e84dbdcd-03c7-4bdd-80e2-c4c804f7fb23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a9f738d-5997-4db0-a989-d0392f6bfb66",
        "cursor": {
          "ref": "0f5dedf2-7a6d-4055-821e-49683ba1ec2a",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7de180d2-daec-4c28-96b2-42acd8c580ba"
        },
        "item": {
          "id": "7a9f738d-5997-4db0-a989-d0392f6bfb66",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b339c8c4-e009-4404-89dd-0f78aa46aceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b07384-3394-4d7a-9f79-f51a6f793ac2",
        "cursor": {
          "ref": "0ba3682b-8e5d-493f-8614-5900925ef9e7",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7c887400-0d7e-486b-b4d9-15b411a2b634"
        },
        "item": {
          "id": "94b07384-3394-4d7a-9f79-f51a6f793ac2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "bf4b320a-643b-4c4f-bf59-74d8baa1b542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c66d1fd1-f1a4-4464-81a0-b5467edc9f6b",
        "cursor": {
          "ref": "0fef6db7-2ad8-402a-91b6-b05460e40c1d",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "1f458420-a272-4df7-a561-1b604edd8093"
        },
        "item": {
          "id": "c66d1fd1-f1a4-4464-81a0-b5467edc9f6b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "7ddb1114-a7f3-4b22-87e2-401cee52a623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d90d0608-10eb-40c6-a648-0d51543c5493",
        "cursor": {
          "ref": "7c21d1a9-1a09-4e52-9e18-2a430c03575f",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3cd24848-24b2-49e4-a1aa-24a9bb301c33"
        },
        "item": {
          "id": "d90d0608-10eb-40c6-a648-0d51543c5493",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f4387bfa-441b-4f5d-9865-294d61597332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb14fad-21cd-47ba-a955-735e589eb8b7",
        "cursor": {
          "ref": "7b4dc94d-7dcc-4452-a364-656ad4e865ee",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "249e9c8e-f906-4cb9-b46b-80f043d95ddf"
        },
        "item": {
          "id": "3bb14fad-21cd-47ba-a955-735e589eb8b7",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "0db8f243-0be7-49a8-a67c-a1e9d5144706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "974c162b-b263-412a-91e5-67cc507a3a29",
        "cursor": {
          "ref": "5ac2796c-0a11-4948-8638-f155e86f8e92",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d9a63615-05b4-4c5e-81ad-6950930b21a4"
        },
        "item": {
          "id": "974c162b-b263-412a-91e5-67cc507a3a29",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "516b6a51-d743-476f-9f82-f14b969aa260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed10b92-0fbb-4ec6-b146-8d60a17dcf19",
        "cursor": {
          "ref": "41d42911-8184-48cf-9cae-2fc19e403431",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "977c1f5d-fff5-46a7-9a84-196baefa626d"
        },
        "item": {
          "id": "6ed10b92-0fbb-4ec6-b146-8d60a17dcf19",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4b985d55-a0f4-4a41-ab89-41477d309d0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e573d6-6ee2-45f7-a3ff-c5ac658085c8",
        "cursor": {
          "ref": "3446a4fb-6ee7-4baf-9c4a-6be593f08396",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "713902c0-4b31-4c6e-876f-6d8ad28219f7"
        },
        "item": {
          "id": "36e573d6-6ee2-45f7-a3ff-c5ac658085c8",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d161445a-7f94-417d-94ca-1b9229c3f03e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc388c16-5dbc-4baf-ada7-d371171c7616",
        "cursor": {
          "ref": "0cb776cc-64cb-404c-9193-c80984913130",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "bd3e70a3-e5c6-4d9a-859e-3a50445946ad"
        },
        "item": {
          "id": "dc388c16-5dbc-4baf-ada7-d371171c7616",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a3000db3-032c-404a-8532-b6c077cf67ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f81c55f5-08da-4ab9-ac84-4e9faeac62c6",
        "cursor": {
          "ref": "0b7728c0-0745-4480-a796-75e2419e95fa",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8447458c-64b5-4df0-acd9-49a3232ba12c"
        },
        "item": {
          "id": "f81c55f5-08da-4ab9-ac84-4e9faeac62c6",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "fdd822a5-53ab-4862-804c-19a20767820d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f27a33c-3a7c-4136-9147-19cb1fb370d5",
        "cursor": {
          "ref": "7e63b207-2465-4df9-8f89-8be58f52a97d",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9baca548-837b-4b4f-9f75-ec0e0a2a1325"
        },
        "item": {
          "id": "4f27a33c-3a7c-4136-9147-19cb1fb370d5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "699e534e-2ebe-4c8c-9581-5dd20d9bb9af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe44265-424c-4f06-9171-e1fa31695505",
        "cursor": {
          "ref": "3a2aa2d2-a10b-4016-869a-367d195a76d9",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d5400e8d-41a4-46fa-9937-c2c5fbb51017"
        },
        "item": {
          "id": "dfe44265-424c-4f06-9171-e1fa31695505",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "354d75b4-9c6e-47a3-9b9b-83b0fedae9fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1095d83b-0999-4656-af28-397e6cd32672",
        "cursor": {
          "ref": "af20b42c-e9ab-417e-8c8a-e2153fec6ef2",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6d0b5456-06f7-4dc2-9e43-f9c10616e923"
        },
        "item": {
          "id": "1095d83b-0999-4656-af28-397e6cd32672",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "22a72990-be20-4348-b6a1-c8ffa73c7455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e670a17-0f89-4d3b-8685-98da7139ae4a",
        "cursor": {
          "ref": "645e314e-6622-4a78-85d6-f79aa43bec46",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f92f68f3-8121-45a8-b459-48be30d71f25"
        },
        "item": {
          "id": "0e670a17-0f89-4d3b-8685-98da7139ae4a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "083ae837-d3fb-43f6-9305-3bd728a589e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5deef37e-0a1c-4467-aac1-3ac37ec9011f",
        "cursor": {
          "ref": "bd315c3d-249d-4f3d-969e-dc6f0d336865",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "cb56d678-7d1a-4051-8c5a-3c8974607ed4"
        },
        "item": {
          "id": "5deef37e-0a1c-4467-aac1-3ac37ec9011f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "5be56078-3ac2-4ef9-a0a8-61ff87bd091f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f351570-00da-487d-91e1-7d8edfef7805",
        "cursor": {
          "ref": "1e09c3c1-705c-47be-b655-9114885b9b89",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "eab49575-4ce2-4199-9cfe-dbc8f2ec0b6d"
        },
        "item": {
          "id": "8f351570-00da-487d-91e1-7d8edfef7805",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "69b61903-d78c-42a5-8d01-d2ee428ff328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dae9281-fbc7-45d3-ae22-5bcb5cc81b5c",
        "cursor": {
          "ref": "6bac7829-f004-4a5f-a124-ac0af8692e7b",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f768524b-8743-4551-8ed8-623329caa715"
        },
        "item": {
          "id": "1dae9281-fbc7-45d3-ae22-5bcb5cc81b5c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "cd3ae96f-4b8c-449c-8d20-ee449f7d05b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8abb0f7-5732-46c9-8b93-4a8c6431932b",
        "cursor": {
          "ref": "83ebd350-7a7f-41b7-b4c2-bf0f0e044c5e",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ec27a85f-747c-493e-b324-c60468d1ace2"
        },
        "item": {
          "id": "e8abb0f7-5732-46c9-8b93-4a8c6431932b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8b135c9e-0a52-4ded-822e-eed0679afcae",
          "status": "Created",
          "code": 201,
          "responseTime": 2763,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "8a3d7a9c-24f6-4911-befe-79a764c91a6e",
        "cursor": {
          "ref": "8286a4f0-afc2-421b-8123-a11eda1c782d",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e8a67a7b-f907-40ee-96a0-c6790bd965f7"
        },
        "item": {
          "id": "8a3d7a9c-24f6-4911-befe-79a764c91a6e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "cabdb700-82a6-4fb2-8c98-082f57221cdd",
          "status": "Created",
          "code": 201,
          "responseTime": 2663,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "7799e800-225d-4743-824f-ccf42926d4c4",
        "cursor": {
          "ref": "5048bf81-9eaa-43e9-aa93-abb6c8e89558",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2aa482c1-89ca-4f15-9634-aa9d1b5b3766"
        },
        "item": {
          "id": "7799e800-225d-4743-824f-ccf42926d4c4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "818312be-4cfa-4ca1-961c-8a06691672d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "388a8f0e-f73e-4969-b356-c80200b91ad1",
        "cursor": {
          "ref": "4b41f399-16ec-4d81-bbe9-69416d3ecdc3",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "bbd23e1a-e494-438f-9add-697d39fc2c24"
        },
        "item": {
          "id": "388a8f0e-f73e-4969-b356-c80200b91ad1",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d2fdda44-85ae-4a8a-a95f-b9e5c8fa67bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68919312-18a2-438a-bba4-37e6e32ae08d",
        "cursor": {
          "ref": "bd1b8dee-73a5-4b27-86d9-b68bd92fe011",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1ccf4515-9935-4864-adb6-73eb07d2432e"
        },
        "item": {
          "id": "68919312-18a2-438a-bba4-37e6e32ae08d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "88191e66-359c-44af-bf12-90eaad1b57c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37873840-2349-4ae6-b0a6-24ee2feaa5cf",
        "cursor": {
          "ref": "f41739df-68e7-4809-b3bb-9d0edb469582",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2fecbac4-4826-4877-bd5b-5a031ca34c52"
        },
        "item": {
          "id": "37873840-2349-4ae6-b0a6-24ee2feaa5cf",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8aa29410-c296-4c37-96f8-cdb88689ff80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804d6b18-625e-44d1-b241-5be278b84c71",
        "cursor": {
          "ref": "4bc14d0c-66a7-4e3e-a2cc-7635b4a77db5",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "61cc4402-176e-432a-bf72-68e120912938"
        },
        "item": {
          "id": "804d6b18-625e-44d1-b241-5be278b84c71",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2a5d2dc2-3888-4081-8003-f8e1ca28220e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b9e4cef-0239-4e86-adce-b4c88197b6e4",
        "cursor": {
          "ref": "692665d3-0830-45e2-b4c3-b3254a5d4ed0",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "068d7c0c-70a9-42b4-b906-8ceec23e1b8f"
        },
        "item": {
          "id": "0b9e4cef-0239-4e86-adce-b4c88197b6e4",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "601047ff-f350-45bd-b253-65cf2d7c0db9",
          "status": "Created",
          "code": 201,
          "responseTime": 2997,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "0ed0d53e-be29-43b6-92cc-40465a278264",
        "cursor": {
          "ref": "128aae6b-b083-4580-9473-5a9126899356",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e8129b77-a05b-462d-9fd2-a89976624a1f"
        },
        "item": {
          "id": "0ed0d53e-be29-43b6-92cc-40465a278264",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "aabd75e1-ff5a-4f3f-992c-e1cff0ecdadf",
          "status": "Created",
          "code": 201,
          "responseTime": 4246,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "b5db2848-6ab5-4ae9-8707-a138e38897cc",
        "cursor": {
          "ref": "2ce4559a-8018-4aa7-9989-d4dc5f28c42d",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "743a01f5-2aa3-447b-87a8-52b9283b6bcc"
        },
        "item": {
          "id": "b5db2848-6ab5-4ae9-8707-a138e38897cc",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1c3bb1a5-1cfc-443f-ab3d-2a5e4a34b5bf",
          "status": "Created",
          "code": 201,
          "responseTime": 2426,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "b21478c1-ea16-4ef5-8569-0698fe52d687",
        "cursor": {
          "ref": "bac8da0f-99f4-4fcb-8a4a-b658562468e3",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "7a7d8e16-6605-4039-a208-bb0b63a09381"
        },
        "item": {
          "id": "b21478c1-ea16-4ef5-8569-0698fe52d687",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "46fc7c0b-48b6-4c35-85a5-c8063bc02260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d45aa0b-930e-489f-9dbb-7ea29da7145b",
        "cursor": {
          "ref": "85fc3af4-6118-4563-bdab-665ad41445bb",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3d5c9e87-0e33-43f1-84bb-d6a06fd22802"
        },
        "item": {
          "id": "9d45aa0b-930e-489f-9dbb-7ea29da7145b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d8bb90ff-ce22-444a-ad5a-16039d7245ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea5fca1c-b320-4a66-baca-80264ab3ea3a",
        "cursor": {
          "ref": "e333a2b7-0699-4c27-b555-41a88a789010",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b2cf7381-3d96-4190-83d1-219d406fe362"
        },
        "item": {
          "id": "ea5fca1c-b320-4a66-baca-80264ab3ea3a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e73fb05b-b0c1-497e-a0a8-d16c45a0dc7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3276df5-4f36-4aea-9191-60a25db85ff5",
        "cursor": {
          "ref": "87884f89-88a1-4f8d-8d52-28752bf60e4e",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5e8201e0-ad12-421c-b6c9-cdc8a616731c"
        },
        "item": {
          "id": "b3276df5-4f36-4aea-9191-60a25db85ff5",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "6e982ce2-0666-401e-9a00-4806945e5f23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9138ff47-df0b-42bf-977d-855df8f09830",
        "cursor": {
          "ref": "a8ca0e31-bb35-4e96-9187-c2f860d8c050",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d8261345-7318-473c-905d-7a8ee18c6643"
        },
        "item": {
          "id": "9138ff47-df0b-42bf-977d-855df8f09830",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "cfedce31-fca3-4be9-a8e8-e782a1b221ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e80951e-3f87-4fa7-a05b-ad3bcef737da",
        "cursor": {
          "ref": "373ddbb2-d3df-4d46-bc19-82958b1b0d17",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "89ebac6c-005a-4a2d-8a1d-d7e5c78e848f"
        },
        "item": {
          "id": "1e80951e-3f87-4fa7-a05b-ad3bcef737da",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "57062540-8e18-47cf-a97a-acbce97925cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8910e5b5-a748-489e-b689-bf61f56689cc",
        "cursor": {
          "ref": "c5e0351e-f4ee-4fa5-99fc-a7eded2ec0cc",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e2567461-bffb-4033-921c-1f400ac3a9c6"
        },
        "item": {
          "id": "8910e5b5-a748-489e-b689-bf61f56689cc",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e41c94d7-7190-4ca8-99c6-b5be64dea7ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec5bf93d-30fc-4ff6-957c-704a4d5aa83b",
        "cursor": {
          "ref": "ba0b090f-aece-480c-8f1d-61df3af596cf",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "38a87060-bb48-4573-a3ec-de963b5a27dd"
        },
        "item": {
          "id": "ec5bf93d-30fc-4ff6-957c-704a4d5aa83b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "dad6511a-8c72-423f-b7e4-4ed7c1fa799c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d798c6be-5aa2-4828-8b1f-54422df04f1a",
        "cursor": {
          "ref": "90077298-6620-4c1c-87f9-e8043ff9cf57",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "82276a91-12a7-40cb-9a63-823ba018637b"
        },
        "item": {
          "id": "d798c6be-5aa2-4828-8b1f-54422df04f1a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "df7b4a5b-fe79-4847-9340-480f5653758f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d65a864-28a4-4c65-ac1e-914bf8d9b41f",
        "cursor": {
          "ref": "42865b04-8f86-480c-a623-72ebc1828346",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2528fbbc-d00a-4d57-86e1-b780971c6a8b"
        },
        "item": {
          "id": "4d65a864-28a4-4c65-ac1e-914bf8d9b41f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6bd39676-4ef2-4661-beb2-d947486ff9ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1295a0-e778-43d0-be71-ea66ffd24362",
        "cursor": {
          "ref": "30070558-6933-43ef-aead-e61f543fb0d3",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "dde957cd-172e-4f62-8be2-47c71885a724"
        },
        "item": {
          "id": "1f1295a0-e778-43d0-be71-ea66ffd24362",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "04b0dc91-1b10-4355-ac77-efd998910458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a459277b-be5b-4b5d-9335-4a888d87f4d4",
        "cursor": {
          "ref": "9fab2569-7415-4972-9a4a-b2a51c0712fc",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "00cf4704-c981-44e3-a3a2-e9cf51c05893"
        },
        "item": {
          "id": "a459277b-be5b-4b5d-9335-4a888d87f4d4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "37c43bc7-93d8-4de7-b9a7-bbb64cbea41b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10269975-cb2e-4f1e-bb7b-ab601137c646",
        "cursor": {
          "ref": "d81e095f-2678-47c4-8167-329d954db3bd",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ca13844e-3167-4541-8c20-3a3214a44c10"
        },
        "item": {
          "id": "10269975-cb2e-4f1e-bb7b-ab601137c646",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a784ac9a-d344-4e6f-aca4-9b10e746546a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bae8fc6-d2dd-4600-b315-4bd5b66859f2",
        "cursor": {
          "ref": "9c84ef1e-bdc3-416f-8a89-d9397f16cc1d",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5fe86cd0-d56d-4494-9f70-de784d501db2"
        },
        "item": {
          "id": "9bae8fc6-d2dd-4600-b315-4bd5b66859f2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d118d41e-2a76-4632-b13b-1e06a394b484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd65ef21-4b78-43b4-84d1-4818b4f5af08",
        "cursor": {
          "ref": "c690fdae-175f-4e0e-86f7-804fdf4ae14d",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "10276580-b697-4cef-a615-4497f0a31946"
        },
        "item": {
          "id": "dd65ef21-4b78-43b4-84d1-4818b4f5af08",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "012777a6-fa95-4846-9b46-23e36cd2f141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679c7c0c-38db-4d01-87c5-4d42c32b18bc",
        "cursor": {
          "ref": "d0357a2f-69dc-48b1-8643-3273192966e4",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f7432038-585e-4d79-b734-c7e3971ec105"
        },
        "item": {
          "id": "679c7c0c-38db-4d01-87c5-4d42c32b18bc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e8ce8cfc-035e-419c-a989-81beec92cfcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a82e7962-9633-444b-972f-505f28674aba",
        "cursor": {
          "ref": "de01c390-9799-4233-bab8-dc745ea06419",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c70e340d-74aa-48d3-a3c9-87246dfaaabf"
        },
        "item": {
          "id": "a82e7962-9633-444b-972f-505f28674aba",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "1a164bc5-6a25-422c-9927-2507fad1d615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee74534b-848d-4a69-a3a5-1b19952c7581",
        "cursor": {
          "ref": "0834fb15-fcbf-4d78-902c-63afcdb35994",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "03c03b7d-eab4-43b6-a4a2-f5c68aa32c8d"
        },
        "item": {
          "id": "ee74534b-848d-4a69-a3a5-1b19952c7581",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5c77d106-bd89-4eaa-89b5-cc1cced86d93",
          "status": "Created",
          "code": 201,
          "responseTime": 2556,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "d389ab27-e15f-46ba-8760-c7235c92c1a4",
        "cursor": {
          "ref": "8a9b97b5-f833-4295-9f38-21ed916589a6",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8aff65bd-1d62-4f1c-bf66-d2c7da076d4b"
        },
        "item": {
          "id": "d389ab27-e15f-46ba-8760-c7235c92c1a4",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "022ab5f6-5197-46f2-aa0b-c6e1c5e264ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2b5edd-59c9-45dc-a1fc-fcc2361b9d63",
        "cursor": {
          "ref": "3fe82299-f0ca-4f7c-b983-ed92a77c897f",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "dc1da4a9-a66b-48c9-849c-21518eecb3ea"
        },
        "item": {
          "id": "2f2b5edd-59c9-45dc-a1fc-fcc2361b9d63",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a36d59e6-2584-44b6-a63c-28db13a2841d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ad637f6-9bd8-49b0-b80c-571f2cdb465f",
        "cursor": {
          "ref": "986ab9cd-9457-43cc-8a4e-dbeb0d9bec81",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d61303a0-d0a2-4e59-be17-eaff893292b1"
        },
        "item": {
          "id": "3ad637f6-9bd8-49b0-b80c-571f2cdb465f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "9330763c-aca9-4d3f-98b3-7db00bf059b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cee5dbf-a02c-4b85-8733-1fd368f36478",
        "cursor": {
          "ref": "c1aac8ea-1713-48f0-9ac6-dac133ad2427",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6ef9fe14-40eb-44a7-82d5-6c87ffda05b0"
        },
        "item": {
          "id": "1cee5dbf-a02c-4b85-8733-1fd368f36478",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ccf31eff-524c-4209-9a0c-d1b9abb541ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c3eb9c-9b19-4f3b-a80f-d0682eb6090b",
        "cursor": {
          "ref": "a8319e1e-eb7e-4a67-9550-aa0c4f8e8278",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "bdd9eac4-a56f-4ff6-a481-e7b9cb4bccdd"
        },
        "item": {
          "id": "95c3eb9c-9b19-4f3b-a80f-d0682eb6090b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "337abb59-56ce-48e7-bda1-6f3b9f1dd066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c6125c-cb04-4dff-b3bc-d886d606774c",
        "cursor": {
          "ref": "ebeba72d-280d-4556-913b-06a5e09413f1",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "62ec833b-5c12-40b9-8fef-a5f1dc2489ae"
        },
        "item": {
          "id": "66c6125c-cb04-4dff-b3bc-d886d606774c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4140eddc-be08-4e2e-bb7d-9f69f8c36de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0657071-a012-4836-850d-98fcc2a6db6c",
        "cursor": {
          "ref": "c969b790-f7d4-4d1f-972d-9e8e0b032fad",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5df9e24a-c949-4c5b-9301-2b10f6c5e50a"
        },
        "item": {
          "id": "f0657071-a012-4836-850d-98fcc2a6db6c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "71297e12-53a2-43dc-a6fd-b6bee5b27f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd3f4bc-ee8f-4a3b-89b7-32abe18b5035",
        "cursor": {
          "ref": "ec7cdcf7-9367-4fd5-87fb-e42a854dd11d",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5671eec7-6f91-4b55-8f55-7294c476ad73"
        },
        "item": {
          "id": "cfd3f4bc-ee8f-4a3b-89b7-32abe18b5035",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "96e6e0a7-7837-46d8-aa05-5764af77d293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b36803-6ff4-4d7e-9f21-0151c7c89e9b",
        "cursor": {
          "ref": "4b455c35-5ba4-4a6d-93a2-d59bcde8f1b7",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "799f7ef8-c698-4ed6-90d4-8e3e1b518f91"
        },
        "item": {
          "id": "14b36803-6ff4-4d7e-9f21-0151c7c89e9b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "70d6ff3d-e062-4292-9d33-996195835400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83479520-0d9d-4f13-8370-d2850ae3eafe",
        "cursor": {
          "ref": "d658d2a7-5136-4ee5-b9b0-c5efff914cd0",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "df4a5349-366b-42a2-9472-99d47bad4c46"
        },
        "item": {
          "id": "83479520-0d9d-4f13-8370-d2850ae3eafe",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "bb5a6499-9cbe-4568-98fd-698b87e6c463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7b36428-e035-47f7-bbb0-e70ed0ae6d8e",
        "cursor": {
          "ref": "a30390ad-31a1-4f2a-86c7-17ad29fa519c",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "fe776f94-6f0b-4834-a479-c91bcc88a544"
        },
        "item": {
          "id": "d7b36428-e035-47f7-bbb0-e70ed0ae6d8e",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8cc7bf92-ee4c-4a65-b9ed-3950b575b201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e931b417-ac3c-4186-9ca4-08448e829a88",
        "cursor": {
          "ref": "53fe22c3-75d9-4703-be38-144507c3b5bd",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "289447f4-13a6-4a72-adec-f2bf374c8f57"
        },
        "item": {
          "id": "e931b417-ac3c-4186-9ca4-08448e829a88",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f972561e-4801-49c2-ab53-3636fad040eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d6f3bf-c433-4b0a-b703-cdb5d4f32fc2",
        "cursor": {
          "ref": "6f3a6bf3-e08a-4060-8c04-9bfe80c1d77e",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "3061ed52-6a9d-498a-bffb-1554d9515f63"
        },
        "item": {
          "id": "f1d6f3bf-c433-4b0a-b703-cdb5d4f32fc2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "486d9fd8-0157-4397-a5f5-d9d606264274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09f6e00d-4328-48a7-817e-bc77017a1e38",
        "cursor": {
          "ref": "9509323c-604e-4fe0-a1e3-f5453dbbbb51",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "3649b906-0e0f-44a3-b006-b579c4e64b1d"
        },
        "item": {
          "id": "09f6e00d-4328-48a7-817e-bc77017a1e38",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "80f72294-8a6e-4bf2-b11f-8380d08f4eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc6f472e-0665-4404-aa61-e2d36891cd46",
        "cursor": {
          "ref": "acafa05e-65f0-4e7d-9d5d-3654d4eae10a",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "fdbaa96e-3416-4535-8cb4-c01db8a4e6ae"
        },
        "item": {
          "id": "fc6f472e-0665-4404-aa61-e2d36891cd46",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "34f8f3b7-4ae8-4693-88bb-9dbe4571c21d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "457d2238-0b92-4f12-a122-ec7cccb4bedf",
        "cursor": {
          "ref": "0f8bc0fd-9536-4324-b1d7-b4bd14d1a572",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d1ff09f4-3193-419e-ae4c-75de5187677e"
        },
        "item": {
          "id": "457d2238-0b92-4f12-a122-ec7cccb4bedf",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c3227577-a2ec-4499-acbc-3aa6e3ec50a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb170441-48c4-4d6e-ba8c-0de6d4fc7e6f",
        "cursor": {
          "ref": "5f294acb-dde5-4c68-b63c-83e79867c6b8",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "55a3447a-ba02-41cc-99b5-fc26ba516e26"
        },
        "item": {
          "id": "bb170441-48c4-4d6e-ba8c-0de6d4fc7e6f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3e45d293-69db-441a-a530-759590b85703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e45d60a-6865-4581-bc77-13beed779256",
        "cursor": {
          "ref": "72147d46-1d30-48c3-b8b6-713fea31ce55",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "0de9074f-432a-42bb-9d5a-91ba3be4622a"
        },
        "item": {
          "id": "5e45d60a-6865-4581-bc77-13beed779256",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "be465c22-882f-4ade-be87-c3c8ab3c3677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28c601d4-1cf5-4ef6-8af1-d6f82855947d",
        "cursor": {
          "ref": "eed06072-5a2b-4a45-be02-2f30ad37ab34",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e24fc356-c5dc-4c90-a087-c9b4b6a2bf48"
        },
        "item": {
          "id": "28c601d4-1cf5-4ef6-8af1-d6f82855947d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ae0dfd78-529e-4318-93af-e31053f8f262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f85b3f-2105-4f54-8aa1-01ca4e30d6e2",
        "cursor": {
          "ref": "c0abcf7e-adc4-4ef3-8bf8-b79d31e9cbcf",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ab74442d-d0e1-4122-9cbc-28bd60453054"
        },
        "item": {
          "id": "84f85b3f-2105-4f54-8aa1-01ca4e30d6e2",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "2d29fdbd-abbc-4ff9-b2a6-e446a6e40975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce6b7ce-5872-4477-ae2c-ef22cd660c10",
        "cursor": {
          "ref": "f7c9a58b-2b64-47c2-8a8b-6de1c9967551",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f34baddc-aad2-46ac-b90a-78209be6a953"
        },
        "item": {
          "id": "7ce6b7ce-5872-4477-ae2c-ef22cd660c10",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f8acce1e-2bd5-407f-9215-f07a84981d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dfd5d45-5900-4392-a690-f2178aad5e3a",
        "cursor": {
          "ref": "41d6e9af-6f27-40bc-9e6e-d345b51e225d",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "559fe517-7ec1-4f3b-8e07-727bca90d6d6"
        },
        "item": {
          "id": "7dfd5d45-5900-4392-a690-f2178aad5e3a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4c672a2d-a07e-4e06-acd7-6604c3391227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a8eca2c-e45b-4119-b8d2-13dcb5d224f3",
        "cursor": {
          "ref": "41c4f5f7-d0f8-45dc-8d13-5f67c8097b21",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7210c337-a1c2-476d-bddb-d44fd30d668c"
        },
        "item": {
          "id": "5a8eca2c-e45b-4119-b8d2-13dcb5d224f3",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "03acd065-7008-4886-b9bd-c8b87a0adf26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 182,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf3e841d-9990-47ea-ac7c-d4bffcf1b82e",
        "cursor": {
          "ref": "a8cbacbb-0473-4b14-9927-b03efc48a72e",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "65e2c600-9c10-4f41-922b-c1d575f7379f"
        },
        "item": {
          "id": "bf3e841d-9990-47ea-ac7c-d4bffcf1b82e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "eda4fb49-ca7a-4926-ae10-2eccd0212dbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08cd216-8e5d-416b-8174-b0e076e94fff",
        "cursor": {
          "ref": "1057741b-7bd8-4919-aa18-6f7f02579fc5",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6fc0dabb-d8f6-47e5-a319-660f99bce1ff"
        },
        "item": {
          "id": "f08cd216-8e5d-416b-8174-b0e076e94fff",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3f04281d-6379-4097-92e0-ea3f22081a9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed61b44-344e-432a-acfe-9985d351dfe0",
        "cursor": {
          "ref": "9aa6cff8-a1d9-46f7-8ce4-d624028be68e",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1ed41bfc-a68a-43b8-8da3-127aac3c97c9"
        },
        "item": {
          "id": "bed61b44-344e-432a-acfe-9985d351dfe0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3c7cd2e7-2f29-4118-854d-f6888fc8d2ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3beb632b-e146-45e4-b9a2-1a5aa7797b74",
        "cursor": {
          "ref": "e9878087-762b-400e-bc46-4a57d5b1c9b6",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d73cb4cb-c365-49ab-90bd-32f52fdd48d1"
        },
        "item": {
          "id": "3beb632b-e146-45e4-b9a2-1a5aa7797b74",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0558f16a-43b2-4ba7-8e6a-91d78cbd9551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f214299-767e-4580-a5fe-cad7952157f8",
        "cursor": {
          "ref": "5882f765-41d2-45bb-8c17-476fec381ba9",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f5dce379-09ee-4b65-a5df-842caa3704bb"
        },
        "item": {
          "id": "7f214299-767e-4580-a5fe-cad7952157f8",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "659f71f7-6ed8-494b-903e-e44a1570299b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da84cce-0c1d-4f64-a9fd-2a584f1eac38",
        "cursor": {
          "ref": "15e565dd-3499-4057-8ae7-6c81ea43384d",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5684523f-8e38-4cbd-95ef-9d5d0c3a3150"
        },
        "item": {
          "id": "5da84cce-0c1d-4f64-a9fd-2a584f1eac38",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "639d0084-f80b-4ec4-ac30-2f7e02df8ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e953fc72-8712-429f-bfe3-43eff7c4cd47",
        "cursor": {
          "ref": "6b5391c5-560a-42f9-b137-7cc0ee69c668",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a3b6f012-c3e1-43df-81f2-08394b792def"
        },
        "item": {
          "id": "e953fc72-8712-429f-bfe3-43eff7c4cd47",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f02f2c0e-9515-40a0-9d77-dbdb36295e0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed0e8db-60da-4277-9402-e290cea8a4b2",
        "cursor": {
          "ref": "0b5d6ce8-852b-4686-a121-06fa62e686ef",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "877913e5-ea58-46a5-97e4-7fb1efb7f677"
        },
        "item": {
          "id": "aed0e8db-60da-4277-9402-e290cea8a4b2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f8a8fa63-93e9-4cfb-90c0-86da36aeb740",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "48abe198-3175-4a9a-872f-59ef5496d2c2",
        "cursor": {
          "ref": "ff3e7198-f90d-4cec-be13-aed633f68d69",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "025e5e80-a7b4-4810-8b27-01d9cbe44e81"
        },
        "item": {
          "id": "48abe198-3175-4a9a-872f-59ef5496d2c2",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "d2c45308-0b0e-4136-9985-62f19c747502",
          "status": "Created",
          "code": 201,
          "responseTime": 1799,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "80291a7f-010d-43a0-94c1-de9e493ba54f",
        "cursor": {
          "ref": "28c15aee-eecf-430f-a26a-75c74bab1f99",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "37aefe8d-372c-4e49-8a36-fff15dcbe67b"
        },
        "item": {
          "id": "80291a7f-010d-43a0-94c1-de9e493ba54f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "07f89b62-9e4b-4444-82f1-02b4995454bd",
          "status": "Created",
          "code": 201,
          "responseTime": 2411,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c0682a-2d1d-474b-aac1-c7249bce0b8d",
        "cursor": {
          "ref": "4a6ef0cf-e150-4311-9ad9-a6abf39af0b1",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "76cf54eb-3b09-4a9e-bf08-ef056b507305"
        },
        "item": {
          "id": "22c0682a-2d1d-474b-aac1-c7249bce0b8d",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "58a96b5d-16af-4494-b8ad-90dc25bca589",
          "status": "Created",
          "code": 201,
          "responseTime": 2273,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b757e8-801c-4542-a8b9-d10f7412367e",
        "cursor": {
          "ref": "7120eac0-3e52-4f7b-8d78-3d8b6e4cdccc",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8f2a7dd4-4f4e-44a2-b5da-a840c01998cd"
        },
        "item": {
          "id": "79b757e8-801c-4542-a8b9-d10f7412367e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5bcfc92c-9f08-4a8d-8ae1-74231d6dd660",
          "status": "Created",
          "code": 201,
          "responseTime": 2391,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "68bf056d-ca80-4092-bad2-8a0e2926e5f0",
        "cursor": {
          "ref": "97873017-4fa8-4582-80dd-b4b0e31aa67a",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "bcddcd7f-f565-4e04-bf60-8686abe2d69f"
        },
        "item": {
          "id": "68bf056d-ca80-4092-bad2-8a0e2926e5f0",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "644b8a6c-fd28-4f9a-a95c-b643c9db232b",
          "status": "Created",
          "code": 201,
          "responseTime": 3424,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4d0afd-347a-43fc-866d-59b2200e5fe8",
        "cursor": {
          "ref": "043740cd-46ee-4fdf-9361-6c6bb40465da",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1f24d4dd-dd79-44f2-a29e-03c69e1f3da3"
        },
        "item": {
          "id": "3e4d0afd-347a-43fc-866d-59b2200e5fe8",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7a6550df-bbe9-422b-b060-874079740a59",
          "status": "Created",
          "code": 201,
          "responseTime": 2539,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-21T00:37:05Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-21T00:37:05Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "4b587209-a53c-4611-821c-dafc9964a64c",
        "cursor": {
          "ref": "a58eed2d-4b01-47d0-b519-75467424d16d",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "99527780-676b-4f8f-b200-2c3cf31ca55b"
        },
        "item": {
          "id": "4b587209-a53c-4611-821c-dafc9964a64c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "05a5bbf6-eb31-4aab-b3df-9e70b0b6c32c",
          "status": "Created",
          "code": 201,
          "responseTime": 2926,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0942e37-e947-4f7c-bdec-fbc8c3beb8f8",
        "cursor": {
          "ref": "c0a08799-b010-4c67-b290-b5349b519924",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "780c445f-20e9-4003-884b-c02c29639792"
        },
        "item": {
          "id": "b0942e37-e947-4f7c-bdec-fbc8c3beb8f8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4e209cf4-0c35-48c4-a8eb-83c9ab87473c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0942e37-e947-4f7c-bdec-fbc8c3beb8f8",
        "cursor": {
          "ref": "c0a08799-b010-4c67-b290-b5349b519924",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "780c445f-20e9-4003-884b-c02c29639792"
        },
        "item": {
          "id": "b0942e37-e947-4f7c-bdec-fbc8c3beb8f8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4e209cf4-0c35-48c4-a8eb-83c9ab87473c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f307edd0-1f5e-4cf6-b803-0dd2ad67264c",
        "cursor": {
          "ref": "c88d2a80-0cf1-458e-a854-998db770183d",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "657763da-70be-481f-8cac-c604b5a6a24c"
        },
        "item": {
          "id": "f307edd0-1f5e-4cf6-b803-0dd2ad67264c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "dd6cec85-c192-49c6-a1a5-6149c383e791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd4f4ab2-e3c6-45de-8ba6-d5756bd2fc8d",
        "cursor": {
          "ref": "9d8558e4-f4fd-4800-a6a2-97558f45a1b3",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a4163ef8-cc60-4eba-ae88-bbf78abfc00b"
        },
        "item": {
          "id": "cd4f4ab2-e3c6-45de-8ba6-d5756bd2fc8d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0dbd59ad-86ee-4adc-a51a-9d51186b3f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d951fbc-b689-4f82-bb3d-d20d664fe7a9",
        "cursor": {
          "ref": "9d0443a7-9659-46b4-80d8-f71b4f90e720",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2d9a8b03-9b30-4133-89ee-777d5dbaf996"
        },
        "item": {
          "id": "9d951fbc-b689-4f82-bb3d-d20d664fe7a9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "433092e0-03df-4064-bbaa-dbc5f4dbb5ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da1facb-fdd7-427f-b8ca-cbcb9ea8fbf2",
        "cursor": {
          "ref": "205a05b1-fd6d-48a0-a2bd-7a482de4b0dc",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "daec590e-291f-46cf-8478-783a54e97305"
        },
        "item": {
          "id": "4da1facb-fdd7-427f-b8ca-cbcb9ea8fbf2",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "dee6a21a-b06f-494a-8e0f-57b3f5212d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9b8de5a-ddb3-48aa-b0a5-a16d9ceda699",
        "cursor": {
          "ref": "67458c33-1a1d-4849-9039-378b5352dd48",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a5641ea6-8f59-4f83-8c4f-b2a269b5a20d"
        },
        "item": {
          "id": "e9b8de5a-ddb3-48aa-b0a5-a16d9ceda699",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a25518c4-c504-4e39-8a9c-31c0f2b628bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4e607ea-1443-4d1c-b6ef-4b25c844960b",
        "cursor": {
          "ref": "1f3266d2-f17b-4dfe-ad0a-87c62d39aeda",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "478ec7e8-4756-49c7-b31d-0a12e7af0d55"
        },
        "item": {
          "id": "d4e607ea-1443-4d1c-b6ef-4b25c844960b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b094da92-6aa8-4a37-b401-3df2fd9853c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef6a94ea-c213-4173-9a9b-53e1e5ac933e",
        "cursor": {
          "ref": "5f9486df-df15-4b87-b2a8-a62dab76dc87",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f8b45720-d926-4dbb-a461-1c8675bf163b"
        },
        "item": {
          "id": "ef6a94ea-c213-4173-9a9b-53e1e5ac933e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d9ac9d6b-1459-481a-b417-d973fa2d7bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11025db7-0d3e-4076-b030-e1c205879e81",
        "cursor": {
          "ref": "026ef26e-612f-4d86-880a-9668692f3004",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "74da91d7-8820-4591-8f54-8f69db3a566c"
        },
        "item": {
          "id": "11025db7-0d3e-4076-b030-e1c205879e81",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7e5fe1a6-4c27-43ff-81c6-ad2773b86aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "540cfe01-b5e3-48d8-b37f-9bda67532514",
        "cursor": {
          "ref": "d1b7f424-89ac-4121-9448-e0764400f6ee",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "baa85a30-6903-490a-892e-310b891483ec"
        },
        "item": {
          "id": "540cfe01-b5e3-48d8-b37f-9bda67532514",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "652f0620-42b2-4007-aff1-0e6314c493e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa3a165-e6cc-48d6-b071-20ddd05d1394",
        "cursor": {
          "ref": "cfdb0edf-8d2b-4208-a3ba-6f6e97267c64",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "bc205035-149b-4e44-8f3c-eb565f48350e"
        },
        "item": {
          "id": "baa3a165-e6cc-48d6-b071-20ddd05d1394",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "fea410bd-1fc1-4c1f-8e43-dca7b3cc4685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "853a0d7f-4acf-4d19-9ca2-3223a9e91a2c",
        "cursor": {
          "ref": "e85d63a9-5e13-4826-9096-fe967cd29a26",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c0baac6a-8398-4105-9fe3-f49e1807d532"
        },
        "item": {
          "id": "853a0d7f-4acf-4d19-9ca2-3223a9e91a2c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c1fa4773-ded7-4920-9e17-29f48e9142a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c4be06-3f35-4188-878f-0ffa7ea99bff",
        "cursor": {
          "ref": "e12b5258-a501-40b8-9570-51e9900fced2",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "807061de-db6f-408d-8d88-429faddc52b3"
        },
        "item": {
          "id": "b2c4be06-3f35-4188-878f-0ffa7ea99bff",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "47022b5e-8d8a-4c2e-8e93-daa03424ad7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4337de20-7c6f-434f-9f16-42af55e464cf",
        "cursor": {
          "ref": "6ccb0cf0-ac98-47e0-9819-d82a22cdaeb2",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3a4eb968-c34f-481d-9222-a0e36423ee90"
        },
        "item": {
          "id": "4337de20-7c6f-434f-9f16-42af55e464cf",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f3ff456a-1185-4f6e-94d9-e416e506db13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57f7318f-adc7-43fa-9ce3-d3ebf8f55c8c",
        "cursor": {
          "ref": "6a9d6134-d08b-4de9-b8ec-47f2243b0dcf",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "91365c13-4e32-4311-b10b-95f3ca5d1d6f"
        },
        "item": {
          "id": "57f7318f-adc7-43fa-9ce3-d3ebf8f55c8c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f0e8c8e7-6a51-4e3c-97b3-e72ef796d3e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd0cfd5e-c8e4-4f7f-aa66-20778f89cdba",
        "cursor": {
          "ref": "8fe8512a-027d-4f17-8119-72bf12a0c89f",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1957f658-9546-49c4-8b2e-3919a688dcd1"
        },
        "item": {
          "id": "bd0cfd5e-c8e4-4f7f-aa66-20778f89cdba",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f7f4215f-3ed6-4440-a491-2e8527c483e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f882c6-9e2a-4063-a3d4-d8b3a9b58f90",
        "cursor": {
          "ref": "76a9c3bf-a98d-4b03-8a2b-1b7259a212b0",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "868684fa-85ca-4fbb-ba14-87cdb10bf693"
        },
        "item": {
          "id": "33f882c6-9e2a-4063-a3d4-d8b3a9b58f90",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "521a2926-4cb3-4479-9977-c1f52e1a73b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f0938a-4d1b-4839-abcc-e04bd887de16",
        "cursor": {
          "ref": "2bc6d401-c3e8-4e63-b3e1-f9f0fa45614f",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b2bb8233-e56e-421f-ba78-91b69dd678b5"
        },
        "item": {
          "id": "a3f0938a-4d1b-4839-abcc-e04bd887de16",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2a4513e0-024a-413a-a243-5e16ecb62609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b2d10da-7f3f-468d-b2e0-cfe43e7fa391",
        "cursor": {
          "ref": "d4673b63-99bb-4d5b-bae1-30bbadf6344e",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ddadf5d6-13b2-40e8-ab66-b910837729f2"
        },
        "item": {
          "id": "4b2d10da-7f3f-468d-b2e0-cfe43e7fa391",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d224b03b-c6ff-4528-9461-9dcd6e5e0f0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 150,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62525611-bd23-425b-86de-11033e3837a9",
        "cursor": {
          "ref": "8817c18d-b6ff-4113-87f6-b7bfdacf28eb",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "fb9681c5-eab3-483a-9ac6-628be4d66772"
        },
        "item": {
          "id": "62525611-bd23-425b-86de-11033e3837a9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3e99ddcc-6404-4f7f-969a-047e3aab83fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa4a2cd7-343e-4f2c-892e-6869d3fd8a1e",
        "cursor": {
          "ref": "90601436-0c91-4c89-b267-e5a8ca3ee98c",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "9d93f59e-5d8a-49b1-88f9-bdc2022f2aec"
        },
        "item": {
          "id": "fa4a2cd7-343e-4f2c-892e-6869d3fd8a1e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5ee12dc3-0400-455e-b8aa-123cfd2637ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ebd437-6356-419a-bb13-77ecd364acb5",
        "cursor": {
          "ref": "0262c2f4-ab6b-4694-9fae-5930d24fb00d",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "fd5e5a8e-0255-4a75-9410-d2e9d7074c97"
        },
        "item": {
          "id": "c0ebd437-6356-419a-bb13-77ecd364acb5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1b680ed3-92c8-45ab-ab66-070197d22081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77dae15f-b281-468c-8cae-26c602de3721",
        "cursor": {
          "ref": "5804b09d-0caa-41e3-a62b-4a724c1a5108",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "993e2b78-cd88-4b97-bf1f-24648c389b4b"
        },
        "item": {
          "id": "77dae15f-b281-468c-8cae-26c602de3721",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "cd88bf83-92cb-4a8e-9570-aa32c317b6fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e060d23f-c515-4da0-9418-405a336ac0e7",
        "cursor": {
          "ref": "04f60ce9-6fb0-4549-a483-a2c0901ec9d6",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3b952164-f553-43f1-928c-4f710a150093"
        },
        "item": {
          "id": "e060d23f-c515-4da0-9418-405a336ac0e7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "71f4a24e-77f2-4986-a3c0-e6bb5ccf6f06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1145eff7-55a6-4af1-b0e6-a2e3d677cb7a",
        "cursor": {
          "ref": "2ef40a62-a27d-4dd2-9fbd-e1c217d8752c",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "35621bad-e9f9-45eb-ab5c-7f2a91e371ee"
        },
        "item": {
          "id": "1145eff7-55a6-4af1-b0e6-a2e3d677cb7a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3432b427-6182-488c-9c2a-f49adf7210c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6a63eb-2edc-4d7b-8ff0-cb8145e1d30b",
        "cursor": {
          "ref": "53dd1918-75d6-4525-ae98-08d8e9a09a9c",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9400e6f0-021f-417d-afc2-2d1ef36f0e09"
        },
        "item": {
          "id": "aa6a63eb-2edc-4d7b-8ff0-cb8145e1d30b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b0777fe3-030e-4890-afe5-b016442f59ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ca286b-4207-4c9d-86ab-35535b1466c2",
        "cursor": {
          "ref": "e3728949-5e02-42ac-b3ad-f795d0c11325",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "928a1b1d-fa1f-447e-981b-9ed09e46e8b2"
        },
        "item": {
          "id": "12ca286b-4207-4c9d-86ab-35535b1466c2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f3a580ee-7f76-4397-b5be-cb74138a8bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ac4b2c-b0d7-4db9-bce8-41f5f45b5fff",
        "cursor": {
          "ref": "df162364-ea74-4bca-aad3-26dc3040bdba",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "13e2ec56-47e8-4f2a-8d49-38e8f484af83"
        },
        "item": {
          "id": "d5ac4b2c-b0d7-4db9-bce8-41f5f45b5fff",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e4cb0306-968b-4158-a5d3-a54bd38267ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a0a7528-5230-4037-9f1a-586d55ecdf57",
        "cursor": {
          "ref": "a1a50a91-16f1-44a3-bfc0-80739d660a4c",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3cc0a2c2-d0d2-4d71-b904-76ff5f416a46"
        },
        "item": {
          "id": "7a0a7528-5230-4037-9f1a-586d55ecdf57",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "23931eb9-9130-4074-ad8c-35cd3cfd3036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9810c840-093f-41ad-bb30-f472c2b3475f",
        "cursor": {
          "ref": "7f346347-2bba-48f1-b192-08efba957a88",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "5b4a4336-d3f1-49c1-975e-1afc89d8b43b"
        },
        "item": {
          "id": "9810c840-093f-41ad-bb30-f472c2b3475f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0a73f20b-8e91-48ed-a8da-0c50bdac19e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52592401-7eec-417e-8c66-10fde1cd751c",
        "cursor": {
          "ref": "515a8819-1680-4911-825d-379645d98c2f",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2f2ae46e-3a4b-404e-ac78-afcf3beab6f7"
        },
        "item": {
          "id": "52592401-7eec-417e-8c66-10fde1cd751c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "aa0f41ad-4db2-49fa-995b-9e6d1dab46ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad9af3d-f9f7-42ca-9f6a-d393c00df680",
        "cursor": {
          "ref": "4ab8300c-3fad-4f98-96e5-40c841c8d904",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "78175f25-27b8-4c0a-8554-c627768ce734"
        },
        "item": {
          "id": "1ad9af3d-f9f7-42ca-9f6a-d393c00df680",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "dce98bdb-ebb9-43af-bd4a-443096a30a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132e5a97-c8ba-4f84-a614-fd16566bc1e2",
        "cursor": {
          "ref": "9da2c8f2-728c-442b-93bb-0ad7364d3629",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "141bf643-bec7-491c-9381-d1ae36020e85"
        },
        "item": {
          "id": "132e5a97-c8ba-4f84-a614-fd16566bc1e2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2560004e-a582-4c11-85e0-9eaefdf04494",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "68741d8b-7ea0-44ab-b62e-bb1255ed5d50",
        "cursor": {
          "ref": "53377f66-4b5b-4edd-a138-4d207b0f3ab6",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a3f8e3fd-9b9b-44e6-83ca-c593650aaa7e"
        },
        "item": {
          "id": "68741d8b-7ea0-44ab-b62e-bb1255ed5d50",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "cd0e3f0f-7a32-473d-9bb1-eb8f733a8969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "b89e12cd-79b0-4e19-bfc2-2dc88a3337b9",
        "cursor": {
          "ref": "85b6c6ff-6807-4ebc-98d8-47af9276ead3",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7d61ef01-98c2-4c80-8cf0-b0af089ac50d"
        },
        "item": {
          "id": "b89e12cd-79b0-4e19-bfc2-2dc88a3337b9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "604d8c95-01ac-48dc-91bc-4255b374684d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89e12cd-79b0-4e19-bfc2-2dc88a3337b9",
        "cursor": {
          "ref": "85b6c6ff-6807-4ebc-98d8-47af9276ead3",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7d61ef01-98c2-4c80-8cf0-b0af089ac50d"
        },
        "item": {
          "id": "b89e12cd-79b0-4e19-bfc2-2dc88a3337b9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "604d8c95-01ac-48dc-91bc-4255b374684d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84bdd6fa-8c61-4985-b5c5-1d493394b1b0",
        "cursor": {
          "ref": "72e97383-2155-42be-b3e8-165bc37b6422",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b9bd24fd-cc25-4146-b510-4800d77bea56"
        },
        "item": {
          "id": "84bdd6fa-8c61-4985-b5c5-1d493394b1b0",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "897d882a-fdf3-4eec-94f8-b94509b23900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d81e87-e262-41b2-a749-624c457c4d9f",
        "cursor": {
          "ref": "493d8dce-c0f4-419d-bf8d-17c219db08b9",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "1ad1a381-5501-47e0-bdb1-6cb48e9323b9"
        },
        "item": {
          "id": "f8d81e87-e262-41b2-a749-624c457c4d9f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4d52ebca-41fc-4636-903a-34ab5dd39ed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 256,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e46846fd-6e6f-4dd3-97f0-cb2a7bfd34a7",
        "cursor": {
          "ref": "91d7e37f-7817-4f2e-ad49-86a83977075b",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "595a7de4-8ac6-44b0-9b2d-24a41e1d610e"
        },
        "item": {
          "id": "e46846fd-6e6f-4dd3-97f0-cb2a7bfd34a7",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "21ca3260-5039-4f77-922d-bfed67e534f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff62612-24e5-40b5-8299-ab51730e9da3",
        "cursor": {
          "ref": "9bd0700e-87e8-4235-8b0e-5bf1f8b2b3ff",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "8efa865b-01e5-4153-8535-93e839406fae"
        },
        "item": {
          "id": "cff62612-24e5-40b5-8299-ab51730e9da3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9bfd73f5-1703-45b9-a4c0-9121fe67f0c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37127a71-de28-4891-a74d-e7e9642f32da",
        "cursor": {
          "ref": "647873a6-793d-4e91-be3b-dda0993a1791",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6a0a3d09-5413-4500-9f25-56e16eb120a6"
        },
        "item": {
          "id": "37127a71-de28-4891-a74d-e7e9642f32da",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "7df93ce2-7fec-45e7-9a03-3ed05a072c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f9c54e-3bc6-4257-9819-68348265a8a9",
        "cursor": {
          "ref": "a970300c-410e-40b3-98e9-fd92de263e83",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ffb79b93-7961-4efe-9d8e-9cf73d3cfff4"
        },
        "item": {
          "id": "a6f9c54e-3bc6-4257-9819-68348265a8a9",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "eab13ab4-22b1-42b0-a04c-ec52064a3e29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "114a1290-6878-489b-8a36-d756e90fdb84",
        "cursor": {
          "ref": "e1057354-e9d3-49d9-8d39-2566d58c402c",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0fbbc5ac-a082-4663-ac05-b565a286f60a"
        },
        "item": {
          "id": "114a1290-6878-489b-8a36-d756e90fdb84",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a690a25e-bc1a-4dca-8c95-43a761733ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba14103-a4d2-42e6-be2a-76d3489eab6c",
        "cursor": {
          "ref": "d93cbc4e-40f5-4f10-9aba-57ae1d338a63",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1c89bb55-b765-43f2-8520-70b2933281eb"
        },
        "item": {
          "id": "bba14103-a4d2-42e6-be2a-76d3489eab6c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "72c2f0a7-f149-4dd4-8c6d-34e708528dbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e37d3b-26fa-44cf-9c7c-fb6fca659e14",
        "cursor": {
          "ref": "fbad7e45-3f52-4907-85a9-8ab768fb347a",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ed540b86-502b-4720-91ec-11ff4db774b8"
        },
        "item": {
          "id": "a5e37d3b-26fa-44cf-9c7c-fb6fca659e14",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "049a6d5b-a9c1-4095-aa66-504f88fad67d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd111704-79f2-440e-95cd-0de82d01ba6c",
        "cursor": {
          "ref": "7f86a6ed-44e2-434d-b63d-de178d80517f",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "5673c53c-e627-40af-8e4e-a6561ff31a3e"
        },
        "item": {
          "id": "bd111704-79f2-440e-95cd-0de82d01ba6c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5f966449-5dee-4af5-bcac-58b064c475fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "638a673b-6d1b-4581-91bb-4feb4017c005",
        "cursor": {
          "ref": "a8d44624-d4b1-426f-afdc-cc1df6be2cd4",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "8838c133-7eef-44d3-82f7-c73e620cdbed"
        },
        "item": {
          "id": "638a673b-6d1b-4581-91bb-4feb4017c005",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "dc981740-1496-4849-b08e-3c2f86427e8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b82a3634-f5bb-4eff-a2c8-8e8f8fc2bf29",
        "cursor": {
          "ref": "dd3889ad-a2a9-4d89-b58a-e638cefa1648",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "633cb485-e8a6-4957-b784-58c5adff3f8b"
        },
        "item": {
          "id": "b82a3634-f5bb-4eff-a2c8-8e8f8fc2bf29",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "89c279cc-6014-488e-91df-335b45239a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "293d9d42-437a-401d-bc9e-f50b3d9e6970",
        "cursor": {
          "ref": "3081bb98-10f8-4ce5-afa9-3f0656791c09",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "2b703226-efc1-4f88-848b-c268e509162d"
        },
        "item": {
          "id": "293d9d42-437a-401d-bc9e-f50b3d9e6970",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0ba6ea71-5fcf-4868-bc08-b02506865643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0f9541-eeb9-4219-942c-244d25331d8b",
        "cursor": {
          "ref": "cc2aa242-c357-4548-a01d-b9f0d0363809",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "04d51e9f-9e65-420a-91a2-cabbca5f6ba3"
        },
        "item": {
          "id": "3d0f9541-eeb9-4219-942c-244d25331d8b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e2b4cd60-943d-4763-9d14-8a9434eebea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cff7e4d-056a-4a78-a66d-c85411db7446",
        "cursor": {
          "ref": "16b6a6c1-2935-474a-9bcf-ab813270c313",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "13893abf-16e3-441e-83dc-412c5b05bb08"
        },
        "item": {
          "id": "0cff7e4d-056a-4a78-a66d-c85411db7446",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d2506d7f-cf1b-49e4-8347-442097ab38dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aad1c76-a75f-42a9-af1a-f88ac4f1a36a",
        "cursor": {
          "ref": "5b341e55-52c4-4c33-81b7-976048eae953",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "10c670af-3723-46a7-a1e0-074b85a16e8b"
        },
        "item": {
          "id": "1aad1c76-a75f-42a9-af1a-f88ac4f1a36a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "0c4998e0-4bb0-4088-8559-f2028198e52c",
          "status": "OK",
          "code": 200,
          "responseTime": 575,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "bbb347fe-b5f2-4418-aad6-19e6fe3915d4",
        "cursor": {
          "ref": "83794054-555f-423e-b86b-c7baf8031628",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f4ec29bb-cdbb-4f0e-994b-d8a97029c4ea"
        },
        "item": {
          "id": "bbb347fe-b5f2-4418-aad6-19e6fe3915d4",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "dbf95a46-d5fe-46e7-af51-a741e3cebeed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38634238-33be-432f-9700-e90c53ab8d4a",
        "cursor": {
          "ref": "2c9ac0ea-3417-4377-97eb-462d5dcdc77f",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c7737144-0e9b-48e2-9ee2-f5a6ec6292d9"
        },
        "item": {
          "id": "38634238-33be-432f-9700-e90c53ab8d4a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "810b64e0-a18d-4127-8f1d-25b0cd4086f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd72bc42-f4dc-43b6-8858-a301cd137fc2",
        "cursor": {
          "ref": "70bcf70e-f6d1-495d-b6a2-8ce58f65c221",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "6beb9bfc-2165-4f24-b4de-6ffe738729cf"
        },
        "item": {
          "id": "cd72bc42-f4dc-43b6-8858-a301cd137fc2",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f0ffda1d-d6b1-4a57-8303-843ffca6fc08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b763083-087c-478c-af07-181e8b866b83",
        "cursor": {
          "ref": "c7008375-2d33-4a5c-a627-143af578fc0f",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "68c6c3d3-78dc-41e7-8c1f-c6fbd9399c5a"
        },
        "item": {
          "id": "3b763083-087c-478c-af07-181e8b866b83",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6d942752-be60-4595-9626-99ca361e5fa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5302d171-51f2-4863-9a5e-b259f5e509c2",
        "cursor": {
          "ref": "82256264-0b25-45e2-a720-0d13469342aa",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "fa452835-5cfb-4441-a13d-216074aefe4f"
        },
        "item": {
          "id": "5302d171-51f2-4863-9a5e-b259f5e509c2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "06a07181-7be5-44d5-82a4-e545f1fcaf48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67675e06-a102-4271-9aff-b4beb837d436",
        "cursor": {
          "ref": "7159980e-f1a6-453c-a886-b33609ff26f7",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "0f9c7f49-918d-4f74-a1ff-d439792566d7"
        },
        "item": {
          "id": "67675e06-a102-4271-9aff-b4beb837d436",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "2451a901-1cc3-4535-9d4b-cce28bb6253c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa37f74-4eb2-4192-b173-ee90a79aa688",
        "cursor": {
          "ref": "f89460aa-70b2-49d5-a65d-679336526135",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e07994da-d4f5-4bc8-ad05-07b8d42f1e1e"
        },
        "item": {
          "id": "0aa37f74-4eb2-4192-b173-ee90a79aa688",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "757dfe53-26c3-4fe5-8a8b-cd66dfc66ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc42fbf9-c6e1-42d3-a608-1ced6d27b768",
        "cursor": {
          "ref": "4efa0a82-5b0d-4339-855a-be4cc5387d31",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8ff5c30a-7829-44da-9020-0a3895a49b7c"
        },
        "item": {
          "id": "fc42fbf9-c6e1-42d3-a608-1ced6d27b768",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "bdcf428a-7f06-4807-b34d-186dbc79e91b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b44397a-1e4f-40f0-87dd-dd6e9237f2a5",
        "cursor": {
          "ref": "d50dbf9d-9426-49ca-9158-e22d5407b4b7",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3389d717-fb95-477b-87a6-7296cef312fc"
        },
        "item": {
          "id": "2b44397a-1e4f-40f0-87dd-dd6e9237f2a5",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "82ef1c68-44c6-442d-bb5c-730320883fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d28c5dd1-d211-4631-b1b6-57452ffde265",
        "cursor": {
          "ref": "9193837e-9d4d-4369-8626-244183affbd8",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c1c9b799-4469-44d9-9fad-a3488c485184"
        },
        "item": {
          "id": "d28c5dd1-d211-4631-b1b6-57452ffde265",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b893dbf8-858a-418f-8eda-94d71ed19980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ed806d-132b-41c4-8d8e-f726e878f83b",
        "cursor": {
          "ref": "53e97189-5a34-48ca-b4b0-b47fe434f83c",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "95786f45-1686-472c-b16f-d824475feeea"
        },
        "item": {
          "id": "83ed806d-132b-41c4-8d8e-f726e878f83b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "153caeaf-e3e4-445e-94b0-8bb2eb0dde05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b313b71-c901-45cc-b868-98d1b1ed641a",
        "cursor": {
          "ref": "d411c061-607b-4285-982c-ba1ebbff265a",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c1dce4df-053a-4f65-b126-a77db882d988"
        },
        "item": {
          "id": "4b313b71-c901-45cc-b868-98d1b1ed641a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "47d207ce-6a3f-411e-83c9-793b90c8c80d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a150d52-cae0-402d-a4e6-51dac2e35ef6",
        "cursor": {
          "ref": "c65a0a81-fe55-4cd6-a63a-55de6cda13cb",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "02da89a7-4774-4ad5-92d1-573b060a0530"
        },
        "item": {
          "id": "2a150d52-cae0-402d-a4e6-51dac2e35ef6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "568f378f-beae-46c7-ab3c-638b6accc7fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73682f2a-09e1-4ac3-b009-d962792f8caa",
        "cursor": {
          "ref": "4b28ef44-1691-49bc-9e9d-923fadd63b93",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "63b58009-aa6e-4d5d-9d8a-f8c5fa084fa5"
        },
        "item": {
          "id": "73682f2a-09e1-4ac3-b009-d962792f8caa",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "0e6a074f-2537-4a79-aff8-dcdee381bf6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e02da6a7-fd74-408d-814f-b76c446203d1",
        "cursor": {
          "ref": "b5c767cb-23d6-4cc0-b140-4dafa75dc580",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "023dba1a-f439-445b-a36e-42a01d50776d"
        },
        "item": {
          "id": "e02da6a7-fd74-408d-814f-b76c446203d1",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3c36c4b3-c8ff-4b02-bdff-3fd940c96dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b1821d-20a0-474f-ab13-2f67d9c29cdb",
        "cursor": {
          "ref": "0cdba984-0f41-4a63-99e5-0723e9c76c28",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b2075ac4-3ad1-46b5-b2f1-d632ee984b74"
        },
        "item": {
          "id": "22b1821d-20a0-474f-ab13-2f67d9c29cdb",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "17a5e3dc-511b-41b5-9586-4e276010017a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c764874-23db-4447-9b84-d9b7205859cf",
        "cursor": {
          "ref": "0436688b-cd76-4c40-a6c3-158b4c5a7c25",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "09491995-9691-4dca-90da-dbeb32aa7023"
        },
        "item": {
          "id": "8c764874-23db-4447-9b84-d9b7205859cf",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "fe93bad0-f4ff-4143-9a6d-8ad75a29b5b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "181fe320-bad4-41f1-8898-3959f768f8aa",
        "cursor": {
          "ref": "e4d6ab0a-c331-453e-9cf3-7328b76f67d6",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d766ab25-377b-47ce-a53e-4acdfc543009"
        },
        "item": {
          "id": "181fe320-bad4-41f1-8898-3959f768f8aa",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "bc2b5235-377f-47e8-bdf8-f93aaf091b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce187ac-a7ff-4368-a710-e99b269c8a46",
        "cursor": {
          "ref": "a86b6b8b-3922-4cd0-b674-995462dda36b",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "32543059-db6c-4f3f-9e38-2ea623f90faa"
        },
        "item": {
          "id": "cce187ac-a7ff-4368-a710-e99b269c8a46",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ffeb30bb-acee-4c7e-8451-3a89dd28a8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f8156f-a538-41c6-87e5-709f2b99662f",
        "cursor": {
          "ref": "f8083dec-873e-43b6-a684-e950a846189f",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "653679d9-c076-4514-94bb-c01355211454"
        },
        "item": {
          "id": "30f8156f-a538-41c6-87e5-709f2b99662f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "138dbf59-8e1a-4524-9dda-6d4ab0f10b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "393392a0-52a6-4bb0-8447-0b2be2ebc3a8",
        "cursor": {
          "ref": "e124f5f2-0004-42f7-97e9-c2f490738a4d",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "7a622725-da47-4799-9522-ae045944583d"
        },
        "item": {
          "id": "393392a0-52a6-4bb0-8447-0b2be2ebc3a8",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a79279bb-9df6-4ea6-bb70-4e1823f1fb08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94409e8d-da69-4268-9fa9-44303f519738",
        "cursor": {
          "ref": "fce94888-a6fa-4279-b44f-0c1ced2fecfb",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e8e352e6-f653-427d-a352-52f05c4d1fca"
        },
        "item": {
          "id": "94409e8d-da69-4268-9fa9-44303f519738",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "bca68652-24ff-4bcb-b0a8-13fd4dd13d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09cb0163-43ca-4a63-9480-aa61c0df9ff0",
        "cursor": {
          "ref": "65039142-2727-4668-8c8c-053d6e749b77",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "71e6a292-f082-4628-9c7e-bcd99fc266ad"
        },
        "item": {
          "id": "09cb0163-43ca-4a63-9480-aa61c0df9ff0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f6bc8e2d-7e51-4093-8b99-31c30aae28a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "908a94e7-aa67-4be4-aab5-ec5593616945",
        "cursor": {
          "ref": "d2883b29-efa5-4b5c-9208-8639c0371636",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a99dc1f8-22a9-4e0e-8c6e-8ab7ae508663"
        },
        "item": {
          "id": "908a94e7-aa67-4be4-aab5-ec5593616945",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "43e01a6c-fda8-4c73-95a3-6444c69ef0ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932abba5-41b6-493c-8fd4-13acec8573f3",
        "cursor": {
          "ref": "fe188eab-addd-47c1-8137-c300d3636389",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ed5f6a4b-f954-4630-8419-33517b77dbde"
        },
        "item": {
          "id": "932abba5-41b6-493c-8fd4-13acec8573f3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "86c18366-dfdb-49b8-af10-5420158289ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec3c0ed-78e8-41f9-be54-b9e710f1260b",
        "cursor": {
          "ref": "f0a7f74b-1ceb-4e94-838f-89e2ac1d6218",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "da1251f1-7932-4701-a52b-fc9d3eb98fa1"
        },
        "item": {
          "id": "bec3c0ed-78e8-41f9-be54-b9e710f1260b",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "7cd961fb-9ea6-4ddf-b419-847e27d19599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "207ea82b-0446-4cda-8c25-15f56c880dc2",
        "cursor": {
          "ref": "3c5939ca-37c3-4a35-942f-2f0fb7761cf0",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "765a85f3-2539-46f2-ba3c-73a7467d90d7"
        },
        "item": {
          "id": "207ea82b-0446-4cda-8c25-15f56c880dc2",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5474bf65-36fe-4be1-afe0-aa11ca3702f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8eb79ec-d27f-4f3e-8fcf-9a66cf929587",
        "cursor": {
          "ref": "578b20ae-21b3-4f47-b8bf-dbaf02c5179e",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "660e99d6-2acb-48fd-b957-ef9ff3c2d648"
        },
        "item": {
          "id": "f8eb79ec-d27f-4f3e-8fcf-9a66cf929587",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b7893e81-c096-44ad-b45f-87811c66515c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b39ecf7-0c43-42fc-b153-bea5440c7b0e",
        "cursor": {
          "ref": "5c591c97-88ee-4b55-a31e-08fef7fb81d5",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "567e9417-c1a9-4e6d-9d84-96168969d257"
        },
        "item": {
          "id": "2b39ecf7-0c43-42fc-b153-bea5440c7b0e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "afb5b5e2-a07f-45ca-bfe0-fc1266949679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df77b247-3805-4d34-967e-dc2bc4fc3b66",
        "cursor": {
          "ref": "87974e35-142b-4406-bc19-58a378014005",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "6739ea93-2cd0-451f-a747-d9b3877cecc7"
        },
        "item": {
          "id": "df77b247-3805-4d34-967e-dc2bc4fc3b66",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ccd4d2c2-dd0a-40c0-a793-9dcc8f227e62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61b83d9e-aa07-4f23-826d-9cff51dcffd8",
        "cursor": {
          "ref": "10fe3150-47fb-4ea3-b12b-1e36af0c7052",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "1b9b535a-8e61-43a4-baf1-d259b3342108"
        },
        "item": {
          "id": "61b83d9e-aa07-4f23-826d-9cff51dcffd8",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9ad8dc6a-4025-4345-9f1e-5e12e952584e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0be9609-27a7-4533-a80e-40952f7e65c5",
        "cursor": {
          "ref": "bae86416-5793-48e2-9dc5-4a3ee4f375f1",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9088ee6e-8fa0-4d26-8058-2bf30329cc88"
        },
        "item": {
          "id": "a0be9609-27a7-4533-a80e-40952f7e65c5",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3b5ffb7e-0442-4b8c-8abb-f8f48312e8e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2efb90e0-82f2-4faa-af73-e79382cedaf2",
        "cursor": {
          "ref": "ffd139e4-0a26-45d1-a8cf-4792212f2c04",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "afdc3bbc-5f3f-4966-88dc-4147285b16f5"
        },
        "item": {
          "id": "2efb90e0-82f2-4faa-af73-e79382cedaf2",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6c7cb4d5-452a-4f18-8b10-3561f236ff7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53541b3e-9f2f-45cb-9dc7-e64a88874dc7",
        "cursor": {
          "ref": "946e76d3-24fd-4a6b-bc2e-4b0d62682868",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "718ae91f-6e06-4bb4-ac39-e0fcd05d0dbc"
        },
        "item": {
          "id": "53541b3e-9f2f-45cb-9dc7-e64a88874dc7",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "0ae7f401-c50c-4f79-9804-aacf9671c916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a248d6a-1623-43ed-99bb-a054810cc2d7",
        "cursor": {
          "ref": "6eeaebab-f439-4a39-8759-4a4a8e4c1739",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f21a140e-fccf-494d-b540-04845276cead"
        },
        "item": {
          "id": "8a248d6a-1623-43ed-99bb-a054810cc2d7",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "85c426dd-bfd3-4f1b-944e-151b81db2ee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb4cd687-82b0-4ec7-94d4-b6a381f55c53",
        "cursor": {
          "ref": "5d4c0723-da9e-48cc-8731-af8362dfd43a",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "52c94def-2f15-49e5-b26b-b71b9f81beb0"
        },
        "item": {
          "id": "eb4cd687-82b0-4ec7-94d4-b6a381f55c53",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "77a62ca2-bfc8-45e7-9f06-ccf06da84890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e96b43a5-31a0-4944-bcb2-4fd2bf1a45a2",
        "cursor": {
          "ref": "7bc95f77-f2e9-4158-a5e0-b13da5341644",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d802b112-3dd0-4fbd-b51b-949b281815ad"
        },
        "item": {
          "id": "e96b43a5-31a0-4944-bcb2-4fd2bf1a45a2",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "83b9ffe4-f225-4893-b28b-531b27119f07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "421a8081-1b64-4f37-b6f6-639cfa68a685",
        "cursor": {
          "ref": "546fe4fe-3eed-45bc-9126-56acab9ef494",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b6b83056-6d3c-48e0-9f02-937a91a774d6"
        },
        "item": {
          "id": "421a8081-1b64-4f37-b6f6-639cfa68a685",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "082f844e-2e44-406d-8cf3-082e6146e074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c68907-1566-4171-b5fe-5a3a03d36426",
        "cursor": {
          "ref": "7943e942-7599-414f-8faf-c295e59738ac",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ce231c40-89b3-4c31-9058-dc485167085d"
        },
        "item": {
          "id": "10c68907-1566-4171-b5fe-5a3a03d36426",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0c10ac5a-b50e-4b5a-8c61-182dcdca86a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f22104f2-418f-4f36-95a4-5f89a7990e3a",
        "cursor": {
          "ref": "328f9af2-5b5c-4679-875f-f00038bb0162",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "044f9861-00db-4a0b-bd1f-0644c8a6915c"
        },
        "item": {
          "id": "f22104f2-418f-4f36-95a4-5f89a7990e3a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0233246b-34f3-4840-a51e-82c9fd5eaaea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea08bae-adc0-42ba-aa1a-ec75bb2bad42",
        "cursor": {
          "ref": "a0b5b26e-c65a-43a4-8874-a11ec37f477a",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "87242bfc-5539-4512-85fa-67cd612cf534"
        },
        "item": {
          "id": "bea08bae-adc0-42ba-aa1a-ec75bb2bad42",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "fbaeb311-f5bb-4ecf-a4a8-afbecf4aa955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfddcee6-f376-4491-93dc-3e52ce447bff",
        "cursor": {
          "ref": "8311feff-541e-4873-a362-33781c53087b",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ce265003-35be-458c-a04d-3510fa82bf7b"
        },
        "item": {
          "id": "cfddcee6-f376-4491-93dc-3e52ce447bff",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "149425fe-9f92-41ef-a3f9-4a3f1403c44f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebff92a3-773f-47f2-921a-2f9e12e668e1",
        "cursor": {
          "ref": "1c9775ed-0406-47c4-9e82-4d47c6616010",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "5f0a8124-b916-412e-b7df-b805e6db2795"
        },
        "item": {
          "id": "ebff92a3-773f-47f2-921a-2f9e12e668e1",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "62f82122-6bc3-4591-9bcd-2cfba972c880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3050613-5a96-4fe0-a3e0-0669cf1d1b49",
        "cursor": {
          "ref": "22429d67-d58d-4fb2-89bd-1794cdd16915",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d90d7bcd-2dac-4fea-8532-5fe2675a44db"
        },
        "item": {
          "id": "e3050613-5a96-4fe0-a3e0-0669cf1d1b49",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b25b69c4-0dce-4a0d-baba-5b7001d76873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2464051e-4092-46fb-8aba-613538f4fac5",
        "cursor": {
          "ref": "e0b76045-d36c-483a-a3e7-8dbff14f98f7",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b1c27882-ddbc-4af5-abd8-573b740836f8"
        },
        "item": {
          "id": "2464051e-4092-46fb-8aba-613538f4fac5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "446be682-94df-4331-a22c-516d7c17e7e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e48a4b0c-fbcd-4fd1-b0fe-0b75f4d26dde",
        "cursor": {
          "ref": "9cd17e94-2e13-4657-a28f-84cb1ebe330e",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "5346824e-8bcc-41b1-b829-601c20b26e39"
        },
        "item": {
          "id": "e48a4b0c-fbcd-4fd1-b0fe-0b75f4d26dde",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6041a1e4-2c59-4103-a42b-084a6ba870c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec270d1-2426-4546-90d9-193573e74254",
        "cursor": {
          "ref": "49c80b7d-2da1-4bbd-ba3e-186f24433eb7",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5e8e4fba-2f48-4046-bda4-41234229cfb2"
        },
        "item": {
          "id": "cec270d1-2426-4546-90d9-193573e74254",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "fd0a954d-f18c-4db6-b283-51e2bd651859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b819285c-f14b-4b90-866c-e549597d9607",
        "cursor": {
          "ref": "96a7a013-66d7-49df-b584-ffe570d21081",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7b6c6c9e-df21-4ece-a5bc-30a57cb05b0b"
        },
        "item": {
          "id": "b819285c-f14b-4b90-866c-e549597d9607",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6c2265d5-8ede-432b-b172-3ed8e6d07947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af217abb-8ed1-4a6b-99c9-4db9d137a5d3",
        "cursor": {
          "ref": "677f060e-35ba-43d9-b33c-301bc734d9c1",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a6187def-dce7-4fe5-81e7-d50df541c9a5"
        },
        "item": {
          "id": "af217abb-8ed1-4a6b-99c9-4db9d137a5d3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "289fe029-f11d-4d8f-91c5-de0c0ead0b67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "907aaf8b-42a6-4a25-a7df-0da5d8f07aea",
        "cursor": {
          "ref": "b362a355-52c7-4f66-bec1-b8152eaa50a7",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "3423e68a-2268-4984-92b8-7f6bedfc8285"
        },
        "item": {
          "id": "907aaf8b-42a6-4a25-a7df-0da5d8f07aea",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "1c3f8173-ab64-4c1a-91b8-921210f37a0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74989df2-7a90-4aec-977f-eebbb72d6a3d",
        "cursor": {
          "ref": "9e38a063-4c00-4be5-bf7e-11a07c755bb6",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a45c791c-67bf-417d-a6f0-2bec6833130f"
        },
        "item": {
          "id": "74989df2-7a90-4aec-977f-eebbb72d6a3d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "28f03734-f528-4f79-a489-dc3760af3efd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "183ef95b-090c-4b4e-a604-7515220c5ec3",
        "cursor": {
          "ref": "0f053865-4e28-49dc-b777-689d11051c0f",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d3b32ccc-49ec-4cd1-b7de-34e38a64cdd7"
        },
        "item": {
          "id": "183ef95b-090c-4b4e-a604-7515220c5ec3",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6eddc128-c5f7-4ad4-9674-3bec2bc8cf37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e57130a-1fee-49a1-ae76-5c85caa3f45f",
        "cursor": {
          "ref": "be442110-481a-4e08-a1b3-1f569b43d96e",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "903e30d4-4e8d-4028-afd8-d71148e8e590"
        },
        "item": {
          "id": "1e57130a-1fee-49a1-ae76-5c85caa3f45f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d1a6cf64-6b91-4d2c-ad06-9ca96f7302ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b99b9f-0555-4e7d-9d56-85ec2f4264c4",
        "cursor": {
          "ref": "cefa6095-ffbf-4c6a-b881-ceb2917cede1",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "822a3482-5b8f-4369-b7c4-d660762ffb3c"
        },
        "item": {
          "id": "13b99b9f-0555-4e7d-9d56-85ec2f4264c4",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e0a949f5-1b01-4796-bf56-211c0109d78e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a3ae2b3-f04f-4e4f-9394-9a8748af2516",
        "cursor": {
          "ref": "6d23d7c8-7157-44f6-a87f-d284dfbcac40",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e087b105-0cdc-4cbe-b3e0-3c40a4ffb229"
        },
        "item": {
          "id": "5a3ae2b3-f04f-4e4f-9394-9a8748af2516",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e6a9acbb-706d-4a8a-aac7-5c964a72af89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3cb0ff4-71e5-49b4-bf10-000a3b828cf2",
        "cursor": {
          "ref": "bd5e5906-aa3d-4cc8-a624-24bdbb7840cf",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "01f229cd-01b5-4271-99ce-52b1f5766ed0"
        },
        "item": {
          "id": "c3cb0ff4-71e5-49b4-bf10-000a3b828cf2",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "48b6966c-d1c1-45b6-89da-5bf39fa2b9e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27f28fe0-e183-47bb-8043-379855b6dd4e",
        "cursor": {
          "ref": "54c5604f-329a-4094-a185-a7bf0694fdaf",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "fb6cafc9-2bfc-4f7a-a7df-601373223695"
        },
        "item": {
          "id": "27f28fe0-e183-47bb-8043-379855b6dd4e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "20f45fe8-5ce7-47b6-b3f8-33e7e3797913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f60c32aa-cdae-4d9d-b3f5-30112dc10a55",
        "cursor": {
          "ref": "bd674c73-6074-4458-bd90-2434b2f367c2",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "fae2cea6-5224-4c01-9045-bfa2168489df"
        },
        "item": {
          "id": "f60c32aa-cdae-4d9d-b3f5-30112dc10a55",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "42763b23-c826-43cf-b6f1-8c4675818483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51c2e34-6732-4cc4-ab12-45e5565936b5",
        "cursor": {
          "ref": "89bbe706-dc22-424c-a9c3-24daf0b4fd79",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6fbb4eae-66e8-4413-824e-ccd73a31bdd7"
        },
        "item": {
          "id": "e51c2e34-6732-4cc4-ab12-45e5565936b5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "bebe9859-f75d-447b-8033-0559b2211a11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ebe516-27a0-45e7-8e41-5ce60c7eb585",
        "cursor": {
          "ref": "9dcf8f3a-6726-4afa-936c-9dd8a9dd9b81",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "86750d85-f32b-4be7-a9c9-0b7f73038b82"
        },
        "item": {
          "id": "e6ebe516-27a0-45e7-8e41-5ce60c7eb585",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "0ab9dce7-e9f8-46be-b6ae-4054d52bd7b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f3008f-45a4-4ecb-8db9-da3f091757b4",
        "cursor": {
          "ref": "0b40c18f-db82-478c-90dc-da1491dbbc06",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "2500058c-328e-4544-8560-07fb3ecd4d23"
        },
        "item": {
          "id": "b9f3008f-45a4-4ecb-8db9-da3f091757b4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c656767f-5a68-4dd6-a4b7-9bc456a1c042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7462fd3d-8f4d-4eec-b3d8-7e974a2583d9",
        "cursor": {
          "ref": "e3dd29e2-6f3d-4162-98ea-b2472ea0f484",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c49198fc-77ce-497f-8f27-7bc3aed13cb5"
        },
        "item": {
          "id": "7462fd3d-8f4d-4eec-b3d8-7e974a2583d9",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c82f9d08-3907-4896-9ef4-c21f431e212e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e6f0d6-2bdf-4f9d-abad-b483f2e8b3ca",
        "cursor": {
          "ref": "65b42c67-da92-4df0-a26e-b78cac3060f1",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d51f59ed-4c27-40a5-b087-7d9ac08bc8d7"
        },
        "item": {
          "id": "b2e6f0d6-2bdf-4f9d-abad-b483f2e8b3ca",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5f130b3b-1ee6-4c2f-9dff-4e0d7981dcd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09605e74-0c3a-444c-8d19-704b2b4ac400",
        "cursor": {
          "ref": "4de49b31-6831-4d04-ba6e-adb67c737094",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8a25f3a1-89d7-4c48-abed-c40985848c91"
        },
        "item": {
          "id": "09605e74-0c3a-444c-8d19-704b2b4ac400",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "15a78bab-af8c-4b72-8415-559def0eb593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6fbafc2-7153-4247-aa08-6254c43dc0cb",
        "cursor": {
          "ref": "9fffad6c-ac3b-41ca-9f06-7b65f968ab97",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ad99b193-cc0b-49cc-8c51-c59aa0475bde"
        },
        "item": {
          "id": "b6fbafc2-7153-4247-aa08-6254c43dc0cb",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b170d785-456b-459d-843a-fc6223bfee2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782d31cf-9a62-478f-bf9a-4f90ee351a03",
        "cursor": {
          "ref": "6e14f87b-746d-49d9-b552-090101567aaa",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4beb5cec-571c-48cf-8434-026a6d782e31"
        },
        "item": {
          "id": "782d31cf-9a62-478f-bf9a-4f90ee351a03",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8561887b-eab1-4594-8cb5-dcaefc62c6aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5c3835-c234-4f8b-8a9e-cda57c346a12",
        "cursor": {
          "ref": "799f65b8-882f-4c58-a446-7c2e54bd62ce",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "2011fd6f-d436-4d45-8ef8-e7f2d882803d"
        },
        "item": {
          "id": "aa5c3835-c234-4f8b-8a9e-cda57c346a12",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3bcd9f3c-6a29-4e50-a0ce-d5680020ce20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04be98b0-c5e7-46cd-8b51-4847804f1067",
        "cursor": {
          "ref": "109a61c0-03a1-4fa7-bd3b-dfb805ccf07d",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3fcf43e5-63c3-40b9-b2c9-5163641dbf4a"
        },
        "item": {
          "id": "04be98b0-c5e7-46cd-8b51-4847804f1067",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c7f180a7-64ff-40eb-aa97-e08534048e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d70de128-650d-4a05-8d19-f5b452d71b50",
        "cursor": {
          "ref": "be1be444-58c8-4bcc-abf9-1c8d808ce53f",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8e23a141-120e-4fb5-af53-3dc66636790a"
        },
        "item": {
          "id": "d70de128-650d-4a05-8d19-f5b452d71b50",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e305fe6c-4ebc-47c2-bdef-02bdd7edafd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c445cb8-0fc3-446b-a279-f83eb6329da4",
        "cursor": {
          "ref": "0e833837-31f7-4818-85ed-fd9c78b8a1ce",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "b24fbe7e-5ae6-427b-a50b-8d3c404abdde"
        },
        "item": {
          "id": "3c445cb8-0fc3-446b-a279-f83eb6329da4",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "970c69e2-682b-4113-92a7-d8584dccd5d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e26d811a-9b80-4097-86f1-502cfbe61bac",
        "cursor": {
          "ref": "82bffbb5-b3aa-48bc-bead-66186d7a53e4",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0e674b2c-b075-47fe-90f4-afd54f077d53"
        },
        "item": {
          "id": "e26d811a-9b80-4097-86f1-502cfbe61bac",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "bc5f458d-a46e-48ff-83b9-7cb939df1645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ad611a1-5e4a-431e-a68f-fb0cacd44d23",
        "cursor": {
          "ref": "cd2c3a83-fe75-4dbd-bd73-6271d82f8085",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "01f5ee43-81fe-4814-84b5-b1d21da33445"
        },
        "item": {
          "id": "9ad611a1-5e4a-431e-a68f-fb0cacd44d23",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8e3bf857-5ae8-46f2-9db0-3a9f38e75cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd62e62e-e9ec-4493-9bce-c0c29d2f2dfd",
        "cursor": {
          "ref": "af5735b9-dd20-410d-aeac-7d14a41d4b30",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "779642bb-d7d9-4142-8691-22ee6e67e8c7"
        },
        "item": {
          "id": "fd62e62e-e9ec-4493-9bce-c0c29d2f2dfd",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d80ba847-9c81-4b2a-882f-acf1380d4379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95af72ca-2b01-4030-a44a-ec89f299f8ad",
        "cursor": {
          "ref": "6b3be24c-d4a0-45f9-a050-d2cae8346d06",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3d6a8301-d0a6-4d26-8762-8c337b7f3e6f"
        },
        "item": {
          "id": "95af72ca-2b01-4030-a44a-ec89f299f8ad",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "74474564-51c7-456a-9291-a83244f45a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7ec488e-7fad-49b2-b09e-d16c5d7cad55",
        "cursor": {
          "ref": "11504926-7553-4487-b4bf-b98d9c4b2732",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7e2ae1d0-663b-4109-96c5-93243b8b630e"
        },
        "item": {
          "id": "d7ec488e-7fad-49b2-b09e-d16c5d7cad55",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "474f91c5-d28e-4f6a-a620-7fa5bc12c217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d60e816f-85b7-406d-8262-b1537110c3c9",
        "cursor": {
          "ref": "bbd5e3b2-fe30-4bc0-8a4b-21dd60629bbb",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "bb6b5c0d-b1a0-4844-93c4-ce9b38eb33ec"
        },
        "item": {
          "id": "d60e816f-85b7-406d-8262-b1537110c3c9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b0ef2e87-16ac-41f3-a84a-072c5381d232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adf84c5c-a5d8-459a-b4db-7cd9af87a1bc",
        "cursor": {
          "ref": "ae9de6fd-654d-43c3-88a5-05a08eede590",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "852727db-bcc4-4894-99aa-9b010ca012b3"
        },
        "item": {
          "id": "adf84c5c-a5d8-459a-b4db-7cd9af87a1bc",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "83939fb2-b33c-4720-af1d-99ef77253e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6d1394-1e4c-4b66-92b3-8502c6987ec4",
        "cursor": {
          "ref": "8bbbe7fb-ea5d-434f-89e8-4367dc7c7f2f",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "347760d6-4563-48cd-8495-a2da415148d4"
        },
        "item": {
          "id": "aa6d1394-1e4c-4b66-92b3-8502c6987ec4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "001bfd65-f83f-485d-a76d-8d45eccabee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09950dad-cc4f-4c0b-bc52-2ed1e0cdeb8b",
        "cursor": {
          "ref": "66eb0952-6a79-40d0-a29c-9d1d25890645",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b848e624-9992-4a4a-832d-87ad93d5c985"
        },
        "item": {
          "id": "09950dad-cc4f-4c0b-bc52-2ed1e0cdeb8b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ab2ff26c-2850-4a39-8b5b-b298d96186d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80893e74-0bdf-408a-9a36-afe1338669f2",
        "cursor": {
          "ref": "76b91eed-4ccd-4a68-9558-983608266a66",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "848e4e4e-5001-46a2-8316-9261035ffab3"
        },
        "item": {
          "id": "80893e74-0bdf-408a-9a36-afe1338669f2",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "50864b5a-757f-417a-94c2-a9b771963e90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb859f3-c023-4ecb-b76f-50539d5d8bf5",
        "cursor": {
          "ref": "d816ae3c-9710-4e02-973d-3898ba2a5599",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2c128774-b34f-4edb-9255-775c8b0f0e5f"
        },
        "item": {
          "id": "2cb859f3-c023-4ecb-b76f-50539d5d8bf5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4052fb74-7d08-4538-8426-740c772939e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "3d26fe98-5e3d-4383-bdf7-e28ecce35363",
        "cursor": {
          "ref": "d7cebf01-e035-401d-8b58-9ca31720c9f0",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "bc0e06f1-3648-4e01-8f8a-98a0a6e2258e"
        },
        "item": {
          "id": "3d26fe98-5e3d-4383-bdf7-e28ecce35363",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "ed548ff8-59a7-4f27-9c44-c7189ac0e947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "7760fdba-35e4-4f40-b932-785c5756a5ca",
        "cursor": {
          "ref": "18c14666-f6f2-4572-b604-ada89d9772c7",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f57db777-1e17-4abb-8da8-af357d89b3a5"
        },
        "item": {
          "id": "7760fdba-35e4-4f40-b932-785c5756a5ca",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e6ef2ac2-958e-4072-b1dc-7b464575e339",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "220abdd6-1008-4dfb-9711-feb40e8ca58d",
        "cursor": {
          "ref": "c6f6d4a8-49f1-440e-a2f2-c9fe9b27201b",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d1ca63fd-dd3a-4baa-a75e-7266f3cf53b0"
        },
        "item": {
          "id": "220abdd6-1008-4dfb-9711-feb40e8ca58d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0bec0b8b-2152-4853-ab27-ccb89cb2d325",
          "status": "OK",
          "code": 200,
          "responseTime": 2248,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c4e9b9-cd81-4443-849e-7068d3db02be",
        "cursor": {
          "ref": "d3630fba-0bcb-467b-8227-25a88993f34e",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "39bf68bf-66f5-456f-a4c4-1019c0d613f5"
        },
        "item": {
          "id": "f9c4e9b9-cd81-4443-849e-7068d3db02be",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "f7df0063-65dd-4ece-bb72-8f6e79671a5a",
          "status": "OK",
          "code": 200,
          "responseTime": 2368,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f07f3b75-a7f7-461b-9fba-dd8748cbd3df",
        "cursor": {
          "ref": "f21b9575-d2e5-4ed0-aa5d-dbbc9e7c7a0e",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9637cdd6-7aa2-48f3-a89b-a67ff8badcf4"
        },
        "item": {
          "id": "f07f3b75-a7f7-461b-9fba-dd8748cbd3df",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "343eddbd-3d57-4e5c-89a9-335965c510ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "f07f3b75-a7f7-461b-9fba-dd8748cbd3df",
        "cursor": {
          "ref": "f21b9575-d2e5-4ed0-aa5d-dbbc9e7c7a0e",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9637cdd6-7aa2-48f3-a89b-a67ff8badcf4"
        },
        "item": {
          "id": "f07f3b75-a7f7-461b-9fba-dd8748cbd3df",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "343eddbd-3d57-4e5c-89a9-335965c510ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "f07f3b75-a7f7-461b-9fba-dd8748cbd3df",
        "cursor": {
          "ref": "f21b9575-d2e5-4ed0-aa5d-dbbc9e7c7a0e",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9637cdd6-7aa2-48f3-a89b-a67ff8badcf4"
        },
        "item": {
          "id": "f07f3b75-a7f7-461b-9fba-dd8748cbd3df",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "343eddbd-3d57-4e5c-89a9-335965c510ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "6503dbea-bbde-43f8-9eba-28885437ba3c",
        "cursor": {
          "ref": "cd3c0712-a8c9-4d47-be66-33beb22f1bf0",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "82036e87-6e33-4cd0-ac6b-79772f0b8fff"
        },
        "item": {
          "id": "6503dbea-bbde-43f8-9eba-28885437ba3c",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "67a3ede3-6bfd-455f-a082-7bd3b9f340d7",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "1b87b9e5-99e3-4e2f-8e39-e0af0c7ae05f",
        "cursor": {
          "ref": "eaa6701c-d45f-4696-a016-1195bd31ca34",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "85bcd7c3-51f6-467b-b632-e0178e01635a"
        },
        "item": {
          "id": "1b87b9e5-99e3-4e2f-8e39-e0af0c7ae05f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bf2c77d5-b5b9-4bbc-b703-690a944179db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "1b87b9e5-99e3-4e2f-8e39-e0af0c7ae05f",
        "cursor": {
          "ref": "eaa6701c-d45f-4696-a016-1195bd31ca34",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "85bcd7c3-51f6-467b-b632-e0178e01635a"
        },
        "item": {
          "id": "1b87b9e5-99e3-4e2f-8e39-e0af0c7ae05f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bf2c77d5-b5b9-4bbc-b703-690a944179db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "1c66cbcd-d86b-48f0-ac57-d4109fa348a4",
        "cursor": {
          "ref": "99b387fa-e3fe-4228-b340-b8cf965a3e7b",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "4c928186-54ad-4fb7-9fb0-127ceb627106"
        },
        "item": {
          "id": "1c66cbcd-d86b-48f0-ac57-d4109fa348a4",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "ebb890b4-8595-40e9-858d-329782f5ab91",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 409,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "ddc93ca3-af47-428f-bcb8-364c759fcc43",
        "cursor": {
          "ref": "f0ec5789-113c-4d0e-8326-2bb070d94c4f",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a9fe38c4-8805-4e38-94dc-b9346b5d4a20"
        },
        "item": {
          "id": "ddc93ca3-af47-428f-bcb8-364c759fcc43",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0dc0d1b6-6b74-46ab-92b4-3dbaf7ecb10d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "ddc93ca3-af47-428f-bcb8-364c759fcc43",
        "cursor": {
          "ref": "f0ec5789-113c-4d0e-8326-2bb070d94c4f",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a9fe38c4-8805-4e38-94dc-b9346b5d4a20"
        },
        "item": {
          "id": "ddc93ca3-af47-428f-bcb8-364c759fcc43",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0dc0d1b6-6b74-46ab-92b4-3dbaf7ecb10d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "6c4aa890-894d-443d-b182-43cb73f6e6f8",
        "cursor": {
          "ref": "9934ace2-2980-4192-98ca-68bd6f65b7e3",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "56fa9cc4-e22d-4bc0-902a-70ff71ff1943"
        },
        "item": {
          "id": "6c4aa890-894d-443d-b182-43cb73f6e6f8",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "e4f8e7f4-a9f7-45c5-b0ba-60f5ed536281",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}