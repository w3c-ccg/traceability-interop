{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e74a20f4-e8a5-45bb-9e7d-dba9af97bd2e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "c4052225-a1f4-4b62-844e-cf871a91c0b7",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f51a1fc1-f84a-44b0-808e-03239a042877",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a0f9929a-ed9e-423c-8ab3-4bab2076857c"
                }
              }
            ]
          },
          {
            "id": "4d8c9439-5989-4e3c-b59b-0a62ddcdeebf",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1678292b-a914-4afd-860e-8235956b2c76",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "46b1d0cd-84b3-483d-a92e-18a573c87dae"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9322f429-dac9-47cf-86d2-78275c420462",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c030770d-29ed-45d0-801e-e401fecf3b2c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bd8ce293-a520-431a-b9b2-1901c93eaad0",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0673fd28-2e07-4300-93f6-464c1330f950",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3a003362-c058-488b-b1cc-0a83f2bd8869"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "95eca328-bcc7-431f-87cd-0a7732bab1db",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "993c5892-2afe-46a4-9477-51e8610d4ef4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e13d05b3-42ee-446f-863a-b0c8cd822f03",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "da95938e-177e-4bac-8082-08988930bb82"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "16c27f37-58cb-472e-ba3e-080dc5222b17",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ac8bf1d1-b04a-4d09-8f7d-4ab5178724a6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "044a8eb7-78ce-4f79-b8e1-dd0311f5e202",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "35bc1124-4a2f-44b4-ac58-e1b47c97d191"
            }
          }
        ]
      },
      {
        "id": "6e8381f5-e3c6-4f4b-86c2-d5135bbe92ee",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "000e06e5-3d48-4f35-b1b4-863c0cef2632",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8d53d8db-d9de-47a1-a2be-db2f89a69a47",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f63d8421-748f-4382-a816-291bb0c24195",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99158845-482c-49d5-9d1b-959ac98ea2c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8afcb5c2-0579-472c-a59b-3c64cfc7fcc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0829ed-ad0e-4ab7-b494-b057213cd961",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a657404-44c9-4b93-93e5-594a5c18d0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "47cfdc36-56cb-47a8-91f6-de070ff44312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f504eff-3432-46a7-92b2-e7144c14233b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c77d0ed-7fe7-4aff-a216-fdd1badb1311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "355050ac-2dab-4438-810a-cbc7a81ad642"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b670f7b5-6660-4e41-92a3-255ebaca2a42",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "108f356d-6d1e-4df7-bc52-e9fdf9d8fbe6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e32c024-a500-4a8d-9e3e-4ee7462868af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e85e3ad-f87d-4f14-8edc-01c42978ad26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147fa5c9-2c20-42a9-8bb3-101fa4794a4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ad3a4fc-8c39-4c24-bf48-080413a0f58c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7e6d016e-a217-4dec-927e-6c71320bbfc3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "41e76ec3-c05f-47f6-a30e-1d0e3a63c715",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "afb402aa-8051-40dd-83e8-11438f8eaade",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f74cbf91-86ea-41cb-bbc1-9d63b36e87db"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "231349b2-ec4a-47f7-af11-ab9bba66e698",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "d1e77471-915b-491a-9720-a16466ab24fd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b13ee9b9-95d3-4f35-9e2e-da819018443a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d325822e-f330-4b2e-ab18-1a43e1d2a830"
            }
          }
        ]
      },
      {
        "id": "025b0293-72dd-4a96-b7bc-390dcf94e333",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1432605c-f88a-4b78-a7a7-82c46fa596fb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4572a543-c7c1-4389-bfd7-930b07356059",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "edcd90d5-2252-4b1e-9ed0-1b143e52c48c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d556aa61-64d1-4d69-8c5a-c801dc774b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65eb02d9-d46f-4c0b-bb67-b76f9ef93715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68f547dd-27a3-4ae1-a388-eab0582593dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d69a2fb-db95-4361-93b3-ecd185163839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7cd9dfd-d494-4377-b32c-741b441b3846",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "596b0b36-5278-4f54-a29d-fe769b92cb0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30a1e9f1-ca90-46b8-9e13-02bb35b80117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f35471-5aea-46a3-9308-1621db4c9bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9993d643-ac1a-48c3-b931-a3d0a6bcaac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e273e3-e3fc-4b07-9692-43ad2ccd0192",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8b560a-fb16-490e-ace4-5d9e3a61904d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "024289a9-d5b7-4d0a-9e9c-7de2a44d130a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70af33aa-051a-4056-969e-a334d68b4ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7affbed2-0ffc-4a48-b4ff-f072f5e7ca4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe50ddb-b636-43a3-ae74-5db07e4f726b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f74b20c-db38-449f-8f8a-0e19a9ddb251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13105463-f2c6-4e35-972f-33da55a747ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d9959a-8549-4c1c-b853-fb706b0ee0cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2f86889-ee9f-47e8-a866-ec17baeccabe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3afa9d8-9987-43dc-ae95-9eeb99faa0a5",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e0786f-0406-4f20-9f03-4762530dd140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8ead57a-50cb-4d7e-95dc-8a2d2ac8739a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9448787-45d4-4d4b-a875-66e994568527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4716f8c-7d69-4f6a-8027-c05907430cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d39ac50d-6f5b-43a5-95ac-e0a855511e13",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b70c71-a673-4e1f-98e2-8afd55c10a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d43f750-4eaa-465d-be33-41d0219a302b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95857aed-735b-4852-ba03-28e3696e22c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca1abfd8-8dfc-41a1-9b65-49e488e22c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "921baf5f-c786-42a6-aaa7-566e5dd3395d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d10e6fe2-5b26-4133-89d8-50340afe36ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "081682ec-41ae-4a92-a078-43bc2ef630ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6136bc15-ef0d-4e70-a230-f434b19da1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c25f5716-6c7e-4923-9a25-e24400fa623e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e151b2ed-24c6-40ff-8dc8-a099ec8399f3",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17bf0354-539d-495a-99da-e2858b881a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e25a69bc-127a-42b7-b2d1-0eed635211cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e328b8-5381-436f-a0f6-52aa589be72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3474b3ec-86c3-4246-bb71-01b383206cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf12ff0b-078e-443d-8bd0-51e66af368ab",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee369cf2-2041-4473-a977-70ad5abec25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbae583c-5a9d-4ed7-9141-03b17b4f08b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8da647-08d8-4d47-a07e-0c37ac51d57a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2655f630-70eb-4376-bed6-e666a84e3b40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f01302-a73d-4b95-a6f8-4e52e8fa9ef4",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d29445-e90c-40de-85e7-45057800ea93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f3a0dcb-9baa-4ed8-8b94-5ace697956f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362b23f9-dc1a-4c01-aef5-bf3f22efada3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d48aa4fa-3123-4531-81a7-43bfb788ea8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4783921-6921-4efe-8762-d49c3668b4c7",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e55917f-e4c1-4642-8681-a7009ebcc4fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b17661fb-ab0c-4626-81d7-c5f27f71661e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb50afb7-d247-425d-b250-2427d64e5ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd41fb3d-773b-4a0b-b479-681db4d8e810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c2c24c4-de3a-4e25-9b44-c0c641648db1",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58daba8c-ff56-468b-ae5e-0b69729a73ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaa44d95-fa1b-40e2-b280-93743ed7d095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e62e03-71d5-4d97-9a6d-30f031b69925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "101f25b6-7d92-4a0d-9f65-41bd3ad91afb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21288947-728d-4465-b27a-eedc29f42801",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb70a2b-75f7-42d4-916c-1af9b25d1d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1dd52f1-1e8e-498b-b5df-3797e8eeffec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ca4545-ca1b-455f-bc70-2a3151b78895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68044544-f0e4-4bcc-aed6-22ca6832fe90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd430f30-3a4d-4f88-ab9b-b2c929432f10",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd0f500-f48d-4473-b6de-beebe34b8409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "657acf6a-5ee7-424b-b727-02978d786114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df3a815-e1cc-4f90-9f83-1912f6f7df24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9f36d61-9a5f-496d-88c0-b894571a6fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50cc85a0-0f19-4378-8da6-d6a06e6841ee",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c732a3f-8316-4974-82db-7fe25f62f8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72355075-ef69-48b8-8af6-a8a752c3af4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df15214-4595-4291-8858-96e5b28f05db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5056263b-4644-4674-89da-3013a108e4ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b06f942-c242-46af-8e01-a36ef7be6769",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c5320ac-e32a-42fb-8fa1-d76219c080da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1b1fa1f-f2c8-4253-bbc4-085ea5498d75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c820a42-3478-40bd-9ab9-e13ab06a68d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d5a9d71-901b-4ddb-ab92-f9f7c011d0f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30aa264f-8372-4fba-bde9-6c884962f6ff",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0157602-fc0d-4fa2-bf83-bd0c2fbcc808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a56bd50-8b65-4219-bdc3-df92be7ef9c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81411958-425c-4bb5-a6da-e02e66ce7dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c434208-4597-4881-92f4-1afe705c58fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2e7d17-c55a-4ce8-a489-c3a8525eb776",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb1d6b8-2db4-4527-a466-c3ebdeec2bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57e8d72f-3bad-4e24-9cc0-06e29297d0b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74665ad2-fcc7-4ad2-9f28-7e337d0d3b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f3f4809-1ca4-4ef0-b8fd-c403858cc570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2400343-4aac-4d2f-9f76-fa272347205b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd4a4c5-6dea-4212-849d-452dc65472fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa1ef21f-21d9-4cb0-9d32-ed794ed2ff16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532b6f63-b840-404b-bf73-c729b782fb82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "915fc866-99df-4ba5-b10d-bfe52a0527b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d42ec4b0-4c28-4bd7-af10-684bbb14f453",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65fb8adc-b482-4952-86ee-15f34e28758a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a66fefd8-c9ec-4728-a9b2-bc6414fa5a94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2d40d4-3dda-4da0-a1ad-fe5ebcf0b307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "df55c37e-9509-4d49-825d-255de69b329c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecfc77e1-35ff-4fc5-85c1-d9af7249769e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0cb56a-bd4e-4178-86c9-a0ebfb201ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c389912c-9151-48f3-98f2-f425b0090304"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73e6773d-1ecf-42ad-9045-875839a24f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bb7b742-c7c4-4f6a-9150-23ea133c3c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd5d987-ea68-4a68-a07e-5b51fbf7721a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66790f0e-3e18-45e3-abd4-c418cb15b52a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a11aab3-c3c4-41af-80fe-1d9479122dcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ab4c20-ea9b-4e00-89d4-93f6b7748ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "64d3a4af-e182-481c-8825-daf7d680c2e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016ae28d-d483-4a5e-9b5e-1b16bc7e2083",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46c1f27-02a1-4c46-b123-ba7791a903b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cc9b359-d4d8-4c90-9fe1-520c2fb06288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae96bfb-4b08-4ba8-9844-d14974310626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1715de80-b39e-428e-bff8-4a97c919bc6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc0aeeb-7540-48b3-b1bf-fa309d05adcc",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a015ca12-4336-4a32-8a04-e2744d8a6490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c5ddeb8-31dc-4a26-a8ea-30b539d21aa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0511e57f-b357-4735-9bff-634c28d6d05d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9feb668d-2074-4300-83a3-e93656aa7ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ace594c-4be8-4e2c-a3f3-dbfc72375ef3",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58bb2d23-dc18-4e3c-bc1a-7a1932cfc4b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7df10717-e7d3-4471-bfce-4e84059079a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec3b68df-0ba7-4cec-a149-b8e2f03eae31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f03512c5-e16c-4cc3-9515-59f9e7347927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f3b3742-e163-4146-a323-19975643bb40",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8d5125-e006-42f0-9c46-9c4ddf36ae62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15e6b2da-75db-4218-9808-5fd75af314b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b799d617-1fff-4b8b-8e5f-251be7f91ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a54c4c7-f96c-40e4-a875-4d3ea64b617f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e57cc42e-5554-420d-aa81-13307a51dd95",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "860e59f1-fa1d-4887-8257-bb8735428490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c88ce92-ddb5-428a-9ae7-0978ef711ffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36753ef-4059-4da9-bc0a-ec692a1592b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6767420a-2867-4b04-9e1c-74e73d70958c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae2bcce-fc93-43a1-bc16-8a3c5da304c2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e5483d-622c-4ebb-9274-eaa999005097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbd12df8-1ad1-4e4c-a6f9-2a49e80c3059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9035038a-b9bd-40de-953a-05225b7c2558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e84185ce-04c9-4bd2-a75b-a04b70ddd569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52bc3aba-0be1-47f3-a8fc-cd7c279fd460",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10264d0c-6db9-492b-9bc0-90e2e8662a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19a40b6b-0a1e-4784-8000-41bcade9ba59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40743390-01c7-4396-8c4f-738e5411830a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b6cd58c-f8dd-433b-aad0-145ad6fb9635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c70816fe-e9aa-4388-b181-e9a1d999d01b",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69fbead5-6b83-4a1a-8428-1705f8389b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e169657c-f606-4178-91d4-33017056069e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7671cb-8213-4e75-b056-33954a1e9146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d827844c-e939-4ff1-a087-fca2b158142e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea2118f-608d-4968-a0c3-8d52edd29878",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1181226b-9600-4e13-8ac1-3613b98ee130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1e62c69-799f-4089-a0e9-32d138ae4990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf116e6-05ef-4a46-8f5b-565bfc3fd94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a8855aa-f367-4345-bc5e-7533fe3196e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9ebac6-8200-4b87-b886-f4a08852abd9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1b29ed-db6c-4133-a2a4-8c2363bb1b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eff2b451-3e37-4e53-abd0-409724c60d42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b175b36-8330-4410-8671-eff6b2dfc7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7976f051-844f-44fc-bbf2-e8f598850d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a143c74-743e-4424-bfb7-fea3e5ad7b27",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93d9380-e916-458a-b81c-98bd922496b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29c8ef35-fd3e-4d08-a0e7-8739abd9c7a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49da5a4f-a4c4-4ff8-9eb5-83aeff611574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "253f55e0-c1e6-41dc-b551-81e1dcc3ef0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f211b76d-e22a-439e-8cda-22fbee192e3b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d62b74c-3a3e-4f1a-ad19-992a6695e799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25eee731-f6bd-40a5-bf23-34f01a432710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603aad5b-ca66-43f3-a80b-8ca61f08825f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e70d4c-b5fd-40ee-bf83-f76a3483f073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d19caa59-972e-44e5-8baa-50dd764a3a28",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebed4598-ffcc-4c04-8692-f2330b1b3fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1ae13b2-245c-47e7-8625-a36bdc2fa049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d07b26e-0442-483a-bd83-893b834d8bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c3f5b833-0d89-4bc6-865a-e45a4d333474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "391ec131-89ea-4df6-b325-6e12964da979",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7b3e00-19e0-4f18-928f-755d4f2fb81e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2f21c5b-7543-40b1-b911-51a3345d10ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5efe58ac-b3b6-464c-afe7-1f24b31d3e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "82978a2e-b0ea-42aa-b3d5-8b2761f00542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "478127c4-1ad4-47c6-9b33-1db47a7a981a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67b992a-5b70-4e0f-a162-5ff242febba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd37ad1b-686e-4544-bf7f-54e5681db2bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "469b43c6-1ec0-4823-bc6e-cd246c3b2beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd4bbd5e-536f-4b0f-b98c-c64f656ffded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bbb2252-969a-4c21-8bea-af9b2c188706",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc79a75a-6715-44bf-ae51-ba26c0e66700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e03c43d-9dfe-4be4-8f92-94527949e856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9fe3a8-2adb-4014-a96e-a6f61c52bafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "88c024b5-3089-497d-b46d-a8fd575d3a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b28d481-3b63-4881-91eb-0c59c635bff0",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53607fb8-8eea-48b2-a207-55f72542b1ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ae88b7-3097-4576-81d4-1ece8c995934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce1ce937-3f03-4687-911d-b6f0775e0bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b338cc-2b70-4fa1-a79f-a2fd23438bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0f9af7-7112-4794-b1c1-845350ba1685",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a4d701-6f4c-4962-a192-7571c425f8ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fd8973b-08fa-4fd7-bee0-e5344774335b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b85bcf-3fb7-4c63-83f4-20cf7e67062c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6b36f14-b18e-4fe1-aec5-7fc79125ea6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84057448-af5b-4528-bb41-e680f50f5b92",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "864df944-1437-4dba-a4f3-b0b003a5a68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e96c57be-d237-4acc-8540-72b08f97e38a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f09bd3c-ce6f-49bd-a2b4-9f575c60c141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "27fb6661-d8e9-41f7-b6f8-6ce41ce8e895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8477ba4f-e9ec-4f5d-a5cf-8cc697b23ecd",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff6fdb8-4877-4d9f-b2a3-bf677f52b89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31f8c01c-3f48-46d6-b582-c506cff3e9dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a833241d-668f-4fc2-abc1-1d6548c2936b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f83b2efd-9d64-4b10-a177-a40ecd1442f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b631f6db-642c-4013-9096-f29857bbab5b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1f80e63-3edd-46ce-9aec-c60cd54ee649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d74082a-d047-4c4b-bb1b-d4982f83f3a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30525af-fead-4b0a-a983-2124fbd96088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "acc65a37-fa66-47fc-b28d-e434a1387d02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a024f28f-ccb0-49a2-b353-ee5d3f244c8b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d49f3dad-3064-402f-96f0-1de7a5666c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f5ab1b8-a87c-4f97-b57c-9a5960fd997b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be43112-3979-4073-9c23-9d4bc84d1fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e54c3d02-c4f1-4194-ad87-7579fdce06f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320ccd59-8760-4fad-8b1d-612214eaebf8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c693d7-a361-406e-a2fa-20adf79f1e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49ac5eba-96ac-4811-9ab6-0f95297ca4a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fed92fe-cbee-4428-849b-f7a2ed78a634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c8541aa-d692-4622-9b89-e315a6d1e0d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31c1134-184e-45e7-8c99-5bdbab7e0e9a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ddb0b65-e414-4655-8569-6c8981c76609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acd3c554-ab6b-429c-9861-3acbe9b028f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30fef8f7-b1c6-4aa1-ab3f-01a2cc771850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "33fe5a1e-185c-4360-a695-5e488b75606f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1836a35-3bdc-4ac9-9b17-375d6eadc8c3",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b416ec8-f513-4216-bff6-3b4e89a41495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a3d8b15-ecd4-4fbe-9da5-141ddc0115fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3bc6937-9201-475f-9002-8c207024054b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ca81db6-48a8-4072-a272-08b5bd5a0620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52906e4-7850-47e3-9bd8-42d8d0ea80e4",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d809d3-accd-481e-bff5-363217e4d08f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d8a7c92-2f1d-4e5d-91ef-122466874897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3baaea36-907f-447b-83fe-f739f86e4eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "df1ed740-992b-4623-a7dd-a0fa94e4ba92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575b33b7-716c-4317-948f-35e13e249073",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f28fa0-e08e-4e5a-8f28-2cef58d05bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db9bfd10-fd10-432f-8666-b6c5b60eebbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb36235d-c439-4edb-80df-f3e09a8de74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb2173f8-5d6e-4392-b7fb-4dc65e1ba06d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c7cf8b-c85d-471a-9870-9a18994074cd",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f914a91e-228a-4dd9-bb5f-a6ea04152de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894e4f53-b4ea-4f8b-ae1f-ebd44a1c790f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca839cf7-883a-4bdf-9e40-c7b03570bf6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4e545f3e-cb23-4f6d-9dbc-4b3f41716f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "627eeace-76ab-4e60-959b-3e8f51f9b4ab",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be8a3a10-3e46-4bc4-9ad5-887a9fabd278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c13e23-1ba0-4d6a-b67f-a8ca620cccc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c4efcf-0255-409c-8d75-4787d05dc38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6ce22b1-ebe2-42b8-bbf2-c03871a3a8b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebcdd851-55cf-446c-a702-680c58567bf8",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a0c045-a392-4b39-a580-1d6502e69eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3044f52c-032d-488a-870d-af4ef8f5a41b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0492c5ee-729f-498c-ab8d-4bd680b11e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6bb59c1-6df3-463e-8c68-064073f520c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de849ab-15c0-40a2-b845-a35a798535a1",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa65122-446c-4f97-9cc6-c24d66a3cdd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbbff079-d378-4475-81c3-5f72cf0673f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a395d7-9a76-451b-83c8-9dff66008844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4adaa566-d612-414a-bfcc-d8aa883c0dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa7b7d79-92e7-47f6-81cb-fc18574a76f9",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "584ab45f-9f1c-48d9-a8bd-43a27ecbbf36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94d91a3c-fccb-4041-8abc-e9da928959c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e7e19d-baf1-4ec5-b617-51ab53c12152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a90533f-8cc3-4ebd-abbd-55ce4ffbcf80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f872a59f-1c86-4704-98b3-4774470afc2d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03bd7e0f-4451-49ee-be2b-166d4c920acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "594eed19-5df2-4f8e-abf4-f3ef899d7abb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd0f06e-950a-426f-9dfc-44f70bb10686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d2f2e04-6f81-425c-85c1-d7339de22d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0d87cf-2f0e-4e06-b38b-5d9c79ec0278",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b836532-1f15-4424-8e80-d17ad180daa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be8da257-85ef-4c19-8f31-de87ad2bd880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a216cb0f-ac23-4a81-8199-707a0d797f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5f7059c8-1fbb-4a44-ba23-a0ff59e0dcb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e8e0fb-607d-45ac-b19f-f542ab919612",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61966cc3-aa66-49c4-9c29-fddfbc068441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51a17c84-e8ee-48b8-9f9e-d3e1db5c4949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01dcffd7-2e78-408f-9bd0-c05e7f9f71d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c02fd6f8-d0e4-4116-88a9-f8682bb8d8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009e0fe8-daad-4bc0-b829-56a0715f153d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44cf3cc-fb59-486d-ba79-02316be900ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d040fc46-d12a-4d55-a9a2-5719e0f69bcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e71d9a45-1403-4f0f-91a5-872aef4b0a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6d087c4-7670-40f3-b57a-761e2c3f6288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6090311-2ac2-4c8a-9341-2241dede5e73",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "329048a8-1f72-4dd8-8ed4-5f14c8a859d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75110171-8543-48ea-b9d8-b071efec808e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96d63d9-bc95-4c2b-b057-ea73051f5ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "45da6027-0ce7-4d27-9838-623db0c930ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5dd62ac-9e3a-4b68-8da2-ff4db7f5dc17",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d591417e-2313-4f4a-9eba-39284d6d3781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4c6e8dd-09c5-47e4-895b-f209c412c53c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf52a680-5706-4649-bf2a-8bc89e274fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9d610a0-1e0f-4f76-afca-6f3d0d36c669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8454c002-dfdd-4827-ac2a-6189eb1cccec",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "835e00c2-c4c1-4d81-b273-202defc064ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b58f4299-34e6-49d7-9ae0-9bd427b31365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea443eb-51df-4d11-a704-b125932cc764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "895a5aaa-ec7a-44f0-9f1e-23be872e529a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a707f920-1c9a-4418-a12b-f8f51ad64e37",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d2f91e-aa66-4724-b781-cabcce311a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4189e8a3-2102-4f96-8362-8251cb0bb32d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab42bf79-825a-4d50-bc64-6bc93344cabb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e639e8c-53e9-4357-883f-cb8eb1e3524f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48dd7b8a-0a3b-48d6-89c8-d42c39b2d0f8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fcf4b36-4764-41dd-a779-d37bfac5afc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bb83bab-1705-428d-94fd-a4f171325d1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9655c497-1a41-4c30-a865-889235af8363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1595fe65-87da-47f2-bc05-817f1116dcaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a116cb2-eda7-4b34-be25-12e8c55113f6",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab7eba8-7e75-477e-8441-a959ad96e3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f0fb01c-168c-41ab-9c0c-9ad8b95ecc97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e213079b-1ba1-4bcd-b481-29d7e51b78d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a136cdc8-b65b-4c61-9427-cd23402a5a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21301aca-1c84-4d61-b7c0-e1749daf5df8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07e22a4-6e75-4a0d-8d0d-bcd4932509d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70c32c7e-7f1a-4507-ab6a-2fb515d46cc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d7f415-a999-4f85-9754-c45f193f7377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "24f69426-ce24-479c-9058-95a9bd5ee8ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87754bd4-311f-4c9b-956c-9f2fd24db952",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb4c9d5-cd15-4e4b-94af-90e6fe079ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d368ffa-e8b8-4742-b296-040f4f33b75b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be530038-be5e-4fbb-877d-219727939c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75bb0585-7792-4ad6-b6fd-00681e380d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e774e06-d1f5-4cd1-af01-1e48e6638b0f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6eb7d95-7bb0-4d04-b245-171ca4ae4a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29677acc-176f-4f80-a6b9-d38a3a24b54d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9afcc96-b071-44a5-bb15-3cc52fedc600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "17415f48-e08a-40bc-ab2b-a84a8fe2549a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913b384a-7286-4b43-9754-83db414eb973",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c4d01b-64c2-4a7c-948e-354f6ea2b20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11662df8-4d17-4db9-9c1a-0ffcfdc4998b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb17a8eb-faee-4695-957b-07ec00d60fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "047211b7-0b00-4d88-a6af-65c078e031b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ef2d65-f18f-4816-827f-3cb8f1361b88",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf3d326-c2be-436f-9685-8952de1e20d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dad7e4f4-913e-42fc-bc8b-8e102652bcf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc663563-ee3a-4e60-a504-41a2a56b13f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "192b753c-3391-4d88-b8ae-efd9fbbf2936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6fea6fe-bc4f-449c-b01d-ac819a1d8e76",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e0a096-90f3-4db2-abdb-d5fb0bf8261b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6463464-7355-4196-96a7-1fa651f4e4b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f0917e6-cea5-4db0-96af-5efe033aad5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7068dc3-dadd-4529-aee6-8addf6e1dde2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a32326-dd74-4a29-99d6-687ed26f0094",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29bad363-1efb-4f5a-9874-02027b14c18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0a1b1e0-351e-4f58-bcb5-8ecb8bc949e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49525e35-4f1a-4027-95f0-1090877fcf0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e9549ed-88e2-4a9d-aa11-a2068b6b6b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305ada70-6c03-4560-8ede-9c2fe2d85d35",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b2d105-5335-4988-9f37-edb763b78051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f31e6285-fe66-4b89-a8a4-52ad9bb8d9f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41b651a-2618-4fec-a0da-d888267eb47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b353b53-5c25-41e8-9ff0-67fe0f5c4064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff4a877f-2934-4016-8c74-068a4cf2687e",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f030e100-c94b-4db2-b5a9-bc9eb83cd161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e9a6d9a-e6f5-4ee0-aa1f-e0428ad1ce2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42818aa6-7c1b-4d70-8ebf-481dfa3dbf21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4fa9c4b7-4d11-4ac9-8b63-93d8662e85a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c57af1e-18f7-4093-af1b-4868947afebf",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f8c4967-7ae8-4650-82c2-e5d1b3285b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95c2d79b-3aa6-4f6a-9260-37b9c45b83bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a1739c-5c08-45e2-9e22-d3f0910c74d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a2a3419a-67df-4f43-bc6d-385c85406852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a61f0f-188c-406a-9bc3-86748397b117",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd0cb95f-66c3-40fd-b58f-eac0c47fccec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd146f3a-f494-4778-89c0-b400b84c86a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e77a6e38-e62b-4f42-879d-aaf0e508c78b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a4bc8d5-fbed-4a68-874c-ce89c71e99d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cfb50ce-3b06-49fa-99f9-f1981aa2f119",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98c304e-ef16-4279-81af-0868eb342ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6df9fa6e-090f-455a-a244-79161c99d5e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d53a20e1-a47c-4dc3-b96e-13597f7193df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9ea3496-d9ae-4ff6-a9d0-d99cce332189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117657f4-e59b-4d85-9a42-3777e03e4ce2",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed44edc-fe02-4d9d-ba2e-fa73117963c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "606612ea-eac9-4d2c-ba06-0942208e719a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90bb3627-38d5-45fe-80a9-2d6d76658acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d2e06d6-c428-4318-b88e-3bb2c4e72e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca2135b-e946-47bb-b806-ab702380c0a6",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c79abf4-43f9-497a-9656-73782ced1d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9fadae5-2f43-4a67-8525-a08eacd851c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4372a99-a753-487e-a912-6606130e92b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1975cc03-d72d-4a8c-9b9c-3806e1b401ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96cdf657-203b-4d3b-b8bb-fe3e1658a9db",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b373b9-7466-48d5-bab6-8c0702501796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6a2079f-b363-4307-9961-9ea34a87923d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b3101f-14e2-4dfb-a754-9daa3ebe72ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "46afca71-b502-454f-a677-6e449cbb4b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da4d8c9-aaa4-46ba-bf40-ac58ef85a100",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b558216b-bad3-4716-946a-a86f315d518f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1474ebd5-2bcd-4ac9-9474-57567a18f499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ed97e3-e3eb-4747-b18e-28a2ab82ac8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4a0159bd-4cb1-439a-bebd-a4bbd27923a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b49ecc-ddc9-472a-9e12-66bdc2d0a88a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c003b5-5318-410e-9cc3-24c752ffa062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0180c0a0-78cc-410e-8183-61739248d911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad6c7ae-83f6-4285-b341-e2dac09cec07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb7f8dba-745f-46e6-80d0-2093c11f2050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "509301a6-4cec-495a-97c7-66cd23460990",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4919c747-ff2c-4559-83d3-9528cd33a75e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d66cc5c-2f02-4bb8-ad82-bb165eb01be6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def8fe91-e8b3-4640-9682-06c2167f4873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "27418ba7-7d7a-4d3a-9ad5-1043acdf03a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a754a0-fc46-4d17-8057-4407c4ce1608",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7692da4d-5e3c-43d4-95fe-2640bf13b4ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "549d0631-d9c9-462d-89b1-8204f425e546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb5bc78-5e7b-4189-865e-196e6247e10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9060329d-7d52-4fdd-9bbf-f0931425692d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0363ffdb-84cc-405c-bfb7-19d380c52905",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dadde037-a215-44ef-9c41-d2d78e9efa92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c55ef42-3864-49b9-9f29-922c1d4f5aae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16c9111-b3b5-45eb-bec5-914ae1f1335f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe492392-6f2d-4763-9cdd-5177d5c764dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9843220-83dc-4510-bae2-b949a8e2de64",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65797d2f-d0e3-4707-b849-a1e7f8755878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67c5c4be-133e-4374-9c0d-f7f7d7e756d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a5ac67-f2a5-45e7-94b4-f5da562f845b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8022ac30-2d1c-4f42-af68-5d3cbd612eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "116dffd4-9529-4240-a3e3-068ecc4a6551",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68bfcf8-2e65-4008-8dac-3ea7a154e248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a76902a-a2bc-4b39-aaf7-9765cd4ef2eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f8348f-447f-479b-934f-0c33f52db4db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb9f4c45-2aab-470c-997b-4ec14b264f8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a13bc62-331a-4fa8-98dd-ac6fca7f2234",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad5231e9-567b-4caf-a721-edb73ca02f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8c23bcb-3843-457d-b47f-7a28b8d78ca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06812e30-2bfd-4d6f-bce4-45a16b5641ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f61a49a0-f4ab-47fa-bb39-dccc93c65451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70859354-30c3-402a-b903-25306d693a77",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91f1aea-759e-453d-af88-94e2b121a7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a08991ae-4a59-459a-b68a-aa4593b5d0e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1f994f-dcf2-4e47-aff9-324a303fb2c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e385e40-b5ea-4d03-b11d-5b6ee8b1dfab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "464d45ab-4078-4f19-931c-04d342537a9e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "683f5966-222c-4958-a681-112ac209ff87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73bb3bd7-4090-4d5c-b917-1ca030ef320a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6678a1-64aa-4123-aa33-467b06acc67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "84b94893-0389-4c86-8cbf-63213600d9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce31f41b-bfc4-4ce3-b728-71cf620a0cef",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b23e7343-2834-496c-8008-bf1d61c99412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbd40920-2774-4777-8ee5-0c6fc9368141"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74716d18-2a51-4f47-a870-e7abb3f25350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7efc3068-d4be-4029-82c7-813ca81a92d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bfc8b65-6ce6-4aa2-9bd2-24b10bd966ff",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a2fa6d6-6486-43e9-a104-7f11fea65aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1812c56a-81c4-4079-a2bf-4d6b565a8822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f8b187-d7ab-4c2a-8c01-3eac4e2873b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c79bddb-9267-48d6-9610-eeaa19bbc42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1580bffd-4bb8-4eb8-8740-b07ba56d4e19",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "721754af-9e9a-4cef-b142-2a3c782960bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "86ec2389-c373-4e76-bf21-43d318a4b2c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599a7f96-7b5a-4d7d-8422-e32cd798b86b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a26911f7-0b00-4061-b01f-2d68523667ed"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3cf945c5-104a-4b3c-9079-ccdb820e81df",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6dcf18f3-95ae-44c1-b5b7-58e4c0e35ea5",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d4545b-5854-4c77-ab3d-f845c92bdc92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c7d4c31-ecd2-4a09-9aac-6e4b6bef63d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0761d20a-57eb-496d-b2a0-9763c852f9b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a81ee8c8-55c1-478c-8157-f30df1742882"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03a568fe-ea4a-471c-aaf4-f27ee139ab95",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10e2f380-0b79-4de4-9bd9-7cf8044e429f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e43387e-9141-4423-a141-35d5f06b8e03",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7608c1cd-25d8-4fce-85f8-1de0d0302775"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7b46dea7-fa7e-455b-a7c1-8084b3f5ae36",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "28209acb-5bef-4777-b21b-81cbcb12e616"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e7928fc3-42d1-4a52-a0e3-52c693d65b98",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cc757114-cb23-47e4-8bda-adfd51543e4c"
                }
              }
            ]
          },
          {
            "id": "e6e9bf87-e494-445a-b064-b8810c4ea6f7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ace2111e-f092-425b-baeb-c7046886a99e",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "ccc98ca0-27fa-4705-bdc1-deb71a971bf2",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba65226-2902-41a1-84b8-aa72d4f72a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6db6bc00-809b-4bc0-80a5-9816ecd9f00d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630cabbe-31a1-470b-9666-a01312a29189",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b42ac2fa-97af-48f9-b8c1-7fa93db9d33c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d6201563-c94a-45b8-a671-007a4bf99798",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7938d1f-77c6-4964-a7c1-996ea48896be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f25a388f-0f0c-4563-940d-a3e112e0502e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e4c651a-7106-46d3-b944-7126f9ace989",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cd10b100-edbe-4dc0-9822-84d8f0506f42"
                    }
                  }
                ]
              },
              {
                "id": "39633897-5202-4ca9-8189-d93d17e036af",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2158eb49-de9c-43bf-808e-81f68fa2d3e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a4b9e66d-cd39-4357-9dcf-e719dfddf868"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9bc38202-1c7a-47bf-8ed2-a0d159f5954a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4f06edaf-f003-493a-ae7a-b6a4adb4d561"
                    }
                  }
                ]
              },
              {
                "id": "5e0e9132-edc0-40e1-b5cc-6a40487dae44",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4af1ac67-1ee9-4807-a088-77de92bdfdbd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1af0a08-de3d-47c7-9d81-7d0862d43c86"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c83101f5-26ca-4064-b81a-6f746fe29ca3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6ea3bf47-ded2-49cf-a796-b461718e2fb4"
                    }
                  }
                ]
              },
              {
                "id": "97343716-4d1f-44c2-909f-a9dcd65977cd",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2230b3f2-9ad3-471e-97fd-58748d9d56c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "87514793-ea80-4f49-a1b6-e890870820a7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4bd2878c-bb87-43c5-9de3-e40a57bee4a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "bd948f81-94e9-46ec-aef5-e0666efaf2e0"
                    }
                  }
                ]
              },
              {
                "id": "04928004-5fd6-4fc7-bdc3-310277ab7d6e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "95e90b66-cc35-4ee4-8ff2-84587086c9e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e102c7df-7ed8-4800-94ba-fbcaa43a5146"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eadf0481-0eea-47d1-a150-919acb539ede",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6e33f666-8be8-448c-be04-f41d6c68300b"
                    }
                  }
                ]
              },
              {
                "id": "ce6b3105-f209-4c20-810b-e6006d77a6a7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "449521d1-470c-4d60-b717-e06a02a1f616",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "47bf8534-1b31-42dd-9502-a63ed23da924"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c58bf0aa-f4ec-48ff-9bf7-036278fc988e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "af7a666a-19d1-482d-af7e-a735b33833f1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "137f0581-0228-49bc-ad10-b3b3097c4a60",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "945512e6-d5cd-4f7d-9eea-966a3ad1b71e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "87a7cf0a-e84d-4872-80b1-31af96f945fe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b36363b0-ce3a-4e3f-a8a4-ef7a41f80921"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "19a521d9-5e61-4fae-a4c4-d064ae1349c0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e7b47e38-224d-4b15-83d3-409aa1dd71f3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7a1e2bc-fec5-4ed6-baf5-9bebcf169b66",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "48304391-d44b-4e96-89f4-c8224a237972"
            }
          }
        ]
      },
      {
        "id": "db80cac9-db39-45c4-91ab-b24321ed65bd",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "75750bb6-34c8-4dc4-9c5e-52c256eeb545",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dd170145-996e-40cf-84e7-1b468b82635b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "54344e98-d9e3-4763-823d-b66e3ab4f714",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9f8559-6b97-4590-9f09-0e9eeb28b9b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f29aff5-c7d5-4c98-91c3-5f082d68559d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7477f2dd-43b8-4e56-a88f-4ed421f5f474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2eaec8e-2215-4b6d-af05-41a2256ccc34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c492b66-b821-421e-b0dd-900771de23a9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f020b3-fd1e-4a19-be5c-12600f03fb4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1d0f9ba-9430-4c16-be6f-e076d8bc21b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81fe40f8-b000-4595-9570-5086e4924d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3efce66e-5d1b-4ea2-b2ca-02ab559f9f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f64d2257-49ee-4311-bda3-608f84e5c13f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b9e019-08f4-4851-b5a3-39dccfa34d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb440d8d-f2b8-4d9c-a39e-57ba475cc3fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5629e13-4536-4b94-9102-fce905a5c252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7d2c6b0-4f49-4d25-8a27-f08300eaced6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d744ab-a54b-452a-9b4d-f359e68208a8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d94aac-ec09-4711-993c-1db4c34faef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81c58c5b-f5d8-47ed-a772-f966a4194c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643b2803-8237-4bb4-a799-332139f084a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "905a3d94-ba62-49c3-b2f6-121006fa0018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e14ca8f7-8b5f-4fdb-a297-12478afd6e29",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2a0b7d-db66-4ebf-b69d-42898c207c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ef1e25-f4a7-4466-90c5-fbc5571a0c1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25ec85d-ae0d-48e1-8352-f06794cc5d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d54e88e7-ed4d-444e-84f3-725fe0e35765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a4fe57-be56-471f-b8df-a40a326f5520",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcdd14b7-3b48-42e4-82b0-a957d681f339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f36663e4-7e8d-4f83-b3a7-6659b8dddf45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab6dd845-f889-4ea4-9b24-429a6b84c80f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb601580-e7d5-4e86-94b7-e1f7131ba339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d776bff8-177c-4b59-919b-95ef02863b5d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b9abf9-6acf-412c-8b8d-06f8ae34d05e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80f1e2e2-eaa9-4eff-8f90-e6bf90f34860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae11fbc3-149b-4182-ac91-8d9dc076b4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f394631-340a-456b-951c-176d6e91fa96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e29a431-f947-4926-876e-7ab7c92c416d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84db1924-3e83-4cf6-a3a1-653f025eefd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b388ecb9-2c4b-49c8-8947-de92ba172466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdfc4a82-027e-4749-95c3-d71b140d083d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8151e11-fe11-4bd1-922a-f91b117f1347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e8855be-ddf9-497e-b327-490e298b2134",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3579a149-8d84-4d5d-804d-be36b56a2714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "113b01e5-77ef-4940-b883-32d34226fca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd32b4b-8603-4aa5-b806-662cb08fa263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "445ddabb-b8f0-4136-8415-14b876ec9c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d02e792-76ac-4c84-b632-4e94b1a1c1d3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e16b5e03-463b-4cbb-9942-ec870e8e9506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8bae6b2-53f9-4d77-b9d9-d057b018a7d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51219976-753f-49f6-b974-c12602b985c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebe679d6-b589-4564-a443-36431f6ac20d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d61ecb-6122-43c5-8b8a-62f812f6f855",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78163523-2b50-4a02-b76d-2a35b3aeecb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "083c06fc-35eb-46b9-8a28-e2d9115d69c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58ea693-a7ec-4f38-94b6-70f07a4b38e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6ed6d59a-4c32-405f-b480-8d51934ad9d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10687304-4256-49d8-820b-ccecb532f497",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0fb40b-8b28-4708-8e36-3977110f54ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c677c44-1812-4232-93b1-3856a7149e63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d2f595-743f-4b3b-ab42-82c1ca3373e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6ed2261d-b77a-4e10-979a-11fd964f0bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfe74155-66c6-445d-a13e-fb7da7245d72",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b01ac9a0-f7b5-4dd8-8551-2a36a5056088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ab07964-5f38-4d51-b514-04605db9c356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "208418ce-17f6-4182-b387-176bff9728b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "67ee612e-5879-4d3a-8dd7-b9a129ef34e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c854a3-6490-4f8c-8a60-b429ab2019f4",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90830309-3482-4a1e-8177-aebe20869d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a6ff51-67f2-4f3a-a0d8-0d29dad271c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e186c848-8c31-4f24-9ef1-a79221a597c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d715d3f0-21b9-41db-9720-529ef8ff4a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b73a67-62c9-4533-abc8-ed2c97a967c1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4138abf0-50b2-4116-95a2-7c447c3b5c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deca9c29-4256-4228-b807-cbf35b2fd626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8b27bd-ad3c-467f-8cca-06948685c149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d9e03a3-3478-47fe-9184-718179b9b0c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffd19d3-b51e-4d2a-a105-0d4a018cfdd6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46b12a6-7a96-4ff9-be0b-ce61c6e2834f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "591d1557-633b-40ca-a7ca-132e1b936cc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c6425c-5059-4d12-9473-894ef444bd86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "76326e52-c1f2-4e49-881d-187c77557def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f20d0b-fd9e-4d41-a83e-917869fe6748",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ff5049-a86c-4c2b-a10a-44e62486faa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "723d4b91-e022-4e41-8e50-c4e462a43fe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c3e3918-fa70-4781-b417-4a05ecb8ea27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e61c1a1-3695-4ece-8b74-44fcdba6f439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b6921a-e0c9-4540-8efa-87223c3e2c17",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf7030c-f83d-4d7d-9eaf-7f8e16c5dd00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b2a1995-8755-4373-9b6f-a3b82bbe1166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f07a7fb-ae52-42f7-b912-a018a14c0893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb17d213-c1ed-4470-9ceb-0108b0a13489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfbdf026-af68-4382-a2dd-745c2c6c2cd3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87771efa-efa5-4d15-a869-480b559d2d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86be4823-b588-4d1d-91a4-a9ba54648bcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be1f3854-df82-4367-b76d-e5eee24b246e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a742613-08b8-48a3-83e8-2976e0ef640d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bacb9d69-c15b-469e-a083-0df65fc7bffe",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0701c079-6d59-4acc-9178-bb0c0d8d3119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ee4f13b-ce60-45b5-bd7e-6851d514fe17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcba80d0-47a4-4082-9cf7-0a04ab37f6eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c907f463-06c1-448b-9b50-bdf6ba264715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f838207-222e-4714-a591-13d2c5181d17",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5212eb17-1827-4c18-96f1-072ba6637976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "723e1596-f68e-4803-8426-13f66685b584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9320cd70-3655-429b-b603-bde4ee1bbb08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d1dc9e1-b148-4f4f-80dc-f052d1f3ad2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d38c02-cd5a-48c3-81e8-8734e97185f5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb37b77-1277-4fc2-b86d-3aea9b6caf89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7996157-eef3-4e24-b6c6-b1c350dabd36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b14264-970a-4fd1-9d98-a8a24f01ac50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92bb54a7-7d42-44f2-9bc7-5e64a41b1dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed83c065-f332-4bc8-a773-0e97940cdf8f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "123b0e33-554d-4633-8450-e46df80b8ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11412cbd-cb4b-4463-87dc-dc8b2a4f8806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27783d3a-f781-4dca-9718-8c6a13cb47ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1214cac1-167c-4f8b-8146-e9f4d95a88a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a719fe-dfeb-4016-a87c-1de98329776c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "431157fa-a454-42ef-9f40-3c537a51bdca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adedc1cc-64b0-495f-a49a-dcbb63d99d9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3c205c-a206-4bed-955c-67b93669c4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3450947-a556-412b-a115-d4301f96b958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51587304-2599-4c13-b483-a3f637489174",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "601a38e1-5853-4b56-8bcd-bc61c04579b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e38e411-3d54-467e-a2d6-5f521def40b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a8500a-f761-4a0a-aa77-b11b28ff228c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "396a0e59-1124-495c-9740-76208813ad3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854b5af5-992e-4436-9ae9-f8742adafc9b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e184cc14-2291-46da-b3fa-049de0bbdbb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6cb52d9-ae16-4230-9724-02ddd86e0cd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4defa5c8-5468-4e6d-8f1a-bf0cf6d2dfce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca8d9142-cc27-48d8-bc98-7860710566eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305aef4d-c72e-4b7c-8bc8-91174af8ef05",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca9791cf-4f1e-45a9-9a97-057d7dab896e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dbd5f47-a6c7-415a-964c-4b31f660ab70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533f3a36-6eb8-4007-9ff6-1ca72c4f06b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f12d0b70-72ee-4237-add1-f315f937a3cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7eb3e30-0dc6-473c-8518-b0217b83e539",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3389ceb-48f4-44e5-80e6-98ed16fe252c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5ecf3fd-0af0-4cbc-be13-ec196871ac28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978465e0-2f2e-45ff-8ca5-f5ab242eee75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ad05469-5b30-4790-b1c8-d127dbb06f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4241caee-9158-4630-a37d-58e30db16caa",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb296f8-4420-4ac9-bed3-988d753202dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48d40683-2005-456a-bf85-7518bcd6f7b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe93c8c7-f29d-4bcf-b751-e43e492818b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cc893c3-40de-463e-bce6-b7f899412912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511b9169-3d93-474c-becb-8186ffd9896f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda2a0ed-01c6-4954-90f5-dea83c4d83dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9acd5800-a877-4723-8dbd-7ac668d494ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15998166-6e09-4335-95ad-24110cdcc266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7984bfc6-49b7-4b57-ab2c-1d9796c96750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5702fc24-a994-4326-9916-5b5730d54992",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a03bd5-27e2-405d-bb10-4af25b7129c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5e99225-28c4-4be3-aa2f-e87a65dae4dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8004b88b-135e-4eeb-81a6-111b498906cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c72dd91-8574-4987-9322-fd3c8dbea14d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355c07c1-6cc4-4362-8af1-4b3eb053e792",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7137cc03-be61-48e1-869b-daf106ae8558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ff674df-98c1-4e2a-84d3-6502bc7157b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c9eaa9-cb1a-4fc9-9139-8fb216c31c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8c7e4f3-99f6-497d-a3ee-d62354907de5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7348b10a-f7f6-4fff-89af-d1be4da72e6b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "515dcbd4-fea5-4169-8442-d4a5961f3bed",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18fc8555-f26f-4ec2-bbe8-8f5f27ea56bb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "95cc71a2-001a-486c-bd74-fb191f0c842d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1789ba2b-c4a8-4033-a53c-12184a1a7f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c85cc61-4b7f-4c90-b32d-b73679ce3ab2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dca4cca7-e839-4d88-bd77-6a4752874646",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33618d3d-8e42-41c3-bbe2-a6de04241d96"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd61a407-7067-4607-8368-b5e65600ffe6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c1f579b-283e-4ef2-b5e6-fb495f7c6daa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6fe12a91-6aff-41c3-a348-cc0d845b8c52",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a7bcdfc9-f061-41ea-8e9a-2623022123e2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "94d3e069-ba14-45dd-8cc3-b273c19a89e8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fce625aa-1152-4aba-a193-b507a6c0cb5b"
            }
          }
        ]
      },
      {
        "id": "4ad66489-bfdb-42c3-adbd-f0af3bad1787",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "7b25693f-5404-4151-8ae7-2d9105228686",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f3551ee-c32c-4634-9fdc-cbefa3e64dc0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c166f216-1405-4b46-8c89-578f20139473",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04afd5c-11f2-4ca1-ad72-dada927271be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9991bfd4-8222-465b-a042-58a94c5d7cf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6513f11-3650-49fc-89b9-917c257a89e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "13cef8a2-4495-4a1a-8f44-fcd22f621e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb158f1-4cd1-4b51-9f33-f68ee70c1308",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3f39e5-a5fd-4437-ad34-d7c07ca999fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dddaac69-e540-49f5-b7fd-39964cba3337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f50f24a-5cde-419a-bfa9-4d9d4a92fbb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce5f4334-a9cf-4645-b7bd-fa27eaf7cc57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cecf3e3b-794d-4c76-84cd-654684f4dc3f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9015df46-65e2-4179-95f8-140f3254ef6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf578c6-3af0-4c4b-98b0-fa15ad72ede7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f789e0a0-7065-408d-93b7-a9b7e29c5038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b811151c-dfb4-402d-b915-0bb4c3b32732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd4e4bc2-4c31-4032-8364-db0398897b14",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe9fa51-8a9f-4f83-a1f4-2b8d7f5e6ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c465c01-4659-4548-8bbf-5321b29e556b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b54881-768a-4c7a-9810-93bbb3cb4210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2f2956b-a98a-4931-927b-6d8e82e0de8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a37906-63ea-4dd1-8b87-8d15f1982df7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ededde6-a545-4919-8e2d-dd51f6f5e373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58e9d405-3a09-4fff-9c66-e9db42f19075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b4db4bf-0a92-43bc-94e2-8a121c3126e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c7cbb12-e4ae-45d1-8c8f-4df861af7f0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925882a1-0135-4fca-a8b9-26bba583e11f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e087ce86-d6b1-4f6d-9d14-08a5988f1014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fce6a8e6-8fe9-4f92-8db7-ab7911b79d9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2bbbb9-f38a-4a1f-85f2-f52dc24dffdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "05f03f25-6d0f-467e-9c49-7db9f618c3c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83127a6f-da11-4c2d-a28a-d81926bd8da6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abadfb88-3edc-4e6b-99ce-ba5e916c2fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14e6c986-2670-47ea-aef0-7f381ef47698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "052abd9d-5131-406c-868b-8544f694554a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "04d1a61a-bc2a-45bc-acf1-7610b8690e21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9037e265-e421-4f15-b68d-7a6e23601849",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b8182ad-f2b7-4f40-9071-e17e2b41eb24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "851e8df7-42dc-441b-8363-d94d338e33c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd88de7-37ae-438b-bc04-c6dd781f3d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9431df11-1094-4051-9606-be710180d543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "680693c7-86bc-41a3-befe-23a09739fdf3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76ec45f-3c29-420d-a1b4-29e4a4c9b4f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "193628a3-3379-45be-a984-26f439bbc97c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c6b004-26e0-452e-b23a-2bfd52a814c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c832ba2-734c-4079-ad05-8100a6cc1390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72dacc51-b3ab-442a-aad9-34b0e1672b61",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f155a64-781b-4bad-bda1-05dfe01235a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d802bb64-3b81-4922-b701-385ce58c99da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65795dc2-8397-481d-be97-f31d8e9e58af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "84339945-b231-45b3-8b4b-bd6e8fa4ccb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1c2d1b-870f-4136-966c-042e5b05d9ca",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ffece11-f126-4fa4-be31-1082cbf545e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5456c23f-561d-4eab-9fc9-38090675835e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6681233a-9921-4701-b3be-5f0ca610ae50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa1eecd-666a-45d1-b8c9-616436bf8179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1530c6-8e5c-4e1b-bddc-7e29a1ed4563",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f6f3be-ec37-4e2a-a269-077e8ce34ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85acfe3d-4e5b-4a57-8474-f92921107849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e215088-a73d-4725-a46a-b0b7cc3f3d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3f72d6a9-bb83-4d0d-bb1d-6197746afd0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6af2a0-a236-4f38-b0d1-ef5e5ae74842",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b18150-b535-41c3-add8-24df5696d8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38ca4186-ff39-48fe-bb4b-5c5c1fe24448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f07487-2f42-490b-a584-176b8ffe6336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c3bae64-4dd0-44d3-b12b-c8158ac66a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79342bb-ea1f-4f96-bb4e-74813edb8eb8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6328026-7fde-4006-b3f3-37118365d5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a9570fd-0612-4c3c-8609-e62a00c6d45f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d3e49b-0434-47a3-a14b-6284c42cf53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "464d1bea-bc11-4ee1-8f91-5b03cb1ed1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b0a97c9-67ad-45ab-a65a-94926586dcdc",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3afd9c2c-cd1b-43d0-bcae-71766b860a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc310d41-03bd-4430-b94a-1050819a4c36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb359dc-089c-4f05-8a5b-a74dbdb236e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fce1082-7189-4387-84d5-0b81b0835720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6efef75f-f2e3-490d-a642-a693e4c9c1bd",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f1d975f-0549-4cb9-93a0-5241d55f0a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae67b5e9-f9f6-45a2-a141-23b17c33f103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a9a510-b627-4e71-ba1d-7a4cd617ee54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfdb6b43-389e-4a07-8966-b2510d40fd56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f502f2-dbeb-4b6c-a55d-c1b8d569d59b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e750e6-fa26-489c-b970-d833834e5346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aed9c5d-ff77-4e2f-a427-598371c9aaff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a2225b-1114-4496-9e68-cdf951fbfa19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "573dfae6-9050-4dc9-b6de-0104f4b713c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d85de80-a9d2-4907-acb8-bea69785ad8e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4901cc1f-127e-43e3-9545-1a82dad1f75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca1670b4-de38-4d2f-8d53-80ebf52c2718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad74692-8030-469a-b610-74c82e8cb248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f11de3a0-6de2-46ab-8724-1c73449d6fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8871be-23a9-4a3f-b33f-f2c486dc778d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc825974-df0d-4dbc-af18-10f4030e5be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff501106-0fee-4e75-944c-6a201566d6b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03fba6b4-7df0-4235-8506-a9ad38b25c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be8d575a-5e89-45ff-8f03-fdc568468734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d61b995-3e1c-48e8-afeb-7cbb19049a71",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90898cb8-354e-42cb-9613-efbc013f5bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3b11764-dfff-4dda-8041-80368def8f01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8bc3d8a-3f32-42ea-8109-0efd20f1230b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2801b600-d47e-43ac-b760-7dc86ad23f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3475a13d-8a4e-4a1a-9d76-cb00d6b78876",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7942a1-bc54-4ef3-b30f-efc02e7780d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3f010eb-65d6-4d23-a2f1-fcb195a4d2ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b27625c-4c44-4edb-84f5-3be269e3ad5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67622927-1a75-4667-b89e-59c5d830f46a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3d357e-b002-4f15-bb31-cbf9c7f04a37",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dfb7606-0677-4c9f-8396-257fe5c6290c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7d0b54c-9281-46d8-92d1-899ceef03abd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a18618-241a-4ad7-9e3c-775e2133566e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96c7d3c7-dc33-4d73-ad62-d8715ad8704e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8207989-c541-46ff-a601-221d4ed20dfd",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7468d1-6397-4898-84fa-c5066e96d7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ad7689f-5b71-47f1-92ca-eabe752a2200"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e9d5cc-7900-4121-b6c8-a62f7e6648ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbf4e7a0-d453-4301-a4af-7385c2c2f6c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6037413b-30b8-4a66-b203-0c8bd0044ece",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e999898b-1d99-47ab-920a-8a45adc826b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62129d21-71ff-49d1-a6ad-09d9d3837d9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a543f545-4ff3-4db8-979f-7f14f3549f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0046f0e-13c0-4aef-a132-c80bbce6a1dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f9bd608-3daa-45c7-85f7-cd50aea9c037",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6704ff0b-faae-4f60-b254-833ab51e97d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b364e197-fd0b-4350-8536-9b771437b538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f86577-d533-470c-93d5-450f6c1bf736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13bb9c4c-6688-4f99-ba3e-67b6cf5eb0c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b8534b3-9295-4bc5-a1a9-138ed96432d3",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "002ba836-dd56-4187-bf84-4e9e27377c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62fd3b1e-d2c4-4c73-9833-95199d35e6cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56691088-4e5f-4cd0-b872-f174a5ed9d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35646067-2634-4253-950b-aecfd24a9a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "629a49b7-9bc5-422d-b316-27f350d8dde9",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe63d70-0b61-4e51-8c7e-a6e6c414d08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba11fe5e-2a48-47b0-ac36-e06bf4a0c1c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236720b7-f848-43b7-8258-a8716fffdf3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53b481ce-8c10-48c6-a68a-f59593e11e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4e9aea-39ef-4a20-aedb-aa709bc40224",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab09c08b-bec3-4dcd-b0cb-f6e4263733a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6895ad7-de99-4d1a-880b-96bc938146c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0bc66af-c1b1-4864-af21-a24fa92220aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a2ef110-4085-4c1e-933b-61d2a6e886b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31df352b-3341-421a-b76c-e3f84b96c83c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b38844c-6e6a-4e21-848d-efba7663b3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "964d2510-49eb-4d7e-9ddb-bedcb23facfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce843e67-8977-4dee-8606-23cda4d22aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5130f23f-b271-4465-b946-f4ae85f30e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc70c230-6d9b-4e8f-af5e-cc9162e5b7d8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39aa37db-98db-4022-8188-9847ad0ca7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "833d5cb6-fdf7-41ef-987e-0035596bc522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e81160b-6a0d-45e4-9ba9-1c0096877963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfb23e3c-980a-402d-be0b-588c923059c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "219edf64-353b-44d3-a5e4-fbc840510c04",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f929bcf3-3545-4dae-905e-5f57cf541cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffe732d0-9b3e-443f-8928-95a6756a7857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b707b7c-df95-4f8f-af10-cbdc5b6b2755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "742b927c-c1aa-4a7e-879b-51240c142672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e97cb0-c793-4399-ba01-cd4ead7f82b4",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d9e5f9-d7ed-47b9-9008-8348e2a71b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11df2e51-dabf-491d-b8af-78d7364c6a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d460a4c-2fed-41f6-a6e5-c05f4c8ad075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0298a068-f34d-40d1-90c6-1c46002d8b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "290a692c-ae1b-47bf-ae40-73dd8d4b9aed",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7aa0776-1a58-4314-a91d-655510507636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "121d66c0-acab-49d9-ac1a-8931ccebd902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f9ee21-3f36-4609-9620-11f28d46416b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dd521a9-c08f-4edd-ab48-ca7b69805786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0daa8256-8eb6-4ac2-b130-88bd14ade451",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0728c8a0-9633-4e86-a278-4650bb773c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed5d3374-bf16-440b-aa14-b06693eb4728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b1c9d3-026f-47c6-b8fa-e3873e0f3882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4e88184-0e28-441f-bb38-1592e71690f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02885995-bf9f-41c7-984a-1148e21dbef1",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a1e040-175b-403e-b371-ab3f7c7b718e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1678abe8-b614-4f22-9077-5172147f5b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6760f08c-14f1-4f2d-a342-8c5c062e48c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d302e1c1-0ca4-4445-b3a5-369117cc61aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d104a4-9b01-4fee-9fce-ce690982b082",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e5bcf5-c88b-46f1-9cb9-d3e6cf732be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99c302df-5ee6-49bb-b10a-f5d3c50c21bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ddd2ed-5df7-40e4-aa30-5a5db103771a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b8e25a6-6a6b-47f0-8be8-709238c220d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d477eb3-14b4-4d32-9d87-ef8292983beb",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bfebcb4-ad72-4f69-91ac-5cbe6b8e3997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eed5aba4-c886-4e0d-93ad-6a65417e3418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15c07f27-0659-476f-be82-bf97adb2404c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1eb1ad49-82dc-4000-8884-8e367be1369b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b25019f9-b89d-4bf0-9438-6f6899619f84",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b0014791-88a3-403f-90b9-5a6e33da9fec",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50827f52-fa39-4f64-a4c6-64f4bb3c7685",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bdd86fe9-40bb-42e5-a839-caf89ba01c96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3617949-ae33-4164-8f61-7d979f2733b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8671c0b8-659a-48ca-9ae2-0a7b5a4e9e2c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2331b9e-01f7-4574-80ef-9373630e7b9d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f20a0dd2-9c9a-457b-aca5-71eecf6dce24"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e68c41a6-3f12-4ce4-9ac1-43d44033fef1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "befc368b-b55d-4051-9475-0e391f645105"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7c92cb9b-2710-42a8-b9f3-4744b29bff36",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b4ad3dc9-39fc-4184-a46b-f5f384f0088f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "122e9790-20dd-42de-aecc-c728050f65c5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1e07e416-a190-4ee2-bf16-b9688f68dff8"
            }
          }
        ]
      },
      {
        "id": "1aed267c-1eb1-4d3b-a8ee-c20fffebd214",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c9b3d1da-4371-41b9-a542-4a2a6db2c2ca",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b3bbda4-a2db-46df-8044-d60003a1714d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e233986f-1640-44f0-9594-9b9cc64cf894",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a51ba9-4b39-4ecf-839a-39b305d70951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9096fa20-a37a-4e2e-b0e7-6a3e511be5cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6404283-7baa-4994-8cb6-b8881852bb50",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "309604c8-0894-49fc-82c9-0edb39b18dc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c4d2426-4821-4b06-bf83-05fc4e40ff9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d06292-b192-4c46-9b7f-4049ff9eff58",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6d9da2-2e27-46d0-857f-0225666921ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fc364fd-9346-43d8-9bd0-57e166917596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "489228d8-b2f4-4534-8ac8-01d6729c3e51",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5ffde8-6eb8-4588-8fd3-2bf086c6796f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32148c51-b2ca-4565-bd02-9f2828446cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d6d8e83-c474-4ee6-9d74-a9f6d80f14b4",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a39143-4c6d-4b87-8f1c-f0e57801ec49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25c77e6b-b223-4b6d-bcdd-53d1b27dc789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b8a8f5-b352-461d-82b7-6574ae879289",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcdd2264-efec-46e0-8b29-00fd1bd51cfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9cc9a42-0aab-459f-8c51-27c715f5776e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5253c506-1a89-4d64-9ad2-fc3bc78dae78",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c1fda59-fba7-44af-bcdd-d181acf17e43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "560d73b1-464e-4544-ab52-bd47073178a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd4d462-4724-455e-8b3b-20f7deb36e35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d0da318-1ecd-45bc-9da9-211232d0c259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24083ae2-c69a-4dce-825e-cdda36156658",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3da549-1d70-4bce-994c-b6abb378ffc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a454251d-992c-47c1-89ac-c3af3f0d9ee9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc8793b0-cde6-4040-ad41-4207bb83646a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25c2cd65-100a-400e-93df-65ad3234de16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee79e4ad-7348-42ec-a3ed-f70772f87d15",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763c9c93-addc-489a-97d6-9a4813db9deb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db1ca6e4-40d4-4b10-9710-f5fab77fe245"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01a368b-351e-470d-b342-a2b7cc8f6a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60a56125-6016-4d78-8a07-74798adedbcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc012c1-f50a-496c-80e4-5aa38139139b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1562985a-db43-4c12-af3e-db291145290f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a97f7b6d-34f2-4e1d-9d8b-c0ce386707fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17066ffa-9ce7-4dc5-916f-49ea7635b6cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ca7d970-e2ef-4174-8a54-19a58b062e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab81bf0-6849-47ce-93c0-c794b3998918",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743f202d-4052-4cd4-a2ae-f1f44e088b40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea68446-306d-45bd-ac73-d67106bdf4a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e2e39a-fabb-4956-81b7-89fa6fef5315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "811ba14e-a1b6-469c-b009-5d5b091de064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7b920e-a96b-4592-9717-897295145b20",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f037bd58-ac11-4e64-b143-08ba882ba139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af599f43-c870-4686-9caf-038d8e27c479"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9696f163-0735-46b6-9085-797e78abd2e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc3aafc7-effa-4467-a02c-5fe8ae05406d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbfc1f66-1cb5-4861-a9d7-fbb10901180d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b3cc4a-cc7e-4a65-9e55-ed840685d4c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36977855-c705-4254-9820-ebeb6dea8423"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df81679-ebd8-4b83-b79e-d54018d9e9c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed894315-c105-4e17-b670-3e32f995c4bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e29fef8-7b2a-44ae-a69e-6feb807d2ec6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677a1d94-f0dd-45d2-ae95-2f70242cb531",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f6b3c85-165a-4249-ac30-69ecfca69461"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e181426-2ab6-436f-bb8f-a7772a63cc3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c05e69e-1cf5-459e-8548-dce5779f2aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "538871c9-9a61-462e-9e65-8ef8c29458ca",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d4deba-8daa-4f97-98be-f20af7f620b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "867d4e62-d828-4df0-9fa6-65682c73ee14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb77ef5d-6e16-4d3a-8774-2693c65cddf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b4eee1d-e154-4872-90cd-13cca5a29206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71471f39-148d-4946-9772-488a981acc30",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9458b4b1-d266-4f90-aea5-f45cfb33a997",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fac93f73-b192-4191-8e0d-114881551062"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d9f45f9-0aff-4bac-966f-5e2d5d877180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9aa2312-dd76-42f7-91a3-8c0e8a7de0cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013068b9-e726-463c-a95c-a17dafbee113",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44527c1a-55d4-4523-939a-bf091ff63ee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7232c037-2dbb-4325-b506-3c668611e322"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "282d5cf0-a717-44f9-abe0-49fafbe0b5ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9c2594c-7fe3-4104-9d87-1dbb1d6fc336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc18079-b391-4560-9514-5230344b7822",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6416c2b0-2256-4b77-ae18-0dac602a4b42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55fd8a87-b92f-4c30-b0eb-f4efd30bbfef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef34e220-25da-41ba-8022-659ca898c475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f827df3-c3e7-4e54-ac3c-8e5c0f84e82d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3e93850-9e18-46a6-bb90-a5bda8c94775",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7791399c-b578-487c-ae52-5c382c2723eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f975c8d4-ed10-4b4d-aeab-559c396054d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87af762-ea73-4a32-8465-e8eb3a3e4290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab5e48e1-4768-4850-b093-56ffd967fe24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22bf1658-e273-4af9-87da-b69764ec28a4",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "026dbfd7-78f8-4069-8fdc-9a2c0c6acb65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da2aa25a-a117-4b1e-905d-59f4db29efa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efaac048-72b1-4f69-8ba4-d6083461b265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a300df28-3930-44af-8829-10a8a9a5c851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac93381-71e1-47a9-ab15-dde82957dbb0",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be70ff6a-8369-43dc-ad9f-56deda19c1a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e52c8b7b-4ade-4f67-9331-57401250dbf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87590318-4fd3-4d97-bd0a-f76cb65c9e91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62b7fd29-b758-47bd-8bb3-5724b91f8e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73f8381-3568-4c21-9302-498ae1b2f160",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3a8af8-6dc8-46b2-817b-3ef2ad004f5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b174d1f2-a105-4790-b816-3a3ce283ab13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bbee839-a765-4abe-9ea7-f1e2897c260d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5e9c8d4-7ca9-4f6c-afb7-d074541b88a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640a0c73-3b77-413b-bb0b-efc77021dcd1",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e9e0fd-15a5-4e7d-b19b-c656cb0e9644",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f26bc337-e868-46d7-90ed-f898770bf414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d1b27e4-d431-4e96-a3ba-64e3ee658e4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9c939f1-77b0-4e99-86f0-af1974922f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd0bfa0-e5bb-457e-a0dd-5f066df01ed6",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b83121-c569-4e03-bbb0-7a6c1e3a5cdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4b74c89-fa77-4076-8f5a-08ec1befdf4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb70ffa-eafb-4327-9995-f5bf9305136a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3d3d8d1-834e-490b-bf25-df7fad271d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "471069ac-91b7-44c3-b2bd-1cf6d8550524",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d5575a-184f-424b-8cbc-61d470caf26c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49191984-2d95-4aae-9561-736d6217b50f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a0886b7-12b3-4ca5-ab9e-9bd201aa80a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd92f966-a0f9-41b0-b829-83630fc768f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f15c9a-4b35-46f2-8bc4-c4e109098bcc",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc80c52-510f-453c-aab3-480c76b64a5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6484291d-fb22-4425-a262-4866d2508df0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede78349-419d-4368-af3b-aa41d121ae13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "917774d4-7435-4a2c-9e23-0b4e7db078a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc03f50-697e-497d-81bf-ec6803ce6b47",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616b1b50-7b36-4dbf-96ea-48b2c0261b83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91ad3520-a1f5-4306-8141-2b9b808bb2d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "768a8230-88b9-4ea3-bcbd-626ed9e1a328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5731bccb-9280-427c-863c-a062400a6d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa45c1a-441c-45b3-975b-e3ff71583391",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b2a7b65-fdcd-4040-8bca-b3b71c7498f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae52f94d-096c-40ad-947e-1675eb570b77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9c9e8c-aaa2-41f7-91b5-2631cb39092e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96e1b6a2-456d-443b-803d-0156840cd2fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc125c4-9821-402b-a91b-abe4cffb5de4",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d51676c7-554a-4d4d-bea2-9d5de5f40d50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7348da4f-07b3-441b-818e-1b80714aafde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf8fd7c-2270-4e60-9c77-5459ae4f619b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8241939e-cdb8-481f-b8ae-5c5f34467acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0d05c7-3187-4178-ad75-d67aff8506e6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20cbdfd2-0deb-41a5-9c3b-215fa399a8fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fc9a85e-06f5-4721-a4e2-01aa9796a603"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa1fe30-fc63-4b08-b5c2-1db48a47ed30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "337a114e-410a-434d-8524-ff66e31d2902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e718831-b8ee-40ff-bb09-4d5afa18f655",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "853d8427-4cac-4fd9-8134-afda7a8dcf15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8b22280-324f-4beb-a2be-56e5f0ec1406"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d956aa-ad57-45d0-925b-e65f384c81b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c56f339-a514-4fd3-9ce0-e90bd504582b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b172d24-8984-4389-a00e-cec8a8d7b99d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad2eba2-3206-47dd-8f50-b5a2bc641058",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e353c18d-4017-4391-83ca-08ce68387c30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dfe7ef6-8c44-47d3-b8fa-5290700077b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b1f143d-b48e-4c65-b8b8-b75c77bb1e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e26b31d8-decd-4209-bad2-d5643a234490",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14295911-148b-4a2d-bdfa-11f6cfa6f907",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0d8c998-1bd8-40b7-b9ae-403560ab987d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0780d092-d4a2-4f36-8772-4a83d79d3777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99928617-59a8-4523-adcd-236bf26b1532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d617805-e9a4-4570-a82e-493da99527f1",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf8f6d7-91b9-490b-953e-98cc32fdb269",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fe7f5d2-750f-4690-adaf-23b815bf3676"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcc018fb-1699-4e2a-8d10-33623cfdf9f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96a4b914-795a-4266-8b44-d747471db7a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758d3bd0-488f-4dab-b9ed-12a20be8c2d6",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca96765-e748-4070-a233-a2ad28cbf0d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6dc4ab9-7917-4608-834d-38695ac01009"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b758e2-b9d8-4d16-bc0f-f50914847843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e66e1bc8-84a6-4a59-9e6a-6084b09471bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813e7a71-178c-4f4d-bf71-6a3ea7db3956",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd9d136-8b12-4e88-823e-f3522e717fe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcad1568-8fed-4614-ae94-6b56ef2f61ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b70eb59-34fd-403c-a96e-30c8c39b9f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02b72c88-52a0-47e1-8943-38d42abfe20a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce0f8c0c-3dd1-4812-a2d4-8f4a7ae6d05d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352d1b80-5515-44df-a51f-ebd65e4a2451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db2c7112-8d90-4fbf-a28f-92e96f4b6df6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9121070e-84f2-4ae8-98be-28a068ba7e99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82c74721-129c-4f5a-8fb2-e4d374f83d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aacfe8c-b86e-4e1d-b509-d236a750bff6",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b062c6-79b7-44c3-9070-807781f681fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec53cef2-7625-4add-a93b-8cb89ae00ec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a48496b2-7409-488a-b1ea-c280c31e6bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b31c7665-0af4-4825-9cd0-c3475df80c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73d5fe8-c650-45d1-8a31-fa664ff23156",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e50e174-2710-4755-8416-fba846399310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ece907e-d961-4230-9322-aa03c166ebf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "863498bd-b35e-4508-8908-c25e69395789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59ea9a5e-3972-4301-a3d1-fe1004a5b1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4782558c-b0a8-47fd-9b38-43285bd32f2b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c96196b-32cd-4806-a009-151264347d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f4a23b0-631e-4db5-8319-48b8a79bef15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac423a47-f52d-42f7-a566-48c1151e39af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "992d129a-00e6-4395-a659-4cfdffe689a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c58177-f57b-45d2-8792-15c67c6083d3",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09931a33-5b2e-408b-83eb-b9c3fd5901ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72dab50b-665e-4298-aa0e-ae8dc894e8af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23427422-63a2-4a2a-9df2-f16d0f73991a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56253532-7e6e-4cbe-b67d-6c63dd38dfbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a45124c-2592-4260-9900-8c47ade61eea",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e791525-e5ca-4a30-9e02-e94ce38db3e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c30515b7-330a-4c9f-95af-4ba1ebf94b64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40fbd122-4ed2-4382-be2e-86996d5bfbf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6179e247-89dc-45ae-83c2-0e49bfc38e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e00c07d1-3929-4b08-9a26-5896d8cc6e9c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ac58b8-80c7-4dcb-b07a-72da73855ced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eb2814b-30b9-42d8-b199-a371983766fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb11f44d-0ef6-41fe-ba78-720140b39432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1c67870-e316-4bf9-bd71-847d5faa7b42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b9d77a-c160-4b76-8510-cca36b456a1e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa105e4-d624-411c-9c27-d00966c1bbbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf87ff5f-ab5f-4211-ad64-5d8e70268c1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "def83b70-2b4b-4fe0-abe4-2b1dfc9ddd9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "116100a2-2a4c-46ba-ace8-cd2b719ab62f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16aa6981-77b4-41ba-8b26-b6e978cee974",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c9b908-5822-4750-a44b-c7d57e5fae0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5503e0f3-481b-432c-982f-dafacf32d97d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c204bd1e-5ae3-44d8-8935-f6a9da20e0f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "380acf4b-7937-41de-a150-bd37d95362fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1824e3dd-1d57-4c73-98a7-1ce241f51f5e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c8b898-404d-484e-957c-69171dbfdca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a1f5eff-ba36-4470-a409-359408f24c74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93ba2ec-f339-4b85-9b56-c7067040535f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdc6dc5e-d885-4605-8f72-8feee7460bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4abda5a1-2db6-4c31-b589-cc8b829af79f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "951e6f8b-da3d-4f33-a224-093c8124d199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "197121a8-dadc-4b10-80b2-3fa4a46a35f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1d56b4-9558-4404-a741-98655bfa244d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a9ad7be-56a6-46da-b5dd-b13a437f01ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "482c615b-fe75-444a-a484-e9e3cc52674d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21497a5f-d4d6-4c2d-b340-dddc98b00b1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "640fedf6-17fc-4af8-a484-06e263aedbda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a27812c-8187-47bc-b008-c8a37e413d81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77c84261-f1a6-45ad-b6de-04521292a293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f8e210-1ecb-49ea-811d-e90cc58f78e9",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f261f222-1775-41f0-b0a3-0cba4bf2ddd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be26d27e-89dd-44e5-82a1-05a0f30596ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "098c9f11-796f-41c6-be9a-96c5c3c31474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b06af01-cb99-43e4-9237-30917f9c10ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34608e1f-a64d-464e-8b35-2ad6814b49e7",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7596d2-1a77-4f67-a7c3-6f4222f8423c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab30c2d2-10fc-4b8a-a390-f133cf2daff7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0224c87d-0f5d-40a5-a650-430931c61b59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "415cd721-27b2-4a9f-8b43-e1908990a3ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566af47d-a04e-47bc-b9e1-5bd8498e94b2",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "737d9100-4ba0-40d3-a2b8-c20d053b99ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5f18dee-cddd-4982-a119-07f20c784c85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2488f466-ea49-49cd-8caa-fe9d722cf4c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26a037c7-6103-4b2e-825b-c5bbfe9810c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce45e9c-27f1-416f-99cd-2b3a82c65e35",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5220e5c4-d93d-4598-9547-13448ae51467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07fb8ffd-8b32-4f3d-9937-2c93dd75d482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f675d6c-26a2-4673-8f42-a7f0078cd8fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de92531f-4bcb-4312-9115-d0a934a147f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d5ae51-b73f-460f-a903-c6c936a7f661",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49443e43-a1ab-4563-bbd9-25e5c6684fb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07bb1d23-6181-4d87-b417-c9ec46101792"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "746e67e7-4e4f-4c1b-bc45-fed6f6dddfc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34cda2c5-6b30-4451-853e-71607ac449b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f007cbc5-4148-4685-93c5-4a354a896287",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d4bbce-e29f-4885-9ee7-8d46c6cadecd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b55ebaaf-7bf0-4b50-8f9f-79ac55a6ff26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8d70bf-287f-4bd0-8575-58020622cd40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ac601c6-4ee5-4054-9901-2153b7d8bcdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6971b381-00d1-4ac1-a985-f31645123712",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f3a3c9-625d-4365-845e-a0da3af42389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58a326bc-299f-422e-a1a4-efb29935253f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4506706-8a99-4b63-9ea8-7f81291b7b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a72172f1-a325-459e-a828-7b90604fd774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d5ed8e-ce52-4796-9535-8571fa643df7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46126d0d-8e0d-4e93-a37b-a38eaf04fafc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d8bc55f-0cfe-49f1-a5c6-e6ff75b62749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9064d71d-343f-4a45-be17-2df58c86317c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c4121c2-4a05-48e6-9392-fa988cf8bd26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3df4cd-018d-4dbe-b190-67bbe6a4464e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb42747-afc5-4d74-aac7-ebd901f9e2a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2ca2d32-4886-4027-8dde-048f191166b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "768e5707-ccb3-4f26-894e-0a04cead9946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d90cb7e-c517-4ff3-bf13-4e9a2ef6d047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c77edfd-69d3-4250-9956-f5632869c0a9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08e95a9-d02c-47cf-8fac-426670667147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a875bc19-3051-4bf9-9690-680ca41790eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "152a930f-bb68-4e8e-951c-710046afe763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e12c648b-1e14-4eea-8cb1-2b5036e6c79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "079408a7-a760-40b1-8b64-28b4170218ae",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167e89ef-6ece-4531-ac6d-e0d6f2394bb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45df77a9-1a80-42f4-9378-2e54750b0250"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a3974f-64c6-4f66-a294-23a307cd354c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ce48bf1-262c-43f4-8a9b-3a87c1387cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0abcfb7d-e9ff-4fab-a44a-28a15ba22978",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0a6881-56ec-47f2-81db-da55acb423ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a608b09-34b4-451c-8a58-5953805e1c99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70891626-d54d-4ef4-8bb1-b20ff03a267d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "524dc4c6-4450-4e1a-a5ac-ecea51e428f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7722f33b-fbc0-43af-a593-0b92ad8cd65b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c145fe7-3ca8-466d-a842-fb1e9b245a23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31750815-c61a-4c50-8f04-c6bf5e664b6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd8efef-1368-4e4b-a615-8abfe39f1882",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daf8a911-b657-4c63-a109-84070c52d1ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f10a48-2bdd-4f94-bff1-bd11cbe5188e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564bb283-3937-4190-adb5-d08b361025ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "185f43d6-c006-4714-bc33-eda7ddb40e8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca5fa115-551b-41d5-aa39-cb381e0d5ad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "927618e8-dd15-4f92-8ed3-39d2f03e6d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3025949a-b2a9-448a-8fc2-6f353c76c10a",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8dd353c-f6d9-408b-b24b-672ac4431787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5b0fec4-1476-4aee-a9ca-c2c5173846d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71818323-8dac-4ebd-8826-eeaff3d85698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0c38c86-3c91-4444-a7d9-20ad50d2c02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1eb6021-8cf5-4977-961f-4f45846201d4",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ace501-58ca-4140-b9e7-15216e6c119d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11e65506-3786-49d6-adf9-3de1b42260e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5cac08-7772-4b40-80ae-d6565f799880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c81910f-55b5-4fda-a376-e42882ef0d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b082f626-4557-4e4d-98db-26045644a69e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d6fdee7-c81c-4127-9a12-f02edf10df1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c869dcde-2952-4fc6-998d-77d2d4379608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ce16ca-3096-48be-b280-fe845c57816f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b9b015-8f52-4ef2-8f0a-009a5c34b6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc6beac-4831-4693-a1be-0c464b61fc68",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc79318c-5166-4db7-ba73-45ff28f74f59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44854211-b5d4-4e5b-9ca1-fee1351d09f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcdac6f2-4877-4b8e-9a7a-0b6dd65486ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "154393c2-4dfe-4d78-8a3d-3c3e3b1b58be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2314006b-00d2-42b1-8b93-196c484f191e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875970b1-8e90-4769-b738-361a37e59135",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9c0b444-8ff8-4a24-a783-200a1ff2f4ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0474fe-89f0-4209-94c7-ed24991b4dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4718344d-850d-4e36-9a62-24e3bb1f2f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834629f0-c04d-446a-b53b-7a81600c711f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a151f9ae-838d-4746-88f8-34170a4866b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d542db84-b406-4163-8284-95966d62da03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8ac09b7-9bd0-4868-bb80-2769198c7b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b09f9f43-ecb5-4376-ad38-0a5b9acaef3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbaedcb8-b85b-4395-b085-30b4e262fd09",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08b4d9f-2e9a-46cb-a151-11262022996d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99d45f45-ecd5-41e6-a02d-48dab77382c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a50a082-c743-451c-a4d2-f2b0c075d252",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "707e12d5-c91c-46fa-af14-166385cdd160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d6303c-1b89-4eac-843c-4ec1c61dbe71",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df059ab-0e9b-46a0-bbdb-dff4eedacaea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c803836-b8ac-474f-8f75-59eee95c5bac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5fa8f4-0c48-499d-b93b-d31e73806f2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87b29e91-9ea6-4c48-adba-362e6db5ad43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a50157-c97f-4322-b7a2-52367b18f2b8",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426d7589-7709-477b-99e3-d50e7787af59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9a02063-6a8d-4cd6-a0a9-db64e6f26317"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22b1c1c0-eb94-43df-90c2-12a7b49a60ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17b0c886-2863-4299-80d7-fd725ca8c50a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32641764-1974-4436-a6dc-f71be4bdd9e7",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742f1407-327c-454a-a51f-7f0331ddd9ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f88a1833-5e22-4301-91fc-8f71366073bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c6d11c1-69ba-4795-b7b3-7e93675a1ccc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bbfbb17-e099-4324-bd8b-b7c7040f157e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569ea7ff-9ffd-48aa-856e-2e79acf035c7",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caadfb15-ba6b-4a47-ad93-77a81f72e613",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5475e057-995a-487d-9d83-74c261f8169e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4965892c-3cb8-463a-8f0b-216f191f0985",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95ae002c-5432-4e08-8a30-66260795bbdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a521ef-29a4-4eae-9378-b2c406d1c735",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a24532b-d916-4de9-9419-443919b20e19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "584dd694-1e44-4e9f-94e0-00f0ba0575ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "182a0d63-8186-464d-a7c9-736606259207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0a9ed7-be77-45f7-b880-46ee2cb6abf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03fbe112-14b9-43a9-9363-a4435e28e6ff",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37435af-75bd-40bc-9c6f-194a18b0f93a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c29205d9-2e82-4fe6-8140-d6d2c0513887"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a5abc38-693c-41be-8598-0714a4ff431e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34569a79-e861-4644-b247-69288ba79059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20055389-b063-489d-9224-d276009f701f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f791aa44-0a72-442b-b7c5-b09de171b54c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcb299c3-37cf-47ee-a4b8-f8a527988046"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1822dd8d-55b3-485f-804b-75a77d433e3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f12e2309-21ef-4056-9fc5-8293d2770802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb239df7-2978-4348-ac96-049ff52f6b4d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da90bd5c-4978-44f1-bb31-0d997df70ccb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f94239de-3476-458f-b9d9-f17a2aefd3a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "016b7c54-6359-4091-be63-bddef1b77fd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26773767-8b69-4ae0-839d-18419c0413bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee14131-1167-491f-8820-093fe52dc429",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83fe4f45-a0b1-4fdf-9ea8-4e770db1f3d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72b22530-58ae-4f59-9fe1-b1b692e000dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "458669c9-63fb-4357-923b-e30adaeb33f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "560d4bd5-2b2d-4276-b643-576e2cf66265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db886d9-62ca-404b-8108-07e6049c4d0d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60927dc-c07e-471c-9a48-d81dfeec16da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba050c85-b14a-4a76-9946-3f81401f697d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef003e5-db8f-412f-95fa-056ec75ff6ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98a2915c-b9e4-4df1-91c7-6748644ee494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "314f6819-c4d2-4179-a840-d7d51fdc0da2",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610ec5e6-c51c-43c8-9527-becb05ae7f28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbff475c-782a-4887-b1af-7f1b1d9bc7d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a01efc61-213a-42f9-89d0-4eb445eade7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa5124f-8529-4538-891d-80eed3686131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc26ff6-f344-4974-a846-908a20c07438",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767bdfd7-5909-4ce4-ac9b-4391604a7581",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecdb7187-0bac-49eb-98fc-b2139d444126"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd8e90e-1669-4c92-9aa1-fb38e55ca88e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94a52ff6-499c-4d66-905e-86bd39eb09e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c43dd270-9509-4cc8-9b6f-9089b732b693",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ccff2d-76fe-4985-ba1a-1a450fcac336",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca55a016-ed86-4a74-a40f-b31b7ca33c43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba153b5-b508-4522-ac49-ecd78e66ebf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3004d1e7-aae6-48e4-a859-b563d37a434e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d472b87-e980-406b-9975-49c0ac84e3b7",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57532e6e-1cab-4767-b746-325143e9d3c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "707d7a04-dc63-4a73-bbd1-4bfa1c12fdec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5787652b-520a-41c9-bf95-2dc512216e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ed2cda-59ec-4a59-92e8-4a12cc19e81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0b2d85a-3311-48c8-b03f-7b6097c467a3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "770a5f1e-0ac1-4adf-93e5-93b9e7a2938b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8d98005-1807-40ae-9fbd-6ecb0cd300f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5090f9fa-4322-4e67-a20f-48ad38d9b032",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b87cbc28-8621-450d-ad9f-e3d21b3c5f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a79dc2-36bd-49bb-b0fe-8205d2014f47",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af5b49e4-a5e0-464f-b6cf-6cf14e1650c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f454015-842c-4a72-8970-2e205932d1f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c198d123-df18-489e-bcc4-41da5db8ec82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84313118-501e-4cf9-872d-f595a375d4e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1035e592-7cfe-4d82-90c8-76e5fadffe72",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d76a0ad-67ff-41c6-9200-1d0b3a359078",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e761fddb-5d48-486c-b25b-07002be6a004"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aece5064-d24a-4b3d-bf55-6570a97f647e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af00d7d8-17ec-4d2b-97be-3c1c1aa60eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4b9d29-4b83-42c3-b219-47696257c9f3",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f47954-fe9a-4d8f-a451-4fc1ff69e9f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94b3c21b-f85e-4b11-a335-e2803420d0c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0ca428-e237-491a-bcd4-e5b90c91404d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92bffb72-c0b3-4d55-8a8b-8b0107cfc7e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc419c99-f8c1-4025-aa63-816dbc1e9852",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5d27c9-3303-4a4e-85ee-d95acef8de1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1768e016-40d0-40e8-9c7f-1f9c822d2c2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "599c29c9-b7c4-45d8-bbaa-2cad2246adfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "775bdd3f-ca1f-4a8a-b469-28bbe4057587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3b627d-749e-425d-9f9b-795ec7637cc0",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d702367-a768-48eb-b137-79b21b5ff5e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "674d6b0c-fc17-4aaa-9a3e-6e64b460bbc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "376ac5fc-3f05-4f97-9d53-92b654ab4cb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a33cb284-aae0-4273-8e23-f8289da7c6a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79bf660c-67d6-47bf-8fab-865e207fc5fa",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e1ecba4-9f75-47b9-b3cb-e450e972ed3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0478df7f-03cb-489e-ad55-4f7e65cde94c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "625e8fa4-7a61-453a-87cf-0d51fbf42bc2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd3d6d2d-614f-4f88-aa61-f6588b85569b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b32533-541b-4183-a29b-dd615af4e5c6",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2389ee-3eca-4edf-9cb4-b21db4baadb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2e5aace-3c70-4a1a-987b-3257114885c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5017e0-b7e2-453c-a4c7-b0bddf9e141c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c1d2897-97e0-46df-a5f1-39e1d4ec4598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee398359-e6e3-477c-be5e-450a7f48e609",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df4d866-3144-47d8-a83e-853a138320b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2123f7a7-5ef3-483f-b502-e34a2c5a9100"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d169b15-89ff-4d55-a369-2300ebebc54c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aa498bf-150a-4978-9217-5ec83eebaf3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "713971d8-f32d-4029-bbb8-fd7227d2aa57",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c1cf310-5235-4027-b76c-d7aed7981bde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a92e6b77-7f28-4695-bc6b-811cdbd89616"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97c577e-4b38-4172-b7cb-da4bf1f71665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a2aee76-1959-473c-a2e3-e93d70f6064f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3aa0a26-8e36-4d42-949c-67b5da21eeb2",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb8cafc-6b99-4384-9929-dc3c8f28d21d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cf47eb4-d55d-4026-a387-2ca7bfe1cd1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a0d97b-c1d4-4895-9b5b-0d8538d77499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "853bebe3-02b1-4300-8146-10194b42033d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3c6e47-d201-4df9-8d0c-19698ac1d317",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f66aef8-190d-4700-93db-7add736c02ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dedcd44d-7cb0-4d5a-9718-d5dbe59a089f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "510a97e1-587d-412b-891b-343623a30e63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c531b051-b262-4f96-aa86-7ad6ecc879e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d60f5f8-f47d-4074-bf2e-68c261efdc66",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6c1e82-1d59-49c8-847f-07213af2ecfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9012d5e-f6d6-4c0c-9e2b-96c1968f809c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b093207-9b2c-48d3-8a33-cc05f916c6f1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d0d1b9-9126-4f26-8b25-00cea8befa41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9abc8a61-1da3-4f01-9693-b0a3f9f4b2c9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dcaecd3-4f7d-4dfe-8862-192d18be6980",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "077f2e32-a0da-44b9-9270-b84d8b4eb2b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ae6230-09ec-42ff-9c6f-d885318aec48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ff0930c-f21b-44cf-a0ab-d2c100318dfe"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4910f62e-d00e-42ec-be39-7a8c2e26ed60",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bab097fd-4661-458e-b54d-ce988084213f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb06bb5f-9b6b-4a76-9fa9-4328c4fe2ea9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "792fd299-8518-4e5a-9a1d-cdfe697dddbd"
                    }
                  }
                ]
              },
              {
                "id": "efe3795d-8d45-4dfb-a2df-5a40a777cf79",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a547c938-09b3-4b5f-8487-fa4bdb15ce0d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045ce361-b8fb-4b1b-a3bf-18f6385669da",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7c94a415-8673-48b6-a4d6-c8f82cf7adc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd4d1fe-5d71-4b81-8e44-d824762b70ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb669a60-0b28-446f-b426-8db4488c200f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99b262a1-c305-4d49-a0be-863c8d731779",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4653eec0-92e5-482c-bfe1-8e0b366a162a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "87bdd594-f0ac-423b-9f38-6eea71c240ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7317850-093f-4a33-9976-ebf77f1d47a6"
                    }
                  }
                ]
              },
              {
                "id": "3c3b8e6c-2cf7-4ff9-ae30-87a6813d0e32",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9462b00f-1158-460c-af6d-490822e3ed05",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49632738-779f-49b8-a407-730254fde92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "fc50d935-50bb-4761-8d23-45dc4bf16093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2466d39c-97ea-4b93-9af8-afe96a811bb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47e43f08-2358-4e24-ac53-fd639557de2a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8a0a21b8-1066-4c1b-87b0-b6915fc94f18",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f93dd8f2-0dab-48c4-95cd-132f447f9589",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3bfcd81f-590c-4e91-bc81-a0c052318d55",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1a61ba55-296b-4af1-bb23-419c340e1e48"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3652e9d-72bf-46ee-8531-68acf4b264ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "36b4a80f-7f2d-4d02-86a3-c1d6fd255f5d"
                    }
                  }
                ]
              },
              {
                "id": "383b2ee1-7b0a-40ee-b890-e756ae540ba7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6af355d6-53fc-456a-a0bb-b030d96fa6d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d3994db8-eb1e-4d05-b0a4-b08e0f453414"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3169b8c0-2a68-4ad1-aaf0-2ddd74f5ac2a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37743eb2-fa9d-4119-9e2c-719bae5d91e1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0cddc978-efcf-4414-82fb-b489c2f21370",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "492fc156-b38d-4236-8d5f-dad2c5f13ec3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf650d96-07bf-4e77-bf34-e95e9d670434",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "62dfd89a-2b71-4d1c-99fb-f1985f2cd775"
            }
          }
        ]
      },
      {
        "id": "b662dee5-07eb-479f-9ee8-34218d0ad46d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f38cc341-3687-43b0-a560-188ec9e8863d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "65a3986a-1992-4eb1-9f26-d9fa269cfcd2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1311e10e-a2d7-4f8d-9870-adfc080f6590",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db29c9c7-5dbc-4d8d-a1af-cfa0d9d32ba0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "295f4e1d-5c16-43cd-9157-c811b0a40a8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0591251-9265-4084-b787-33b9511dcdb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "700374c7-e353-431a-8860-9f1fa9f55e05"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09698910-6c3a-441b-86e0-c165062af87f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89476a6c-bce9-48d6-9707-40fc6cac72ed"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2eb079a-e7cc-4766-baac-e2e38fe4b324",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a15ec17-3c90-4a62-a76e-db822ab22652"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6b3f7557-b804-49d5-961a-e936b5dcb4a7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0eed9126-d33e-49f0-98d5-f065f1a3a263"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f399310e-83ed-4934-b8ec-94fb9b2a491f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8919febc-a41c-4093-bb4a-feaba5d0ca1a"
            }
          }
        ]
      },
      {
        "id": "b5483fce-11f7-4abf-91fd-b22f3a09971e",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "77c8a88d-f10d-408e-b32d-544817d41a67",
            "name": "Negative Testing",
            "item": [
              {
                "id": "611d55fe-bb31-4f96-8431-2b8b1bb5b14e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1725d81a-ec11-4ee6-8539-b2b73ef36dc3",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36b7031-aba0-4451-b2b4-bb47ce050aed",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1da2c15-682d-4b5b-b2c6-0f3efefe89d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "157fa89c-31fb-4521-b918-cce58f0fa2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d8553565-1a0b-43db-a98a-eaf1d60206ac"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed96ddce-cf37-4c09-9905-d55b94eb9b9d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2ff2937-c199-469e-a99a-09088f0b4796"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1342857-05a5-4575-80b0-22f5f635d87c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "781a23f9-3658-471d-8714-0d8697e58fe3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f82f297-9f82-46ac-8965-4b1e1fc7dabb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "dc79df67-6397-4a3f-aca9-d62edcbb095e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05600c63-303f-4fe3-b557-7b345ccdb672",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "877baa55-6951-4c15-a608-96e81b202ae9"
            }
          }
        ]
      },
      {
        "id": "59f8842f-4eb3-4eec-b1ae-9166a743cc16",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "fb272c33-0a19-4c0a-b090-db978282b379",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fa4b9ba0-b4f8-46b5-ade2-34b7de46f0f3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4f5fe82-de7c-4288-ad55-1ed103bd2549",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbec61a9-1c5d-40d7-9c38-18f0e346c044",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d7856a4-1a5c-48f2-830b-f1b89f1475c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7dda2b2-d1bb-4095-b717-bfa0896cb3f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1604cd2f-f97c-4fa6-ad69-3ff45e475c99"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "451c81d1-c49a-44ab-a162-0d98815216b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ebdd997-931e-4437-a395-eab993e7dff5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e8f2d70-8579-4140-8bae-d9d90ae8f0e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4cfb1070-04c6-425a-9a34-b38667ef6f16"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c8f9069d-6794-4d2b-98cd-bb8f7d41129a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a5bc32ad-f4b4-4197-904c-de17bd903503"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a9e7fa7-3b1c-4c57-8281-f59a28825800",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "12a359de-11b2-4a72-8cb4-28e66dab12e2"
            }
          }
        ]
      },
      {
        "id": "11209315-e56a-449e-b2b1-0b95050981d8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cd7a4841-f595-4125-9724-7c00203c1012",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c215f96-08fb-46a8-80aa-371c06992ca8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "674a12f0-b280-44c6-9ec5-856bab0a4081",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f6153d0-dab7-4029-b6f1-77b47003bf89",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d4ad806-e6b7-459f-a8e4-3b4c91ca5fa2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 294
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 86.60283687943259,
      "responseMin": 5,
      "responseMax": 764,
      "responseSd": 32.42856402929,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1706747762295,
      "completed": 1706747821631
    },
    "executions": [
      {
        "id": "c4052225-a1f4-4b62-844e-cf871a91c0b7",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fc7d73d6-d37b-45a9-b0e4-be4e5940aabd",
          "httpRequestId": "d26289b7-8c6f-4362-b506-c383f5ed389e"
        },
        "item": {
          "id": "c4052225-a1f4-4b62-844e-cf871a91c0b7",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8c2ca27e-2ff0-4ec2-8722-816e33ffe4a8",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 0
        }
      },
      {
        "id": "4d8c9439-5989-4e3c-b59b-0a62ddcdeebf",
        "cursor": {
          "ref": "fa582b31-cb9d-4435-9ed1-a9db6b152cb6",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9f97c3e8-71fb-4bc1-b26b-1696f9fc340e"
        },
        "item": {
          "id": "4d8c9439-5989-4e3c-b59b-0a62ddcdeebf",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "bba2a4fd-6cd0-45a0-b9b6-a23609bb0665",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "bd8ce293-a520-431a-b9b2-1901c93eaad0",
        "cursor": {
          "ref": "fdd84d34-b672-4e6e-a1cb-17e9c07deebc",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d513a74a-96a5-499b-8336-a60a8333ee02"
        },
        "item": {
          "id": "bd8ce293-a520-431a-b9b2-1901c93eaad0",
          "name": "did_json"
        },
        "response": {
          "id": "1fb5a058-9ae1-497f-9fe8-3bc8f8cb31db",
          "status": "OK",
          "code": 200,
          "responseTime": 764,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f63d8421-748f-4382-a816-291bb0c24195",
        "cursor": {
          "ref": "98c420ec-bc4f-4d66-b20a-bd67ddf105b1",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "91fe7ebd-92f6-47fa-8084-2b144718294b"
        },
        "item": {
          "id": "f63d8421-748f-4382-a816-291bb0c24195",
          "name": "did:invalid"
        },
        "response": {
          "id": "152fc767-b497-4b7a-b619-cde72e90bf6c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f63d8421-748f-4382-a816-291bb0c24195",
        "cursor": {
          "ref": "98c420ec-bc4f-4d66-b20a-bd67ddf105b1",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "91fe7ebd-92f6-47fa-8084-2b144718294b"
        },
        "item": {
          "id": "f63d8421-748f-4382-a816-291bb0c24195",
          "name": "did:invalid"
        },
        "response": {
          "id": "152fc767-b497-4b7a-b619-cde72e90bf6c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0829ed-ad0e-4ab7-b494-b057213cd961",
        "cursor": {
          "ref": "8947c977-0cdc-4f08-beea-5d64cb68d987",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ada71230-2ff5-43e0-aacc-e98b5270faca"
        },
        "item": {
          "id": "8c0829ed-ad0e-4ab7-b494-b057213cd961",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "32f3908c-5b0e-4426-939a-c181797bd264",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0829ed-ad0e-4ab7-b494-b057213cd961",
        "cursor": {
          "ref": "8947c977-0cdc-4f08-beea-5d64cb68d987",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ada71230-2ff5-43e0-aacc-e98b5270faca"
        },
        "item": {
          "id": "8c0829ed-ad0e-4ab7-b494-b057213cd961",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "32f3908c-5b0e-4426-939a-c181797bd264",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f504eff-3432-46a7-92b2-e7144c14233b",
        "cursor": {
          "ref": "58dee517-57c1-443f-9f76-9c3c07c45b3d",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ef72c32c-2c09-4703-a4bf-f77def3d71c5"
        },
        "item": {
          "id": "0f504eff-3432-46a7-92b2-e7144c14233b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c0a85f66-f546-495d-98dd-46027b777146",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f504eff-3432-46a7-92b2-e7144c14233b",
        "cursor": {
          "ref": "58dee517-57c1-443f-9f76-9c3c07c45b3d",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ef72c32c-2c09-4703-a4bf-f77def3d71c5"
        },
        "item": {
          "id": "0f504eff-3432-46a7-92b2-e7144c14233b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c0a85f66-f546-495d-98dd-46027b777146",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "108f356d-6d1e-4df7-bc52-e9fdf9d8fbe6",
        "cursor": {
          "ref": "5af95984-aed2-43b0-8124-f53826a3e6c9",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4b6816f4-b06f-43e7-9f25-245965df1f3f"
        },
        "item": {
          "id": "108f356d-6d1e-4df7-bc52-e9fdf9d8fbe6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "660c05fe-d312-4837-91cd-56abdaea9dfb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "108f356d-6d1e-4df7-bc52-e9fdf9d8fbe6",
        "cursor": {
          "ref": "5af95984-aed2-43b0-8124-f53826a3e6c9",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4b6816f4-b06f-43e7-9f25-245965df1f3f"
        },
        "item": {
          "id": "108f356d-6d1e-4df7-bc52-e9fdf9d8fbe6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "660c05fe-d312-4837-91cd-56abdaea9dfb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41e76ec3-c05f-47f6-a30e-1d0e3a63c715",
        "cursor": {
          "ref": "6801c5cb-6cce-4f0e-84dd-8b7ce3e33e24",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "835ebe06-6d5e-4cf3-b89d-af9ba354b54f"
        },
        "item": {
          "id": "41e76ec3-c05f-47f6-a30e-1d0e3a63c715",
          "name": "identifiers"
        },
        "response": {
          "id": "089f690b-7daf-427b-97f7-ca592267584c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "41e76ec3-c05f-47f6-a30e-1d0e3a63c715",
        "cursor": {
          "ref": "6801c5cb-6cce-4f0e-84dd-8b7ce3e33e24",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "835ebe06-6d5e-4cf3-b89d-af9ba354b54f"
        },
        "item": {
          "id": "41e76ec3-c05f-47f6-a30e-1d0e3a63c715",
          "name": "identifiers"
        },
        "response": {
          "id": "089f690b-7daf-427b-97f7-ca592267584c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "edcd90d5-2252-4b1e-9ed0-1b143e52c48c",
        "cursor": {
          "ref": "f233d2ce-b3bb-417c-8a6c-ff50a8c3505f",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "906e475c-f8c7-4e65-9339-7f92aaaf5dc2"
        },
        "item": {
          "id": "edcd90d5-2252-4b1e-9ed0-1b143e52c48c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1e69155b-9c59-4ded-a9c5-894d192671bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edcd90d5-2252-4b1e-9ed0-1b143e52c48c",
        "cursor": {
          "ref": "f233d2ce-b3bb-417c-8a6c-ff50a8c3505f",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "906e475c-f8c7-4e65-9339-7f92aaaf5dc2"
        },
        "item": {
          "id": "edcd90d5-2252-4b1e-9ed0-1b143e52c48c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1e69155b-9c59-4ded-a9c5-894d192671bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7cd9dfd-d494-4377-b32c-741b441b3846",
        "cursor": {
          "ref": "7f4e9e32-d6ca-4452-a490-581165739c2d",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ce5689ba-a84c-4e60-b235-5764adbd5ae4"
        },
        "item": {
          "id": "e7cd9dfd-d494-4377-b32c-741b441b3846",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b998a7aa-2ead-41b7-a5f3-77be5391b2ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7cd9dfd-d494-4377-b32c-741b441b3846",
        "cursor": {
          "ref": "7f4e9e32-d6ca-4452-a490-581165739c2d",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ce5689ba-a84c-4e60-b235-5764adbd5ae4"
        },
        "item": {
          "id": "e7cd9dfd-d494-4377-b32c-741b441b3846",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b998a7aa-2ead-41b7-a5f3-77be5391b2ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e273e3-e3fc-4b07-9692-43ad2ccd0192",
        "cursor": {
          "ref": "0a5367b6-487b-459a-b2e3-85ba5824565d",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fc857313-2161-49d3-abd3-594136897b78"
        },
        "item": {
          "id": "d9e273e3-e3fc-4b07-9692-43ad2ccd0192",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "293416c6-60c7-425b-9788-5f3af22ff177",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e273e3-e3fc-4b07-9692-43ad2ccd0192",
        "cursor": {
          "ref": "0a5367b6-487b-459a-b2e3-85ba5824565d",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fc857313-2161-49d3-abd3-594136897b78"
        },
        "item": {
          "id": "d9e273e3-e3fc-4b07-9692-43ad2ccd0192",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "293416c6-60c7-425b-9788-5f3af22ff177",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe50ddb-b636-43a3-ae74-5db07e4f726b",
        "cursor": {
          "ref": "2c8e0db3-32bb-4fe4-b931-320241fbfa56",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "19335513-6847-43b6-bf72-189a68fd9f74"
        },
        "item": {
          "id": "efe50ddb-b636-43a3-ae74-5db07e4f726b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "36869a3a-0255-4e8a-b2d9-f225e52a45ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe50ddb-b636-43a3-ae74-5db07e4f726b",
        "cursor": {
          "ref": "2c8e0db3-32bb-4fe4-b931-320241fbfa56",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "19335513-6847-43b6-bf72-189a68fd9f74"
        },
        "item": {
          "id": "efe50ddb-b636-43a3-ae74-5db07e4f726b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "36869a3a-0255-4e8a-b2d9-f225e52a45ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3afa9d8-9987-43dc-ae95-9eeb99faa0a5",
        "cursor": {
          "ref": "ead2b514-7fc4-49c9-914b-28895238ff41",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "19f62fa2-48a3-4a0b-982b-57517431a71e"
        },
        "item": {
          "id": "a3afa9d8-9987-43dc-ae95-9eeb99faa0a5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "40d8dcf9-989a-4a99-94ba-75ba3bebea1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3afa9d8-9987-43dc-ae95-9eeb99faa0a5",
        "cursor": {
          "ref": "ead2b514-7fc4-49c9-914b-28895238ff41",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "19f62fa2-48a3-4a0b-982b-57517431a71e"
        },
        "item": {
          "id": "a3afa9d8-9987-43dc-ae95-9eeb99faa0a5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "40d8dcf9-989a-4a99-94ba-75ba3bebea1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d39ac50d-6f5b-43a5-95ac-e0a855511e13",
        "cursor": {
          "ref": "a98239f8-3a91-40cb-9316-2ae97af21fcc",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8ef08f69-1d97-4c4e-9e5b-0cc4971f4a46"
        },
        "item": {
          "id": "d39ac50d-6f5b-43a5-95ac-e0a855511e13",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "db0b4cde-af5b-49d9-aaaa-4ace890ba8ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d39ac50d-6f5b-43a5-95ac-e0a855511e13",
        "cursor": {
          "ref": "a98239f8-3a91-40cb-9316-2ae97af21fcc",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8ef08f69-1d97-4c4e-9e5b-0cc4971f4a46"
        },
        "item": {
          "id": "d39ac50d-6f5b-43a5-95ac-e0a855511e13",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "db0b4cde-af5b-49d9-aaaa-4ace890ba8ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "921baf5f-c786-42a6-aaa7-566e5dd3395d",
        "cursor": {
          "ref": "0b411590-52c6-4a0c-abaa-160cc0b84c8c",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b36b9f4c-9428-41fc-9e87-8f645f6a37ad"
        },
        "item": {
          "id": "921baf5f-c786-42a6-aaa7-566e5dd3395d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a99bdc1f-88ca-479d-8d27-35cb021d81ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "921baf5f-c786-42a6-aaa7-566e5dd3395d",
        "cursor": {
          "ref": "0b411590-52c6-4a0c-abaa-160cc0b84c8c",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b36b9f4c-9428-41fc-9e87-8f645f6a37ad"
        },
        "item": {
          "id": "921baf5f-c786-42a6-aaa7-566e5dd3395d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a99bdc1f-88ca-479d-8d27-35cb021d81ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e151b2ed-24c6-40ff-8dc8-a099ec8399f3",
        "cursor": {
          "ref": "86cd09f0-ee26-423d-805d-8c1068e56743",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4396dc87-1b81-4959-8bf3-ce64430b0682"
        },
        "item": {
          "id": "e151b2ed-24c6-40ff-8dc8-a099ec8399f3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e4d323aa-8e2f-40b1-afdf-88fbe2af7372",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e151b2ed-24c6-40ff-8dc8-a099ec8399f3",
        "cursor": {
          "ref": "86cd09f0-ee26-423d-805d-8c1068e56743",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4396dc87-1b81-4959-8bf3-ce64430b0682"
        },
        "item": {
          "id": "e151b2ed-24c6-40ff-8dc8-a099ec8399f3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e4d323aa-8e2f-40b1-afdf-88fbe2af7372",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf12ff0b-078e-443d-8bd0-51e66af368ab",
        "cursor": {
          "ref": "88e4a4d3-ec60-495f-9cda-ec55a88dd8fd",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6698ca98-ee16-4a02-a503-17069bc07fde"
        },
        "item": {
          "id": "cf12ff0b-078e-443d-8bd0-51e66af368ab",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c13bf513-2614-442e-ad46-86fd6c21c1d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf12ff0b-078e-443d-8bd0-51e66af368ab",
        "cursor": {
          "ref": "88e4a4d3-ec60-495f-9cda-ec55a88dd8fd",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6698ca98-ee16-4a02-a503-17069bc07fde"
        },
        "item": {
          "id": "cf12ff0b-078e-443d-8bd0-51e66af368ab",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c13bf513-2614-442e-ad46-86fd6c21c1d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f01302-a73d-4b95-a6f8-4e52e8fa9ef4",
        "cursor": {
          "ref": "1011a69d-8085-45e5-ac6b-8d16a65fabdd",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "997cb5f7-dd9c-4253-9291-c3305409dcb8"
        },
        "item": {
          "id": "19f01302-a73d-4b95-a6f8-4e52e8fa9ef4",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "fbe6615d-091a-4a66-89db-047833853554",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f01302-a73d-4b95-a6f8-4e52e8fa9ef4",
        "cursor": {
          "ref": "1011a69d-8085-45e5-ac6b-8d16a65fabdd",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "997cb5f7-dd9c-4253-9291-c3305409dcb8"
        },
        "item": {
          "id": "19f01302-a73d-4b95-a6f8-4e52e8fa9ef4",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "fbe6615d-091a-4a66-89db-047833853554",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4783921-6921-4efe-8762-d49c3668b4c7",
        "cursor": {
          "ref": "660b0e90-790f-47bb-8d39-06589e2a36dc",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4180632c-de5e-4856-8933-e74fe60a8dcd"
        },
        "item": {
          "id": "e4783921-6921-4efe-8762-d49c3668b4c7",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "43248587-1bbd-494f-b9a8-d1e367063d0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4783921-6921-4efe-8762-d49c3668b4c7",
        "cursor": {
          "ref": "660b0e90-790f-47bb-8d39-06589e2a36dc",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4180632c-de5e-4856-8933-e74fe60a8dcd"
        },
        "item": {
          "id": "e4783921-6921-4efe-8762-d49c3668b4c7",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "43248587-1bbd-494f-b9a8-d1e367063d0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c2c24c4-de3a-4e25-9b44-c0c641648db1",
        "cursor": {
          "ref": "96d56ae3-9829-40cd-bd19-6c7ffb4b2479",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cfba8a4b-60e6-48f4-ab98-84880b9b3446"
        },
        "item": {
          "id": "4c2c24c4-de3a-4e25-9b44-c0c641648db1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b91fee96-51d2-426a-b8c8-6607db6154a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c2c24c4-de3a-4e25-9b44-c0c641648db1",
        "cursor": {
          "ref": "96d56ae3-9829-40cd-bd19-6c7ffb4b2479",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cfba8a4b-60e6-48f4-ab98-84880b9b3446"
        },
        "item": {
          "id": "4c2c24c4-de3a-4e25-9b44-c0c641648db1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b91fee96-51d2-426a-b8c8-6607db6154a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21288947-728d-4465-b27a-eedc29f42801",
        "cursor": {
          "ref": "7e1c05bc-9935-4e12-93e8-4d1f70de467f",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "01bdb9ac-ae38-4237-bf66-9db90f4632de"
        },
        "item": {
          "id": "21288947-728d-4465-b27a-eedc29f42801",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "fae6b21c-38f6-49ba-941b-e5dfabe8e5bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21288947-728d-4465-b27a-eedc29f42801",
        "cursor": {
          "ref": "7e1c05bc-9935-4e12-93e8-4d1f70de467f",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "01bdb9ac-ae38-4237-bf66-9db90f4632de"
        },
        "item": {
          "id": "21288947-728d-4465-b27a-eedc29f42801",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "fae6b21c-38f6-49ba-941b-e5dfabe8e5bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd430f30-3a4d-4f88-ab9b-b2c929432f10",
        "cursor": {
          "ref": "e9b27cfb-463b-436c-9785-6b697adbccee",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "93179d4b-ad9e-41fa-b7a2-431a98d8e5ce"
        },
        "item": {
          "id": "fd430f30-3a4d-4f88-ab9b-b2c929432f10",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "332e3408-10d5-43c0-93bd-b04b1ebb4638",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd430f30-3a4d-4f88-ab9b-b2c929432f10",
        "cursor": {
          "ref": "e9b27cfb-463b-436c-9785-6b697adbccee",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "93179d4b-ad9e-41fa-b7a2-431a98d8e5ce"
        },
        "item": {
          "id": "fd430f30-3a4d-4f88-ab9b-b2c929432f10",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "332e3408-10d5-43c0-93bd-b04b1ebb4638",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50cc85a0-0f19-4378-8da6-d6a06e6841ee",
        "cursor": {
          "ref": "29890a9e-766f-488c-9f31-8a07c9ea9c92",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6697e911-99b9-4dfc-857f-d7254d32b5e1"
        },
        "item": {
          "id": "50cc85a0-0f19-4378-8da6-d6a06e6841ee",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3e6ebbe1-e982-4fa8-8212-b1a8f4be2209",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50cc85a0-0f19-4378-8da6-d6a06e6841ee",
        "cursor": {
          "ref": "29890a9e-766f-488c-9f31-8a07c9ea9c92",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6697e911-99b9-4dfc-857f-d7254d32b5e1"
        },
        "item": {
          "id": "50cc85a0-0f19-4378-8da6-d6a06e6841ee",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3e6ebbe1-e982-4fa8-8212-b1a8f4be2209",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b06f942-c242-46af-8e01-a36ef7be6769",
        "cursor": {
          "ref": "860662dd-6775-4fae-98ce-a6cf462d21f3",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "00d69001-b945-4420-bbec-0855068711e5"
        },
        "item": {
          "id": "1b06f942-c242-46af-8e01-a36ef7be6769",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "270c05ac-764a-4572-bc59-a845430c6a7c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b06f942-c242-46af-8e01-a36ef7be6769",
        "cursor": {
          "ref": "860662dd-6775-4fae-98ce-a6cf462d21f3",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "00d69001-b945-4420-bbec-0855068711e5"
        },
        "item": {
          "id": "1b06f942-c242-46af-8e01-a36ef7be6769",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "270c05ac-764a-4572-bc59-a845430c6a7c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30aa264f-8372-4fba-bde9-6c884962f6ff",
        "cursor": {
          "ref": "f138c127-9dd0-47c9-9498-cabee3282fd9",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1e027be4-7aba-4765-be66-d3f40f92cc92"
        },
        "item": {
          "id": "30aa264f-8372-4fba-bde9-6c884962f6ff",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "255c55c4-baed-4172-aa52-b9a990123f56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30aa264f-8372-4fba-bde9-6c884962f6ff",
        "cursor": {
          "ref": "f138c127-9dd0-47c9-9498-cabee3282fd9",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1e027be4-7aba-4765-be66-d3f40f92cc92"
        },
        "item": {
          "id": "30aa264f-8372-4fba-bde9-6c884962f6ff",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "255c55c4-baed-4172-aa52-b9a990123f56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a2e7d17-c55a-4ce8-a489-c3a8525eb776",
        "cursor": {
          "ref": "7033792a-5671-4980-91d0-5ff383728889",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "731b9411-4090-44a6-8de7-f02be77d27bb"
        },
        "item": {
          "id": "9a2e7d17-c55a-4ce8-a489-c3a8525eb776",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "2f4149dd-89c5-406c-bfd2-c38a03bf9e1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a2e7d17-c55a-4ce8-a489-c3a8525eb776",
        "cursor": {
          "ref": "7033792a-5671-4980-91d0-5ff383728889",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "731b9411-4090-44a6-8de7-f02be77d27bb"
        },
        "item": {
          "id": "9a2e7d17-c55a-4ce8-a489-c3a8525eb776",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "2f4149dd-89c5-406c-bfd2-c38a03bf9e1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2400343-4aac-4d2f-9f76-fa272347205b",
        "cursor": {
          "ref": "b27fdefb-2409-4e1a-8298-072a25fb2525",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "56f93cfa-3b7b-4560-826a-26b643a02f2a"
        },
        "item": {
          "id": "f2400343-4aac-4d2f-9f76-fa272347205b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "37282557-b295-4b82-8ee6-13ec925f3417",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2400343-4aac-4d2f-9f76-fa272347205b",
        "cursor": {
          "ref": "b27fdefb-2409-4e1a-8298-072a25fb2525",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "56f93cfa-3b7b-4560-826a-26b643a02f2a"
        },
        "item": {
          "id": "f2400343-4aac-4d2f-9f76-fa272347205b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "37282557-b295-4b82-8ee6-13ec925f3417",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d42ec4b0-4c28-4bd7-af10-684bbb14f453",
        "cursor": {
          "ref": "d6dbe3e9-8b74-4818-a81c-29ec691c7c49",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "58a8f660-d70f-4194-8413-85c62e3b3647"
        },
        "item": {
          "id": "d42ec4b0-4c28-4bd7-af10-684bbb14f453",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "4cdfe7f8-e5f6-4cb6-bb15-daf5551a5b54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d42ec4b0-4c28-4bd7-af10-684bbb14f453",
        "cursor": {
          "ref": "d6dbe3e9-8b74-4818-a81c-29ec691c7c49",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "58a8f660-d70f-4194-8413-85c62e3b3647"
        },
        "item": {
          "id": "d42ec4b0-4c28-4bd7-af10-684bbb14f453",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "4cdfe7f8-e5f6-4cb6-bb15-daf5551a5b54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecfc77e1-35ff-4fc5-85c1-d9af7249769e",
        "cursor": {
          "ref": "d9cb42e3-693b-4312-885b-1404a959589f",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "25c3e4ff-3fff-4180-83b0-69c72ba47f84"
        },
        "item": {
          "id": "ecfc77e1-35ff-4fc5-85c1-d9af7249769e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9523d166-ddb6-46ad-8fad-9f79dc462dfe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecfc77e1-35ff-4fc5-85c1-d9af7249769e",
        "cursor": {
          "ref": "d9cb42e3-693b-4312-885b-1404a959589f",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "25c3e4ff-3fff-4180-83b0-69c72ba47f84"
        },
        "item": {
          "id": "ecfc77e1-35ff-4fc5-85c1-d9af7249769e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9523d166-ddb6-46ad-8fad-9f79dc462dfe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd5d987-ea68-4a68-a07e-5b51fbf7721a",
        "cursor": {
          "ref": "71cfc10e-5614-4f69-8700-d6602b692673",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "24b8d295-f8cc-47e5-aa3b-07a8047b37fb"
        },
        "item": {
          "id": "ebd5d987-ea68-4a68-a07e-5b51fbf7721a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d23b9c33-8b7e-4194-a39c-7975ca0a6297",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd5d987-ea68-4a68-a07e-5b51fbf7721a",
        "cursor": {
          "ref": "71cfc10e-5614-4f69-8700-d6602b692673",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "24b8d295-f8cc-47e5-aa3b-07a8047b37fb"
        },
        "item": {
          "id": "ebd5d987-ea68-4a68-a07e-5b51fbf7721a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d23b9c33-8b7e-4194-a39c-7975ca0a6297",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016ae28d-d483-4a5e-9b5e-1b16bc7e2083",
        "cursor": {
          "ref": "f38f5c34-7a5e-403a-98ee-1c0f79cda615",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7aa6fba9-fedf-417b-b9bd-d0cf154f326c"
        },
        "item": {
          "id": "016ae28d-d483-4a5e-9b5e-1b16bc7e2083",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0f2764eb-eba4-4eb2-93c6-ef2bdacbf6c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016ae28d-d483-4a5e-9b5e-1b16bc7e2083",
        "cursor": {
          "ref": "f38f5c34-7a5e-403a-98ee-1c0f79cda615",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7aa6fba9-fedf-417b-b9bd-d0cf154f326c"
        },
        "item": {
          "id": "016ae28d-d483-4a5e-9b5e-1b16bc7e2083",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0f2764eb-eba4-4eb2-93c6-ef2bdacbf6c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc0aeeb-7540-48b3-b1bf-fa309d05adcc",
        "cursor": {
          "ref": "0214b0ab-f2bc-4205-bf59-7ac4ba771618",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "37a6f151-2f64-4643-ad9d-9a9522af2190"
        },
        "item": {
          "id": "9bc0aeeb-7540-48b3-b1bf-fa309d05adcc",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "82cc1ae6-545e-47fb-85b0-6c67e7a2a5a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc0aeeb-7540-48b3-b1bf-fa309d05adcc",
        "cursor": {
          "ref": "0214b0ab-f2bc-4205-bf59-7ac4ba771618",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "37a6f151-2f64-4643-ad9d-9a9522af2190"
        },
        "item": {
          "id": "9bc0aeeb-7540-48b3-b1bf-fa309d05adcc",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "82cc1ae6-545e-47fb-85b0-6c67e7a2a5a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ace594c-4be8-4e2c-a3f3-dbfc72375ef3",
        "cursor": {
          "ref": "086e7063-876b-4609-98be-2b214dcbff14",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "eb1692a9-fe95-4183-a517-1538cd444a34"
        },
        "item": {
          "id": "6ace594c-4be8-4e2c-a3f3-dbfc72375ef3",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "714034dd-0170-47de-b939-f874384f6276",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ace594c-4be8-4e2c-a3f3-dbfc72375ef3",
        "cursor": {
          "ref": "086e7063-876b-4609-98be-2b214dcbff14",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "eb1692a9-fe95-4183-a517-1538cd444a34"
        },
        "item": {
          "id": "6ace594c-4be8-4e2c-a3f3-dbfc72375ef3",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "714034dd-0170-47de-b939-f874384f6276",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f3b3742-e163-4146-a323-19975643bb40",
        "cursor": {
          "ref": "151ec7b1-4052-4812-9aff-aaf46573162d",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "07e637b4-e0d5-40f5-8beb-f31b47c7124b"
        },
        "item": {
          "id": "7f3b3742-e163-4146-a323-19975643bb40",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "49bb292c-f356-451e-81da-da7d8c99c7b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f3b3742-e163-4146-a323-19975643bb40",
        "cursor": {
          "ref": "151ec7b1-4052-4812-9aff-aaf46573162d",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "07e637b4-e0d5-40f5-8beb-f31b47c7124b"
        },
        "item": {
          "id": "7f3b3742-e163-4146-a323-19975643bb40",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "49bb292c-f356-451e-81da-da7d8c99c7b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57cc42e-5554-420d-aa81-13307a51dd95",
        "cursor": {
          "ref": "9024d79d-5f61-44c1-a792-6e38e54b2d44",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "534cfbe8-cef9-4ddd-bb80-99d08d7294e2"
        },
        "item": {
          "id": "e57cc42e-5554-420d-aa81-13307a51dd95",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "22c130cb-947b-485e-8c71-cf861a973023",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57cc42e-5554-420d-aa81-13307a51dd95",
        "cursor": {
          "ref": "9024d79d-5f61-44c1-a792-6e38e54b2d44",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "534cfbe8-cef9-4ddd-bb80-99d08d7294e2"
        },
        "item": {
          "id": "e57cc42e-5554-420d-aa81-13307a51dd95",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "22c130cb-947b-485e-8c71-cf861a973023",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae2bcce-fc93-43a1-bc16-8a3c5da304c2",
        "cursor": {
          "ref": "1cbf636f-8a0b-44ef-92c7-db1cfec2f1b3",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f4ecbc4d-925a-4e52-bf4c-70484bfbaf69"
        },
        "item": {
          "id": "dae2bcce-fc93-43a1-bc16-8a3c5da304c2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "213eb0c7-e10d-45fb-9136-175070bcc4c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae2bcce-fc93-43a1-bc16-8a3c5da304c2",
        "cursor": {
          "ref": "1cbf636f-8a0b-44ef-92c7-db1cfec2f1b3",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f4ecbc4d-925a-4e52-bf4c-70484bfbaf69"
        },
        "item": {
          "id": "dae2bcce-fc93-43a1-bc16-8a3c5da304c2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "213eb0c7-e10d-45fb-9136-175070bcc4c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52bc3aba-0be1-47f3-a8fc-cd7c279fd460",
        "cursor": {
          "ref": "58e9f982-51ed-4a18-a5ca-0496c248ab16",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "df992cd6-dca0-4752-9485-257787238a88"
        },
        "item": {
          "id": "52bc3aba-0be1-47f3-a8fc-cd7c279fd460",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6668cce3-532f-4db4-b54d-56c16a402987",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52bc3aba-0be1-47f3-a8fc-cd7c279fd460",
        "cursor": {
          "ref": "58e9f982-51ed-4a18-a5ca-0496c248ab16",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "df992cd6-dca0-4752-9485-257787238a88"
        },
        "item": {
          "id": "52bc3aba-0be1-47f3-a8fc-cd7c279fd460",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6668cce3-532f-4db4-b54d-56c16a402987",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c70816fe-e9aa-4388-b181-e9a1d999d01b",
        "cursor": {
          "ref": "8fd6c342-bb10-40eb-afa7-e1c0ae900612",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "109253d2-c062-46f7-8de2-0f078d1520f0"
        },
        "item": {
          "id": "c70816fe-e9aa-4388-b181-e9a1d999d01b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e2b2cf78-b8a8-4630-bcc7-c0a98f0a61a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c70816fe-e9aa-4388-b181-e9a1d999d01b",
        "cursor": {
          "ref": "8fd6c342-bb10-40eb-afa7-e1c0ae900612",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "109253d2-c062-46f7-8de2-0f078d1520f0"
        },
        "item": {
          "id": "c70816fe-e9aa-4388-b181-e9a1d999d01b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e2b2cf78-b8a8-4630-bcc7-c0a98f0a61a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea2118f-608d-4968-a0c3-8d52edd29878",
        "cursor": {
          "ref": "964d5d67-ee17-467f-85bc-70f151c2d810",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4df2cac4-feaf-4cae-b965-12a6b4477bd2"
        },
        "item": {
          "id": "6ea2118f-608d-4968-a0c3-8d52edd29878",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8605c35a-7f4f-4eb9-89aa-03701360bef3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea2118f-608d-4968-a0c3-8d52edd29878",
        "cursor": {
          "ref": "964d5d67-ee17-467f-85bc-70f151c2d810",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4df2cac4-feaf-4cae-b965-12a6b4477bd2"
        },
        "item": {
          "id": "6ea2118f-608d-4968-a0c3-8d52edd29878",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8605c35a-7f4f-4eb9-89aa-03701360bef3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9ebac6-8200-4b87-b886-f4a08852abd9",
        "cursor": {
          "ref": "93dc02e4-25bb-47ec-bc25-eed09c3dfead",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "09e8ac68-a048-4a67-afe1-ee3be7a1d25d"
        },
        "item": {
          "id": "6d9ebac6-8200-4b87-b886-f4a08852abd9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c8c2ce78-adc6-48a1-bb61-3ac2386bfbd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9ebac6-8200-4b87-b886-f4a08852abd9",
        "cursor": {
          "ref": "93dc02e4-25bb-47ec-bc25-eed09c3dfead",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "09e8ac68-a048-4a67-afe1-ee3be7a1d25d"
        },
        "item": {
          "id": "6d9ebac6-8200-4b87-b886-f4a08852abd9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c8c2ce78-adc6-48a1-bb61-3ac2386bfbd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a143c74-743e-4424-bfb7-fea3e5ad7b27",
        "cursor": {
          "ref": "9e8a8d6f-d2e0-460a-ac17-77aeebf5a30b",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3e0f0168-21b0-43b2-8b2d-244a9f7bb97d"
        },
        "item": {
          "id": "9a143c74-743e-4424-bfb7-fea3e5ad7b27",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "66489715-a786-4927-bdbc-aeffe8cf9770",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a143c74-743e-4424-bfb7-fea3e5ad7b27",
        "cursor": {
          "ref": "9e8a8d6f-d2e0-460a-ac17-77aeebf5a30b",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3e0f0168-21b0-43b2-8b2d-244a9f7bb97d"
        },
        "item": {
          "id": "9a143c74-743e-4424-bfb7-fea3e5ad7b27",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "66489715-a786-4927-bdbc-aeffe8cf9770",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f211b76d-e22a-439e-8cda-22fbee192e3b",
        "cursor": {
          "ref": "93d3c4da-b1e8-43f9-8eb1-6386d8c75ab4",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f4c82ed4-5c41-4229-bc07-361c170f1a9a"
        },
        "item": {
          "id": "f211b76d-e22a-439e-8cda-22fbee192e3b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "dc1a297f-e142-4db3-bee0-97e7a21c6fa4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f211b76d-e22a-439e-8cda-22fbee192e3b",
        "cursor": {
          "ref": "93d3c4da-b1e8-43f9-8eb1-6386d8c75ab4",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f4c82ed4-5c41-4229-bc07-361c170f1a9a"
        },
        "item": {
          "id": "f211b76d-e22a-439e-8cda-22fbee192e3b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "dc1a297f-e142-4db3-bee0-97e7a21c6fa4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d19caa59-972e-44e5-8baa-50dd764a3a28",
        "cursor": {
          "ref": "0e94efe2-8682-4804-9047-3b779f24515d",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1c14ed51-510f-4eb5-b1ae-9a9729eb8e34"
        },
        "item": {
          "id": "d19caa59-972e-44e5-8baa-50dd764a3a28",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b2cae3be-a33f-46b2-a4d1-1f915cd707c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d19caa59-972e-44e5-8baa-50dd764a3a28",
        "cursor": {
          "ref": "0e94efe2-8682-4804-9047-3b779f24515d",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1c14ed51-510f-4eb5-b1ae-9a9729eb8e34"
        },
        "item": {
          "id": "d19caa59-972e-44e5-8baa-50dd764a3a28",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b2cae3be-a33f-46b2-a4d1-1f915cd707c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391ec131-89ea-4df6-b325-6e12964da979",
        "cursor": {
          "ref": "4127a444-f618-4627-b92d-73cb0b69eed9",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3a0c539d-c4c2-4417-8636-5d7f511aafa0"
        },
        "item": {
          "id": "391ec131-89ea-4df6-b325-6e12964da979",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2e50a48a-0525-46f7-ad59-1ac207e25045",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391ec131-89ea-4df6-b325-6e12964da979",
        "cursor": {
          "ref": "4127a444-f618-4627-b92d-73cb0b69eed9",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3a0c539d-c4c2-4417-8636-5d7f511aafa0"
        },
        "item": {
          "id": "391ec131-89ea-4df6-b325-6e12964da979",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2e50a48a-0525-46f7-ad59-1ac207e25045",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "478127c4-1ad4-47c6-9b33-1db47a7a981a",
        "cursor": {
          "ref": "7f4abc15-8f2c-4d25-88b0-5deb5a3677ac",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1b38e848-0f89-4a6e-ab82-6b57c7a16bb6"
        },
        "item": {
          "id": "478127c4-1ad4-47c6-9b33-1db47a7a981a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d7d626e4-8ca6-4f9e-88c2-e5aeb74a3de0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "478127c4-1ad4-47c6-9b33-1db47a7a981a",
        "cursor": {
          "ref": "7f4abc15-8f2c-4d25-88b0-5deb5a3677ac",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1b38e848-0f89-4a6e-ab82-6b57c7a16bb6"
        },
        "item": {
          "id": "478127c4-1ad4-47c6-9b33-1db47a7a981a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d7d626e4-8ca6-4f9e-88c2-e5aeb74a3de0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bbb2252-969a-4c21-8bea-af9b2c188706",
        "cursor": {
          "ref": "83aa5ec5-90d6-43a7-8d11-97071770fd23",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "81e4806a-f758-4e57-8bd6-a79b03804a42"
        },
        "item": {
          "id": "6bbb2252-969a-4c21-8bea-af9b2c188706",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a2e6fc02-5143-42b4-ba3c-0ad002c5754c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bbb2252-969a-4c21-8bea-af9b2c188706",
        "cursor": {
          "ref": "83aa5ec5-90d6-43a7-8d11-97071770fd23",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "81e4806a-f758-4e57-8bd6-a79b03804a42"
        },
        "item": {
          "id": "6bbb2252-969a-4c21-8bea-af9b2c188706",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a2e6fc02-5143-42b4-ba3c-0ad002c5754c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b28d481-3b63-4881-91eb-0c59c635bff0",
        "cursor": {
          "ref": "8a71de93-ef7a-4393-b150-54bd83f1e912",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "decf5128-5391-40b7-ab24-02080a370406"
        },
        "item": {
          "id": "9b28d481-3b63-4881-91eb-0c59c635bff0",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1948127a-2c62-4f37-af2e-7f71362dae74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b28d481-3b63-4881-91eb-0c59c635bff0",
        "cursor": {
          "ref": "8a71de93-ef7a-4393-b150-54bd83f1e912",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "decf5128-5391-40b7-ab24-02080a370406"
        },
        "item": {
          "id": "9b28d481-3b63-4881-91eb-0c59c635bff0",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1948127a-2c62-4f37-af2e-7f71362dae74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0f9af7-7112-4794-b1c1-845350ba1685",
        "cursor": {
          "ref": "5b166e34-0d90-4925-8980-c95c8cafb224",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0063c431-a0a2-4d30-b4f4-4585e050731e"
        },
        "item": {
          "id": "0b0f9af7-7112-4794-b1c1-845350ba1685",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "dc6a01ed-c387-4267-9eca-310148dd05b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0f9af7-7112-4794-b1c1-845350ba1685",
        "cursor": {
          "ref": "5b166e34-0d90-4925-8980-c95c8cafb224",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0063c431-a0a2-4d30-b4f4-4585e050731e"
        },
        "item": {
          "id": "0b0f9af7-7112-4794-b1c1-845350ba1685",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "dc6a01ed-c387-4267-9eca-310148dd05b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84057448-af5b-4528-bb41-e680f50f5b92",
        "cursor": {
          "ref": "9aaea20f-58cc-4fe5-b395-4e71d32b611b",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3c80ddb7-2e0d-471c-b373-9358eceed780"
        },
        "item": {
          "id": "84057448-af5b-4528-bb41-e680f50f5b92",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "1d142eee-0a95-405c-8897-619c4420ee53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84057448-af5b-4528-bb41-e680f50f5b92",
        "cursor": {
          "ref": "9aaea20f-58cc-4fe5-b395-4e71d32b611b",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3c80ddb7-2e0d-471c-b373-9358eceed780"
        },
        "item": {
          "id": "84057448-af5b-4528-bb41-e680f50f5b92",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "1d142eee-0a95-405c-8897-619c4420ee53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8477ba4f-e9ec-4f5d-a5cf-8cc697b23ecd",
        "cursor": {
          "ref": "cd0dba50-3c79-4574-8821-cc182f68bfc0",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e611d506-5b0e-4078-8375-f35b2bf71512"
        },
        "item": {
          "id": "8477ba4f-e9ec-4f5d-a5cf-8cc697b23ecd",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "17b962a0-3172-4f1d-ba42-b62ea94e7f36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8477ba4f-e9ec-4f5d-a5cf-8cc697b23ecd",
        "cursor": {
          "ref": "cd0dba50-3c79-4574-8821-cc182f68bfc0",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e611d506-5b0e-4078-8375-f35b2bf71512"
        },
        "item": {
          "id": "8477ba4f-e9ec-4f5d-a5cf-8cc697b23ecd",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "17b962a0-3172-4f1d-ba42-b62ea94e7f36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b631f6db-642c-4013-9096-f29857bbab5b",
        "cursor": {
          "ref": "d5187b62-81e0-49c5-8391-ba92762ed5ba",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "50b3fe5a-98d1-4921-a7a4-710a299ded49"
        },
        "item": {
          "id": "b631f6db-642c-4013-9096-f29857bbab5b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3879568b-0c2b-4641-9cc5-da73ed39e9c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b631f6db-642c-4013-9096-f29857bbab5b",
        "cursor": {
          "ref": "d5187b62-81e0-49c5-8391-ba92762ed5ba",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "50b3fe5a-98d1-4921-a7a4-710a299ded49"
        },
        "item": {
          "id": "b631f6db-642c-4013-9096-f29857bbab5b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3879568b-0c2b-4641-9cc5-da73ed39e9c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a024f28f-ccb0-49a2-b353-ee5d3f244c8b",
        "cursor": {
          "ref": "98aa8094-37f5-4e78-b114-fac95b668b0c",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "346730ed-a494-4b38-a5c9-6e5559d6ff70"
        },
        "item": {
          "id": "a024f28f-ccb0-49a2-b353-ee5d3f244c8b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "84a0c9d2-860f-4208-8463-5271bcf04dfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a024f28f-ccb0-49a2-b353-ee5d3f244c8b",
        "cursor": {
          "ref": "98aa8094-37f5-4e78-b114-fac95b668b0c",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "346730ed-a494-4b38-a5c9-6e5559d6ff70"
        },
        "item": {
          "id": "a024f28f-ccb0-49a2-b353-ee5d3f244c8b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "84a0c9d2-860f-4208-8463-5271bcf04dfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320ccd59-8760-4fad-8b1d-612214eaebf8",
        "cursor": {
          "ref": "1699c40a-613f-40ab-b47a-b55d70299231",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d3cacafe-6b54-41f1-b402-a1b0063bb8af"
        },
        "item": {
          "id": "320ccd59-8760-4fad-8b1d-612214eaebf8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "301e4092-25c9-4adc-9fa9-fb56ac73de62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320ccd59-8760-4fad-8b1d-612214eaebf8",
        "cursor": {
          "ref": "1699c40a-613f-40ab-b47a-b55d70299231",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d3cacafe-6b54-41f1-b402-a1b0063bb8af"
        },
        "item": {
          "id": "320ccd59-8760-4fad-8b1d-612214eaebf8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "301e4092-25c9-4adc-9fa9-fb56ac73de62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31c1134-184e-45e7-8c99-5bdbab7e0e9a",
        "cursor": {
          "ref": "5d57cf55-b500-4502-9ddc-ccc4db6a8056",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b1aa6d7b-6273-41f5-a40e-1b8ac0de4103"
        },
        "item": {
          "id": "c31c1134-184e-45e7-8c99-5bdbab7e0e9a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b24f6f31-cd54-4a97-b40e-85694387a015",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31c1134-184e-45e7-8c99-5bdbab7e0e9a",
        "cursor": {
          "ref": "5d57cf55-b500-4502-9ddc-ccc4db6a8056",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b1aa6d7b-6273-41f5-a40e-1b8ac0de4103"
        },
        "item": {
          "id": "c31c1134-184e-45e7-8c99-5bdbab7e0e9a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b24f6f31-cd54-4a97-b40e-85694387a015",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1836a35-3bdc-4ac9-9b17-375d6eadc8c3",
        "cursor": {
          "ref": "0ee3aa52-28b1-4744-97d8-bf3b4352ec3c",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "72ff005f-90fc-442d-b602-4e265c555885"
        },
        "item": {
          "id": "d1836a35-3bdc-4ac9-9b17-375d6eadc8c3",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1e9c46ab-ca3a-4288-94a3-67d90d7c11e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1836a35-3bdc-4ac9-9b17-375d6eadc8c3",
        "cursor": {
          "ref": "0ee3aa52-28b1-4744-97d8-bf3b4352ec3c",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "72ff005f-90fc-442d-b602-4e265c555885"
        },
        "item": {
          "id": "d1836a35-3bdc-4ac9-9b17-375d6eadc8c3",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1e9c46ab-ca3a-4288-94a3-67d90d7c11e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e52906e4-7850-47e3-9bd8-42d8d0ea80e4",
        "cursor": {
          "ref": "d60786d2-7a37-408f-bc7f-3ecff93fcdb6",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "181dcb2a-8eda-4c67-b821-60102cae2e49"
        },
        "item": {
          "id": "e52906e4-7850-47e3-9bd8-42d8d0ea80e4",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "dd4fb80d-478a-4a07-8374-65871d260a4d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e52906e4-7850-47e3-9bd8-42d8d0ea80e4",
        "cursor": {
          "ref": "d60786d2-7a37-408f-bc7f-3ecff93fcdb6",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "181dcb2a-8eda-4c67-b821-60102cae2e49"
        },
        "item": {
          "id": "e52906e4-7850-47e3-9bd8-42d8d0ea80e4",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "dd4fb80d-478a-4a07-8374-65871d260a4d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575b33b7-716c-4317-948f-35e13e249073",
        "cursor": {
          "ref": "c50e3144-22c5-4e3f-9b33-a8a43227d1ee",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "22f1c350-e6e6-47b3-9a37-ecd84651507f"
        },
        "item": {
          "id": "575b33b7-716c-4317-948f-35e13e249073",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "719990df-e36a-4e4c-92af-6e67de7e2066",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575b33b7-716c-4317-948f-35e13e249073",
        "cursor": {
          "ref": "c50e3144-22c5-4e3f-9b33-a8a43227d1ee",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "22f1c350-e6e6-47b3-9a37-ecd84651507f"
        },
        "item": {
          "id": "575b33b7-716c-4317-948f-35e13e249073",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "719990df-e36a-4e4c-92af-6e67de7e2066",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c7cf8b-c85d-471a-9870-9a18994074cd",
        "cursor": {
          "ref": "4f9daa43-1084-45a9-9f43-f8eb23d0105c",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "053731ce-6a0c-4324-90a8-dcc72f76bcd4"
        },
        "item": {
          "id": "c9c7cf8b-c85d-471a-9870-9a18994074cd",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f221696c-f73f-47c8-b0c7-482677078bf2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c7cf8b-c85d-471a-9870-9a18994074cd",
        "cursor": {
          "ref": "4f9daa43-1084-45a9-9f43-f8eb23d0105c",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "053731ce-6a0c-4324-90a8-dcc72f76bcd4"
        },
        "item": {
          "id": "c9c7cf8b-c85d-471a-9870-9a18994074cd",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f221696c-f73f-47c8-b0c7-482677078bf2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "627eeace-76ab-4e60-959b-3e8f51f9b4ab",
        "cursor": {
          "ref": "38873a23-ff3f-47e0-8677-2148b38325b0",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c44a085f-d77d-47ff-a023-0f6eee4d25bc"
        },
        "item": {
          "id": "627eeace-76ab-4e60-959b-3e8f51f9b4ab",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "471ccd48-d5a7-460b-a6d6-763060f33360",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "627eeace-76ab-4e60-959b-3e8f51f9b4ab",
        "cursor": {
          "ref": "38873a23-ff3f-47e0-8677-2148b38325b0",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c44a085f-d77d-47ff-a023-0f6eee4d25bc"
        },
        "item": {
          "id": "627eeace-76ab-4e60-959b-3e8f51f9b4ab",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "471ccd48-d5a7-460b-a6d6-763060f33360",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebcdd851-55cf-446c-a702-680c58567bf8",
        "cursor": {
          "ref": "2eb78282-ec4a-4502-a9e4-0d9cae732d2c",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "cac60348-6bf5-40e4-964f-a60f1f6742d3"
        },
        "item": {
          "id": "ebcdd851-55cf-446c-a702-680c58567bf8",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "171f7233-03c1-4a6b-84b0-01c1cc1d8248",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebcdd851-55cf-446c-a702-680c58567bf8",
        "cursor": {
          "ref": "2eb78282-ec4a-4502-a9e4-0d9cae732d2c",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "cac60348-6bf5-40e4-964f-a60f1f6742d3"
        },
        "item": {
          "id": "ebcdd851-55cf-446c-a702-680c58567bf8",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "171f7233-03c1-4a6b-84b0-01c1cc1d8248",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4de849ab-15c0-40a2-b845-a35a798535a1",
        "cursor": {
          "ref": "d53b5d3c-c47c-4df6-9253-66801cf8db58",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b380d5a8-939c-4ac1-8547-c8ca8b04a433"
        },
        "item": {
          "id": "4de849ab-15c0-40a2-b845-a35a798535a1",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2cdcbda1-cce8-4658-aa69-7f5dba5803ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4de849ab-15c0-40a2-b845-a35a798535a1",
        "cursor": {
          "ref": "d53b5d3c-c47c-4df6-9253-66801cf8db58",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b380d5a8-939c-4ac1-8547-c8ca8b04a433"
        },
        "item": {
          "id": "4de849ab-15c0-40a2-b845-a35a798535a1",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2cdcbda1-cce8-4658-aa69-7f5dba5803ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa7b7d79-92e7-47f6-81cb-fc18574a76f9",
        "cursor": {
          "ref": "4307879e-a958-4d3d-8c61-a51765947bb5",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ca418732-938e-4204-9d2e-78d69ada52bf"
        },
        "item": {
          "id": "fa7b7d79-92e7-47f6-81cb-fc18574a76f9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0b04c0d6-2b6d-4c52-bde5-390533450a1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa7b7d79-92e7-47f6-81cb-fc18574a76f9",
        "cursor": {
          "ref": "4307879e-a958-4d3d-8c61-a51765947bb5",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ca418732-938e-4204-9d2e-78d69ada52bf"
        },
        "item": {
          "id": "fa7b7d79-92e7-47f6-81cb-fc18574a76f9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0b04c0d6-2b6d-4c52-bde5-390533450a1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f872a59f-1c86-4704-98b3-4774470afc2d",
        "cursor": {
          "ref": "f107f59c-4021-4b68-9485-e1459fb3a76b",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6ba00b8b-ac3f-46bc-9ed0-c94df6901aa5"
        },
        "item": {
          "id": "f872a59f-1c86-4704-98b3-4774470afc2d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3ee3d6a8-31e9-48b0-84f2-e052a259c7de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f872a59f-1c86-4704-98b3-4774470afc2d",
        "cursor": {
          "ref": "f107f59c-4021-4b68-9485-e1459fb3a76b",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6ba00b8b-ac3f-46bc-9ed0-c94df6901aa5"
        },
        "item": {
          "id": "f872a59f-1c86-4704-98b3-4774470afc2d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3ee3d6a8-31e9-48b0-84f2-e052a259c7de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d0d87cf-2f0e-4e06-b38b-5d9c79ec0278",
        "cursor": {
          "ref": "d06419ef-2325-44db-8846-88d3db0115d5",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "539f3b75-8a62-4573-9424-2b0614248d13"
        },
        "item": {
          "id": "2d0d87cf-2f0e-4e06-b38b-5d9c79ec0278",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a8fe3778-1db8-4efb-8bdc-dfdc0f14234e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d0d87cf-2f0e-4e06-b38b-5d9c79ec0278",
        "cursor": {
          "ref": "d06419ef-2325-44db-8846-88d3db0115d5",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "539f3b75-8a62-4573-9424-2b0614248d13"
        },
        "item": {
          "id": "2d0d87cf-2f0e-4e06-b38b-5d9c79ec0278",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a8fe3778-1db8-4efb-8bdc-dfdc0f14234e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e8e0fb-607d-45ac-b19f-f542ab919612",
        "cursor": {
          "ref": "7f3cc69f-2801-4f61-9db5-c3cfd111c809",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4f8c2a89-e1b4-4632-b632-b80d4466d5e9"
        },
        "item": {
          "id": "92e8e0fb-607d-45ac-b19f-f542ab919612",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d0a7c002-cc08-4f69-9920-ff4682f3a11c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e8e0fb-607d-45ac-b19f-f542ab919612",
        "cursor": {
          "ref": "7f3cc69f-2801-4f61-9db5-c3cfd111c809",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4f8c2a89-e1b4-4632-b632-b80d4466d5e9"
        },
        "item": {
          "id": "92e8e0fb-607d-45ac-b19f-f542ab919612",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d0a7c002-cc08-4f69-9920-ff4682f3a11c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "009e0fe8-daad-4bc0-b829-56a0715f153d",
        "cursor": {
          "ref": "2af10729-8a1e-4994-939b-ef93c61c0bef",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "c788ba78-a153-41c2-9b82-027265537408"
        },
        "item": {
          "id": "009e0fe8-daad-4bc0-b829-56a0715f153d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "0311006e-d618-4fa6-bf13-0b77390f59a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "009e0fe8-daad-4bc0-b829-56a0715f153d",
        "cursor": {
          "ref": "2af10729-8a1e-4994-939b-ef93c61c0bef",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "c788ba78-a153-41c2-9b82-027265537408"
        },
        "item": {
          "id": "009e0fe8-daad-4bc0-b829-56a0715f153d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "0311006e-d618-4fa6-bf13-0b77390f59a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6090311-2ac2-4c8a-9341-2241dede5e73",
        "cursor": {
          "ref": "6e5345da-b4ee-4c56-a98b-99dcdbdbc795",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5b2f4ca8-3b8c-4a2a-b401-f6e3c1ff0bdd"
        },
        "item": {
          "id": "c6090311-2ac2-4c8a-9341-2241dede5e73",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "047048ae-acbd-4789-bdeb-ab3b1de81d71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6090311-2ac2-4c8a-9341-2241dede5e73",
        "cursor": {
          "ref": "6e5345da-b4ee-4c56-a98b-99dcdbdbc795",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5b2f4ca8-3b8c-4a2a-b401-f6e3c1ff0bdd"
        },
        "item": {
          "id": "c6090311-2ac2-4c8a-9341-2241dede5e73",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "047048ae-acbd-4789-bdeb-ab3b1de81d71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5dd62ac-9e3a-4b68-8da2-ff4db7f5dc17",
        "cursor": {
          "ref": "d5aeac58-5f11-4b68-94e1-10061f21416b",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "65d1582c-a0d7-454a-82f5-cef5172b3661"
        },
        "item": {
          "id": "d5dd62ac-9e3a-4b68-8da2-ff4db7f5dc17",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5571ec2b-341f-46f7-9396-b464b0ab4cda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5dd62ac-9e3a-4b68-8da2-ff4db7f5dc17",
        "cursor": {
          "ref": "d5aeac58-5f11-4b68-94e1-10061f21416b",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "65d1582c-a0d7-454a-82f5-cef5172b3661"
        },
        "item": {
          "id": "d5dd62ac-9e3a-4b68-8da2-ff4db7f5dc17",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5571ec2b-341f-46f7-9396-b464b0ab4cda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8454c002-dfdd-4827-ac2a-6189eb1cccec",
        "cursor": {
          "ref": "554b43c5-b139-465b-80fb-eb30561b4d45",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "589fd0e7-1205-4306-a04f-953c2409fece"
        },
        "item": {
          "id": "8454c002-dfdd-4827-ac2a-6189eb1cccec",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "dd621816-70d8-4fd1-8d2f-b8dddaee5f41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8454c002-dfdd-4827-ac2a-6189eb1cccec",
        "cursor": {
          "ref": "554b43c5-b139-465b-80fb-eb30561b4d45",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "589fd0e7-1205-4306-a04f-953c2409fece"
        },
        "item": {
          "id": "8454c002-dfdd-4827-ac2a-6189eb1cccec",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "dd621816-70d8-4fd1-8d2f-b8dddaee5f41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a707f920-1c9a-4418-a12b-f8f51ad64e37",
        "cursor": {
          "ref": "ef3d7b15-2461-4143-9a5a-6c8052314836",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "de61d81f-1da0-478b-bd73-bd7332a6a4d1"
        },
        "item": {
          "id": "a707f920-1c9a-4418-a12b-f8f51ad64e37",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "400a5255-3b36-4824-9099-8ff7d269fb3b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a707f920-1c9a-4418-a12b-f8f51ad64e37",
        "cursor": {
          "ref": "ef3d7b15-2461-4143-9a5a-6c8052314836",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "de61d81f-1da0-478b-bd73-bd7332a6a4d1"
        },
        "item": {
          "id": "a707f920-1c9a-4418-a12b-f8f51ad64e37",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "400a5255-3b36-4824-9099-8ff7d269fb3b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48dd7b8a-0a3b-48d6-89c8-d42c39b2d0f8",
        "cursor": {
          "ref": "2c913664-715d-45d8-bb0f-e3d8887581ea",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "43c48d59-9967-4a03-8a9b-bd8eeb5b407c"
        },
        "item": {
          "id": "48dd7b8a-0a3b-48d6-89c8-d42c39b2d0f8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f44ec6d5-6620-42f8-aaa9-10f3f7879304",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48dd7b8a-0a3b-48d6-89c8-d42c39b2d0f8",
        "cursor": {
          "ref": "2c913664-715d-45d8-bb0f-e3d8887581ea",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "43c48d59-9967-4a03-8a9b-bd8eeb5b407c"
        },
        "item": {
          "id": "48dd7b8a-0a3b-48d6-89c8-d42c39b2d0f8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f44ec6d5-6620-42f8-aaa9-10f3f7879304",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a116cb2-eda7-4b34-be25-12e8c55113f6",
        "cursor": {
          "ref": "d40e3f13-3e5d-456a-affd-66b8c6a6592b",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "53440975-a0c8-4d6a-932c-d646c31e65bf"
        },
        "item": {
          "id": "2a116cb2-eda7-4b34-be25-12e8c55113f6",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8da90cc1-4246-441e-b0bc-91da5897eec4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a116cb2-eda7-4b34-be25-12e8c55113f6",
        "cursor": {
          "ref": "d40e3f13-3e5d-456a-affd-66b8c6a6592b",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "53440975-a0c8-4d6a-932c-d646c31e65bf"
        },
        "item": {
          "id": "2a116cb2-eda7-4b34-be25-12e8c55113f6",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8da90cc1-4246-441e-b0bc-91da5897eec4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21301aca-1c84-4d61-b7c0-e1749daf5df8",
        "cursor": {
          "ref": "afcbd1e3-8a7d-42b7-a497-260ce797740a",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5e20b88f-3167-45a3-bee1-bf79a33e8ee2"
        },
        "item": {
          "id": "21301aca-1c84-4d61-b7c0-e1749daf5df8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "44c0805c-8fc8-4896-a754-35529b4201b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21301aca-1c84-4d61-b7c0-e1749daf5df8",
        "cursor": {
          "ref": "afcbd1e3-8a7d-42b7-a497-260ce797740a",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5e20b88f-3167-45a3-bee1-bf79a33e8ee2"
        },
        "item": {
          "id": "21301aca-1c84-4d61-b7c0-e1749daf5df8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "44c0805c-8fc8-4896-a754-35529b4201b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87754bd4-311f-4c9b-956c-9f2fd24db952",
        "cursor": {
          "ref": "08c3dde6-dd35-433f-a7c7-df1d4e8c9102",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "64b6c01d-9d73-492c-904e-71ed823102a9"
        },
        "item": {
          "id": "87754bd4-311f-4c9b-956c-9f2fd24db952",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "dee92a69-ca63-4351-b45c-305f58996a9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87754bd4-311f-4c9b-956c-9f2fd24db952",
        "cursor": {
          "ref": "08c3dde6-dd35-433f-a7c7-df1d4e8c9102",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "64b6c01d-9d73-492c-904e-71ed823102a9"
        },
        "item": {
          "id": "87754bd4-311f-4c9b-956c-9f2fd24db952",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "dee92a69-ca63-4351-b45c-305f58996a9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e774e06-d1f5-4cd1-af01-1e48e6638b0f",
        "cursor": {
          "ref": "84edfab9-c8bf-4415-a550-e49d2bed53f5",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ed6b4a52-0248-4359-a891-a27c6eae0cf2"
        },
        "item": {
          "id": "8e774e06-d1f5-4cd1-af01-1e48e6638b0f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "478ce981-5693-4acd-b654-a0361c01f13a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e774e06-d1f5-4cd1-af01-1e48e6638b0f",
        "cursor": {
          "ref": "84edfab9-c8bf-4415-a550-e49d2bed53f5",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ed6b4a52-0248-4359-a891-a27c6eae0cf2"
        },
        "item": {
          "id": "8e774e06-d1f5-4cd1-af01-1e48e6638b0f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "478ce981-5693-4acd-b654-a0361c01f13a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913b384a-7286-4b43-9754-83db414eb973",
        "cursor": {
          "ref": "5b2a98e0-700a-43b4-b336-9dfe23db85a6",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "88d7d8b8-1a76-49b6-afb9-4dd00171a389"
        },
        "item": {
          "id": "913b384a-7286-4b43-9754-83db414eb973",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "446b0513-9144-4a9e-ae7f-0b6b97e639db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913b384a-7286-4b43-9754-83db414eb973",
        "cursor": {
          "ref": "5b2a98e0-700a-43b4-b336-9dfe23db85a6",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "88d7d8b8-1a76-49b6-afb9-4dd00171a389"
        },
        "item": {
          "id": "913b384a-7286-4b43-9754-83db414eb973",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "446b0513-9144-4a9e-ae7f-0b6b97e639db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ef2d65-f18f-4816-827f-3cb8f1361b88",
        "cursor": {
          "ref": "6e8e749b-612c-4c87-83ef-58121548267a",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "eea9d021-c28c-4419-a019-53bb8ab49da2"
        },
        "item": {
          "id": "54ef2d65-f18f-4816-827f-3cb8f1361b88",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7a1b200d-ac31-4450-b621-5a40877cfbbb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ef2d65-f18f-4816-827f-3cb8f1361b88",
        "cursor": {
          "ref": "6e8e749b-612c-4c87-83ef-58121548267a",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "eea9d021-c28c-4419-a019-53bb8ab49da2"
        },
        "item": {
          "id": "54ef2d65-f18f-4816-827f-3cb8f1361b88",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7a1b200d-ac31-4450-b621-5a40877cfbbb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6fea6fe-bc4f-449c-b01d-ac819a1d8e76",
        "cursor": {
          "ref": "cd656f03-b64d-4bdf-a523-07cbccf6ab14",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "cd6e05af-62ca-49a8-a2ee-db92378ae037"
        },
        "item": {
          "id": "e6fea6fe-bc4f-449c-b01d-ac819a1d8e76",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8ac276f0-d226-4f55-9b25-9032645250bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6fea6fe-bc4f-449c-b01d-ac819a1d8e76",
        "cursor": {
          "ref": "cd656f03-b64d-4bdf-a523-07cbccf6ab14",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "cd6e05af-62ca-49a8-a2ee-db92378ae037"
        },
        "item": {
          "id": "e6fea6fe-bc4f-449c-b01d-ac819a1d8e76",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8ac276f0-d226-4f55-9b25-9032645250bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65a32326-dd74-4a29-99d6-687ed26f0094",
        "cursor": {
          "ref": "50c827b8-b293-4942-9be6-fe22d452e72c",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e0c4bae1-9ead-4772-9b96-f4c92c4bd254"
        },
        "item": {
          "id": "65a32326-dd74-4a29-99d6-687ed26f0094",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "32a7e69e-683a-4cc3-a9d6-12ecdfcb1899",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65a32326-dd74-4a29-99d6-687ed26f0094",
        "cursor": {
          "ref": "50c827b8-b293-4942-9be6-fe22d452e72c",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e0c4bae1-9ead-4772-9b96-f4c92c4bd254"
        },
        "item": {
          "id": "65a32326-dd74-4a29-99d6-687ed26f0094",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "32a7e69e-683a-4cc3-a9d6-12ecdfcb1899",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305ada70-6c03-4560-8ede-9c2fe2d85d35",
        "cursor": {
          "ref": "f22f98cb-b428-492d-bcbe-96addb1e93f4",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6a754734-d72c-4c2c-874b-ae4b7968e071"
        },
        "item": {
          "id": "305ada70-6c03-4560-8ede-9c2fe2d85d35",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3f5ef5a0-dd37-40ab-81ec-e18dc65db930",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305ada70-6c03-4560-8ede-9c2fe2d85d35",
        "cursor": {
          "ref": "f22f98cb-b428-492d-bcbe-96addb1e93f4",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6a754734-d72c-4c2c-874b-ae4b7968e071"
        },
        "item": {
          "id": "305ada70-6c03-4560-8ede-9c2fe2d85d35",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3f5ef5a0-dd37-40ab-81ec-e18dc65db930",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff4a877f-2934-4016-8c74-068a4cf2687e",
        "cursor": {
          "ref": "fe1030dc-338f-47ec-a480-f73ed4fb6d37",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "247d01c9-6ff5-41a8-992c-0bc31c0fa7b3"
        },
        "item": {
          "id": "ff4a877f-2934-4016-8c74-068a4cf2687e",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "50af6278-d2e2-45b8-8d9e-fb2abc5e1154",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff4a877f-2934-4016-8c74-068a4cf2687e",
        "cursor": {
          "ref": "fe1030dc-338f-47ec-a480-f73ed4fb6d37",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "247d01c9-6ff5-41a8-992c-0bc31c0fa7b3"
        },
        "item": {
          "id": "ff4a877f-2934-4016-8c74-068a4cf2687e",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "50af6278-d2e2-45b8-8d9e-fb2abc5e1154",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c57af1e-18f7-4093-af1b-4868947afebf",
        "cursor": {
          "ref": "5f6acc69-a4cf-4dea-a99d-946e8af1e16f",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "bcc4757d-78af-4482-942a-b84c0eadccdc"
        },
        "item": {
          "id": "0c57af1e-18f7-4093-af1b-4868947afebf",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0676d664-3663-4036-a652-e66171270107",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c57af1e-18f7-4093-af1b-4868947afebf",
        "cursor": {
          "ref": "5f6acc69-a4cf-4dea-a99d-946e8af1e16f",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "bcc4757d-78af-4482-942a-b84c0eadccdc"
        },
        "item": {
          "id": "0c57af1e-18f7-4093-af1b-4868947afebf",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0676d664-3663-4036-a652-e66171270107",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a61f0f-188c-406a-9bc3-86748397b117",
        "cursor": {
          "ref": "49bc1e20-7f56-40fb-a917-f189b41ca11b",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8db5b901-1740-4b7b-8c95-30add17b97c7"
        },
        "item": {
          "id": "b2a61f0f-188c-406a-9bc3-86748397b117",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0daa24b6-2fdf-4b69-b804-0e4af55b10e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a61f0f-188c-406a-9bc3-86748397b117",
        "cursor": {
          "ref": "49bc1e20-7f56-40fb-a917-f189b41ca11b",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8db5b901-1740-4b7b-8c95-30add17b97c7"
        },
        "item": {
          "id": "b2a61f0f-188c-406a-9bc3-86748397b117",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0daa24b6-2fdf-4b69-b804-0e4af55b10e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cfb50ce-3b06-49fa-99f9-f1981aa2f119",
        "cursor": {
          "ref": "2f56ec16-d6a9-40d6-8b33-f7b4a77af8eb",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d43c6645-c8e9-43fb-b20f-5dd902fa6b02"
        },
        "item": {
          "id": "5cfb50ce-3b06-49fa-99f9-f1981aa2f119",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ec71f5aa-b22b-45fe-988e-5a2af0a45e89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cfb50ce-3b06-49fa-99f9-f1981aa2f119",
        "cursor": {
          "ref": "2f56ec16-d6a9-40d6-8b33-f7b4a77af8eb",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d43c6645-c8e9-43fb-b20f-5dd902fa6b02"
        },
        "item": {
          "id": "5cfb50ce-3b06-49fa-99f9-f1981aa2f119",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ec71f5aa-b22b-45fe-988e-5a2af0a45e89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117657f4-e59b-4d85-9a42-3777e03e4ce2",
        "cursor": {
          "ref": "0eff9141-7b88-43f6-abfd-857be1c091e3",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "debf7674-9e1d-4281-a14c-28be9d02281c"
        },
        "item": {
          "id": "117657f4-e59b-4d85-9a42-3777e03e4ce2",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "7f041f9b-6e0d-435d-bca8-6160dbee8f8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117657f4-e59b-4d85-9a42-3777e03e4ce2",
        "cursor": {
          "ref": "0eff9141-7b88-43f6-abfd-857be1c091e3",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "debf7674-9e1d-4281-a14c-28be9d02281c"
        },
        "item": {
          "id": "117657f4-e59b-4d85-9a42-3777e03e4ce2",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "7f041f9b-6e0d-435d-bca8-6160dbee8f8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca2135b-e946-47bb-b806-ab702380c0a6",
        "cursor": {
          "ref": "f8678d81-442c-4fb1-9f37-78d162c23127",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7941990b-df74-4ab2-a095-1d5462e73f36"
        },
        "item": {
          "id": "8ca2135b-e946-47bb-b806-ab702380c0a6",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "cc93fb9f-6dae-4668-9377-8c7af7739d15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca2135b-e946-47bb-b806-ab702380c0a6",
        "cursor": {
          "ref": "f8678d81-442c-4fb1-9f37-78d162c23127",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7941990b-df74-4ab2-a095-1d5462e73f36"
        },
        "item": {
          "id": "8ca2135b-e946-47bb-b806-ab702380c0a6",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "cc93fb9f-6dae-4668-9377-8c7af7739d15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96cdf657-203b-4d3b-b8bb-fe3e1658a9db",
        "cursor": {
          "ref": "c87ce02d-7e94-4501-86ea-76989d0610ec",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "69110849-c353-43ac-ac19-c0c6ed72bd9b"
        },
        "item": {
          "id": "96cdf657-203b-4d3b-b8bb-fe3e1658a9db",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "40a71c1e-a504-4adb-9658-ebf3b6336b1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96cdf657-203b-4d3b-b8bb-fe3e1658a9db",
        "cursor": {
          "ref": "c87ce02d-7e94-4501-86ea-76989d0610ec",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "69110849-c353-43ac-ac19-c0c6ed72bd9b"
        },
        "item": {
          "id": "96cdf657-203b-4d3b-b8bb-fe3e1658a9db",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "40a71c1e-a504-4adb-9658-ebf3b6336b1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da4d8c9-aaa4-46ba-bf40-ac58ef85a100",
        "cursor": {
          "ref": "122f94d7-dd37-47d6-8382-fe205661e609",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d32a85d5-8423-4e8d-8216-edd75b977e0f"
        },
        "item": {
          "id": "5da4d8c9-aaa4-46ba-bf40-ac58ef85a100",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0f0ab505-16f3-4164-9813-19b0e990fb1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da4d8c9-aaa4-46ba-bf40-ac58ef85a100",
        "cursor": {
          "ref": "122f94d7-dd37-47d6-8382-fe205661e609",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d32a85d5-8423-4e8d-8216-edd75b977e0f"
        },
        "item": {
          "id": "5da4d8c9-aaa4-46ba-bf40-ac58ef85a100",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0f0ab505-16f3-4164-9813-19b0e990fb1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b49ecc-ddc9-472a-9e12-66bdc2d0a88a",
        "cursor": {
          "ref": "f7e02d05-8ec2-44e5-875c-948e2c21bc18",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9964ae20-f84c-483c-b199-7d2e114d9ef4"
        },
        "item": {
          "id": "25b49ecc-ddc9-472a-9e12-66bdc2d0a88a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "571df3b5-3f49-4af3-a5f3-0c183d680507",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b49ecc-ddc9-472a-9e12-66bdc2d0a88a",
        "cursor": {
          "ref": "f7e02d05-8ec2-44e5-875c-948e2c21bc18",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9964ae20-f84c-483c-b199-7d2e114d9ef4"
        },
        "item": {
          "id": "25b49ecc-ddc9-472a-9e12-66bdc2d0a88a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "571df3b5-3f49-4af3-a5f3-0c183d680507",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "509301a6-4cec-495a-97c7-66cd23460990",
        "cursor": {
          "ref": "006af9be-1b2c-427c-9219-f19259ca52f5",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c973b72c-df19-452e-a609-58cbf97a41be"
        },
        "item": {
          "id": "509301a6-4cec-495a-97c7-66cd23460990",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "da04291c-a0df-4b1f-9107-389165b71fb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "509301a6-4cec-495a-97c7-66cd23460990",
        "cursor": {
          "ref": "006af9be-1b2c-427c-9219-f19259ca52f5",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c973b72c-df19-452e-a609-58cbf97a41be"
        },
        "item": {
          "id": "509301a6-4cec-495a-97c7-66cd23460990",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "da04291c-a0df-4b1f-9107-389165b71fb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8a754a0-fc46-4d17-8057-4407c4ce1608",
        "cursor": {
          "ref": "ac430485-d664-4e78-b122-ed8ff3b99739",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3601fd7f-925c-418e-8099-5f40c486190a"
        },
        "item": {
          "id": "d8a754a0-fc46-4d17-8057-4407c4ce1608",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "1345d6bd-ac5d-4f30-be34-f7b8f64aabd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8a754a0-fc46-4d17-8057-4407c4ce1608",
        "cursor": {
          "ref": "ac430485-d664-4e78-b122-ed8ff3b99739",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3601fd7f-925c-418e-8099-5f40c486190a"
        },
        "item": {
          "id": "d8a754a0-fc46-4d17-8057-4407c4ce1608",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "1345d6bd-ac5d-4f30-be34-f7b8f64aabd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0363ffdb-84cc-405c-bfb7-19d380c52905",
        "cursor": {
          "ref": "896f0bb7-7901-4795-b6fb-44b2453a0c59",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e218e0d0-5b83-433b-a6d4-5549e0a6b6de"
        },
        "item": {
          "id": "0363ffdb-84cc-405c-bfb7-19d380c52905",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a0a90200-c67d-40dc-94e2-b014749ee4ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0363ffdb-84cc-405c-bfb7-19d380c52905",
        "cursor": {
          "ref": "896f0bb7-7901-4795-b6fb-44b2453a0c59",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e218e0d0-5b83-433b-a6d4-5549e0a6b6de"
        },
        "item": {
          "id": "0363ffdb-84cc-405c-bfb7-19d380c52905",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a0a90200-c67d-40dc-94e2-b014749ee4ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9843220-83dc-4510-bae2-b949a8e2de64",
        "cursor": {
          "ref": "591e8481-edef-4d80-bb48-9f782fa83d33",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ee6317c8-f6a3-459f-bd10-98efe5b68adc"
        },
        "item": {
          "id": "a9843220-83dc-4510-bae2-b949a8e2de64",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a01b6040-ea88-40e3-8a4b-ce79ae89bbaf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9843220-83dc-4510-bae2-b949a8e2de64",
        "cursor": {
          "ref": "591e8481-edef-4d80-bb48-9f782fa83d33",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ee6317c8-f6a3-459f-bd10-98efe5b68adc"
        },
        "item": {
          "id": "a9843220-83dc-4510-bae2-b949a8e2de64",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a01b6040-ea88-40e3-8a4b-ce79ae89bbaf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "116dffd4-9529-4240-a3e3-068ecc4a6551",
        "cursor": {
          "ref": "e2b0c997-7e7f-49c6-86cf-e0b2b81e373e",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "85a446b6-0550-48b1-bb5f-1f1f022f91c5"
        },
        "item": {
          "id": "116dffd4-9529-4240-a3e3-068ecc4a6551",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c89b61ad-b825-451f-9115-3c4a313c3830",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "116dffd4-9529-4240-a3e3-068ecc4a6551",
        "cursor": {
          "ref": "e2b0c997-7e7f-49c6-86cf-e0b2b81e373e",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "85a446b6-0550-48b1-bb5f-1f1f022f91c5"
        },
        "item": {
          "id": "116dffd4-9529-4240-a3e3-068ecc4a6551",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c89b61ad-b825-451f-9115-3c4a313c3830",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a13bc62-331a-4fa8-98dd-ac6fca7f2234",
        "cursor": {
          "ref": "69f783a7-1de5-423d-b818-411bfb0e385a",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "469de062-43cf-4df8-ad75-c5916a248ba2"
        },
        "item": {
          "id": "3a13bc62-331a-4fa8-98dd-ac6fca7f2234",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "bdbf6c58-31a6-436c-af98-d30f8e51083f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a13bc62-331a-4fa8-98dd-ac6fca7f2234",
        "cursor": {
          "ref": "69f783a7-1de5-423d-b818-411bfb0e385a",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "469de062-43cf-4df8-ad75-c5916a248ba2"
        },
        "item": {
          "id": "3a13bc62-331a-4fa8-98dd-ac6fca7f2234",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "bdbf6c58-31a6-436c-af98-d30f8e51083f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70859354-30c3-402a-b903-25306d693a77",
        "cursor": {
          "ref": "bbd65ba8-b07d-4d85-aaf6-5c8b576de213",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3e66ca86-ae52-4abc-8d80-6ff250af8680"
        },
        "item": {
          "id": "70859354-30c3-402a-b903-25306d693a77",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "edef6140-0b6a-47ae-be93-758a406e5818",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70859354-30c3-402a-b903-25306d693a77",
        "cursor": {
          "ref": "bbd65ba8-b07d-4d85-aaf6-5c8b576de213",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3e66ca86-ae52-4abc-8d80-6ff250af8680"
        },
        "item": {
          "id": "70859354-30c3-402a-b903-25306d693a77",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "edef6140-0b6a-47ae-be93-758a406e5818",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "464d45ab-4078-4f19-931c-04d342537a9e",
        "cursor": {
          "ref": "16275e5c-f069-4b3c-b648-df51a68428fc",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3009c505-fd8a-4b3f-8e60-52888f79f680"
        },
        "item": {
          "id": "464d45ab-4078-4f19-931c-04d342537a9e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c1e37024-4fee-4bb6-b1c8-18211cac0124",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "464d45ab-4078-4f19-931c-04d342537a9e",
        "cursor": {
          "ref": "16275e5c-f069-4b3c-b648-df51a68428fc",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3009c505-fd8a-4b3f-8e60-52888f79f680"
        },
        "item": {
          "id": "464d45ab-4078-4f19-931c-04d342537a9e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c1e37024-4fee-4bb6-b1c8-18211cac0124",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce31f41b-bfc4-4ce3-b728-71cf620a0cef",
        "cursor": {
          "ref": "45ace957-abee-455d-911c-b3a74ca872e3",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "80b0a315-fee6-4060-9859-f5c2074e1c64"
        },
        "item": {
          "id": "ce31f41b-bfc4-4ce3-b728-71cf620a0cef",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2bf89cf5-bdcd-4fdc-856d-810ecc3822c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce31f41b-bfc4-4ce3-b728-71cf620a0cef",
        "cursor": {
          "ref": "45ace957-abee-455d-911c-b3a74ca872e3",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "80b0a315-fee6-4060-9859-f5c2074e1c64"
        },
        "item": {
          "id": "ce31f41b-bfc4-4ce3-b728-71cf620a0cef",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2bf89cf5-bdcd-4fdc-856d-810ecc3822c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bfc8b65-6ce6-4aa2-9bd2-24b10bd966ff",
        "cursor": {
          "ref": "b38e583c-f218-4843-973c-9e04d39fbf39",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0e8e845d-19f1-40fe-975c-6a089325e97f"
        },
        "item": {
          "id": "6bfc8b65-6ce6-4aa2-9bd2-24b10bd966ff",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "223c4e3e-d9f9-4959-82ca-efac83cd53c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bfc8b65-6ce6-4aa2-9bd2-24b10bd966ff",
        "cursor": {
          "ref": "b38e583c-f218-4843-973c-9e04d39fbf39",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0e8e845d-19f1-40fe-975c-6a089325e97f"
        },
        "item": {
          "id": "6bfc8b65-6ce6-4aa2-9bd2-24b10bd966ff",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "223c4e3e-d9f9-4959-82ca-efac83cd53c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1580bffd-4bb8-4eb8-8740-b07ba56d4e19",
        "cursor": {
          "ref": "6b0e177c-4ea9-43fe-affe-8fc0acfc4b35",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2716ec2c-e334-4e31-9ff5-fb05cb86592b"
        },
        "item": {
          "id": "1580bffd-4bb8-4eb8-8740-b07ba56d4e19",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "da739e0c-3da8-47aa-b3ba-c5749081931a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1580bffd-4bb8-4eb8-8740-b07ba56d4e19",
        "cursor": {
          "ref": "6b0e177c-4ea9-43fe-affe-8fc0acfc4b35",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2716ec2c-e334-4e31-9ff5-fb05cb86592b"
        },
        "item": {
          "id": "1580bffd-4bb8-4eb8-8740-b07ba56d4e19",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "da739e0c-3da8-47aa-b3ba-c5749081931a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dcf18f3-95ae-44c1-b5b7-58e4c0e35ea5",
        "cursor": {
          "ref": "43d0cdc9-8d42-43c3-b405-5015e851d77d",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "06fd896a-1d36-4963-92f8-3bd129668a2b"
        },
        "item": {
          "id": "6dcf18f3-95ae-44c1-b5b7-58e4c0e35ea5",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "860acf13-2b36-4d13-80e1-ddbde0cdef24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dcf18f3-95ae-44c1-b5b7-58e4c0e35ea5",
        "cursor": {
          "ref": "43d0cdc9-8d42-43c3-b405-5015e851d77d",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "06fd896a-1d36-4963-92f8-3bd129668a2b"
        },
        "item": {
          "id": "6dcf18f3-95ae-44c1-b5b7-58e4c0e35ea5",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "860acf13-2b36-4d13-80e1-ddbde0cdef24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc98ca0-27fa-4705-bdc1-deb71a971bf2",
        "cursor": {
          "ref": "aac467ba-c88e-4012-ba35-deb31265a601",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "72c76185-1de2-4818-a3e3-f0dfdf11286a"
        },
        "item": {
          "id": "ccc98ca0-27fa-4705-bdc1-deb71a971bf2",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "99d8bb00-d965-4479-b424-0b83cac41e8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "ccc98ca0-27fa-4705-bdc1-deb71a971bf2",
        "cursor": {
          "ref": "aac467ba-c88e-4012-ba35-deb31265a601",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "72c76185-1de2-4818-a3e3-f0dfdf11286a"
        },
        "item": {
          "id": "ccc98ca0-27fa-4705-bdc1-deb71a971bf2",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "99d8bb00-d965-4479-b424-0b83cac41e8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "d6201563-c94a-45b8-a671-007a4bf99798",
        "cursor": {
          "ref": "7cff4051-567e-4f97-9c9b-6d911e722229",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ba34983e-2f01-4ae5-8543-0c82908e769a"
        },
        "item": {
          "id": "d6201563-c94a-45b8-a671-007a4bf99798",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4ad75304-0c0f-4d4c-ba1a-4520789c59cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "d6201563-c94a-45b8-a671-007a4bf99798",
        "cursor": {
          "ref": "7cff4051-567e-4f97-9c9b-6d911e722229",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ba34983e-2f01-4ae5-8543-0c82908e769a"
        },
        "item": {
          "id": "d6201563-c94a-45b8-a671-007a4bf99798",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4ad75304-0c0f-4d4c-ba1a-4520789c59cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "39633897-5202-4ca9-8189-d93d17e036af",
        "cursor": {
          "ref": "6024f98c-34f5-4715-94a0-4df6314dad1a",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d8c322db-eb3e-4fbc-a711-5f00bea8a589"
        },
        "item": {
          "id": "39633897-5202-4ca9-8189-d93d17e036af",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7ffca7d2-3c09-4f2b-918e-d858fff4041d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "39633897-5202-4ca9-8189-d93d17e036af",
        "cursor": {
          "ref": "6024f98c-34f5-4715-94a0-4df6314dad1a",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d8c322db-eb3e-4fbc-a711-5f00bea8a589"
        },
        "item": {
          "id": "39633897-5202-4ca9-8189-d93d17e036af",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7ffca7d2-3c09-4f2b-918e-d858fff4041d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "5e0e9132-edc0-40e1-b5cc-6a40487dae44",
        "cursor": {
          "ref": "d9fbb2f1-7364-4cd7-8d88-9af21cb8c192",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c9ef8fb8-a8e5-4df6-9f72-eb509dd80e00"
        },
        "item": {
          "id": "5e0e9132-edc0-40e1-b5cc-6a40487dae44",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5c3a65e9-dcb6-4b1b-8061-9a8931b23ace",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "5e0e9132-edc0-40e1-b5cc-6a40487dae44",
        "cursor": {
          "ref": "d9fbb2f1-7364-4cd7-8d88-9af21cb8c192",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c9ef8fb8-a8e5-4df6-9f72-eb509dd80e00"
        },
        "item": {
          "id": "5e0e9132-edc0-40e1-b5cc-6a40487dae44",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5c3a65e9-dcb6-4b1b-8061-9a8931b23ace",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "97343716-4d1f-44c2-909f-a9dcd65977cd",
        "cursor": {
          "ref": "5adff910-4940-420e-a53c-ab0897789eb0",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "47132c07-fb9d-4acc-b700-7a47f64a8058"
        },
        "item": {
          "id": "97343716-4d1f-44c2-909f-a9dcd65977cd",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1d7cb6fd-6d5c-458a-a328-985827b994ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "97343716-4d1f-44c2-909f-a9dcd65977cd",
        "cursor": {
          "ref": "5adff910-4940-420e-a53c-ab0897789eb0",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "47132c07-fb9d-4acc-b700-7a47f64a8058"
        },
        "item": {
          "id": "97343716-4d1f-44c2-909f-a9dcd65977cd",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1d7cb6fd-6d5c-458a-a328-985827b994ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "04928004-5fd6-4fc7-bdc3-310277ab7d6e",
        "cursor": {
          "ref": "98495ee1-ae5e-4c11-a415-ae4788a0c511",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "630ece3a-fd63-44df-a7cb-3e8b16105069"
        },
        "item": {
          "id": "04928004-5fd6-4fc7-bdc3-310277ab7d6e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "fe9484a7-e290-43cc-a3c2-0eb7b52ca023",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "04928004-5fd6-4fc7-bdc3-310277ab7d6e",
        "cursor": {
          "ref": "98495ee1-ae5e-4c11-a415-ae4788a0c511",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "630ece3a-fd63-44df-a7cb-3e8b16105069"
        },
        "item": {
          "id": "04928004-5fd6-4fc7-bdc3-310277ab7d6e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "fe9484a7-e290-43cc-a3c2-0eb7b52ca023",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "ce6b3105-f209-4c20-810b-e6006d77a6a7",
        "cursor": {
          "ref": "6aef994a-fc3f-4a54-88d6-8685cefb7d28",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "feb09930-642f-4e73-aedb-bc71c1f382d1"
        },
        "item": {
          "id": "ce6b3105-f209-4c20-810b-e6006d77a6a7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "045a67a8-e9d1-4755-acf5-88eff91b9f30",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "ce6b3105-f209-4c20-810b-e6006d77a6a7",
        "cursor": {
          "ref": "6aef994a-fc3f-4a54-88d6-8685cefb7d28",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "feb09930-642f-4e73-aedb-bc71c1f382d1"
        },
        "item": {
          "id": "ce6b3105-f209-4c20-810b-e6006d77a6a7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "045a67a8-e9d1-4755-acf5-88eff91b9f30",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "54344e98-d9e3-4763-823d-b66e3ab4f714",
        "cursor": {
          "ref": "ffe0efb2-8e1b-4f46-a2cb-f0119e7c575e",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7c7ca46e-6054-468b-8134-d468cadac1ee"
        },
        "item": {
          "id": "54344e98-d9e3-4763-823d-b66e3ab4f714",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "96b2f3c2-d1f8-4784-8099-c54769580311",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54344e98-d9e3-4763-823d-b66e3ab4f714",
        "cursor": {
          "ref": "ffe0efb2-8e1b-4f46-a2cb-f0119e7c575e",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7c7ca46e-6054-468b-8134-d468cadac1ee"
        },
        "item": {
          "id": "54344e98-d9e3-4763-823d-b66e3ab4f714",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "96b2f3c2-d1f8-4784-8099-c54769580311",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c492b66-b821-421e-b0dd-900771de23a9",
        "cursor": {
          "ref": "97997b04-80fc-4a1c-b8fc-91817f1f5856",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "10e64c8f-a629-451a-9cb4-3a5ea729ee61"
        },
        "item": {
          "id": "9c492b66-b821-421e-b0dd-900771de23a9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a6c61794-5250-49ee-a959-36fa375e9826",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c492b66-b821-421e-b0dd-900771de23a9",
        "cursor": {
          "ref": "97997b04-80fc-4a1c-b8fc-91817f1f5856",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "10e64c8f-a629-451a-9cb4-3a5ea729ee61"
        },
        "item": {
          "id": "9c492b66-b821-421e-b0dd-900771de23a9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a6c61794-5250-49ee-a959-36fa375e9826",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f64d2257-49ee-4311-bda3-608f84e5c13f",
        "cursor": {
          "ref": "a6f65a69-380c-46f9-a1da-faf79d5bc9a8",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f6366b1f-da5a-491c-b7da-93233464dad0"
        },
        "item": {
          "id": "f64d2257-49ee-4311-bda3-608f84e5c13f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c5dd308b-6ce9-4b58-81a7-8c3769c83004",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f64d2257-49ee-4311-bda3-608f84e5c13f",
        "cursor": {
          "ref": "a6f65a69-380c-46f9-a1da-faf79d5bc9a8",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f6366b1f-da5a-491c-b7da-93233464dad0"
        },
        "item": {
          "id": "f64d2257-49ee-4311-bda3-608f84e5c13f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c5dd308b-6ce9-4b58-81a7-8c3769c83004",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d744ab-a54b-452a-9b4d-f359e68208a8",
        "cursor": {
          "ref": "26f63745-dd15-4eff-af1b-1f34ec8a3ea8",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f2c49701-8a9f-4ec3-bba5-865057df734c"
        },
        "item": {
          "id": "31d744ab-a54b-452a-9b4d-f359e68208a8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "483fabc6-a41e-4bf2-bd7a-c3caa43b187b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d744ab-a54b-452a-9b4d-f359e68208a8",
        "cursor": {
          "ref": "26f63745-dd15-4eff-af1b-1f34ec8a3ea8",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f2c49701-8a9f-4ec3-bba5-865057df734c"
        },
        "item": {
          "id": "31d744ab-a54b-452a-9b4d-f359e68208a8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "483fabc6-a41e-4bf2-bd7a-c3caa43b187b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e14ca8f7-8b5f-4fdb-a297-12478afd6e29",
        "cursor": {
          "ref": "24432fbe-1137-4993-9788-979574cb7a4e",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f4c24db5-3af1-4567-8bbc-5b76cead2890"
        },
        "item": {
          "id": "e14ca8f7-8b5f-4fdb-a297-12478afd6e29",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f8b5c670-908d-4c19-b7bd-2f966327a8d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e14ca8f7-8b5f-4fdb-a297-12478afd6e29",
        "cursor": {
          "ref": "24432fbe-1137-4993-9788-979574cb7a4e",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f4c24db5-3af1-4567-8bbc-5b76cead2890"
        },
        "item": {
          "id": "e14ca8f7-8b5f-4fdb-a297-12478afd6e29",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f8b5c670-908d-4c19-b7bd-2f966327a8d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a4fe57-be56-471f-b8df-a40a326f5520",
        "cursor": {
          "ref": "539c8f7b-7b8d-4540-941d-69c0a8fe3e55",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3b6d9b9c-97ec-4c76-8ad2-a66a9f530ee5"
        },
        "item": {
          "id": "e3a4fe57-be56-471f-b8df-a40a326f5520",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a60fb667-b09e-4d0b-8c5a-f6d123872ffd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a4fe57-be56-471f-b8df-a40a326f5520",
        "cursor": {
          "ref": "539c8f7b-7b8d-4540-941d-69c0a8fe3e55",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3b6d9b9c-97ec-4c76-8ad2-a66a9f530ee5"
        },
        "item": {
          "id": "e3a4fe57-be56-471f-b8df-a40a326f5520",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a60fb667-b09e-4d0b-8c5a-f6d123872ffd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d776bff8-177c-4b59-919b-95ef02863b5d",
        "cursor": {
          "ref": "a37632d6-d18f-4d39-8a45-681f03a13a5e",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "81c034f0-724e-46d9-9031-cb88d776bb36"
        },
        "item": {
          "id": "d776bff8-177c-4b59-919b-95ef02863b5d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c8c8e83c-ba8b-4c43-805a-4d9a65cf5c88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d776bff8-177c-4b59-919b-95ef02863b5d",
        "cursor": {
          "ref": "a37632d6-d18f-4d39-8a45-681f03a13a5e",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "81c034f0-724e-46d9-9031-cb88d776bb36"
        },
        "item": {
          "id": "d776bff8-177c-4b59-919b-95ef02863b5d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c8c8e83c-ba8b-4c43-805a-4d9a65cf5c88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e29a431-f947-4926-876e-7ab7c92c416d",
        "cursor": {
          "ref": "f7b4057b-1d20-4932-9296-f38839a2b330",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0ff214ac-7311-49cd-a773-0a70b4cfe8ee"
        },
        "item": {
          "id": "6e29a431-f947-4926-876e-7ab7c92c416d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b48e57dd-920a-442b-9fe3-6bcf0f6b93f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e29a431-f947-4926-876e-7ab7c92c416d",
        "cursor": {
          "ref": "f7b4057b-1d20-4932-9296-f38839a2b330",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0ff214ac-7311-49cd-a773-0a70b4cfe8ee"
        },
        "item": {
          "id": "6e29a431-f947-4926-876e-7ab7c92c416d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b48e57dd-920a-442b-9fe3-6bcf0f6b93f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e8855be-ddf9-497e-b327-490e298b2134",
        "cursor": {
          "ref": "c575f45d-bb06-4033-b3d0-bd343768b920",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "66b00ffd-921c-4bcf-89bf-682c8f91892d"
        },
        "item": {
          "id": "8e8855be-ddf9-497e-b327-490e298b2134",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9cb18f0b-7416-46c6-b022-8be6c8bb6ef6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e8855be-ddf9-497e-b327-490e298b2134",
        "cursor": {
          "ref": "c575f45d-bb06-4033-b3d0-bd343768b920",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "66b00ffd-921c-4bcf-89bf-682c8f91892d"
        },
        "item": {
          "id": "8e8855be-ddf9-497e-b327-490e298b2134",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9cb18f0b-7416-46c6-b022-8be6c8bb6ef6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d02e792-76ac-4c84-b632-4e94b1a1c1d3",
        "cursor": {
          "ref": "f2d3f36a-595e-4a0a-99ce-120db541f02c",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6359f54e-e799-4bf5-a930-a3cea92329c0"
        },
        "item": {
          "id": "6d02e792-76ac-4c84-b632-4e94b1a1c1d3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "cfe5a003-6bbf-4dd5-8209-71c350e5d743",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d02e792-76ac-4c84-b632-4e94b1a1c1d3",
        "cursor": {
          "ref": "f2d3f36a-595e-4a0a-99ce-120db541f02c",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6359f54e-e799-4bf5-a930-a3cea92329c0"
        },
        "item": {
          "id": "6d02e792-76ac-4c84-b632-4e94b1a1c1d3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "cfe5a003-6bbf-4dd5-8209-71c350e5d743",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d61ecb-6122-43c5-8b8a-62f812f6f855",
        "cursor": {
          "ref": "3d1f0238-4cc2-401e-8a13-3b0c9c686aa6",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "6c867b12-84ee-47fe-9fe1-2ef07c3745d3"
        },
        "item": {
          "id": "70d61ecb-6122-43c5-8b8a-62f812f6f855",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "69514675-e52a-48ea-b7c2-327fdfe2f6da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d61ecb-6122-43c5-8b8a-62f812f6f855",
        "cursor": {
          "ref": "3d1f0238-4cc2-401e-8a13-3b0c9c686aa6",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "6c867b12-84ee-47fe-9fe1-2ef07c3745d3"
        },
        "item": {
          "id": "70d61ecb-6122-43c5-8b8a-62f812f6f855",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "69514675-e52a-48ea-b7c2-327fdfe2f6da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10687304-4256-49d8-820b-ccecb532f497",
        "cursor": {
          "ref": "80b9e617-b7f9-4d21-8969-cc38b7a13bad",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6438fe69-4202-4ff2-b962-b3f4fdfa9dba"
        },
        "item": {
          "id": "10687304-4256-49d8-820b-ccecb532f497",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ec5ffb42-3316-43a1-97f9-ae74bd30a4fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10687304-4256-49d8-820b-ccecb532f497",
        "cursor": {
          "ref": "80b9e617-b7f9-4d21-8969-cc38b7a13bad",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6438fe69-4202-4ff2-b962-b3f4fdfa9dba"
        },
        "item": {
          "id": "10687304-4256-49d8-820b-ccecb532f497",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ec5ffb42-3316-43a1-97f9-ae74bd30a4fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfe74155-66c6-445d-a13e-fb7da7245d72",
        "cursor": {
          "ref": "5fc3c7e6-3fe2-485d-b39a-a277927d39a4",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "42164eab-07a8-4d13-ae02-bebd530afc21"
        },
        "item": {
          "id": "cfe74155-66c6-445d-a13e-fb7da7245d72",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2c76441c-6cdf-4685-858c-b85c2061d250",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfe74155-66c6-445d-a13e-fb7da7245d72",
        "cursor": {
          "ref": "5fc3c7e6-3fe2-485d-b39a-a277927d39a4",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "42164eab-07a8-4d13-ae02-bebd530afc21"
        },
        "item": {
          "id": "cfe74155-66c6-445d-a13e-fb7da7245d72",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2c76441c-6cdf-4685-858c-b85c2061d250",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1c854a3-6490-4f8c-8a60-b429ab2019f4",
        "cursor": {
          "ref": "b211db11-3dc9-40c6-8dbe-9374cdb2173d",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4d4239c7-451a-4cdb-af96-829068986f2f"
        },
        "item": {
          "id": "b1c854a3-6490-4f8c-8a60-b429ab2019f4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "35da245d-b7e2-4ece-8fd5-865888dbedb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1c854a3-6490-4f8c-8a60-b429ab2019f4",
        "cursor": {
          "ref": "b211db11-3dc9-40c6-8dbe-9374cdb2173d",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4d4239c7-451a-4cdb-af96-829068986f2f"
        },
        "item": {
          "id": "b1c854a3-6490-4f8c-8a60-b429ab2019f4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "35da245d-b7e2-4ece-8fd5-865888dbedb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b73a67-62c9-4533-abc8-ed2c97a967c1",
        "cursor": {
          "ref": "cec46c65-7bb9-4b6b-a9d0-e372d2b93a1a",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "88607cc1-5d86-4045-98ac-72a978b6de7b"
        },
        "item": {
          "id": "46b73a67-62c9-4533-abc8-ed2c97a967c1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4a8a78c3-d9d3-4f24-9680-f04d3a367dee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b73a67-62c9-4533-abc8-ed2c97a967c1",
        "cursor": {
          "ref": "cec46c65-7bb9-4b6b-a9d0-e372d2b93a1a",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "88607cc1-5d86-4045-98ac-72a978b6de7b"
        },
        "item": {
          "id": "46b73a67-62c9-4533-abc8-ed2c97a967c1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4a8a78c3-d9d3-4f24-9680-f04d3a367dee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffd19d3-b51e-4d2a-a105-0d4a018cfdd6",
        "cursor": {
          "ref": "b086352c-e234-485a-b556-00594a26493d",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b66bb73e-5f60-4ba0-b1b5-af1692856f77"
        },
        "item": {
          "id": "4ffd19d3-b51e-4d2a-a105-0d4a018cfdd6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e660eeb1-6f48-4010-8d9b-3f6df140b94a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffd19d3-b51e-4d2a-a105-0d4a018cfdd6",
        "cursor": {
          "ref": "b086352c-e234-485a-b556-00594a26493d",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b66bb73e-5f60-4ba0-b1b5-af1692856f77"
        },
        "item": {
          "id": "4ffd19d3-b51e-4d2a-a105-0d4a018cfdd6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e660eeb1-6f48-4010-8d9b-3f6df140b94a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f20d0b-fd9e-4d41-a83e-917869fe6748",
        "cursor": {
          "ref": "5fbddcb4-991f-4150-b172-6427f4ca867c",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "43b80c3c-8c1d-447d-9cdb-30fc1528ec92"
        },
        "item": {
          "id": "12f20d0b-fd9e-4d41-a83e-917869fe6748",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "14cab128-bed0-4283-b94c-d14dac6e7ad7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f20d0b-fd9e-4d41-a83e-917869fe6748",
        "cursor": {
          "ref": "5fbddcb4-991f-4150-b172-6427f4ca867c",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "43b80c3c-8c1d-447d-9cdb-30fc1528ec92"
        },
        "item": {
          "id": "12f20d0b-fd9e-4d41-a83e-917869fe6748",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "14cab128-bed0-4283-b94c-d14dac6e7ad7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84b6921a-e0c9-4540-8efa-87223c3e2c17",
        "cursor": {
          "ref": "edbb7b77-a4eb-450a-a745-2543ca80e1a8",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "55a23f0d-391c-4791-82cd-3907befe4a2b"
        },
        "item": {
          "id": "84b6921a-e0c9-4540-8efa-87223c3e2c17",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e1d1d55d-b211-40f0-a5fd-7f584e939ce8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84b6921a-e0c9-4540-8efa-87223c3e2c17",
        "cursor": {
          "ref": "edbb7b77-a4eb-450a-a745-2543ca80e1a8",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "55a23f0d-391c-4791-82cd-3907befe4a2b"
        },
        "item": {
          "id": "84b6921a-e0c9-4540-8efa-87223c3e2c17",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e1d1d55d-b211-40f0-a5fd-7f584e939ce8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfbdf026-af68-4382-a2dd-745c2c6c2cd3",
        "cursor": {
          "ref": "b12788a5-0bd9-41f3-a463-0a5cc04d56e2",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8dbf0738-f202-4d43-9ab2-a9010dfaff0d"
        },
        "item": {
          "id": "cfbdf026-af68-4382-a2dd-745c2c6c2cd3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b01dfd58-c929-41ba-a2df-b4443defdf23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfbdf026-af68-4382-a2dd-745c2c6c2cd3",
        "cursor": {
          "ref": "b12788a5-0bd9-41f3-a463-0a5cc04d56e2",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8dbf0738-f202-4d43-9ab2-a9010dfaff0d"
        },
        "item": {
          "id": "cfbdf026-af68-4382-a2dd-745c2c6c2cd3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b01dfd58-c929-41ba-a2df-b4443defdf23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bacb9d69-c15b-469e-a083-0df65fc7bffe",
        "cursor": {
          "ref": "95bbd34e-5242-4e7b-a6e1-ee68b3406c38",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a6dfe155-a0ad-46e4-8a17-5324805e271c"
        },
        "item": {
          "id": "bacb9d69-c15b-469e-a083-0df65fc7bffe",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c3d6da69-2234-45e2-b584-5b40f18914f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bacb9d69-c15b-469e-a083-0df65fc7bffe",
        "cursor": {
          "ref": "95bbd34e-5242-4e7b-a6e1-ee68b3406c38",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a6dfe155-a0ad-46e4-8a17-5324805e271c"
        },
        "item": {
          "id": "bacb9d69-c15b-469e-a083-0df65fc7bffe",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c3d6da69-2234-45e2-b584-5b40f18914f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f838207-222e-4714-a591-13d2c5181d17",
        "cursor": {
          "ref": "04a5793b-bc05-4a5c-8823-d42e5f0589e7",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7fe8c728-1fb4-4e41-9d14-5e1e91a944b7"
        },
        "item": {
          "id": "6f838207-222e-4714-a591-13d2c5181d17",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1324d88a-972a-44da-b317-cdc01dcf6499",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f838207-222e-4714-a591-13d2c5181d17",
        "cursor": {
          "ref": "04a5793b-bc05-4a5c-8823-d42e5f0589e7",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7fe8c728-1fb4-4e41-9d14-5e1e91a944b7"
        },
        "item": {
          "id": "6f838207-222e-4714-a591-13d2c5181d17",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1324d88a-972a-44da-b317-cdc01dcf6499",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d38c02-cd5a-48c3-81e8-8734e97185f5",
        "cursor": {
          "ref": "6a018727-0e14-4624-accd-dbde2212a76b",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c7aaae57-1533-4142-a1d3-ec9ffa910f4d"
        },
        "item": {
          "id": "d9d38c02-cd5a-48c3-81e8-8734e97185f5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1aeb3f6e-ceea-464a-a834-6cda9eea44c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d38c02-cd5a-48c3-81e8-8734e97185f5",
        "cursor": {
          "ref": "6a018727-0e14-4624-accd-dbde2212a76b",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c7aaae57-1533-4142-a1d3-ec9ffa910f4d"
        },
        "item": {
          "id": "d9d38c02-cd5a-48c3-81e8-8734e97185f5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1aeb3f6e-ceea-464a-a834-6cda9eea44c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed83c065-f332-4bc8-a773-0e97940cdf8f",
        "cursor": {
          "ref": "7e5072d8-71a1-4e6e-ac76-611d94b26588",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f4e5d475-0eeb-4470-a627-b3ae5ba252f8"
        },
        "item": {
          "id": "ed83c065-f332-4bc8-a773-0e97940cdf8f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "313fc632-747d-45f4-91c8-2c08e4872301",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed83c065-f332-4bc8-a773-0e97940cdf8f",
        "cursor": {
          "ref": "7e5072d8-71a1-4e6e-ac76-611d94b26588",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f4e5d475-0eeb-4470-a627-b3ae5ba252f8"
        },
        "item": {
          "id": "ed83c065-f332-4bc8-a773-0e97940cdf8f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "313fc632-747d-45f4-91c8-2c08e4872301",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a719fe-dfeb-4016-a87c-1de98329776c",
        "cursor": {
          "ref": "6f053f29-0d45-449c-8ff1-040312231732",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "62fe6f54-b107-4bf1-accb-01dfee806996"
        },
        "item": {
          "id": "98a719fe-dfeb-4016-a87c-1de98329776c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4a301e38-2f54-472c-9f22-d7ab07465e1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a719fe-dfeb-4016-a87c-1de98329776c",
        "cursor": {
          "ref": "6f053f29-0d45-449c-8ff1-040312231732",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "62fe6f54-b107-4bf1-accb-01dfee806996"
        },
        "item": {
          "id": "98a719fe-dfeb-4016-a87c-1de98329776c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4a301e38-2f54-472c-9f22-d7ab07465e1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51587304-2599-4c13-b483-a3f637489174",
        "cursor": {
          "ref": "1a994505-9147-43d0-8623-69c7879a58ba",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3047d07d-b891-42f1-aa5e-d9ac90d80199"
        },
        "item": {
          "id": "51587304-2599-4c13-b483-a3f637489174",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "563c8df6-e2c5-4946-b008-77f7d8b52956",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51587304-2599-4c13-b483-a3f637489174",
        "cursor": {
          "ref": "1a994505-9147-43d0-8623-69c7879a58ba",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3047d07d-b891-42f1-aa5e-d9ac90d80199"
        },
        "item": {
          "id": "51587304-2599-4c13-b483-a3f637489174",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "563c8df6-e2c5-4946-b008-77f7d8b52956",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854b5af5-992e-4436-9ae9-f8742adafc9b",
        "cursor": {
          "ref": "cca321b8-d27d-4556-befb-ee7cd1445507",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "8eb3e410-fb1f-4e17-95ee-7f020572c64d"
        },
        "item": {
          "id": "854b5af5-992e-4436-9ae9-f8742adafc9b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3a32d8b9-19ac-4334-94df-0ee3166ae62e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854b5af5-992e-4436-9ae9-f8742adafc9b",
        "cursor": {
          "ref": "cca321b8-d27d-4556-befb-ee7cd1445507",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "8eb3e410-fb1f-4e17-95ee-7f020572c64d"
        },
        "item": {
          "id": "854b5af5-992e-4436-9ae9-f8742adafc9b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3a32d8b9-19ac-4334-94df-0ee3166ae62e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305aef4d-c72e-4b7c-8bc8-91174af8ef05",
        "cursor": {
          "ref": "81845b36-206b-4616-873a-e61ee54c51cb",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5d92cee4-22c8-40a6-8f3a-3155587dad0b"
        },
        "item": {
          "id": "305aef4d-c72e-4b7c-8bc8-91174af8ef05",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "88bd8fb0-52dc-4f87-b982-ee051470d6ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 90,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305aef4d-c72e-4b7c-8bc8-91174af8ef05",
        "cursor": {
          "ref": "81845b36-206b-4616-873a-e61ee54c51cb",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5d92cee4-22c8-40a6-8f3a-3155587dad0b"
        },
        "item": {
          "id": "305aef4d-c72e-4b7c-8bc8-91174af8ef05",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "88bd8fb0-52dc-4f87-b982-ee051470d6ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 90,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7eb3e30-0dc6-473c-8518-b0217b83e539",
        "cursor": {
          "ref": "359c5352-cd48-474c-a187-aef8e02c6765",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "3b8b5af7-58c8-41cf-ba5a-c47f1414893f"
        },
        "item": {
          "id": "d7eb3e30-0dc6-473c-8518-b0217b83e539",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "429cab49-06e2-49fd-a728-fdab49ff7bd0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7eb3e30-0dc6-473c-8518-b0217b83e539",
        "cursor": {
          "ref": "359c5352-cd48-474c-a187-aef8e02c6765",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "3b8b5af7-58c8-41cf-ba5a-c47f1414893f"
        },
        "item": {
          "id": "d7eb3e30-0dc6-473c-8518-b0217b83e539",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "429cab49-06e2-49fd-a728-fdab49ff7bd0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4241caee-9158-4630-a37d-58e30db16caa",
        "cursor": {
          "ref": "ba0f41e3-a530-4ff0-b903-894a3e8d2ca1",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "daf939fc-785c-4c84-8b86-e2f9bfdced36"
        },
        "item": {
          "id": "4241caee-9158-4630-a37d-58e30db16caa",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "13339627-1092-4351-af29-12990cfdf938",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4241caee-9158-4630-a37d-58e30db16caa",
        "cursor": {
          "ref": "ba0f41e3-a530-4ff0-b903-894a3e8d2ca1",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "daf939fc-785c-4c84-8b86-e2f9bfdced36"
        },
        "item": {
          "id": "4241caee-9158-4630-a37d-58e30db16caa",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "13339627-1092-4351-af29-12990cfdf938",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511b9169-3d93-474c-becb-8186ffd9896f",
        "cursor": {
          "ref": "9381b320-79d7-4ae5-9c24-1c7f4a008a28",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f2d1b85c-df2a-49e7-a8e5-1b9deff5954d"
        },
        "item": {
          "id": "511b9169-3d93-474c-becb-8186ffd9896f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9bfc3b11-0ebc-4ee0-bfab-2f23a46f6e16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511b9169-3d93-474c-becb-8186ffd9896f",
        "cursor": {
          "ref": "9381b320-79d7-4ae5-9c24-1c7f4a008a28",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f2d1b85c-df2a-49e7-a8e5-1b9deff5954d"
        },
        "item": {
          "id": "511b9169-3d93-474c-becb-8186ffd9896f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9bfc3b11-0ebc-4ee0-bfab-2f23a46f6e16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5702fc24-a994-4326-9916-5b5730d54992",
        "cursor": {
          "ref": "c019cdb4-2a67-467b-a4be-effb4304ad6a",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "03a7cbcb-142e-4782-be96-1f432b491d57"
        },
        "item": {
          "id": "5702fc24-a994-4326-9916-5b5730d54992",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9b6f95fa-b984-452b-ae66-82f39a73be05",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5702fc24-a994-4326-9916-5b5730d54992",
        "cursor": {
          "ref": "c019cdb4-2a67-467b-a4be-effb4304ad6a",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "03a7cbcb-142e-4782-be96-1f432b491d57"
        },
        "item": {
          "id": "5702fc24-a994-4326-9916-5b5730d54992",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9b6f95fa-b984-452b-ae66-82f39a73be05",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355c07c1-6cc4-4362-8af1-4b3eb053e792",
        "cursor": {
          "ref": "6fae45b6-fa74-4fdd-8e9b-92508a5e3bd4",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "32dda527-8fd9-4c6d-81e8-5623e8efe912"
        },
        "item": {
          "id": "355c07c1-6cc4-4362-8af1-4b3eb053e792",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a8556dfd-16df-4fa8-bd8a-ac6ef996f09b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355c07c1-6cc4-4362-8af1-4b3eb053e792",
        "cursor": {
          "ref": "6fae45b6-fa74-4fdd-8e9b-92508a5e3bd4",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "32dda527-8fd9-4c6d-81e8-5623e8efe912"
        },
        "item": {
          "id": "355c07c1-6cc4-4362-8af1-4b3eb053e792",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a8556dfd-16df-4fa8-bd8a-ac6ef996f09b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "515dcbd4-fea5-4169-8442-d4a5961f3bed",
        "cursor": {
          "ref": "e74f0016-6c9d-4bff-b494-4ccf1425517a",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "03a52053-0b58-4dc2-8c29-2a0734a09c05"
        },
        "item": {
          "id": "515dcbd4-fea5-4169-8442-d4a5961f3bed",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4cef765e-98df-4a7a-9217-92cf570bec26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "515dcbd4-fea5-4169-8442-d4a5961f3bed",
        "cursor": {
          "ref": "e74f0016-6c9d-4bff-b494-4ccf1425517a",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "03a52053-0b58-4dc2-8c29-2a0734a09c05"
        },
        "item": {
          "id": "515dcbd4-fea5-4169-8442-d4a5961f3bed",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4cef765e-98df-4a7a-9217-92cf570bec26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c166f216-1405-4b46-8c89-578f20139473",
        "cursor": {
          "ref": "72f9058c-82a5-4c62-9a26-f885f91a43c0",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a6a102b0-b7a9-4fcb-a988-28fe6c6caf00"
        },
        "item": {
          "id": "c166f216-1405-4b46-8c89-578f20139473",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "03c5707c-0376-4887-bc4e-26c4ae4bc7f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c166f216-1405-4b46-8c89-578f20139473",
        "cursor": {
          "ref": "72f9058c-82a5-4c62-9a26-f885f91a43c0",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a6a102b0-b7a9-4fcb-a988-28fe6c6caf00"
        },
        "item": {
          "id": "c166f216-1405-4b46-8c89-578f20139473",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "03c5707c-0376-4887-bc4e-26c4ae4bc7f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb158f1-4cd1-4b51-9f33-f68ee70c1308",
        "cursor": {
          "ref": "bf3c0f27-125f-44c0-9765-50c87a562352",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "33de5602-fed7-464b-96ef-b72ced5c8c6a"
        },
        "item": {
          "id": "dbb158f1-4cd1-4b51-9f33-f68ee70c1308",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "dbc791c0-7d58-43ed-96bd-3536359d12b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb158f1-4cd1-4b51-9f33-f68ee70c1308",
        "cursor": {
          "ref": "bf3c0f27-125f-44c0-9765-50c87a562352",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "33de5602-fed7-464b-96ef-b72ced5c8c6a"
        },
        "item": {
          "id": "dbb158f1-4cd1-4b51-9f33-f68ee70c1308",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "dbc791c0-7d58-43ed-96bd-3536359d12b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cecf3e3b-794d-4c76-84cd-654684f4dc3f",
        "cursor": {
          "ref": "4d6e06da-4a39-435e-ac22-4165bad8bb24",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "fd532093-8452-406e-9cb3-7ca4591a7372"
        },
        "item": {
          "id": "cecf3e3b-794d-4c76-84cd-654684f4dc3f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "24ba8f01-abc6-4aaf-9efc-b91a7d5974aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cecf3e3b-794d-4c76-84cd-654684f4dc3f",
        "cursor": {
          "ref": "4d6e06da-4a39-435e-ac22-4165bad8bb24",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "fd532093-8452-406e-9cb3-7ca4591a7372"
        },
        "item": {
          "id": "cecf3e3b-794d-4c76-84cd-654684f4dc3f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "24ba8f01-abc6-4aaf-9efc-b91a7d5974aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd4e4bc2-4c31-4032-8364-db0398897b14",
        "cursor": {
          "ref": "8ece9888-cd38-4bc0-93af-825e343bdef6",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0757bb08-f4c5-4f80-94e3-920e392036a4"
        },
        "item": {
          "id": "fd4e4bc2-4c31-4032-8364-db0398897b14",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a34e3927-9151-4be4-97f0-285661b48764",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd4e4bc2-4c31-4032-8364-db0398897b14",
        "cursor": {
          "ref": "8ece9888-cd38-4bc0-93af-825e343bdef6",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0757bb08-f4c5-4f80-94e3-920e392036a4"
        },
        "item": {
          "id": "fd4e4bc2-4c31-4032-8364-db0398897b14",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a34e3927-9151-4be4-97f0-285661b48764",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a37906-63ea-4dd1-8b87-8d15f1982df7",
        "cursor": {
          "ref": "f9b952d2-eb29-4647-ae3b-0b30d6d03f8a",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5277a194-6c1d-4592-90af-8a9d824f0253"
        },
        "item": {
          "id": "84a37906-63ea-4dd1-8b87-8d15f1982df7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b62a9e92-3719-43af-8eb8-ac8d18fc7947",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a37906-63ea-4dd1-8b87-8d15f1982df7",
        "cursor": {
          "ref": "f9b952d2-eb29-4647-ae3b-0b30d6d03f8a",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5277a194-6c1d-4592-90af-8a9d824f0253"
        },
        "item": {
          "id": "84a37906-63ea-4dd1-8b87-8d15f1982df7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b62a9e92-3719-43af-8eb8-ac8d18fc7947",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925882a1-0135-4fca-a8b9-26bba583e11f",
        "cursor": {
          "ref": "0eb52a12-0b61-45dc-a4c9-7a9496356ae1",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4c6f4be4-36c0-491d-ae10-7e6d5e72565d"
        },
        "item": {
          "id": "925882a1-0135-4fca-a8b9-26bba583e11f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cd3ff55f-5b25-4d4b-9a0a-42ff6605dbe7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925882a1-0135-4fca-a8b9-26bba583e11f",
        "cursor": {
          "ref": "0eb52a12-0b61-45dc-a4c9-7a9496356ae1",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4c6f4be4-36c0-491d-ae10-7e6d5e72565d"
        },
        "item": {
          "id": "925882a1-0135-4fca-a8b9-26bba583e11f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cd3ff55f-5b25-4d4b-9a0a-42ff6605dbe7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83127a6f-da11-4c2d-a28a-d81926bd8da6",
        "cursor": {
          "ref": "ce547e74-45e7-44f4-83bf-7a8ca3a1e1b5",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d2f422f9-2d11-480a-adf1-da2f9e2601c6"
        },
        "item": {
          "id": "83127a6f-da11-4c2d-a28a-d81926bd8da6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "42da2a76-0ca8-4f83-8d61-c621b8501023",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83127a6f-da11-4c2d-a28a-d81926bd8da6",
        "cursor": {
          "ref": "ce547e74-45e7-44f4-83bf-7a8ca3a1e1b5",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d2f422f9-2d11-480a-adf1-da2f9e2601c6"
        },
        "item": {
          "id": "83127a6f-da11-4c2d-a28a-d81926bd8da6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "42da2a76-0ca8-4f83-8d61-c621b8501023",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9037e265-e421-4f15-b68d-7a6e23601849",
        "cursor": {
          "ref": "e1a79843-a699-4bee-913d-0f443ab723c8",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ea273fb3-0655-48fe-96f7-0c24cb40320b"
        },
        "item": {
          "id": "9037e265-e421-4f15-b68d-7a6e23601849",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d3c61924-278e-4e4f-8dda-e5e595162638",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9037e265-e421-4f15-b68d-7a6e23601849",
        "cursor": {
          "ref": "e1a79843-a699-4bee-913d-0f443ab723c8",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ea273fb3-0655-48fe-96f7-0c24cb40320b"
        },
        "item": {
          "id": "9037e265-e421-4f15-b68d-7a6e23601849",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d3c61924-278e-4e4f-8dda-e5e595162638",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "680693c7-86bc-41a3-befe-23a09739fdf3",
        "cursor": {
          "ref": "06917887-7423-4637-a572-aaaf13db1573",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "11f79ffe-1fee-44be-ba8d-30d75a5e693f"
        },
        "item": {
          "id": "680693c7-86bc-41a3-befe-23a09739fdf3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "69d96261-ea04-45a8-aa49-78022a304ca6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "680693c7-86bc-41a3-befe-23a09739fdf3",
        "cursor": {
          "ref": "06917887-7423-4637-a572-aaaf13db1573",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "11f79ffe-1fee-44be-ba8d-30d75a5e693f"
        },
        "item": {
          "id": "680693c7-86bc-41a3-befe-23a09739fdf3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "69d96261-ea04-45a8-aa49-78022a304ca6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72dacc51-b3ab-442a-aad9-34b0e1672b61",
        "cursor": {
          "ref": "3de2046e-5ead-4b75-bb68-cc231184bec4",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "292521d8-6227-4347-bbb6-7c307ac5cee6"
        },
        "item": {
          "id": "72dacc51-b3ab-442a-aad9-34b0e1672b61",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ec278ff9-760c-4425-83a5-d9e7737d626f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72dacc51-b3ab-442a-aad9-34b0e1672b61",
        "cursor": {
          "ref": "3de2046e-5ead-4b75-bb68-cc231184bec4",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "292521d8-6227-4347-bbb6-7c307ac5cee6"
        },
        "item": {
          "id": "72dacc51-b3ab-442a-aad9-34b0e1672b61",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ec278ff9-760c-4425-83a5-d9e7737d626f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1c2d1b-870f-4136-966c-042e5b05d9ca",
        "cursor": {
          "ref": "daa1e223-1526-4238-9b45-c3c3407dc9ff",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "dcb599ad-c7a4-4856-a2e4-876ba8560465"
        },
        "item": {
          "id": "fb1c2d1b-870f-4136-966c-042e5b05d9ca",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "fab9b3ef-aaff-4e1a-b9a0-43927c819d54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1c2d1b-870f-4136-966c-042e5b05d9ca",
        "cursor": {
          "ref": "daa1e223-1526-4238-9b45-c3c3407dc9ff",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "dcb599ad-c7a4-4856-a2e4-876ba8560465"
        },
        "item": {
          "id": "fb1c2d1b-870f-4136-966c-042e5b05d9ca",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "fab9b3ef-aaff-4e1a-b9a0-43927c819d54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1530c6-8e5c-4e1b-bddc-7e29a1ed4563",
        "cursor": {
          "ref": "4319fe2e-226c-4efb-99f6-4005c269880f",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7f96ae37-033b-4ce6-997d-d78ea1390a90"
        },
        "item": {
          "id": "cb1530c6-8e5c-4e1b-bddc-7e29a1ed4563",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ce13811a-1c85-4416-b77a-a7a51fd1d631",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1530c6-8e5c-4e1b-bddc-7e29a1ed4563",
        "cursor": {
          "ref": "4319fe2e-226c-4efb-99f6-4005c269880f",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7f96ae37-033b-4ce6-997d-d78ea1390a90"
        },
        "item": {
          "id": "cb1530c6-8e5c-4e1b-bddc-7e29a1ed4563",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ce13811a-1c85-4416-b77a-a7a51fd1d631",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e6af2a0-a236-4f38-b0d1-ef5e5ae74842",
        "cursor": {
          "ref": "88ba6d7f-548d-4a1b-a147-91d617fe3e5c",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "53b33937-e268-43ca-aeef-e57f3f2f718d"
        },
        "item": {
          "id": "8e6af2a0-a236-4f38-b0d1-ef5e5ae74842",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7a1bdec7-ffa6-4884-bc6b-9ab89a54481a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e6af2a0-a236-4f38-b0d1-ef5e5ae74842",
        "cursor": {
          "ref": "88ba6d7f-548d-4a1b-a147-91d617fe3e5c",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "53b33937-e268-43ca-aeef-e57f3f2f718d"
        },
        "item": {
          "id": "8e6af2a0-a236-4f38-b0d1-ef5e5ae74842",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7a1bdec7-ffa6-4884-bc6b-9ab89a54481a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79342bb-ea1f-4f96-bb4e-74813edb8eb8",
        "cursor": {
          "ref": "0106688e-59ed-4294-a57d-fdbdcccdea23",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5c9219fe-61ab-4aab-b980-f43af6fde3f8"
        },
        "item": {
          "id": "a79342bb-ea1f-4f96-bb4e-74813edb8eb8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d8354ef0-d616-426e-8c74-dfcff53eac9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79342bb-ea1f-4f96-bb4e-74813edb8eb8",
        "cursor": {
          "ref": "0106688e-59ed-4294-a57d-fdbdcccdea23",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5c9219fe-61ab-4aab-b980-f43af6fde3f8"
        },
        "item": {
          "id": "a79342bb-ea1f-4f96-bb4e-74813edb8eb8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d8354ef0-d616-426e-8c74-dfcff53eac9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b0a97c9-67ad-45ab-a65a-94926586dcdc",
        "cursor": {
          "ref": "ff826c8b-8ce2-4005-a55d-7a86010dfed0",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "03903d76-672f-4213-9203-167834a0b742"
        },
        "item": {
          "id": "7b0a97c9-67ad-45ab-a65a-94926586dcdc",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2d12dcb3-1ed2-4cf6-acb0-a474ef49449e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b0a97c9-67ad-45ab-a65a-94926586dcdc",
        "cursor": {
          "ref": "ff826c8b-8ce2-4005-a55d-7a86010dfed0",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "03903d76-672f-4213-9203-167834a0b742"
        },
        "item": {
          "id": "7b0a97c9-67ad-45ab-a65a-94926586dcdc",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2d12dcb3-1ed2-4cf6-acb0-a474ef49449e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6efef75f-f2e3-490d-a642-a693e4c9c1bd",
        "cursor": {
          "ref": "a361b37b-178b-4def-b001-2bc89a11a844",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6356306e-cf7d-4ef7-9d9f-1c7091cebb8c"
        },
        "item": {
          "id": "6efef75f-f2e3-490d-a642-a693e4c9c1bd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "441d1e87-9214-45b0-a0c2-415803354269",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6efef75f-f2e3-490d-a642-a693e4c9c1bd",
        "cursor": {
          "ref": "a361b37b-178b-4def-b001-2bc89a11a844",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6356306e-cf7d-4ef7-9d9f-1c7091cebb8c"
        },
        "item": {
          "id": "6efef75f-f2e3-490d-a642-a693e4c9c1bd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "441d1e87-9214-45b0-a0c2-415803354269",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f502f2-dbeb-4b6c-a55d-c1b8d569d59b",
        "cursor": {
          "ref": "f4a43c32-e300-45ea-8c87-9f2fbb1389ad",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8b848f97-3a97-4065-a10f-43034660577d"
        },
        "item": {
          "id": "45f502f2-dbeb-4b6c-a55d-c1b8d569d59b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "dfa36360-e15c-4e88-b3c8-c48e1018c681",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f502f2-dbeb-4b6c-a55d-c1b8d569d59b",
        "cursor": {
          "ref": "f4a43c32-e300-45ea-8c87-9f2fbb1389ad",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8b848f97-3a97-4065-a10f-43034660577d"
        },
        "item": {
          "id": "45f502f2-dbeb-4b6c-a55d-c1b8d569d59b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "dfa36360-e15c-4e88-b3c8-c48e1018c681",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d85de80-a9d2-4907-acb8-bea69785ad8e",
        "cursor": {
          "ref": "0536eb01-6c50-4a52-90d0-47da917f88d8",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c010796b-e4b4-4411-99e9-4840a41a24b8"
        },
        "item": {
          "id": "7d85de80-a9d2-4907-acb8-bea69785ad8e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e6a1a950-2d05-4013-ac38-1c8cd2f32495",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d85de80-a9d2-4907-acb8-bea69785ad8e",
        "cursor": {
          "ref": "0536eb01-6c50-4a52-90d0-47da917f88d8",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c010796b-e4b4-4411-99e9-4840a41a24b8"
        },
        "item": {
          "id": "7d85de80-a9d2-4907-acb8-bea69785ad8e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e6a1a950-2d05-4013-ac38-1c8cd2f32495",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc8871be-23a9-4a3f-b33f-f2c486dc778d",
        "cursor": {
          "ref": "24336570-ff35-4dfb-9616-418180bc0bee",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "707147b3-e4ba-44cc-b7f7-4fe3d9d6a724"
        },
        "item": {
          "id": "bc8871be-23a9-4a3f-b33f-f2c486dc778d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a40324ac-4ca2-48ac-96c6-df95e6196b36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc8871be-23a9-4a3f-b33f-f2c486dc778d",
        "cursor": {
          "ref": "24336570-ff35-4dfb-9616-418180bc0bee",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "707147b3-e4ba-44cc-b7f7-4fe3d9d6a724"
        },
        "item": {
          "id": "bc8871be-23a9-4a3f-b33f-f2c486dc778d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a40324ac-4ca2-48ac-96c6-df95e6196b36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d61b995-3e1c-48e8-afeb-7cbb19049a71",
        "cursor": {
          "ref": "22aaeca5-d148-4c98-9bbf-0713090be3f8",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c7f52dd3-ec0c-4d74-8208-c0dd0090b0a0"
        },
        "item": {
          "id": "8d61b995-3e1c-48e8-afeb-7cbb19049a71",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "93722c64-4783-482e-9426-fe548375a599",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d61b995-3e1c-48e8-afeb-7cbb19049a71",
        "cursor": {
          "ref": "22aaeca5-d148-4c98-9bbf-0713090be3f8",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c7f52dd3-ec0c-4d74-8208-c0dd0090b0a0"
        },
        "item": {
          "id": "8d61b995-3e1c-48e8-afeb-7cbb19049a71",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "93722c64-4783-482e-9426-fe548375a599",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3475a13d-8a4e-4a1a-9d76-cb00d6b78876",
        "cursor": {
          "ref": "18cc7818-42a4-4ef0-8e32-0966d097854b",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "7fdb42ef-54e7-485c-86f4-238aa6bc00f7"
        },
        "item": {
          "id": "3475a13d-8a4e-4a1a-9d76-cb00d6b78876",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5eca2dbe-e0d1-46d6-9a79-f8cc50a2b669",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3475a13d-8a4e-4a1a-9d76-cb00d6b78876",
        "cursor": {
          "ref": "18cc7818-42a4-4ef0-8e32-0966d097854b",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "7fdb42ef-54e7-485c-86f4-238aa6bc00f7"
        },
        "item": {
          "id": "3475a13d-8a4e-4a1a-9d76-cb00d6b78876",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5eca2dbe-e0d1-46d6-9a79-f8cc50a2b669",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3d357e-b002-4f15-bb31-cbf9c7f04a37",
        "cursor": {
          "ref": "11219c76-038c-4d42-a8d7-a15f32dec4f0",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "af7bad3e-c167-43ab-adf5-d1b6ecfc9f6c"
        },
        "item": {
          "id": "6f3d357e-b002-4f15-bb31-cbf9c7f04a37",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ced79400-9613-4155-b88b-443ad0156e42",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3d357e-b002-4f15-bb31-cbf9c7f04a37",
        "cursor": {
          "ref": "11219c76-038c-4d42-a8d7-a15f32dec4f0",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "af7bad3e-c167-43ab-adf5-d1b6ecfc9f6c"
        },
        "item": {
          "id": "6f3d357e-b002-4f15-bb31-cbf9c7f04a37",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ced79400-9613-4155-b88b-443ad0156e42",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8207989-c541-46ff-a601-221d4ed20dfd",
        "cursor": {
          "ref": "1c8a84ae-71e2-4c06-adce-05690f6dad7d",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "18017196-dd92-4665-99d0-cd95c95b11e6"
        },
        "item": {
          "id": "e8207989-c541-46ff-a601-221d4ed20dfd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "bdd78670-b0f9-4c1a-8f91-1762f8043bc0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8207989-c541-46ff-a601-221d4ed20dfd",
        "cursor": {
          "ref": "1c8a84ae-71e2-4c06-adce-05690f6dad7d",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "18017196-dd92-4665-99d0-cd95c95b11e6"
        },
        "item": {
          "id": "e8207989-c541-46ff-a601-221d4ed20dfd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "bdd78670-b0f9-4c1a-8f91-1762f8043bc0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6037413b-30b8-4a66-b203-0c8bd0044ece",
        "cursor": {
          "ref": "77a68cb5-aaa7-49c7-a4bd-28d7be849d5a",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "dcf47b70-8f3e-4fdc-a205-ef2560052eac"
        },
        "item": {
          "id": "6037413b-30b8-4a66-b203-0c8bd0044ece",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "95cbdce3-8111-4160-9a86-7dd2cf134674",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6037413b-30b8-4a66-b203-0c8bd0044ece",
        "cursor": {
          "ref": "77a68cb5-aaa7-49c7-a4bd-28d7be849d5a",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "dcf47b70-8f3e-4fdc-a205-ef2560052eac"
        },
        "item": {
          "id": "6037413b-30b8-4a66-b203-0c8bd0044ece",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "95cbdce3-8111-4160-9a86-7dd2cf134674",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f9bd608-3daa-45c7-85f7-cd50aea9c037",
        "cursor": {
          "ref": "317c21cc-fc9e-49f5-902a-8249f2b1edbb",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "61f6ce47-e0b1-41f1-9f4b-cf3ee815e06b"
        },
        "item": {
          "id": "3f9bd608-3daa-45c7-85f7-cd50aea9c037",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e4937482-f145-44d2-ba3f-53a7a11d23df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f9bd608-3daa-45c7-85f7-cd50aea9c037",
        "cursor": {
          "ref": "317c21cc-fc9e-49f5-902a-8249f2b1edbb",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "61f6ce47-e0b1-41f1-9f4b-cf3ee815e06b"
        },
        "item": {
          "id": "3f9bd608-3daa-45c7-85f7-cd50aea9c037",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e4937482-f145-44d2-ba3f-53a7a11d23df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b8534b3-9295-4bc5-a1a9-138ed96432d3",
        "cursor": {
          "ref": "c95389d0-c21a-4134-bfdd-732fb57f9b86",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b1149b6c-5779-4457-8095-5fcf61f1e5a4"
        },
        "item": {
          "id": "1b8534b3-9295-4bc5-a1a9-138ed96432d3",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "eda71536-b135-4200-b4a0-31eafeed106a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b8534b3-9295-4bc5-a1a9-138ed96432d3",
        "cursor": {
          "ref": "c95389d0-c21a-4134-bfdd-732fb57f9b86",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b1149b6c-5779-4457-8095-5fcf61f1e5a4"
        },
        "item": {
          "id": "1b8534b3-9295-4bc5-a1a9-138ed96432d3",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "eda71536-b135-4200-b4a0-31eafeed106a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "629a49b7-9bc5-422d-b316-27f350d8dde9",
        "cursor": {
          "ref": "8b75ed42-ddb1-4f95-b242-0b373ad5475a",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9a0673dd-f965-4717-bfa4-64a05aa3fb08"
        },
        "item": {
          "id": "629a49b7-9bc5-422d-b316-27f350d8dde9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "bb2514fb-4c0f-4bc4-bbd0-349992ee5742",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "629a49b7-9bc5-422d-b316-27f350d8dde9",
        "cursor": {
          "ref": "8b75ed42-ddb1-4f95-b242-0b373ad5475a",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9a0673dd-f965-4717-bfa4-64a05aa3fb08"
        },
        "item": {
          "id": "629a49b7-9bc5-422d-b316-27f350d8dde9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "bb2514fb-4c0f-4bc4-bbd0-349992ee5742",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4e9aea-39ef-4a20-aedb-aa709bc40224",
        "cursor": {
          "ref": "d89290f5-e136-4035-a8dc-fa1fb87be3de",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2183d505-523d-45e0-a3e8-b0f73ace0644"
        },
        "item": {
          "id": "6d4e9aea-39ef-4a20-aedb-aa709bc40224",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4c4064c9-2ec8-42e5-b18d-1e1d4c4e027c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4e9aea-39ef-4a20-aedb-aa709bc40224",
        "cursor": {
          "ref": "d89290f5-e136-4035-a8dc-fa1fb87be3de",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2183d505-523d-45e0-a3e8-b0f73ace0644"
        },
        "item": {
          "id": "6d4e9aea-39ef-4a20-aedb-aa709bc40224",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4c4064c9-2ec8-42e5-b18d-1e1d4c4e027c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31df352b-3341-421a-b76c-e3f84b96c83c",
        "cursor": {
          "ref": "aaca44b8-29a8-4cf8-8e07-1a5b386d58a4",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "14ff7bd1-7fff-4acb-841f-35ae474be81f"
        },
        "item": {
          "id": "31df352b-3341-421a-b76c-e3f84b96c83c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b2da5650-f7c0-4140-a02e-f731c26decda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31df352b-3341-421a-b76c-e3f84b96c83c",
        "cursor": {
          "ref": "aaca44b8-29a8-4cf8-8e07-1a5b386d58a4",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "14ff7bd1-7fff-4acb-841f-35ae474be81f"
        },
        "item": {
          "id": "31df352b-3341-421a-b76c-e3f84b96c83c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b2da5650-f7c0-4140-a02e-f731c26decda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc70c230-6d9b-4e8f-af5e-cc9162e5b7d8",
        "cursor": {
          "ref": "9765ca77-c0c6-4686-a844-49b915b576b0",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "49e82ce2-6275-4ac2-b9da-940b3371b2e2"
        },
        "item": {
          "id": "dc70c230-6d9b-4e8f-af5e-cc9162e5b7d8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "db260598-4816-4bb7-92d6-a28a367bbf1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc70c230-6d9b-4e8f-af5e-cc9162e5b7d8",
        "cursor": {
          "ref": "9765ca77-c0c6-4686-a844-49b915b576b0",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "49e82ce2-6275-4ac2-b9da-940b3371b2e2"
        },
        "item": {
          "id": "dc70c230-6d9b-4e8f-af5e-cc9162e5b7d8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "db260598-4816-4bb7-92d6-a28a367bbf1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "219edf64-353b-44d3-a5e4-fbc840510c04",
        "cursor": {
          "ref": "7fe7e239-fa12-44d4-b996-dafec21a5c9b",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c7b73945-4426-4821-b891-5a6aad9f5dd5"
        },
        "item": {
          "id": "219edf64-353b-44d3-a5e4-fbc840510c04",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "94563ad9-747c-43d6-9cf1-0ec889ac0d0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "219edf64-353b-44d3-a5e4-fbc840510c04",
        "cursor": {
          "ref": "7fe7e239-fa12-44d4-b996-dafec21a5c9b",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c7b73945-4426-4821-b891-5a6aad9f5dd5"
        },
        "item": {
          "id": "219edf64-353b-44d3-a5e4-fbc840510c04",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "94563ad9-747c-43d6-9cf1-0ec889ac0d0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e97cb0-c793-4399-ba01-cd4ead7f82b4",
        "cursor": {
          "ref": "be3ad44f-0b11-4224-8199-97ad55a2faf7",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "29469c55-5ce3-43f5-83c9-8f193d804b91"
        },
        "item": {
          "id": "69e97cb0-c793-4399-ba01-cd4ead7f82b4",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "0431ed85-afa4-4cf4-be2d-af2b60193b1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e97cb0-c793-4399-ba01-cd4ead7f82b4",
        "cursor": {
          "ref": "be3ad44f-0b11-4224-8199-97ad55a2faf7",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "29469c55-5ce3-43f5-83c9-8f193d804b91"
        },
        "item": {
          "id": "69e97cb0-c793-4399-ba01-cd4ead7f82b4",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "0431ed85-afa4-4cf4-be2d-af2b60193b1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "290a692c-ae1b-47bf-ae40-73dd8d4b9aed",
        "cursor": {
          "ref": "bcb6cdf9-bb73-449e-bccf-e2ce16e0bf7b",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a13e4a03-96d2-4f58-9356-16cddab7361e"
        },
        "item": {
          "id": "290a692c-ae1b-47bf-ae40-73dd8d4b9aed",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "669f9ea4-c40e-453d-bdb6-90d2f96eac7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "290a692c-ae1b-47bf-ae40-73dd8d4b9aed",
        "cursor": {
          "ref": "bcb6cdf9-bb73-449e-bccf-e2ce16e0bf7b",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a13e4a03-96d2-4f58-9356-16cddab7361e"
        },
        "item": {
          "id": "290a692c-ae1b-47bf-ae40-73dd8d4b9aed",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "669f9ea4-c40e-453d-bdb6-90d2f96eac7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0daa8256-8eb6-4ac2-b130-88bd14ade451",
        "cursor": {
          "ref": "1294f53f-71e0-4ad8-8a10-59a79c142f08",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "58ec8005-286c-41c7-a3ce-14dd53f75128"
        },
        "item": {
          "id": "0daa8256-8eb6-4ac2-b130-88bd14ade451",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "73d549a7-85a9-4c5b-89e8-47af19db7887",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0daa8256-8eb6-4ac2-b130-88bd14ade451",
        "cursor": {
          "ref": "1294f53f-71e0-4ad8-8a10-59a79c142f08",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "58ec8005-286c-41c7-a3ce-14dd53f75128"
        },
        "item": {
          "id": "0daa8256-8eb6-4ac2-b130-88bd14ade451",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "73d549a7-85a9-4c5b-89e8-47af19db7887",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02885995-bf9f-41c7-984a-1148e21dbef1",
        "cursor": {
          "ref": "a3be4257-8423-41fa-aaf4-7bf056ae9be2",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b26518a8-9ece-4ac1-9fb8-8debb58391ec"
        },
        "item": {
          "id": "02885995-bf9f-41c7-984a-1148e21dbef1",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ebace413-b996-4bbd-ab97-ccf521e1e697",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02885995-bf9f-41c7-984a-1148e21dbef1",
        "cursor": {
          "ref": "a3be4257-8423-41fa-aaf4-7bf056ae9be2",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b26518a8-9ece-4ac1-9fb8-8debb58391ec"
        },
        "item": {
          "id": "02885995-bf9f-41c7-984a-1148e21dbef1",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ebace413-b996-4bbd-ab97-ccf521e1e697",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d104a4-9b01-4fee-9fce-ce690982b082",
        "cursor": {
          "ref": "d665487c-da07-4314-abe6-35fe04e989d4",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a89cf3c7-1f31-474d-8aea-cbf2fe603f7e"
        },
        "item": {
          "id": "97d104a4-9b01-4fee-9fce-ce690982b082",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "6eae0c35-297c-4246-b7f2-1020ffe94b2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d104a4-9b01-4fee-9fce-ce690982b082",
        "cursor": {
          "ref": "d665487c-da07-4314-abe6-35fe04e989d4",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a89cf3c7-1f31-474d-8aea-cbf2fe603f7e"
        },
        "item": {
          "id": "97d104a4-9b01-4fee-9fce-ce690982b082",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "6eae0c35-297c-4246-b7f2-1020ffe94b2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d477eb3-14b4-4d32-9d87-ef8292983beb",
        "cursor": {
          "ref": "2640cf96-1ff9-4dfc-a89b-6ca1edbd5489",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a96981f5-661e-47fb-aa8b-4e1f9d5755fc"
        },
        "item": {
          "id": "5d477eb3-14b4-4d32-9d87-ef8292983beb",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "58be35b5-5d8b-4e86-b9e2-5ffb66e42bf9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 90,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d477eb3-14b4-4d32-9d87-ef8292983beb",
        "cursor": {
          "ref": "2640cf96-1ff9-4dfc-a89b-6ca1edbd5489",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a96981f5-661e-47fb-aa8b-4e1f9d5755fc"
        },
        "item": {
          "id": "5d477eb3-14b4-4d32-9d87-ef8292983beb",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "58be35b5-5d8b-4e86-b9e2-5ffb66e42bf9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 90,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0014791-88a3-403f-90b9-5a6e33da9fec",
        "cursor": {
          "ref": "14c40dd8-dc41-4c57-8c2f-5f9bfba8e7e2",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "bc599969-ca92-446a-84b5-9d7275ef3956"
        },
        "item": {
          "id": "b0014791-88a3-403f-90b9-5a6e33da9fec",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "64a5512f-6ef0-44c1-b3fb-1f6d0ef24e02",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0014791-88a3-403f-90b9-5a6e33da9fec",
        "cursor": {
          "ref": "14c40dd8-dc41-4c57-8c2f-5f9bfba8e7e2",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "bc599969-ca92-446a-84b5-9d7275ef3956"
        },
        "item": {
          "id": "b0014791-88a3-403f-90b9-5a6e33da9fec",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "64a5512f-6ef0-44c1-b3fb-1f6d0ef24e02",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e233986f-1640-44f0-9594-9b9cc64cf894",
        "cursor": {
          "ref": "06ac4b15-c59e-4e97-b9a6-cbdeda88ffa3",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3c7fb1d6-92be-434a-ac3a-dae557dfd12e"
        },
        "item": {
          "id": "e233986f-1640-44f0-9594-9b9cc64cf894",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5f948681-65fc-4c09-b77a-5e328a74589e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e233986f-1640-44f0-9594-9b9cc64cf894",
        "cursor": {
          "ref": "06ac4b15-c59e-4e97-b9a6-cbdeda88ffa3",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3c7fb1d6-92be-434a-ac3a-dae557dfd12e"
        },
        "item": {
          "id": "e233986f-1640-44f0-9594-9b9cc64cf894",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5f948681-65fc-4c09-b77a-5e328a74589e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6404283-7baa-4994-8cb6-b8881852bb50",
        "cursor": {
          "ref": "351bcb5c-7ded-49d0-9624-15485a910dc2",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "85899df1-2312-4f15-b923-1ec93e3211c7"
        },
        "item": {
          "id": "a6404283-7baa-4994-8cb6-b8881852bb50",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2ee9f1e5-1145-4258-aee9-59f6a84cd287",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6404283-7baa-4994-8cb6-b8881852bb50",
        "cursor": {
          "ref": "351bcb5c-7ded-49d0-9624-15485a910dc2",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "85899df1-2312-4f15-b923-1ec93e3211c7"
        },
        "item": {
          "id": "a6404283-7baa-4994-8cb6-b8881852bb50",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2ee9f1e5-1145-4258-aee9-59f6a84cd287",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d06292-b192-4c46-9b7f-4049ff9eff58",
        "cursor": {
          "ref": "113b701b-11b0-4497-b132-f53cbbb4fbea",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "462415b3-d1ad-4d12-8bbd-3838d6d8a712"
        },
        "item": {
          "id": "70d06292-b192-4c46-9b7f-4049ff9eff58",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ffa4d2af-1714-402c-9e66-1ba2c17df018",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d06292-b192-4c46-9b7f-4049ff9eff58",
        "cursor": {
          "ref": "113b701b-11b0-4497-b132-f53cbbb4fbea",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "462415b3-d1ad-4d12-8bbd-3838d6d8a712"
        },
        "item": {
          "id": "70d06292-b192-4c46-9b7f-4049ff9eff58",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ffa4d2af-1714-402c-9e66-1ba2c17df018",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "489228d8-b2f4-4534-8ac8-01d6729c3e51",
        "cursor": {
          "ref": "28e7b964-16a7-406a-b029-0eb6db825bde",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3b9b22ce-446e-4029-ac63-879a367b1fe2"
        },
        "item": {
          "id": "489228d8-b2f4-4534-8ac8-01d6729c3e51",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c548cf7f-3948-4c41-8a89-234899af4cbb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "489228d8-b2f4-4534-8ac8-01d6729c3e51",
        "cursor": {
          "ref": "28e7b964-16a7-406a-b029-0eb6db825bde",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3b9b22ce-446e-4029-ac63-879a367b1fe2"
        },
        "item": {
          "id": "489228d8-b2f4-4534-8ac8-01d6729c3e51",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c548cf7f-3948-4c41-8a89-234899af4cbb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d6d8e83-c474-4ee6-9d74-a9f6d80f14b4",
        "cursor": {
          "ref": "182d5e74-7797-49d1-bdbf-748940cf2d89",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "59c744b2-ea46-4a99-afc3-5eb613e295b0"
        },
        "item": {
          "id": "1d6d8e83-c474-4ee6-9d74-a9f6d80f14b4",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "25a129e7-7508-41af-b139-74d92ed560c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d6d8e83-c474-4ee6-9d74-a9f6d80f14b4",
        "cursor": {
          "ref": "182d5e74-7797-49d1-bdbf-748940cf2d89",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "59c744b2-ea46-4a99-afc3-5eb613e295b0"
        },
        "item": {
          "id": "1d6d8e83-c474-4ee6-9d74-a9f6d80f14b4",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "25a129e7-7508-41af-b139-74d92ed560c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b8a8f5-b352-461d-82b7-6574ae879289",
        "cursor": {
          "ref": "28ee501a-7aa9-455b-a422-4a262a02e665",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "95176f04-bc42-45a8-8948-00c178bd92bb"
        },
        "item": {
          "id": "a2b8a8f5-b352-461d-82b7-6574ae879289",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "71799a6e-9e0c-49af-8619-90bf71f50d3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b8a8f5-b352-461d-82b7-6574ae879289",
        "cursor": {
          "ref": "28ee501a-7aa9-455b-a422-4a262a02e665",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "95176f04-bc42-45a8-8948-00c178bd92bb"
        },
        "item": {
          "id": "a2b8a8f5-b352-461d-82b7-6574ae879289",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "71799a6e-9e0c-49af-8619-90bf71f50d3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5253c506-1a89-4d64-9ad2-fc3bc78dae78",
        "cursor": {
          "ref": "bc50bf8c-0941-452b-ab30-e1b72d53e210",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "74e3b849-645c-4d15-b22b-ff6675af13df"
        },
        "item": {
          "id": "5253c506-1a89-4d64-9ad2-fc3bc78dae78",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "199f391d-f3e3-4a0c-9131-98fe73570606",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5253c506-1a89-4d64-9ad2-fc3bc78dae78",
        "cursor": {
          "ref": "bc50bf8c-0941-452b-ab30-e1b72d53e210",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "74e3b849-645c-4d15-b22b-ff6675af13df"
        },
        "item": {
          "id": "5253c506-1a89-4d64-9ad2-fc3bc78dae78",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "199f391d-f3e3-4a0c-9131-98fe73570606",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24083ae2-c69a-4dce-825e-cdda36156658",
        "cursor": {
          "ref": "92c6559b-14d8-43d8-b17e-73aaba0f33f4",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3520170f-c6a2-4910-b2e3-e00db0b6766b"
        },
        "item": {
          "id": "24083ae2-c69a-4dce-825e-cdda36156658",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b90edea1-337a-42f3-b7e8-9f82f1d6cc3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24083ae2-c69a-4dce-825e-cdda36156658",
        "cursor": {
          "ref": "92c6559b-14d8-43d8-b17e-73aaba0f33f4",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3520170f-c6a2-4910-b2e3-e00db0b6766b"
        },
        "item": {
          "id": "24083ae2-c69a-4dce-825e-cdda36156658",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b90edea1-337a-42f3-b7e8-9f82f1d6cc3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee79e4ad-7348-42ec-a3ed-f70772f87d15",
        "cursor": {
          "ref": "2a10a050-7dc2-40de-b1fd-1b26868a6b79",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "53d6e418-1ed5-401b-8ec7-1e556f718b79"
        },
        "item": {
          "id": "ee79e4ad-7348-42ec-a3ed-f70772f87d15",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "98240f0a-2cd6-4da2-8953-73fe5264f5d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee79e4ad-7348-42ec-a3ed-f70772f87d15",
        "cursor": {
          "ref": "2a10a050-7dc2-40de-b1fd-1b26868a6b79",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "53d6e418-1ed5-401b-8ec7-1e556f718b79"
        },
        "item": {
          "id": "ee79e4ad-7348-42ec-a3ed-f70772f87d15",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "98240f0a-2cd6-4da2-8953-73fe5264f5d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc012c1-f50a-496c-80e4-5aa38139139b",
        "cursor": {
          "ref": "e241b56f-7e59-4a36-a49a-2b2615edf80b",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7c67ec85-8da6-473f-8985-6c8fa01a3869"
        },
        "item": {
          "id": "ddc012c1-f50a-496c-80e4-5aa38139139b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "84ecd5c5-ce79-49b5-bfcc-5a4173c5c666",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc012c1-f50a-496c-80e4-5aa38139139b",
        "cursor": {
          "ref": "e241b56f-7e59-4a36-a49a-2b2615edf80b",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7c67ec85-8da6-473f-8985-6c8fa01a3869"
        },
        "item": {
          "id": "ddc012c1-f50a-496c-80e4-5aa38139139b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "84ecd5c5-ce79-49b5-bfcc-5a4173c5c666",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ab81bf0-6849-47ce-93c0-c794b3998918",
        "cursor": {
          "ref": "e669747a-1187-4826-8cad-8a4adae9718f",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "609b7a9f-45b0-4aa6-8e04-a4477ed01543"
        },
        "item": {
          "id": "1ab81bf0-6849-47ce-93c0-c794b3998918",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e550031c-2865-4cfc-9b71-afed6ce10599",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ab81bf0-6849-47ce-93c0-c794b3998918",
        "cursor": {
          "ref": "e669747a-1187-4826-8cad-8a4adae9718f",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "609b7a9f-45b0-4aa6-8e04-a4477ed01543"
        },
        "item": {
          "id": "1ab81bf0-6849-47ce-93c0-c794b3998918",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e550031c-2865-4cfc-9b71-afed6ce10599",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d7b920e-a96b-4592-9717-897295145b20",
        "cursor": {
          "ref": "e3c1c925-fb49-4764-aa21-c2113c0b6836",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b80c020d-1a58-4266-abd0-08c3442c1b9c"
        },
        "item": {
          "id": "6d7b920e-a96b-4592-9717-897295145b20",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "cf894458-b7e9-437f-aec9-dff26a7a1d59",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d7b920e-a96b-4592-9717-897295145b20",
        "cursor": {
          "ref": "e3c1c925-fb49-4764-aa21-c2113c0b6836",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b80c020d-1a58-4266-abd0-08c3442c1b9c"
        },
        "item": {
          "id": "6d7b920e-a96b-4592-9717-897295145b20",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "cf894458-b7e9-437f-aec9-dff26a7a1d59",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbfc1f66-1cb5-4861-a9d7-fbb10901180d",
        "cursor": {
          "ref": "850f0e24-8451-44bc-8897-59bd51045d36",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "cc38b034-4046-488e-b422-edffd5ce5bb9"
        },
        "item": {
          "id": "bbfc1f66-1cb5-4861-a9d7-fbb10901180d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "51588847-f167-479d-927c-e755fff743fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbfc1f66-1cb5-4861-a9d7-fbb10901180d",
        "cursor": {
          "ref": "850f0e24-8451-44bc-8897-59bd51045d36",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "cc38b034-4046-488e-b422-edffd5ce5bb9"
        },
        "item": {
          "id": "bbfc1f66-1cb5-4861-a9d7-fbb10901180d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "51588847-f167-479d-927c-e755fff743fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e29fef8-7b2a-44ae-a69e-6feb807d2ec6",
        "cursor": {
          "ref": "73756331-4fef-485d-91ec-3531ecf7980b",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c34bdea0-b27b-4fd7-8987-4b307cb193e5"
        },
        "item": {
          "id": "3e29fef8-7b2a-44ae-a69e-6feb807d2ec6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c2827cf9-2395-4324-a852-83a70ddbd7c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e29fef8-7b2a-44ae-a69e-6feb807d2ec6",
        "cursor": {
          "ref": "73756331-4fef-485d-91ec-3531ecf7980b",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c34bdea0-b27b-4fd7-8987-4b307cb193e5"
        },
        "item": {
          "id": "3e29fef8-7b2a-44ae-a69e-6feb807d2ec6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c2827cf9-2395-4324-a852-83a70ddbd7c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "538871c9-9a61-462e-9e65-8ef8c29458ca",
        "cursor": {
          "ref": "b051fb0c-2903-4f64-8858-a86c1616a33b",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "62b057e5-56ce-430c-94d9-f717abebb9b0"
        },
        "item": {
          "id": "538871c9-9a61-462e-9e65-8ef8c29458ca",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d69fe1e3-e345-4b2c-9689-a4f7297d1a74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "538871c9-9a61-462e-9e65-8ef8c29458ca",
        "cursor": {
          "ref": "b051fb0c-2903-4f64-8858-a86c1616a33b",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "62b057e5-56ce-430c-94d9-f717abebb9b0"
        },
        "item": {
          "id": "538871c9-9a61-462e-9e65-8ef8c29458ca",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d69fe1e3-e345-4b2c-9689-a4f7297d1a74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71471f39-148d-4946-9772-488a981acc30",
        "cursor": {
          "ref": "652a0497-e0ae-4add-a1aa-d3c9fc73788b",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7e8a2c4d-c8a8-42d0-a2f5-d38dbee7627e"
        },
        "item": {
          "id": "71471f39-148d-4946-9772-488a981acc30",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5d7ce5bc-080d-4ae7-a3ea-86a3348a49a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71471f39-148d-4946-9772-488a981acc30",
        "cursor": {
          "ref": "652a0497-e0ae-4add-a1aa-d3c9fc73788b",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7e8a2c4d-c8a8-42d0-a2f5-d38dbee7627e"
        },
        "item": {
          "id": "71471f39-148d-4946-9772-488a981acc30",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5d7ce5bc-080d-4ae7-a3ea-86a3348a49a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "013068b9-e726-463c-a95c-a17dafbee113",
        "cursor": {
          "ref": "2aa5085d-0608-4644-99a9-c3190eeb18a0",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3d489ac7-31ad-4ca3-81b1-f1e4fc91e59a"
        },
        "item": {
          "id": "013068b9-e726-463c-a95c-a17dafbee113",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "9496aac3-62d6-4801-abe6-b72318ce7789",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "013068b9-e726-463c-a95c-a17dafbee113",
        "cursor": {
          "ref": "2aa5085d-0608-4644-99a9-c3190eeb18a0",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3d489ac7-31ad-4ca3-81b1-f1e4fc91e59a"
        },
        "item": {
          "id": "013068b9-e726-463c-a95c-a17dafbee113",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "9496aac3-62d6-4801-abe6-b72318ce7789",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc18079-b391-4560-9514-5230344b7822",
        "cursor": {
          "ref": "8bdfd509-7c10-4170-b645-c3a3324b8b2b",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "558078ee-a709-46e8-87d8-f564e8786029"
        },
        "item": {
          "id": "fcc18079-b391-4560-9514-5230344b7822",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "9120617e-cd73-44d2-9fc1-462e62934029",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc18079-b391-4560-9514-5230344b7822",
        "cursor": {
          "ref": "8bdfd509-7c10-4170-b645-c3a3324b8b2b",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "558078ee-a709-46e8-87d8-f564e8786029"
        },
        "item": {
          "id": "fcc18079-b391-4560-9514-5230344b7822",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "9120617e-cd73-44d2-9fc1-462e62934029",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3e93850-9e18-46a6-bb90-a5bda8c94775",
        "cursor": {
          "ref": "15142433-f6a3-46ea-b22b-391cabf69d3a",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4fa68109-6d9b-43c0-abe5-e37323a78077"
        },
        "item": {
          "id": "b3e93850-9e18-46a6-bb90-a5bda8c94775",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6959bc1e-ef9a-41e5-8b71-3473edf40960",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3e93850-9e18-46a6-bb90-a5bda8c94775",
        "cursor": {
          "ref": "15142433-f6a3-46ea-b22b-391cabf69d3a",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4fa68109-6d9b-43c0-abe5-e37323a78077"
        },
        "item": {
          "id": "b3e93850-9e18-46a6-bb90-a5bda8c94775",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6959bc1e-ef9a-41e5-8b71-3473edf40960",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22bf1658-e273-4af9-87da-b69764ec28a4",
        "cursor": {
          "ref": "1b16254d-babb-46a3-846d-18f999210ff7",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "61728460-9196-4ad1-90ff-66218a6348cc"
        },
        "item": {
          "id": "22bf1658-e273-4af9-87da-b69764ec28a4",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "746699fd-a40b-492d-ac82-200df0dc767c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22bf1658-e273-4af9-87da-b69764ec28a4",
        "cursor": {
          "ref": "1b16254d-babb-46a3-846d-18f999210ff7",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "61728460-9196-4ad1-90ff-66218a6348cc"
        },
        "item": {
          "id": "22bf1658-e273-4af9-87da-b69764ec28a4",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "746699fd-a40b-492d-ac82-200df0dc767c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac93381-71e1-47a9-ab15-dde82957dbb0",
        "cursor": {
          "ref": "3cfb8655-d74d-47eb-8e4a-fcae01607d01",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ea5e12a6-9566-463c-b427-8157cb10f177"
        },
        "item": {
          "id": "4ac93381-71e1-47a9-ab15-dde82957dbb0",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "77fc912e-f3f5-4391-b6dc-4416ebd73469",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac93381-71e1-47a9-ab15-dde82957dbb0",
        "cursor": {
          "ref": "3cfb8655-d74d-47eb-8e4a-fcae01607d01",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ea5e12a6-9566-463c-b427-8157cb10f177"
        },
        "item": {
          "id": "4ac93381-71e1-47a9-ab15-dde82957dbb0",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "77fc912e-f3f5-4391-b6dc-4416ebd73469",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73f8381-3568-4c21-9302-498ae1b2f160",
        "cursor": {
          "ref": "83358a30-f21f-4f5d-a1cd-407555b6df7e",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "aff8c533-9a03-4604-b735-e4b94051d75c"
        },
        "item": {
          "id": "e73f8381-3568-4c21-9302-498ae1b2f160",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "70527548-bd7d-4240-8426-e8867de6beca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73f8381-3568-4c21-9302-498ae1b2f160",
        "cursor": {
          "ref": "83358a30-f21f-4f5d-a1cd-407555b6df7e",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "aff8c533-9a03-4604-b735-e4b94051d75c"
        },
        "item": {
          "id": "e73f8381-3568-4c21-9302-498ae1b2f160",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "70527548-bd7d-4240-8426-e8867de6beca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "640a0c73-3b77-413b-bb0b-efc77021dcd1",
        "cursor": {
          "ref": "e2bd146c-491b-4546-8e63-484d38d9d06b",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "788277b6-30f9-4cd7-afc7-6fd4839e0de6"
        },
        "item": {
          "id": "640a0c73-3b77-413b-bb0b-efc77021dcd1",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4160b185-3acb-4b07-9ac1-793d0c787027",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "640a0c73-3b77-413b-bb0b-efc77021dcd1",
        "cursor": {
          "ref": "e2bd146c-491b-4546-8e63-484d38d9d06b",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "788277b6-30f9-4cd7-afc7-6fd4839e0de6"
        },
        "item": {
          "id": "640a0c73-3b77-413b-bb0b-efc77021dcd1",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4160b185-3acb-4b07-9ac1-793d0c787027",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd0bfa0-e5bb-457e-a0dd-5f066df01ed6",
        "cursor": {
          "ref": "361a0908-8ca1-44b3-98b9-60f937faaa3d",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7f6e94b3-31ee-4ea9-9e80-a23521561d8c"
        },
        "item": {
          "id": "edd0bfa0-e5bb-457e-a0dd-5f066df01ed6",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "02e03258-09fc-49ea-925c-456f5aa4de36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd0bfa0-e5bb-457e-a0dd-5f066df01ed6",
        "cursor": {
          "ref": "361a0908-8ca1-44b3-98b9-60f937faaa3d",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7f6e94b3-31ee-4ea9-9e80-a23521561d8c"
        },
        "item": {
          "id": "edd0bfa0-e5bb-457e-a0dd-5f066df01ed6",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "02e03258-09fc-49ea-925c-456f5aa4de36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "471069ac-91b7-44c3-b2bd-1cf6d8550524",
        "cursor": {
          "ref": "e0a650f4-d885-4d41-97f1-3f77a1f72307",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ebf04bee-b90e-4f27-ab7f-4c894fefa0b8"
        },
        "item": {
          "id": "471069ac-91b7-44c3-b2bd-1cf6d8550524",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "01bc9cc0-a5e0-4ece-bf03-c0d296593346",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "471069ac-91b7-44c3-b2bd-1cf6d8550524",
        "cursor": {
          "ref": "e0a650f4-d885-4d41-97f1-3f77a1f72307",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ebf04bee-b90e-4f27-ab7f-4c894fefa0b8"
        },
        "item": {
          "id": "471069ac-91b7-44c3-b2bd-1cf6d8550524",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "01bc9cc0-a5e0-4ece-bf03-c0d296593346",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f15c9a-4b35-46f2-8bc4-c4e109098bcc",
        "cursor": {
          "ref": "114a30ea-1e3e-42b6-a506-28aa09994624",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1a0eb398-a37e-4ef9-9585-e3b0657c5994"
        },
        "item": {
          "id": "f0f15c9a-4b35-46f2-8bc4-c4e109098bcc",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "015cda4e-dfaa-4763-8e67-7026271d4b8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f15c9a-4b35-46f2-8bc4-c4e109098bcc",
        "cursor": {
          "ref": "114a30ea-1e3e-42b6-a506-28aa09994624",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1a0eb398-a37e-4ef9-9585-e3b0657c5994"
        },
        "item": {
          "id": "f0f15c9a-4b35-46f2-8bc4-c4e109098bcc",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "015cda4e-dfaa-4763-8e67-7026271d4b8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc03f50-697e-497d-81bf-ec6803ce6b47",
        "cursor": {
          "ref": "3c97fe16-f8cd-46c6-8b9c-2431ce738a1f",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3abe798f-1da1-407a-8b31-e293fc295198"
        },
        "item": {
          "id": "5cc03f50-697e-497d-81bf-ec6803ce6b47",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5608a6e2-7652-4279-bc34-5f607eabe551",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc03f50-697e-497d-81bf-ec6803ce6b47",
        "cursor": {
          "ref": "3c97fe16-f8cd-46c6-8b9c-2431ce738a1f",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3abe798f-1da1-407a-8b31-e293fc295198"
        },
        "item": {
          "id": "5cc03f50-697e-497d-81bf-ec6803ce6b47",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5608a6e2-7652-4279-bc34-5f607eabe551",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa45c1a-441c-45b3-975b-e3ff71583391",
        "cursor": {
          "ref": "223a0b7f-6e65-4176-b6a5-54f2a5dcb462",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "dda2009e-6ef1-425c-b4a7-ae86fd1a8c81"
        },
        "item": {
          "id": "2fa45c1a-441c-45b3-975b-e3ff71583391",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1ea76ba9-e4e4-461d-b0de-e6e328971e41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa45c1a-441c-45b3-975b-e3ff71583391",
        "cursor": {
          "ref": "223a0b7f-6e65-4176-b6a5-54f2a5dcb462",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "dda2009e-6ef1-425c-b4a7-ae86fd1a8c81"
        },
        "item": {
          "id": "2fa45c1a-441c-45b3-975b-e3ff71583391",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1ea76ba9-e4e4-461d-b0de-e6e328971e41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc125c4-9821-402b-a91b-abe4cffb5de4",
        "cursor": {
          "ref": "63978952-c5bd-43fb-96b8-1d96ec7af945",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "82041d4d-019f-4a81-a328-563b25bae396"
        },
        "item": {
          "id": "6cc125c4-9821-402b-a91b-abe4cffb5de4",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f03ae3f7-9783-4bb0-a028-92bb9f9cc231",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc125c4-9821-402b-a91b-abe4cffb5de4",
        "cursor": {
          "ref": "63978952-c5bd-43fb-96b8-1d96ec7af945",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "82041d4d-019f-4a81-a328-563b25bae396"
        },
        "item": {
          "id": "6cc125c4-9821-402b-a91b-abe4cffb5de4",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f03ae3f7-9783-4bb0-a028-92bb9f9cc231",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0d05c7-3187-4178-ad75-d67aff8506e6",
        "cursor": {
          "ref": "ee9d2ebc-a05b-44fe-b153-49d51332daec",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "acfbe07f-c368-4ff9-8876-88503f5d6b30"
        },
        "item": {
          "id": "3b0d05c7-3187-4178-ad75-d67aff8506e6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "07c135de-f56a-4868-99b9-e4e48a9ceb67",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0d05c7-3187-4178-ad75-d67aff8506e6",
        "cursor": {
          "ref": "ee9d2ebc-a05b-44fe-b153-49d51332daec",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "acfbe07f-c368-4ff9-8876-88503f5d6b30"
        },
        "item": {
          "id": "3b0d05c7-3187-4178-ad75-d67aff8506e6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "07c135de-f56a-4868-99b9-e4e48a9ceb67",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e718831-b8ee-40ff-bb09-4d5afa18f655",
        "cursor": {
          "ref": "23303918-75a1-46ee-be4b-12db24b82710",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "12850a5d-8820-434a-9faa-d29dc8abfa59"
        },
        "item": {
          "id": "1e718831-b8ee-40ff-bb09-4d5afa18f655",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c4587811-1d9e-412e-842b-996b052004ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e718831-b8ee-40ff-bb09-4d5afa18f655",
        "cursor": {
          "ref": "23303918-75a1-46ee-be4b-12db24b82710",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "12850a5d-8820-434a-9faa-d29dc8abfa59"
        },
        "item": {
          "id": "1e718831-b8ee-40ff-bb09-4d5afa18f655",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c4587811-1d9e-412e-842b-996b052004ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b172d24-8984-4389-a00e-cec8a8d7b99d",
        "cursor": {
          "ref": "d2357230-ec20-4189-8419-5334548a09ad",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "73e60a7c-4495-4207-8238-98891ef2f348"
        },
        "item": {
          "id": "5b172d24-8984-4389-a00e-cec8a8d7b99d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "80a3602d-4475-491a-bba5-82902dffb10f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b172d24-8984-4389-a00e-cec8a8d7b99d",
        "cursor": {
          "ref": "d2357230-ec20-4189-8419-5334548a09ad",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "73e60a7c-4495-4207-8238-98891ef2f348"
        },
        "item": {
          "id": "5b172d24-8984-4389-a00e-cec8a8d7b99d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "80a3602d-4475-491a-bba5-82902dffb10f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e26b31d8-decd-4209-bad2-d5643a234490",
        "cursor": {
          "ref": "9c14b35d-4d1a-4438-acc8-b28ebd7bcf32",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "48fa2901-0bd9-403d-afc8-c07f07a38c23"
        },
        "item": {
          "id": "e26b31d8-decd-4209-bad2-d5643a234490",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "00e67ec5-225b-42bc-be84-1e99cd23d0ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e26b31d8-decd-4209-bad2-d5643a234490",
        "cursor": {
          "ref": "9c14b35d-4d1a-4438-acc8-b28ebd7bcf32",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "48fa2901-0bd9-403d-afc8-c07f07a38c23"
        },
        "item": {
          "id": "e26b31d8-decd-4209-bad2-d5643a234490",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "00e67ec5-225b-42bc-be84-1e99cd23d0ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d617805-e9a4-4570-a82e-493da99527f1",
        "cursor": {
          "ref": "1991aa9a-dc21-434f-a723-3a4bf674f1fc",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "324565ce-8247-4ced-aa7e-97b3ef7f5b25"
        },
        "item": {
          "id": "9d617805-e9a4-4570-a82e-493da99527f1",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e5594027-89a1-4307-af85-196ad7dd233b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d617805-e9a4-4570-a82e-493da99527f1",
        "cursor": {
          "ref": "1991aa9a-dc21-434f-a723-3a4bf674f1fc",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "324565ce-8247-4ced-aa7e-97b3ef7f5b25"
        },
        "item": {
          "id": "9d617805-e9a4-4570-a82e-493da99527f1",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e5594027-89a1-4307-af85-196ad7dd233b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "758d3bd0-488f-4dab-b9ed-12a20be8c2d6",
        "cursor": {
          "ref": "08aaba66-9779-4926-9dd4-97fe37cdc234",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b959cb1b-35be-47f2-84cd-0f58278d25c6"
        },
        "item": {
          "id": "758d3bd0-488f-4dab-b9ed-12a20be8c2d6",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "145741ae-18f9-4579-bbd7-de87c03b6551",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "758d3bd0-488f-4dab-b9ed-12a20be8c2d6",
        "cursor": {
          "ref": "08aaba66-9779-4926-9dd4-97fe37cdc234",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b959cb1b-35be-47f2-84cd-0f58278d25c6"
        },
        "item": {
          "id": "758d3bd0-488f-4dab-b9ed-12a20be8c2d6",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "145741ae-18f9-4579-bbd7-de87c03b6551",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813e7a71-178c-4f4d-bf71-6a3ea7db3956",
        "cursor": {
          "ref": "016bef3b-1142-4cc4-a0d5-1422aea8c2f7",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "750b4c56-2f0f-4aea-aa3c-0189e97970e9"
        },
        "item": {
          "id": "813e7a71-178c-4f4d-bf71-6a3ea7db3956",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5fdc6809-b440-4877-95b5-9cefca363a2f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813e7a71-178c-4f4d-bf71-6a3ea7db3956",
        "cursor": {
          "ref": "016bef3b-1142-4cc4-a0d5-1422aea8c2f7",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "750b4c56-2f0f-4aea-aa3c-0189e97970e9"
        },
        "item": {
          "id": "813e7a71-178c-4f4d-bf71-6a3ea7db3956",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5fdc6809-b440-4877-95b5-9cefca363a2f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce0f8c0c-3dd1-4812-a2d4-8f4a7ae6d05d",
        "cursor": {
          "ref": "751c8a64-6bf9-4383-85bc-f354ec4a8e47",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "cebcadee-1b7c-4c90-9625-32187a8112b3"
        },
        "item": {
          "id": "ce0f8c0c-3dd1-4812-a2d4-8f4a7ae6d05d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a0b66748-251f-45c5-a794-f296c7051902",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce0f8c0c-3dd1-4812-a2d4-8f4a7ae6d05d",
        "cursor": {
          "ref": "751c8a64-6bf9-4383-85bc-f354ec4a8e47",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "cebcadee-1b7c-4c90-9625-32187a8112b3"
        },
        "item": {
          "id": "ce0f8c0c-3dd1-4812-a2d4-8f4a7ae6d05d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a0b66748-251f-45c5-a794-f296c7051902",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aacfe8c-b86e-4e1d-b509-d236a750bff6",
        "cursor": {
          "ref": "7105346d-09be-4e9d-bc2b-6d41777981a1",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4850169a-5769-4b23-9b83-d17ab5efcb33"
        },
        "item": {
          "id": "8aacfe8c-b86e-4e1d-b509-d236a750bff6",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1d1771c3-e917-41ab-a0dd-6608d8d5c963",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aacfe8c-b86e-4e1d-b509-d236a750bff6",
        "cursor": {
          "ref": "7105346d-09be-4e9d-bc2b-6d41777981a1",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4850169a-5769-4b23-9b83-d17ab5efcb33"
        },
        "item": {
          "id": "8aacfe8c-b86e-4e1d-b509-d236a750bff6",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1d1771c3-e917-41ab-a0dd-6608d8d5c963",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73d5fe8-c650-45d1-8a31-fa664ff23156",
        "cursor": {
          "ref": "8c67df25-4b28-46d7-a555-0c8f26a725f5",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "fd56228c-bd55-4f5d-afad-d84ad8d7e3ea"
        },
        "item": {
          "id": "a73d5fe8-c650-45d1-8a31-fa664ff23156",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0bfee30d-dd46-4895-b090-69525fe8af29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73d5fe8-c650-45d1-8a31-fa664ff23156",
        "cursor": {
          "ref": "8c67df25-4b28-46d7-a555-0c8f26a725f5",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "fd56228c-bd55-4f5d-afad-d84ad8d7e3ea"
        },
        "item": {
          "id": "a73d5fe8-c650-45d1-8a31-fa664ff23156",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0bfee30d-dd46-4895-b090-69525fe8af29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4782558c-b0a8-47fd-9b38-43285bd32f2b",
        "cursor": {
          "ref": "ab61b505-d967-4aca-956f-38718f0ce9c2",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "64336408-0959-4e20-9884-8cd155452eec"
        },
        "item": {
          "id": "4782558c-b0a8-47fd-9b38-43285bd32f2b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ae54ad77-464d-4898-83cd-6200ab5cfa8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4782558c-b0a8-47fd-9b38-43285bd32f2b",
        "cursor": {
          "ref": "ab61b505-d967-4aca-956f-38718f0ce9c2",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "64336408-0959-4e20-9884-8cd155452eec"
        },
        "item": {
          "id": "4782558c-b0a8-47fd-9b38-43285bd32f2b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ae54ad77-464d-4898-83cd-6200ab5cfa8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c58177-f57b-45d2-8792-15c67c6083d3",
        "cursor": {
          "ref": "39c615e4-d5b5-4da7-87b2-c74f2d9ab6f4",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "65936f7e-1e76-4949-880f-21b1691717c0"
        },
        "item": {
          "id": "41c58177-f57b-45d2-8792-15c67c6083d3",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d9dae7a8-defb-450d-912c-19cb8b9c9fff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c58177-f57b-45d2-8792-15c67c6083d3",
        "cursor": {
          "ref": "39c615e4-d5b5-4da7-87b2-c74f2d9ab6f4",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "65936f7e-1e76-4949-880f-21b1691717c0"
        },
        "item": {
          "id": "41c58177-f57b-45d2-8792-15c67c6083d3",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d9dae7a8-defb-450d-912c-19cb8b9c9fff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a45124c-2592-4260-9900-8c47ade61eea",
        "cursor": {
          "ref": "d7b3e7b9-554b-403e-9692-8b46047e9210",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ac93b370-6948-43f0-bc5e-792dd34c5650"
        },
        "item": {
          "id": "8a45124c-2592-4260-9900-8c47ade61eea",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4e036619-4c1b-4f2f-902b-24686126982f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a45124c-2592-4260-9900-8c47ade61eea",
        "cursor": {
          "ref": "d7b3e7b9-554b-403e-9692-8b46047e9210",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ac93b370-6948-43f0-bc5e-792dd34c5650"
        },
        "item": {
          "id": "8a45124c-2592-4260-9900-8c47ade61eea",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4e036619-4c1b-4f2f-902b-24686126982f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e00c07d1-3929-4b08-9a26-5896d8cc6e9c",
        "cursor": {
          "ref": "c3c00d98-f91b-48b7-ac89-3e23652ac16e",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8a4d5bd6-ba88-4001-affd-8eb6bfafbe1d"
        },
        "item": {
          "id": "e00c07d1-3929-4b08-9a26-5896d8cc6e9c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6a331d2f-d1ff-4854-998e-28a86478c469",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e00c07d1-3929-4b08-9a26-5896d8cc6e9c",
        "cursor": {
          "ref": "c3c00d98-f91b-48b7-ac89-3e23652ac16e",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8a4d5bd6-ba88-4001-affd-8eb6bfafbe1d"
        },
        "item": {
          "id": "e00c07d1-3929-4b08-9a26-5896d8cc6e9c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6a331d2f-d1ff-4854-998e-28a86478c469",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b9d77a-c160-4b76-8510-cca36b456a1e",
        "cursor": {
          "ref": "af9de0c2-86b8-4a17-9ad3-0796a27c8a4e",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a96e8de6-7d92-44a0-8230-a3788b685576"
        },
        "item": {
          "id": "60b9d77a-c160-4b76-8510-cca36b456a1e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8ba33dea-c285-48c0-9a36-af605c47a03b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b9d77a-c160-4b76-8510-cca36b456a1e",
        "cursor": {
          "ref": "af9de0c2-86b8-4a17-9ad3-0796a27c8a4e",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a96e8de6-7d92-44a0-8230-a3788b685576"
        },
        "item": {
          "id": "60b9d77a-c160-4b76-8510-cca36b456a1e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8ba33dea-c285-48c0-9a36-af605c47a03b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16aa6981-77b4-41ba-8b26-b6e978cee974",
        "cursor": {
          "ref": "0dd1de2c-deb0-47de-88af-8620585024e7",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1a79a407-8a2d-4695-9465-eb21ef7f71d9"
        },
        "item": {
          "id": "16aa6981-77b4-41ba-8b26-b6e978cee974",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e3cc5f98-4d7c-4857-abc8-d8a95b9b6a7f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16aa6981-77b4-41ba-8b26-b6e978cee974",
        "cursor": {
          "ref": "0dd1de2c-deb0-47de-88af-8620585024e7",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1a79a407-8a2d-4695-9465-eb21ef7f71d9"
        },
        "item": {
          "id": "16aa6981-77b4-41ba-8b26-b6e978cee974",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e3cc5f98-4d7c-4857-abc8-d8a95b9b6a7f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1824e3dd-1d57-4c73-98a7-1ce241f51f5e",
        "cursor": {
          "ref": "65efab3b-6ccd-4b2d-a23c-c8613889d6b9",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "31197fb6-7601-498b-a8e0-f940d0221f81"
        },
        "item": {
          "id": "1824e3dd-1d57-4c73-98a7-1ce241f51f5e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2a20945c-4b3c-492c-a503-094fb09f63c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1824e3dd-1d57-4c73-98a7-1ce241f51f5e",
        "cursor": {
          "ref": "65efab3b-6ccd-4b2d-a23c-c8613889d6b9",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "31197fb6-7601-498b-a8e0-f940d0221f81"
        },
        "item": {
          "id": "1824e3dd-1d57-4c73-98a7-1ce241f51f5e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2a20945c-4b3c-492c-a503-094fb09f63c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4abda5a1-2db6-4c31-b589-cc8b829af79f",
        "cursor": {
          "ref": "84de2660-9e8f-4e07-8ecd-6693fc4c7df6",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "36f9557a-21c6-4b59-b803-ab0e8bd3ebba"
        },
        "item": {
          "id": "4abda5a1-2db6-4c31-b589-cc8b829af79f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "89be2f8b-1e71-4ac9-a873-15f1240f5a81",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4abda5a1-2db6-4c31-b589-cc8b829af79f",
        "cursor": {
          "ref": "84de2660-9e8f-4e07-8ecd-6693fc4c7df6",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "36f9557a-21c6-4b59-b803-ab0e8bd3ebba"
        },
        "item": {
          "id": "4abda5a1-2db6-4c31-b589-cc8b829af79f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "89be2f8b-1e71-4ac9-a873-15f1240f5a81",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "482c615b-fe75-444a-a484-e9e3cc52674d",
        "cursor": {
          "ref": "8a8fb403-9933-4831-807f-60b36e1741f8",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "8982aa86-7444-41e8-82d3-3e55cf1a3ffd"
        },
        "item": {
          "id": "482c615b-fe75-444a-a484-e9e3cc52674d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "5dec5755-aa8f-4a49-9398-99e57b3bb0a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "482c615b-fe75-444a-a484-e9e3cc52674d",
        "cursor": {
          "ref": "8a8fb403-9933-4831-807f-60b36e1741f8",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "8982aa86-7444-41e8-82d3-3e55cf1a3ffd"
        },
        "item": {
          "id": "482c615b-fe75-444a-a484-e9e3cc52674d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "5dec5755-aa8f-4a49-9398-99e57b3bb0a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f8e210-1ecb-49ea-811d-e90cc58f78e9",
        "cursor": {
          "ref": "e033fe65-7f2a-49f0-9f22-2b0b7c8f7c70",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f5b6b0ec-9226-406d-85a9-632f67eb5998"
        },
        "item": {
          "id": "12f8e210-1ecb-49ea-811d-e90cc58f78e9",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d7587672-76e7-474f-92a2-8e09ede84590",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f8e210-1ecb-49ea-811d-e90cc58f78e9",
        "cursor": {
          "ref": "e033fe65-7f2a-49f0-9f22-2b0b7c8f7c70",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f5b6b0ec-9226-406d-85a9-632f67eb5998"
        },
        "item": {
          "id": "12f8e210-1ecb-49ea-811d-e90cc58f78e9",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d7587672-76e7-474f-92a2-8e09ede84590",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34608e1f-a64d-464e-8b35-2ad6814b49e7",
        "cursor": {
          "ref": "d450c41d-2534-48a1-9d8e-57458724f87c",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "d58380df-8844-4c85-913b-e50bf7dfcb6b"
        },
        "item": {
          "id": "34608e1f-a64d-464e-8b35-2ad6814b49e7",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7b13bd2d-bf09-434c-b154-c7b0e18e2a13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34608e1f-a64d-464e-8b35-2ad6814b49e7",
        "cursor": {
          "ref": "d450c41d-2534-48a1-9d8e-57458724f87c",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "d58380df-8844-4c85-913b-e50bf7dfcb6b"
        },
        "item": {
          "id": "34608e1f-a64d-464e-8b35-2ad6814b49e7",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7b13bd2d-bf09-434c-b154-c7b0e18e2a13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566af47d-a04e-47bc-b9e1-5bd8498e94b2",
        "cursor": {
          "ref": "847e742f-8d06-4aed-8799-af924dad1d26",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f4b49ecb-c1a0-4531-beb0-a3cd6c6cd1c3"
        },
        "item": {
          "id": "566af47d-a04e-47bc-b9e1-5bd8498e94b2",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4e436268-3cd2-46d2-98d7-459838c1c1bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566af47d-a04e-47bc-b9e1-5bd8498e94b2",
        "cursor": {
          "ref": "847e742f-8d06-4aed-8799-af924dad1d26",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f4b49ecb-c1a0-4531-beb0-a3cd6c6cd1c3"
        },
        "item": {
          "id": "566af47d-a04e-47bc-b9e1-5bd8498e94b2",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4e436268-3cd2-46d2-98d7-459838c1c1bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce45e9c-27f1-416f-99cd-2b3a82c65e35",
        "cursor": {
          "ref": "871dc60d-3df7-438d-b6be-bbf5dc6357b7",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "39d2ae5a-c722-4430-a391-b278655cc47b"
        },
        "item": {
          "id": "3ce45e9c-27f1-416f-99cd-2b3a82c65e35",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f788b1c4-e96a-4b5d-8273-1d0a4b2e50a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce45e9c-27f1-416f-99cd-2b3a82c65e35",
        "cursor": {
          "ref": "871dc60d-3df7-438d-b6be-bbf5dc6357b7",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "39d2ae5a-c722-4430-a391-b278655cc47b"
        },
        "item": {
          "id": "3ce45e9c-27f1-416f-99cd-2b3a82c65e35",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f788b1c4-e96a-4b5d-8273-1d0a4b2e50a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d5ae51-b73f-460f-a903-c6c936a7f661",
        "cursor": {
          "ref": "fe438c1a-ab1f-4f87-8249-f48ff4241025",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "fe5970ab-6283-4b5e-a340-f919d0548eb5"
        },
        "item": {
          "id": "c3d5ae51-b73f-460f-a903-c6c936a7f661",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2061073c-e10a-4019-8533-426e8853d12d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d5ae51-b73f-460f-a903-c6c936a7f661",
        "cursor": {
          "ref": "fe438c1a-ab1f-4f87-8249-f48ff4241025",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "fe5970ab-6283-4b5e-a340-f919d0548eb5"
        },
        "item": {
          "id": "c3d5ae51-b73f-460f-a903-c6c936a7f661",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2061073c-e10a-4019-8533-426e8853d12d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f007cbc5-4148-4685-93c5-4a354a896287",
        "cursor": {
          "ref": "5c69c114-78de-49a4-b90c-30de676a2cf4",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "20f21432-f48d-4051-834d-355092403f80"
        },
        "item": {
          "id": "f007cbc5-4148-4685-93c5-4a354a896287",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d1d91608-79d9-4707-97a9-c28db3035f2c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f007cbc5-4148-4685-93c5-4a354a896287",
        "cursor": {
          "ref": "5c69c114-78de-49a4-b90c-30de676a2cf4",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "20f21432-f48d-4051-834d-355092403f80"
        },
        "item": {
          "id": "f007cbc5-4148-4685-93c5-4a354a896287",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d1d91608-79d9-4707-97a9-c28db3035f2c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6971b381-00d1-4ac1-a985-f31645123712",
        "cursor": {
          "ref": "dd140b32-7d4a-432a-a856-825ac316ff6d",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "df00a5f7-e83a-4b99-a804-7c5585a2543f"
        },
        "item": {
          "id": "6971b381-00d1-4ac1-a985-f31645123712",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1cc8f8b4-d7c2-4c92-8d32-f9ec2c9f32e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6971b381-00d1-4ac1-a985-f31645123712",
        "cursor": {
          "ref": "dd140b32-7d4a-432a-a856-825ac316ff6d",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "df00a5f7-e83a-4b99-a804-7c5585a2543f"
        },
        "item": {
          "id": "6971b381-00d1-4ac1-a985-f31645123712",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1cc8f8b4-d7c2-4c92-8d32-f9ec2c9f32e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7d5ed8e-ce52-4796-9535-8571fa643df7",
        "cursor": {
          "ref": "cb669a81-757a-4e2e-8d35-3a32e55ea82f",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "50bb1045-8b1a-4a24-94d6-0001ebd671fc"
        },
        "item": {
          "id": "b7d5ed8e-ce52-4796-9535-8571fa643df7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ffa18fb4-b2f2-4088-8d3e-fc2b510306b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7d5ed8e-ce52-4796-9535-8571fa643df7",
        "cursor": {
          "ref": "cb669a81-757a-4e2e-8d35-3a32e55ea82f",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "50bb1045-8b1a-4a24-94d6-0001ebd671fc"
        },
        "item": {
          "id": "b7d5ed8e-ce52-4796-9535-8571fa643df7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ffa18fb4-b2f2-4088-8d3e-fc2b510306b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3df4cd-018d-4dbe-b190-67bbe6a4464e",
        "cursor": {
          "ref": "849ceca9-e310-4e6a-a077-d09b28ef94f4",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a452460e-4039-4ad8-b6fe-263809366efa"
        },
        "item": {
          "id": "5c3df4cd-018d-4dbe-b190-67bbe6a4464e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e2438410-7693-4971-873b-66de1cba8f75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3df4cd-018d-4dbe-b190-67bbe6a4464e",
        "cursor": {
          "ref": "849ceca9-e310-4e6a-a077-d09b28ef94f4",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a452460e-4039-4ad8-b6fe-263809366efa"
        },
        "item": {
          "id": "5c3df4cd-018d-4dbe-b190-67bbe6a4464e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e2438410-7693-4971-873b-66de1cba8f75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c77edfd-69d3-4250-9956-f5632869c0a9",
        "cursor": {
          "ref": "8fae6769-c5c2-455d-b74e-1cd76542f9c1",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c73afeee-588b-40a1-bb2b-32f9d653565d"
        },
        "item": {
          "id": "2c77edfd-69d3-4250-9956-f5632869c0a9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "cacb861b-e5f4-4661-8390-ee800702cd5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c77edfd-69d3-4250-9956-f5632869c0a9",
        "cursor": {
          "ref": "8fae6769-c5c2-455d-b74e-1cd76542f9c1",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c73afeee-588b-40a1-bb2b-32f9d653565d"
        },
        "item": {
          "id": "2c77edfd-69d3-4250-9956-f5632869c0a9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "cacb861b-e5f4-4661-8390-ee800702cd5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "079408a7-a760-40b1-8b64-28b4170218ae",
        "cursor": {
          "ref": "794ecb34-b18d-401b-ace8-4bd53a69d600",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1827f7f6-6e37-472f-9adb-c1fb48acffc4"
        },
        "item": {
          "id": "079408a7-a760-40b1-8b64-28b4170218ae",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9a5a79c5-be20-468e-a893-d7718b0a3364",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "079408a7-a760-40b1-8b64-28b4170218ae",
        "cursor": {
          "ref": "794ecb34-b18d-401b-ace8-4bd53a69d600",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1827f7f6-6e37-472f-9adb-c1fb48acffc4"
        },
        "item": {
          "id": "079408a7-a760-40b1-8b64-28b4170218ae",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9a5a79c5-be20-468e-a893-d7718b0a3364",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0abcfb7d-e9ff-4fab-a44a-28a15ba22978",
        "cursor": {
          "ref": "fe2077b5-f8b7-4a64-9f51-41fc298b25e6",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "176e741b-f4b9-4b83-b8f8-35e93aa42911"
        },
        "item": {
          "id": "0abcfb7d-e9ff-4fab-a44a-28a15ba22978",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "4a7da6b9-ae1f-45cb-863b-2bf9e24fcdd4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0abcfb7d-e9ff-4fab-a44a-28a15ba22978",
        "cursor": {
          "ref": "fe2077b5-f8b7-4a64-9f51-41fc298b25e6",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "176e741b-f4b9-4b83-b8f8-35e93aa42911"
        },
        "item": {
          "id": "0abcfb7d-e9ff-4fab-a44a-28a15ba22978",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "4a7da6b9-ae1f-45cb-863b-2bf9e24fcdd4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7722f33b-fbc0-43af-a593-0b92ad8cd65b",
        "cursor": {
          "ref": "ecdf4062-96f8-47da-bc7c-f6bf8722d80e",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "faf2d2cc-e975-4cc9-95b4-707b489a8563"
        },
        "item": {
          "id": "7722f33b-fbc0-43af-a593-0b92ad8cd65b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "637c0249-3457-479b-b018-82f096038747",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7722f33b-fbc0-43af-a593-0b92ad8cd65b",
        "cursor": {
          "ref": "ecdf4062-96f8-47da-bc7c-f6bf8722d80e",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "faf2d2cc-e975-4cc9-95b4-707b489a8563"
        },
        "item": {
          "id": "7722f33b-fbc0-43af-a593-0b92ad8cd65b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "637c0249-3457-479b-b018-82f096038747",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f10a48-2bdd-4f94-bff1-bd11cbe5188e",
        "cursor": {
          "ref": "9f748f50-37ac-44bd-b0f3-d4f0203d0f9a",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3ff65a4c-a979-4494-a048-09f3f9764f5b"
        },
        "item": {
          "id": "29f10a48-2bdd-4f94-bff1-bd11cbe5188e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4135647d-2599-402c-9a7f-1caed1661fd4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f10a48-2bdd-4f94-bff1-bd11cbe5188e",
        "cursor": {
          "ref": "9f748f50-37ac-44bd-b0f3-d4f0203d0f9a",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3ff65a4c-a979-4494-a048-09f3f9764f5b"
        },
        "item": {
          "id": "29f10a48-2bdd-4f94-bff1-bd11cbe5188e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4135647d-2599-402c-9a7f-1caed1661fd4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3025949a-b2a9-448a-8fc2-6f353c76c10a",
        "cursor": {
          "ref": "eb2352d2-ca97-42c6-bfc7-035daad43492",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ec0e47c7-49f3-44a1-b456-436664508154"
        },
        "item": {
          "id": "3025949a-b2a9-448a-8fc2-6f353c76c10a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d3ca73b0-cf3a-4fae-b79b-db169a51c488",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3025949a-b2a9-448a-8fc2-6f353c76c10a",
        "cursor": {
          "ref": "eb2352d2-ca97-42c6-bfc7-035daad43492",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ec0e47c7-49f3-44a1-b456-436664508154"
        },
        "item": {
          "id": "3025949a-b2a9-448a-8fc2-6f353c76c10a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d3ca73b0-cf3a-4fae-b79b-db169a51c488",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1eb6021-8cf5-4977-961f-4f45846201d4",
        "cursor": {
          "ref": "8550aa7c-f08b-400e-a269-5692fa14de7f",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e1455296-e0c4-4476-9df4-83da15d5006b"
        },
        "item": {
          "id": "a1eb6021-8cf5-4977-961f-4f45846201d4",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c5ec7c1d-d3af-423a-9d97-decb5a7ba7e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1eb6021-8cf5-4977-961f-4f45846201d4",
        "cursor": {
          "ref": "8550aa7c-f08b-400e-a269-5692fa14de7f",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e1455296-e0c4-4476-9df4-83da15d5006b"
        },
        "item": {
          "id": "a1eb6021-8cf5-4977-961f-4f45846201d4",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c5ec7c1d-d3af-423a-9d97-decb5a7ba7e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b082f626-4557-4e4d-98db-26045644a69e",
        "cursor": {
          "ref": "096b11d9-96e8-411e-b6d1-522f9455833a",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4e75d69e-81f7-4bda-a929-91d390cec170"
        },
        "item": {
          "id": "b082f626-4557-4e4d-98db-26045644a69e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "28b7ef20-e589-4fb4-801e-482565838dbc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b082f626-4557-4e4d-98db-26045644a69e",
        "cursor": {
          "ref": "096b11d9-96e8-411e-b6d1-522f9455833a",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4e75d69e-81f7-4bda-a929-91d390cec170"
        },
        "item": {
          "id": "b082f626-4557-4e4d-98db-26045644a69e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "28b7ef20-e589-4fb4-801e-482565838dbc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecc6beac-4831-4693-a1be-0c464b61fc68",
        "cursor": {
          "ref": "8e7eab0f-40b6-41c8-95fb-9727fbd2efc0",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e87ebdd8-15c4-40fc-aef7-12f4fffe6845"
        },
        "item": {
          "id": "ecc6beac-4831-4693-a1be-0c464b61fc68",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5721691e-ebb7-4f4f-ac2f-7f2d1b2593cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecc6beac-4831-4693-a1be-0c464b61fc68",
        "cursor": {
          "ref": "8e7eab0f-40b6-41c8-95fb-9727fbd2efc0",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e87ebdd8-15c4-40fc-aef7-12f4fffe6845"
        },
        "item": {
          "id": "ecc6beac-4831-4693-a1be-0c464b61fc68",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5721691e-ebb7-4f4f-ac2f-7f2d1b2593cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2314006b-00d2-42b1-8b93-196c484f191e",
        "cursor": {
          "ref": "98d4bab3-7b2d-4250-8579-faf9055c375f",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a1c21b19-379f-4767-a5cf-67aaa231ed40"
        },
        "item": {
          "id": "2314006b-00d2-42b1-8b93-196c484f191e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8d2292f1-10f1-43b4-a07e-b864f36271df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2314006b-00d2-42b1-8b93-196c484f191e",
        "cursor": {
          "ref": "98d4bab3-7b2d-4250-8579-faf9055c375f",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a1c21b19-379f-4767-a5cf-67aaa231ed40"
        },
        "item": {
          "id": "2314006b-00d2-42b1-8b93-196c484f191e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8d2292f1-10f1-43b4-a07e-b864f36271df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "834629f0-c04d-446a-b53b-7a81600c711f",
        "cursor": {
          "ref": "4619702f-4bf8-4fcd-959e-8d5c1c12a2b2",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "fe48d0a5-8c1a-4a7c-9b3e-8e0105ed4d68"
        },
        "item": {
          "id": "834629f0-c04d-446a-b53b-7a81600c711f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "226a2fa6-7be1-4dfc-9f13-f29eb3effc45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "834629f0-c04d-446a-b53b-7a81600c711f",
        "cursor": {
          "ref": "4619702f-4bf8-4fcd-959e-8d5c1c12a2b2",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "fe48d0a5-8c1a-4a7c-9b3e-8e0105ed4d68"
        },
        "item": {
          "id": "834629f0-c04d-446a-b53b-7a81600c711f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "226a2fa6-7be1-4dfc-9f13-f29eb3effc45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbaedcb8-b85b-4395-b085-30b4e262fd09",
        "cursor": {
          "ref": "2a4a9c93-6c28-4c87-9430-9738cecfd780",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b4e82475-d71a-41a8-bf71-b21399502f9e"
        },
        "item": {
          "id": "dbaedcb8-b85b-4395-b085-30b4e262fd09",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2fba1367-4635-4edd-84ec-fecaeed1b8fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbaedcb8-b85b-4395-b085-30b4e262fd09",
        "cursor": {
          "ref": "2a4a9c93-6c28-4c87-9430-9738cecfd780",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b4e82475-d71a-41a8-bf71-b21399502f9e"
        },
        "item": {
          "id": "dbaedcb8-b85b-4395-b085-30b4e262fd09",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2fba1367-4635-4edd-84ec-fecaeed1b8fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d6303c-1b89-4eac-843c-4ec1c61dbe71",
        "cursor": {
          "ref": "bb54395e-c562-41d7-b947-d5e866e502eb",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "cbd6beb6-0903-4667-a4e8-2bff9fb780c4"
        },
        "item": {
          "id": "d1d6303c-1b89-4eac-843c-4ec1c61dbe71",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "bba30968-0196-43a4-bf78-22ad57b97acb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d6303c-1b89-4eac-843c-4ec1c61dbe71",
        "cursor": {
          "ref": "bb54395e-c562-41d7-b947-d5e866e502eb",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "cbd6beb6-0903-4667-a4e8-2bff9fb780c4"
        },
        "item": {
          "id": "d1d6303c-1b89-4eac-843c-4ec1c61dbe71",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "bba30968-0196-43a4-bf78-22ad57b97acb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a50157-c97f-4322-b7a2-52367b18f2b8",
        "cursor": {
          "ref": "3892dbae-e076-4129-80a2-c9f0bce6b85b",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "af456a31-e9f8-47f9-a7aa-9b31a491eba2"
        },
        "item": {
          "id": "d7a50157-c97f-4322-b7a2-52367b18f2b8",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6d2e4937-93c7-4012-8684-66b20af87237",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a50157-c97f-4322-b7a2-52367b18f2b8",
        "cursor": {
          "ref": "3892dbae-e076-4129-80a2-c9f0bce6b85b",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "af456a31-e9f8-47f9-a7aa-9b31a491eba2"
        },
        "item": {
          "id": "d7a50157-c97f-4322-b7a2-52367b18f2b8",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6d2e4937-93c7-4012-8684-66b20af87237",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32641764-1974-4436-a6dc-f71be4bdd9e7",
        "cursor": {
          "ref": "6599474f-cde4-43cc-8857-ccfd4310cd90",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "86cfcc7f-7b86-42fb-a763-c5178dae7e23"
        },
        "item": {
          "id": "32641764-1974-4436-a6dc-f71be4bdd9e7",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "fe3c7bbc-c237-4ad4-a152-04ed4152df30",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32641764-1974-4436-a6dc-f71be4bdd9e7",
        "cursor": {
          "ref": "6599474f-cde4-43cc-8857-ccfd4310cd90",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "86cfcc7f-7b86-42fb-a763-c5178dae7e23"
        },
        "item": {
          "id": "32641764-1974-4436-a6dc-f71be4bdd9e7",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "fe3c7bbc-c237-4ad4-a152-04ed4152df30",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569ea7ff-9ffd-48aa-856e-2e79acf035c7",
        "cursor": {
          "ref": "4fb18727-2450-4eea-b855-f6792614a3aa",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "58068dd7-ee85-456a-9006-48569b32f366"
        },
        "item": {
          "id": "569ea7ff-9ffd-48aa-856e-2e79acf035c7",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4ea6a9c1-4a93-4135-83de-a2cff7936e40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569ea7ff-9ffd-48aa-856e-2e79acf035c7",
        "cursor": {
          "ref": "4fb18727-2450-4eea-b855-f6792614a3aa",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "58068dd7-ee85-456a-9006-48569b32f366"
        },
        "item": {
          "id": "569ea7ff-9ffd-48aa-856e-2e79acf035c7",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4ea6a9c1-4a93-4135-83de-a2cff7936e40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a521ef-29a4-4eae-9378-b2c406d1c735",
        "cursor": {
          "ref": "87d033e8-5913-4643-8920-47d1a87c475b",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "99b0f793-e7f1-4c81-9a73-ef47ca2006ef"
        },
        "item": {
          "id": "f0a521ef-29a4-4eae-9378-b2c406d1c735",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c4d954d0-0a9f-409f-aa4c-8ffe5fa0885f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a521ef-29a4-4eae-9378-b2c406d1c735",
        "cursor": {
          "ref": "87d033e8-5913-4643-8920-47d1a87c475b",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "99b0f793-e7f1-4c81-9a73-ef47ca2006ef"
        },
        "item": {
          "id": "f0a521ef-29a4-4eae-9378-b2c406d1c735",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c4d954d0-0a9f-409f-aa4c-8ffe5fa0885f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03fbe112-14b9-43a9-9363-a4435e28e6ff",
        "cursor": {
          "ref": "c81afa5c-90c3-4984-8269-989d8fa10ed5",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "09d2c22c-f26d-4127-a5b0-bf659ab35f40"
        },
        "item": {
          "id": "03fbe112-14b9-43a9-9363-a4435e28e6ff",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "20da032e-5757-42bc-87af-9f7c9546d5bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03fbe112-14b9-43a9-9363-a4435e28e6ff",
        "cursor": {
          "ref": "c81afa5c-90c3-4984-8269-989d8fa10ed5",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "09d2c22c-f26d-4127-a5b0-bf659ab35f40"
        },
        "item": {
          "id": "03fbe112-14b9-43a9-9363-a4435e28e6ff",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "20da032e-5757-42bc-87af-9f7c9546d5bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20055389-b063-489d-9224-d276009f701f",
        "cursor": {
          "ref": "e2a27e5a-e1b0-44e7-8088-70c073ae98e6",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "240a9d58-45ac-4e1b-ad93-f6457e9f47bc"
        },
        "item": {
          "id": "20055389-b063-489d-9224-d276009f701f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6916da7c-5776-4f2e-bb4e-fa6e6d51623b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20055389-b063-489d-9224-d276009f701f",
        "cursor": {
          "ref": "e2a27e5a-e1b0-44e7-8088-70c073ae98e6",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "240a9d58-45ac-4e1b-ad93-f6457e9f47bc"
        },
        "item": {
          "id": "20055389-b063-489d-9224-d276009f701f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6916da7c-5776-4f2e-bb4e-fa6e6d51623b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb239df7-2978-4348-ac96-049ff52f6b4d",
        "cursor": {
          "ref": "f6c7f92d-5574-468a-a6d4-74ef104b8100",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "152bacd2-4e8b-4258-9ca8-bb18cc7637c1"
        },
        "item": {
          "id": "bb239df7-2978-4348-ac96-049ff52f6b4d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "1dc32c53-75a2-4f00-ab56-406bad4815e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb239df7-2978-4348-ac96-049ff52f6b4d",
        "cursor": {
          "ref": "f6c7f92d-5574-468a-a6d4-74ef104b8100",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "152bacd2-4e8b-4258-9ca8-bb18cc7637c1"
        },
        "item": {
          "id": "bb239df7-2978-4348-ac96-049ff52f6b4d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "1dc32c53-75a2-4f00-ab56-406bad4815e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee14131-1167-491f-8820-093fe52dc429",
        "cursor": {
          "ref": "c23d3cf7-ab09-4165-bd07-87839361187b",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "eff5aad9-e164-4dca-930b-64cd4c026d91"
        },
        "item": {
          "id": "4ee14131-1167-491f-8820-093fe52dc429",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "526dae0c-c954-41e7-aa37-909d5a711b1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee14131-1167-491f-8820-093fe52dc429",
        "cursor": {
          "ref": "c23d3cf7-ab09-4165-bd07-87839361187b",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "eff5aad9-e164-4dca-930b-64cd4c026d91"
        },
        "item": {
          "id": "4ee14131-1167-491f-8820-093fe52dc429",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "526dae0c-c954-41e7-aa37-909d5a711b1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1db886d9-62ca-404b-8108-07e6049c4d0d",
        "cursor": {
          "ref": "8bb04c5d-6864-40de-be55-ae2591afb52f",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "7ab95735-ff6a-40f3-a778-ea98feec1708"
        },
        "item": {
          "id": "1db886d9-62ca-404b-8108-07e6049c4d0d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "717f8ce0-8bb1-477a-b670-d13b49063e5e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1db886d9-62ca-404b-8108-07e6049c4d0d",
        "cursor": {
          "ref": "8bb04c5d-6864-40de-be55-ae2591afb52f",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "7ab95735-ff6a-40f3-a778-ea98feec1708"
        },
        "item": {
          "id": "1db886d9-62ca-404b-8108-07e6049c4d0d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "717f8ce0-8bb1-477a-b670-d13b49063e5e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "314f6819-c4d2-4179-a840-d7d51fdc0da2",
        "cursor": {
          "ref": "bdcc9527-c525-433d-afd8-414843a936c1",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "f04d18e3-15ae-43e6-90e4-f55bff169760"
        },
        "item": {
          "id": "314f6819-c4d2-4179-a840-d7d51fdc0da2",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c2064af8-d9ff-4b46-bb39-3cd5ddd0e943",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "314f6819-c4d2-4179-a840-d7d51fdc0da2",
        "cursor": {
          "ref": "bdcc9527-c525-433d-afd8-414843a936c1",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "f04d18e3-15ae-43e6-90e4-f55bff169760"
        },
        "item": {
          "id": "314f6819-c4d2-4179-a840-d7d51fdc0da2",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c2064af8-d9ff-4b46-bb39-3cd5ddd0e943",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc26ff6-f344-4974-a846-908a20c07438",
        "cursor": {
          "ref": "a758542e-d564-4ae4-926e-4b81d8ddaeb8",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "3945413a-7f37-44bb-a941-347689803ca9"
        },
        "item": {
          "id": "dcc26ff6-f344-4974-a846-908a20c07438",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e115d111-c08b-4878-b141-54c41a4e1b70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc26ff6-f344-4974-a846-908a20c07438",
        "cursor": {
          "ref": "a758542e-d564-4ae4-926e-4b81d8ddaeb8",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "3945413a-7f37-44bb-a941-347689803ca9"
        },
        "item": {
          "id": "dcc26ff6-f344-4974-a846-908a20c07438",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e115d111-c08b-4878-b141-54c41a4e1b70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43dd270-9509-4cc8-9b6f-9089b732b693",
        "cursor": {
          "ref": "c8ce9bdd-e552-42ce-90cc-484ae55f68f2",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "948390de-55ef-41fd-a8ed-8e5ceb4927b6"
        },
        "item": {
          "id": "c43dd270-9509-4cc8-9b6f-9089b732b693",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5ce77215-2ded-4913-b871-abdfa613df61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43dd270-9509-4cc8-9b6f-9089b732b693",
        "cursor": {
          "ref": "c8ce9bdd-e552-42ce-90cc-484ae55f68f2",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "948390de-55ef-41fd-a8ed-8e5ceb4927b6"
        },
        "item": {
          "id": "c43dd270-9509-4cc8-9b6f-9089b732b693",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5ce77215-2ded-4913-b871-abdfa613df61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d472b87-e980-406b-9975-49c0ac84e3b7",
        "cursor": {
          "ref": "311904fe-a0f3-4fc4-bacd-7352f8dde871",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "8c4f8ac2-14ec-43fb-a315-dc0252ca6bf4"
        },
        "item": {
          "id": "5d472b87-e980-406b-9975-49c0ac84e3b7",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8887a831-56ba-4832-b97a-f82c5de09e9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d472b87-e980-406b-9975-49c0ac84e3b7",
        "cursor": {
          "ref": "311904fe-a0f3-4fc4-bacd-7352f8dde871",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "8c4f8ac2-14ec-43fb-a315-dc0252ca6bf4"
        },
        "item": {
          "id": "5d472b87-e980-406b-9975-49c0ac84e3b7",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8887a831-56ba-4832-b97a-f82c5de09e9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b2d85a-3311-48c8-b03f-7b6097c467a3",
        "cursor": {
          "ref": "4a516300-9485-41c4-87e5-eb5c0fe749aa",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "e9fbef0d-55d4-4d1f-bc91-aced8802cd8c"
        },
        "item": {
          "id": "e0b2d85a-3311-48c8-b03f-7b6097c467a3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "93984f81-3fb4-4842-aaa0-915a9976748b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b2d85a-3311-48c8-b03f-7b6097c467a3",
        "cursor": {
          "ref": "4a516300-9485-41c4-87e5-eb5c0fe749aa",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "e9fbef0d-55d4-4d1f-bc91-aced8802cd8c"
        },
        "item": {
          "id": "e0b2d85a-3311-48c8-b03f-7b6097c467a3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "93984f81-3fb4-4842-aaa0-915a9976748b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a79dc2-36bd-49bb-b0fe-8205d2014f47",
        "cursor": {
          "ref": "1e10b431-d77d-401b-8380-02554f9f425f",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "7aa69785-cd4c-404c-b839-a4a4eed4fd06"
        },
        "item": {
          "id": "80a79dc2-36bd-49bb-b0fe-8205d2014f47",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "33eaa42b-67aa-4924-8fe1-4c9b34bcde9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a79dc2-36bd-49bb-b0fe-8205d2014f47",
        "cursor": {
          "ref": "1e10b431-d77d-401b-8380-02554f9f425f",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "7aa69785-cd4c-404c-b839-a4a4eed4fd06"
        },
        "item": {
          "id": "80a79dc2-36bd-49bb-b0fe-8205d2014f47",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "33eaa42b-67aa-4924-8fe1-4c9b34bcde9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1035e592-7cfe-4d82-90c8-76e5fadffe72",
        "cursor": {
          "ref": "e15e018a-790e-4838-91f6-d00dfb0d48cf",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "48114401-5ca3-41e6-8381-b1c7446d01de"
        },
        "item": {
          "id": "1035e592-7cfe-4d82-90c8-76e5fadffe72",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2d2cc2dd-0f1e-4b6c-97c3-8fbd2cbd7278",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1035e592-7cfe-4d82-90c8-76e5fadffe72",
        "cursor": {
          "ref": "e15e018a-790e-4838-91f6-d00dfb0d48cf",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "48114401-5ca3-41e6-8381-b1c7446d01de"
        },
        "item": {
          "id": "1035e592-7cfe-4d82-90c8-76e5fadffe72",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2d2cc2dd-0f1e-4b6c-97c3-8fbd2cbd7278",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4b9d29-4b83-42c3-b219-47696257c9f3",
        "cursor": {
          "ref": "cf95bdcf-2416-467c-b99a-b3bfec8a99b6",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "4eafc15c-4468-40bf-a25e-ecccdd2cc234"
        },
        "item": {
          "id": "fb4b9d29-4b83-42c3-b219-47696257c9f3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "101a18f5-9f78-40ba-be09-859fe9a2d599",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4b9d29-4b83-42c3-b219-47696257c9f3",
        "cursor": {
          "ref": "cf95bdcf-2416-467c-b99a-b3bfec8a99b6",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "4eafc15c-4468-40bf-a25e-ecccdd2cc234"
        },
        "item": {
          "id": "fb4b9d29-4b83-42c3-b219-47696257c9f3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "101a18f5-9f78-40ba-be09-859fe9a2d599",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc419c99-f8c1-4025-aa63-816dbc1e9852",
        "cursor": {
          "ref": "bb7ec410-8d1d-439a-b099-09d65ce4925c",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "3bccb489-ff90-474a-bb9b-853b77769add"
        },
        "item": {
          "id": "cc419c99-f8c1-4025-aa63-816dbc1e9852",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "145e080f-7164-4a97-ad91-a537e2524809",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc419c99-f8c1-4025-aa63-816dbc1e9852",
        "cursor": {
          "ref": "bb7ec410-8d1d-439a-b099-09d65ce4925c",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "3bccb489-ff90-474a-bb9b-853b77769add"
        },
        "item": {
          "id": "cc419c99-f8c1-4025-aa63-816dbc1e9852",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "145e080f-7164-4a97-ad91-a537e2524809",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3b627d-749e-425d-9f9b-795ec7637cc0",
        "cursor": {
          "ref": "07082ce3-a150-4656-bac1-cab98525d02c",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "9b7a62d3-bfc5-4919-a403-c1f620275012"
        },
        "item": {
          "id": "bd3b627d-749e-425d-9f9b-795ec7637cc0",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3f7af11f-2afa-4483-8aea-6458aa09c31d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3b627d-749e-425d-9f9b-795ec7637cc0",
        "cursor": {
          "ref": "07082ce3-a150-4656-bac1-cab98525d02c",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "9b7a62d3-bfc5-4919-a403-c1f620275012"
        },
        "item": {
          "id": "bd3b627d-749e-425d-9f9b-795ec7637cc0",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3f7af11f-2afa-4483-8aea-6458aa09c31d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79bf660c-67d6-47bf-8fab-865e207fc5fa",
        "cursor": {
          "ref": "7e0eb249-8e19-44f5-86e8-d300c2e1c207",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "127ed192-b363-4ec1-8289-a59d6188fae7"
        },
        "item": {
          "id": "79bf660c-67d6-47bf-8fab-865e207fc5fa",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a7182224-28e3-45f2-a5c9-1cac4b3139ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79bf660c-67d6-47bf-8fab-865e207fc5fa",
        "cursor": {
          "ref": "7e0eb249-8e19-44f5-86e8-d300c2e1c207",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "127ed192-b363-4ec1-8289-a59d6188fae7"
        },
        "item": {
          "id": "79bf660c-67d6-47bf-8fab-865e207fc5fa",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a7182224-28e3-45f2-a5c9-1cac4b3139ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b32533-541b-4183-a29b-dd615af4e5c6",
        "cursor": {
          "ref": "bd54055f-48a5-41c9-8c39-57eac2a3e4cf",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "64513ce8-0e3f-4d6d-a4e2-a6e5c28f30fe"
        },
        "item": {
          "id": "f9b32533-541b-4183-a29b-dd615af4e5c6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "dcb49e42-2345-4e3d-91be-51f825256921",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b32533-541b-4183-a29b-dd615af4e5c6",
        "cursor": {
          "ref": "bd54055f-48a5-41c9-8c39-57eac2a3e4cf",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "64513ce8-0e3f-4d6d-a4e2-a6e5c28f30fe"
        },
        "item": {
          "id": "f9b32533-541b-4183-a29b-dd615af4e5c6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "dcb49e42-2345-4e3d-91be-51f825256921",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee398359-e6e3-477c-be5e-450a7f48e609",
        "cursor": {
          "ref": "0c4634b2-66a4-4807-9923-9bf69fe693f7",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "dae4f2fe-8ec3-43c9-aab9-b1487137dcd2"
        },
        "item": {
          "id": "ee398359-e6e3-477c-be5e-450a7f48e609",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5e4aa8ba-972f-4089-adb1-71ff163f06e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee398359-e6e3-477c-be5e-450a7f48e609",
        "cursor": {
          "ref": "0c4634b2-66a4-4807-9923-9bf69fe693f7",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "dae4f2fe-8ec3-43c9-aab9-b1487137dcd2"
        },
        "item": {
          "id": "ee398359-e6e3-477c-be5e-450a7f48e609",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5e4aa8ba-972f-4089-adb1-71ff163f06e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "713971d8-f32d-4029-bbb8-fd7227d2aa57",
        "cursor": {
          "ref": "0752130e-ec44-4afd-aa45-3f682b535f33",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "897cdb28-cc47-427a-813e-7a6854d22076"
        },
        "item": {
          "id": "713971d8-f32d-4029-bbb8-fd7227d2aa57",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "16b0b5d9-cdfc-4693-b4b1-b4628a16b835",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "713971d8-f32d-4029-bbb8-fd7227d2aa57",
        "cursor": {
          "ref": "0752130e-ec44-4afd-aa45-3f682b535f33",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "897cdb28-cc47-427a-813e-7a6854d22076"
        },
        "item": {
          "id": "713971d8-f32d-4029-bbb8-fd7227d2aa57",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "16b0b5d9-cdfc-4693-b4b1-b4628a16b835",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3aa0a26-8e36-4d42-949c-67b5da21eeb2",
        "cursor": {
          "ref": "9fa04641-de6c-4e95-a8bd-12da7216224e",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "42e124e3-f513-4f31-b201-8e4c3489ddda"
        },
        "item": {
          "id": "b3aa0a26-8e36-4d42-949c-67b5da21eeb2",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c608aa12-65fd-4cae-bb19-cc4d93a9ade5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3aa0a26-8e36-4d42-949c-67b5da21eeb2",
        "cursor": {
          "ref": "9fa04641-de6c-4e95-a8bd-12da7216224e",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "42e124e3-f513-4f31-b201-8e4c3489ddda"
        },
        "item": {
          "id": "b3aa0a26-8e36-4d42-949c-67b5da21eeb2",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c608aa12-65fd-4cae-bb19-cc4d93a9ade5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3c6e47-d201-4df9-8d0c-19698ac1d317",
        "cursor": {
          "ref": "e325578e-0297-4379-835d-5ef4598378a2",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "846b0ccb-4795-4e9f-8cc5-cdcf64639b86"
        },
        "item": {
          "id": "ed3c6e47-d201-4df9-8d0c-19698ac1d317",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8c1cf97c-c033-4482-a58b-f9bdb2952cd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3c6e47-d201-4df9-8d0c-19698ac1d317",
        "cursor": {
          "ref": "e325578e-0297-4379-835d-5ef4598378a2",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "846b0ccb-4795-4e9f-8cc5-cdcf64639b86"
        },
        "item": {
          "id": "ed3c6e47-d201-4df9-8d0c-19698ac1d317",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8c1cf97c-c033-4482-a58b-f9bdb2952cd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d60f5f8-f47d-4074-bf2e-68c261efdc66",
        "cursor": {
          "ref": "8f1907fd-9981-462a-af7b-41af6ed83b1e",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "6c092bb1-ed22-4ada-9efe-2d3a98b27192"
        },
        "item": {
          "id": "3d60f5f8-f47d-4074-bf2e-68c261efdc66",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1b457dfa-a07d-460a-9d42-08c07b7e6347",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d60f5f8-f47d-4074-bf2e-68c261efdc66",
        "cursor": {
          "ref": "8f1907fd-9981-462a-af7b-41af6ed83b1e",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "6c092bb1-ed22-4ada-9efe-2d3a98b27192"
        },
        "item": {
          "id": "3d60f5f8-f47d-4074-bf2e-68c261efdc66",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1b457dfa-a07d-460a-9d42-08c07b7e6347",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9abc8a61-1da3-4f01-9693-b0a3f9f4b2c9",
        "cursor": {
          "ref": "6638a0aa-1e10-48af-8cd9-8b927da4ac3c",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "75242151-67fa-4eac-b2dd-40d401394349"
        },
        "item": {
          "id": "9abc8a61-1da3-4f01-9693-b0a3f9f4b2c9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0a0bd0f1-79cb-4c0f-b47a-2bec1bfde2bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9abc8a61-1da3-4f01-9693-b0a3f9f4b2c9",
        "cursor": {
          "ref": "6638a0aa-1e10-48af-8cd9-8b927da4ac3c",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "75242151-67fa-4eac-b2dd-40d401394349"
        },
        "item": {
          "id": "9abc8a61-1da3-4f01-9693-b0a3f9f4b2c9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0a0bd0f1-79cb-4c0f-b47a-2bec1bfde2bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a547c938-09b3-4b5f-8487-fa4bdb15ce0d",
        "cursor": {
          "ref": "d23f8ff0-3f92-411a-a199-4eb55b284386",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "ae68bb8e-9134-4978-94d6-98ab1c2207b8"
        },
        "item": {
          "id": "a547c938-09b3-4b5f-8487-fa4bdb15ce0d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "11639146-c5bf-47d2-a1b1-bab0795ce0bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a547c938-09b3-4b5f-8487-fa4bdb15ce0d",
        "cursor": {
          "ref": "d23f8ff0-3f92-411a-a199-4eb55b284386",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "ae68bb8e-9134-4978-94d6-98ab1c2207b8"
        },
        "item": {
          "id": "a547c938-09b3-4b5f-8487-fa4bdb15ce0d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "11639146-c5bf-47d2-a1b1-bab0795ce0bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9462b00f-1158-460c-af6d-490822e3ed05",
        "cursor": {
          "ref": "3b1c13e8-d131-48ec-8ff7-223b4ce28f2a",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "2aedc38a-fc87-4cf4-bdcf-be6bbd462d81"
        },
        "item": {
          "id": "9462b00f-1158-460c-af6d-490822e3ed05",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1f51af86-2e0d-44e6-819c-696f99935e32",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "9462b00f-1158-460c-af6d-490822e3ed05",
        "cursor": {
          "ref": "3b1c13e8-d131-48ec-8ff7-223b4ce28f2a",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "2aedc38a-fc87-4cf4-bdcf-be6bbd462d81"
        },
        "item": {
          "id": "9462b00f-1158-460c-af6d-490822e3ed05",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1f51af86-2e0d-44e6-819c-696f99935e32",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "f93dd8f2-0dab-48c4-95cd-132f447f9589",
        "cursor": {
          "ref": "46ae97ef-c8fb-4923-aa3f-b2b101160de7",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "0cb00794-db28-4615-be3e-b6405efb0cb1"
        },
        "item": {
          "id": "f93dd8f2-0dab-48c4-95cd-132f447f9589",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ebd80d95-f455-4585-992d-32be20d48856",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "f93dd8f2-0dab-48c4-95cd-132f447f9589",
        "cursor": {
          "ref": "46ae97ef-c8fb-4923-aa3f-b2b101160de7",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "0cb00794-db28-4615-be3e-b6405efb0cb1"
        },
        "item": {
          "id": "f93dd8f2-0dab-48c4-95cd-132f447f9589",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ebd80d95-f455-4585-992d-32be20d48856",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "383b2ee1-7b0a-40ee-b890-e756ae540ba7",
        "cursor": {
          "ref": "9276e91d-116a-43da-b5c3-e41072b35b5f",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "e8f65121-1fc3-4bdc-985e-770edac7a6b5"
        },
        "item": {
          "id": "383b2ee1-7b0a-40ee-b890-e756ae540ba7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4cff6995-53e5-443d-83b5-9196653e32e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "383b2ee1-7b0a-40ee-b890-e756ae540ba7",
        "cursor": {
          "ref": "9276e91d-116a-43da-b5c3-e41072b35b5f",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "e8f65121-1fc3-4bdc-985e-770edac7a6b5"
        },
        "item": {
          "id": "383b2ee1-7b0a-40ee-b890-e756ae540ba7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4cff6995-53e5-443d-83b5-9196653e32e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "1311e10e-a2d7-4f8d-9870-adfc080f6590",
        "cursor": {
          "ref": "a00ed5de-f0e9-47f0-afe7-e80b4d52c95b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "69c17c9c-e3c2-4ddc-a38a-7bb6c1b7ebd5"
        },
        "item": {
          "id": "1311e10e-a2d7-4f8d-9870-adfc080f6590",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "cfb3229f-ee3a-4132-9e71-561f4ece2473",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 90,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1311e10e-a2d7-4f8d-9870-adfc080f6590",
        "cursor": {
          "ref": "a00ed5de-f0e9-47f0-afe7-e80b4d52c95b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "69c17c9c-e3c2-4ddc-a38a-7bb6c1b7ebd5"
        },
        "item": {
          "id": "1311e10e-a2d7-4f8d-9870-adfc080f6590",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "cfb3229f-ee3a-4132-9e71-561f4ece2473",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 90,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1311e10e-a2d7-4f8d-9870-adfc080f6590",
        "cursor": {
          "ref": "a00ed5de-f0e9-47f0-afe7-e80b4d52c95b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "69c17c9c-e3c2-4ddc-a38a-7bb6c1b7ebd5"
        },
        "item": {
          "id": "1311e10e-a2d7-4f8d-9870-adfc080f6590",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "cfb3229f-ee3a-4132-9e71-561f4ece2473",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 90,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1725d81a-ec11-4ee6-8539-b2b73ef36dc3",
        "cursor": {
          "ref": "2f1307b7-54d2-460c-baa0-c1e6473f6760",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "77044c24-4479-40ee-8a34-ceef4730eaa3"
        },
        "item": {
          "id": "1725d81a-ec11-4ee6-8539-b2b73ef36dc3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ec65d2f1-bd78-4b39-aca5-adb0e7f7a8cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1725d81a-ec11-4ee6-8539-b2b73ef36dc3",
        "cursor": {
          "ref": "2f1307b7-54d2-460c-baa0-c1e6473f6760",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "77044c24-4479-40ee-8a34-ceef4730eaa3"
        },
        "item": {
          "id": "1725d81a-ec11-4ee6-8539-b2b73ef36dc3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ec65d2f1-bd78-4b39-aca5-adb0e7f7a8cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f5fe82-de7c-4288-ad55-1ed103bd2549",
        "cursor": {
          "ref": "90c9ef4f-750b-4c39-84d5-fc6491a7cf17",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "469f7aac-d126-465b-b78c-438d27dac429"
        },
        "item": {
          "id": "d4f5fe82-de7c-4288-ad55-1ed103bd2549",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8f0ace5b-e915-4ef7-9337-8bf21729282e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f5fe82-de7c-4288-ad55-1ed103bd2549",
        "cursor": {
          "ref": "90c9ef4f-750b-4c39-84d5-fc6491a7cf17",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "469f7aac-d126-465b-b78c-438d27dac429"
        },
        "item": {
          "id": "d4f5fe82-de7c-4288-ad55-1ed103bd2549",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8f0ace5b-e915-4ef7-9337-8bf21729282e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}